/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject2 = function isPlainObject3(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend2() {
      var options, name, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject2(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend2(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeStylerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/Internal/constants/general.ts
var PREFIX = "cs-";

// src/Internal/constants/detecting.ts
var PARAMETERS_ATTRIBUTE = PREFIX + "code-parameters";
var EMPTY_PARAMETERS_ATTRIBUTE = PREFIX + "code-empty-parameters";
var CONTENT_ATTRIBUTE = PREFIX + "code-content";
var DETECTING_CONTEXT = PREFIX + "detected-context";

// src/Internal/Parsing/Inline.ts
function splitInlineCodeRaw(inlineCodeRaw) {
  const match = new RegExp(`^{(.*?)}( *?)([^ ].*)$`).exec(inlineCodeRaw);
  if (!match || typeof (match == null ? void 0 : match[1]) === "undefined" || typeof (match == null ? void 0 : match[2]) === "undefined" || typeof (match == null ? void 0 : match[3]) === "undefined")
    return { inlineCodeParameters: null, inlineCodeContent: inlineCodeRaw };
  return { inlineCodeParameters: `{${match[1]}}${match[2]}`, inlineCodeContent: match[3] };
}

// src/Internal/Detecting/utils.ts
function isUndetectedCodeElement(codeElement) {
  const parsed = codeElement.getAttribute(PARAMETERS_ATTRIBUTE);
  if (parsed)
    return false;
  return true;
}

// src/Internal/Detecting/Rendered/Inline.ts
async function renderedInlineCodeDetecting(element2, context, plugin) {
  for (const inlineCodeElement of Array.from(element2.querySelectorAll(":not(pre) > code"))) {
    const inlineCodeRaw = inlineCodeElement.innerText;
    const { inlineCodeParameters, inlineCodeContent } = splitInlineCodeRaw(inlineCodeRaw);
    if (!isUndetectedCodeElement(inlineCodeElement))
      return;
    inlineCodeElement.setAttribute(CONTENT_ATTRIBUTE, inlineCodeContent);
    inlineCodeElement.setAttribute(PARAMETERS_ATTRIBUTE, inlineCodeParameters != null ? inlineCodeParameters : "");
    inlineCodeElement.setAttribute(EMPTY_PARAMETERS_ATTRIBUTE, inlineCodeParameters === null ? "true" : "false");
  }
}

// src/Internal/Detecting/Rendered/Fenced.ts
var import_obsidian = require("obsidian");

// node_modules/bail/index.js
function bail(error) {
  if (error) {
    throw error;
  }
}

// node_modules/unified/lib/index.js
var import_extend = __toESM(require_extend(), 1);

// node_modules/devlop/lib/default.js
function ok() {
}

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/lib/index.js
function trough() {
  const fns = [];
  const pipeline = { run, use };
  return pipeline;
  function run(...values) {
    let middlewareIndex = -1;
    const callback = values.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values);
    function next(error, ...output) {
      const fn = fns[++middlewareIndex];
      let index2 = -1;
      if (error) {
        callback(error);
        return;
      }
      while (++index2 < values.length) {
        if (output[index2] === null || output[index2] === void 0) {
          output[index2] = values[index2];
        }
      }
      values = output;
      if (fn) {
        wrap(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = (
        /** @type {Error} */
        error
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === "function") {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position(value.position);
  }
  if ("start" in value || "end" in value) {
    return position(value);
  }
  if ("line" in value || "column" in value) {
    return point(value);
  }
  return "";
}
function point(point3) {
  return index(point3 && point3.line) + ":" + index(point3 && point3.column);
}
function position(pos) {
  return point(pos && pos.start) + "-" + point(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();
    if (typeof optionsOrParentOrPlace === "string") {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = void 0;
    }
    let reason = "";
    let options = {};
    let legacyCause = false;
    if (optionsOrParentOrPlace) {
      if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("type" in optionsOrParentOrPlace) {
        options = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      } else {
        options = { ...optionsOrParentOrPlace };
      }
    }
    if (typeof causeOrReason === "string") {
      reason = causeOrReason;
    } else if (!options.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options.cause = causeOrReason;
    }
    if (!options.ruleId && !options.source && typeof origin === "string") {
      const index2 = origin.indexOf(":");
      if (index2 === -1) {
        options.ruleId = origin;
      } else {
        options.source = origin.slice(0, index2);
        options.ruleId = origin.slice(index2 + 1);
      }
    }
    if (!options.place && options.ancestors && options.ancestors) {
      const parent = options.ancestors[options.ancestors.length - 1];
      if (parent) {
        options.place = parent.position;
      }
    }
    const start = options.place && "start" in options.place ? options.place.start : options.place;
    this.ancestors = options.ancestors || void 0;
    this.cause = options.cause || void 0;
    this.column = start ? start.column : void 0;
    this.fatal = void 0;
    this.file;
    this.message = reason;
    this.line = start ? start.line : void 0;
    this.name = stringifyPosition(options.place) || "1:1";
    this.place = options.place || void 0;
    this.reason = this.message;
    this.ruleId = options.ruleId || void 0;
    this.source = options.source || void 0;
    this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
    this.actual;
    this.expected;
    this.note;
    this.url;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = void 0;
VFileMessage.prototype.line = void 0;
VFileMessage.prototype.ancestors = void 0;
VFileMessage.prototype.cause = void 0;
VFileMessage.prototype.fatal = void 0;
VFileMessage.prototype.place = void 0;
VFileMessage.prototype.ruleId = void 0;
VFileMessage.prototype.source = void 0;

// node_modules/vfile/lib/minpath.browser.js
var minpath = { basename, dirname, extname, join, sep: "/" };
function basename(path, extname2) {
  if (extname2 !== void 0 && typeof extname2 !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path);
  let start = 0;
  let end = -1;
  let index2 = path.length;
  let seenNonSlash;
  if (extname2 === void 0 || extname2.length === 0 || extname2.length > path.length) {
    while (index2--) {
      if (path.codePointAt(index2) === 47) {
        if (seenNonSlash) {
          start = index2 + 1;
          break;
        }
      } else if (end < 0) {
        seenNonSlash = true;
        end = index2 + 1;
      }
    }
    return end < 0 ? "" : path.slice(start, end);
  }
  if (extname2 === path) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extnameIndex = extname2.length - 1;
  while (index2--) {
    if (path.codePointAt(index2) === 47) {
      if (seenNonSlash) {
        start = index2 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index2 + 1;
      }
      if (extnameIndex > -1) {
        if (path.codePointAt(index2) === extname2.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            end = index2;
          }
        } else {
          extnameIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }
  if (start === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path.length;
  }
  return path.slice(start, end);
}
function dirname(path) {
  assertPath(path);
  if (path.length === 0) {
    return ".";
  }
  let end = -1;
  let index2 = path.length;
  let unmatchedSlash;
  while (--index2) {
    if (path.codePointAt(index2) === 47) {
      if (unmatchedSlash) {
        end = index2;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end < 0 ? path.codePointAt(0) === 47 ? "/" : "." : end === 1 && path.codePointAt(0) === 47 ? "//" : path.slice(0, end);
}
function extname(path) {
  assertPath(path);
  let index2 = path.length;
  let end = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index2--) {
    const code = path.codePointAt(index2);
    if (code === 47) {
      if (unmatchedSlash) {
        startPart = index2 + 1;
        break;
      }
      continue;
    }
    if (end < 0) {
      unmatchedSlash = true;
      end = index2 + 1;
    }
    if (code === 46) {
      if (startDot < 0) {
        startDot = index2;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path.slice(startDot, end);
}
function join(...segments) {
  let index2 = -1;
  let joined;
  while (++index2 < segments.length) {
    assertPath(segments[index2]);
    if (segments[index2]) {
      joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
    }
  }
  return joined === void 0 ? "." : normalize(joined);
}
function normalize(path) {
  assertPath(path);
  const absolute = path.codePointAt(0) === 47;
  let value = normalizeString(path, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path.codePointAt(path.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index2 = -1;
  let code;
  let lastSlashIndex;
  while (++index2 <= path.length) {
    if (index2 < path.length) {
      code = path.codePointAt(index2);
    } else if (code === 47) {
      break;
    } else {
      code = 47;
    }
    if (code === 47) {
      if (lastSlash === index2 - 1 || dots === 1) {
      } else if (lastSlash !== index2 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index2;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path.slice(lastSlash + 1, index2);
        } else {
          result = path.slice(lastSlash + 1, index2);
        }
        lastSegmentLength = index2 - lastSlash - 1;
      }
      lastSlash = index2;
      dots = 0;
    } else if (code === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path) {
  if (typeof path !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var minproc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === void 0
  );
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path) {
  if (typeof path === "string") {
    path = new URL(path);
  } else if (!isUrl(path)) {
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path + "`"
    );
    error.code = "ERR_INVALID_ARG_TYPE";
    throw error;
  }
  if (path.protocol !== "file:") {
    const error = new TypeError("The URL must be of scheme file");
    error.code = "ERR_INVALID_URL_SCHEME";
    throw error;
  }
  return getPathFromURLPosix(path);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = "ERR_INVALID_FILE_URL_HOST";
    throw error;
  }
  const pathname = url.pathname;
  let index2 = -1;
  while (++index2 < pathname.length) {
    if (pathname.codePointAt(index2) === 37 && pathname.codePointAt(index2 + 1) === 50) {
      const third = pathname.codePointAt(index2 + 2);
      if (third === 70 || third === 102) {
        const error = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error.code = "ERR_INVALID_FILE_URL_PATH";
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options;
    if (!value) {
      options = {};
    } else if (isUrl(value)) {
      options = { path: value };
    } else if (typeof value === "string" || isUint8Array(value)) {
      options = { value };
    } else {
      options = value;
    }
    this.cwd = "cwd" in options ? "" : minproc.cwd();
    this.data = {};
    this.history = [];
    this.messages = [];
    this.value;
    this.map;
    this.result;
    this.stored;
    let index2 = -1;
    while (++index2 < order.length) {
      const field2 = order[index2];
      if (field2 in options && options[field2] !== void 0 && options[field2] !== null) {
        this[field2] = field2 === "history" ? [...options[field2]] : options[field2];
      }
    }
    let field;
    for (field in options) {
      if (!order.includes(field)) {
        this[field] = options[field];
      }
    }
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path === "string" ? minpath.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = minpath.join(this.dirname || "", basename2);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path === "string" ? minpath.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = minpath.join(dirname2 || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path === "string" ? minpath.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.codePointAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = minpath.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(path) {
    if (isUrl(path)) {
      path = urlToPath(path);
    }
    assertNonEmpty(path, "path");
    if (this.path !== path) {
      this.history.push(path);
    }
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = true;
    throw message;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = void 0;
    return message;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = new VFileMessage(
      // @ts-expect-error: the overloads are fine.
      causeOrReason,
      optionsOrParentOrPlace,
      origin
    );
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    if (this.value === void 0) {
      return "";
    }
    if (typeof this.value === "string") {
      return this.value;
    }
    const decoder = new TextDecoder(encoding || void 0);
    return decoder.decode(this.value);
  }
};
function assertPart(part, name) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      "`" + name + "` cannot be a path: did not expect `" + minpath.sep + "`"
    );
  }
}
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error("`" + name + "` cannot be empty");
  }
}
function assertPath2(path, name) {
  if (!path) {
    throw new Error("Setting `" + name + "` requires `path` to be set too");
  }
}
function isUint8Array(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/unified/lib/callable-instance.js
var CallableInstance = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(property) {
    const self = this;
    const constr = self.constructor;
    const proto = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      constr.prototype
    );
    const value = proto[property];
    const apply = function() {
      return value.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    return apply;
  }
);

// node_modules/unified/lib/index.js
var own = {}.hasOwnProperty;
var Processor = class _Processor extends CallableInstance {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy");
    this.Compiler = void 0;
    this.Parser = void 0;
    this.attachers = [];
    this.compiler = void 0;
    this.freezeIndex = -1;
    this.frozen = void 0;
    this.namespace = {};
    this.parser = void 0;
    this.transformers = trough();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const destination = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new _Processor()
    );
    let index2 = -1;
    while (++index2 < this.attachers.length) {
      const attacher = this.attachers[index2];
      destination.use(...attacher);
    }
    destination.data((0, import_extend.default)(true, {}, this.namespace));
    return destination;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(key, value) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", this.frozen);
        this.namespace[key] = value;
        return this;
      }
      return own.call(this.namespace, key) && this.namespace[key] || void 0;
    }
    if (key) {
      assertUnfrozen("data", this.frozen);
      this.namespace = key;
      return this;
    }
    return this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen) {
      return this;
    }
    const self = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    while (++this.freezeIndex < this.attachers.length) {
      const [attacher, ...options] = this.attachers[this.freezeIndex];
      if (options[0] === false) {
        continue;
      }
      if (options[0] === true) {
        options[0] = void 0;
      }
      const transformer = attacher.call(self, ...options);
      if (typeof transformer === "function") {
        this.transformers.use(transformer);
      }
    }
    this.frozen = true;
    this.freezeIndex = Number.POSITIVE_INFINITY;
    return this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(file) {
    this.freeze();
    const realFile = vfile(file);
    const parser = this.parser || this.Parser;
    assertParser("parse", parser);
    return parser(String(realFile), realFile);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(file, done) {
    const self = this;
    this.freeze();
    assertParser("process", this.parser || this.Parser);
    assertCompiler("process", this.compiler || this.Compiler);
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      const realFile = vfile(file);
      const parseTree = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        self.parse(realFile)
      );
      self.run(parseTree, realFile, function(error, tree, file2) {
        if (error || !tree || !file2) {
          return realDone(error);
        }
        const compileTree = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          tree
        );
        const compileResult = self.stringify(compileTree, file2);
        if (looksLikeAValue(compileResult)) {
          file2.value = compileResult;
        } else {
          file2.result = compileResult;
        }
        realDone(
          error,
          /** @type {VFileWithOutput<CompileResult>} */
          file2
        );
      });
      function realDone(error, file2) {
        if (error || !file2) {
          reject(error);
        } else if (resolve) {
          resolve(file2);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, file2);
        }
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(file) {
    let complete = false;
    let result;
    this.freeze();
    assertParser("processSync", this.parser || this.Parser);
    assertCompiler("processSync", this.compiler || this.Compiler);
    this.process(file, realDone);
    assertDone("processSync", "process", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, file2) {
      complete = true;
      bail(error);
      result = file2;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(tree, file, done) {
    assertNode(tree);
    this.freeze();
    const transformers = this.transformers;
    if (!done && typeof file === "function") {
      done = file;
      file = void 0;
    }
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      ok(
        typeof file !== "function",
        "`file` can\u2019t be a `done` anymore, we checked"
      );
      const realFile = vfile(file);
      transformers.run(tree, realFile, realDone);
      function realDone(error, outputTree, file2) {
        const resultingTree = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          outputTree || tree
        );
        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(resultingTree);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, resultingTree, file2);
        }
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(tree, file) {
    let complete = false;
    let result;
    this.run(tree, file, realDone);
    assertDone("runSync", "run", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, tree2) {
      bail(error);
      result = tree2;
      complete = true;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(tree, file) {
    this.freeze();
    const realFile = vfile(file);
    const compiler2 = this.compiler || this.Compiler;
    assertCompiler("stringify", compiler2);
    assertNode(tree);
    return compiler2(tree, realFile);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
    const attachers = this.attachers;
    const namespace = this.namespace;
    assertUnfrozen("use", this.frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, parameters);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    return this;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2, []);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...parameters2] = (
            /** @type {PluginTuple<Array<unknown>>} */
            value2
          );
          addPlugin(plugin, parameters2);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      if (!("plugins" in result) && !("settings" in result)) {
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      }
      addList(result.plugins);
      if (result.settings) {
        namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
      }
    }
    function addList(plugins) {
      let index2 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index2 < plugins.length) {
          const thing = plugins[index2];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, parameters2) {
      let index2 = -1;
      let entryIndex = -1;
      while (++index2 < attachers.length) {
        if (attachers[index2][0] === plugin) {
          entryIndex = index2;
          break;
        }
      }
      if (entryIndex === -1) {
        attachers.push([plugin, ...parameters2]);
      } else if (parameters2.length > 0) {
        let [primary, ...rest] = parameters2;
        const currentPrimary = attachers[entryIndex][1];
        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
          primary = (0, import_extend.default)(true, currentPrimary, primary);
        }
        attachers[entryIndex] = [plugin, primary, ...rest];
      }
    }
  }
};
var unified = new Processor().freeze();
function assertParser(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `parser`");
  }
}
function assertCompiler(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `compiler`");
  }
}
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAValue(value) {
  return typeof value === "string" || isUint8Array2(value);
}
function isUint8Array2(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js
var emptyOptions = {};
function toString(value, options) {
  const settings = options || emptyOptions;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one(value, includeImageAlt, includeHtml);
}
function one(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values, includeImageAlt, includeHtml) {
  const result = [];
  let index2 = -1;
  while (++index2 < values.length) {
    result[index2] = one(values[index2], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/decode-named-character-reference/index.dom.js
var element = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element.innerHTML = characterReference2;
  const char = element.textContent;
  if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") {
    return false;
  }
  return char === characterReference2 ? false : char;
}

// node_modules/micromark-util-chunked/index.js
function splice(list2, start, remove, items) {
  const end = list2.length;
  let chunkStart = 0;
  let parameters;
  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < 1e4) {
    parameters = Array.from(items);
    parameters.unshift(start, remove);
    list2.splice(...parameters);
  } else {
    if (remove) list2.splice(start, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 1e4);
      parameters.unshift(start, 0);
      list2.splice(...parameters);
      chunkStart += 1e4;
      start += 1e4;
    }
  }
}
function push(list2, items) {
  if (list2.length > 0) {
    splice(list2, list2.length, 0, items);
    return list2;
  }
  return items;
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all2 = {};
  let index2 = -1;
  while (++index2 < extensions.length) {
    syntaxExtension(all2, extensions[index2]);
  }
  return all2;
}
function syntaxExtension(all2, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
    const left = maybe || (all2[hook] = {});
    const right = extension2[hook];
    let code;
    if (right) {
      for (code in right) {
        if (!hasOwnProperty.call(left, code)) left[code] = [];
        const value = right[code];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list2) {
  let index2 = -1;
  const before = [];
  while (++index2 < list2.length) {
    ;
    (list2[index2].add === "after" ? existing : before).push(list2[index2]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base) {
  const code = Number.parseInt(value, base);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of C0, and C1 controls.
    code > 126 && code < 160 || // Lone high surrogates and low surrogates.
    code > 55295 && code < 57344 || // Noncharacters.
    code > 64975 && code < 65008 || /* eslint-disable no-bitwise */
    (code & 65535) === 65535 || (code & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code > 1114111
  ) {
    return "\uFFFD";
  }
  return String.fromCodePoint(code);
}

// node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-util-character/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < 32 || code === 127)
  );
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code) {
  return code !== null && code < -2;
}
function markdownLineEndingOrSpace(code) {
  return code !== null && (code < 0 || code === 32);
}
function markdownSpace(code) {
  return code === -2 || code === -1 || code === 32;
}
var unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
  return check;
  function check(code) {
    return code !== null && code > -1 && regex.test(String.fromCharCode(code));
  }
}

// node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok3, type, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start;
  function start(code) {
    if (markdownSpace(code)) {
      effects.enter(type);
      return prefix(code);
    }
    return ok3(code);
  }
  function prefix(code) {
    if (markdownSpace(code) && size++ < limit) {
      effects.consume(code);
      return prefix;
    }
    effects.exit(type);
    return ok3(code);
  }
}

// node_modules/micromark/lib/initialize/content.js
var content = {
  tokenize: initializeContent
};
function initializeContent(effects) {
  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  let previous2;
  return contentStart;
  function afterContentStartConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }
  function paragraphInitial(code) {
    effects.enter("paragraph");
    return lineStart(code);
  }
  function lineStart(code) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous2
    });
    if (previous2) {
      previous2.next = token;
    }
    previous2 = token;
    return data(code);
  }
  function data(code) {
    if (code === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code);
      return;
    }
    if (markdownLineEnding(code)) {
      effects.consume(code);
      effects.exit("chunkText");
      return lineStart;
    }
    effects.consume(code);
    return data;
  }
}

// node_modules/micromark/lib/initialize/document.js
var document2 = {
  tokenize: initializeDocument
};
var containerConstruct = {
  tokenize: tokenizeContainer
};
function initializeDocument(effects) {
  const self = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start;
  function start(code) {
    if (continued < stack.length) {
      const item = stack[continued];
      self.containerState = item[1];
      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
    }
    return checkNewContainers(code);
  }
  function documentContinue(code) {
    continued++;
    if (self.containerState._closeFlow) {
      self.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point3;
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
          point3 = self.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);
      let index2 = indexBeforeExits;
      while (index2 < self.events.length) {
        self.events[index2][1].end = {
          ...point3
        };
        index2++;
      }
      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
      self.events.length = index2;
      return checkNewContainers(code);
    }
    return start(code);
  }
  function checkNewContainers(code) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code);
      }
      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    }
    self.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
  }
  function thereIsANewContainer(code) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code);
  }
  function thereIsNoNewContainer(code) {
    self.parser.lazy[self.now().line] = continued !== stack.length;
    lineStartOffset = self.now().offset;
    return flowStart(code);
  }
  function documentContinued(code) {
    self.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
  }
  function containerContinue(code) {
    continued++;
    stack.push([self.currentConstruct, self.containerState]);
    return documentContinued(code);
  }
  function flowStart(code) {
    if (code === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code);
      return;
    }
    childFlow = childFlow || self.parser.flow(self.now());
    effects.enter("chunkFlow", {
      _tokenizer: childFlow,
      contentType: "flow",
      previous: childToken
    });
    return flowContinue(code);
  }
  function flowContinue(code) {
    if (code === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code);
      return;
    }
    if (markdownLineEnding(code)) {
      effects.consume(code);
      writeToChild(effects.exit("chunkFlow"));
      continued = 0;
      self.interrupt = void 0;
      return start;
    }
    effects.consume(code);
    return flowContinue;
  }
  function writeToChild(token, endOfFile) {
    const stream = self.sliceStream(token);
    if (endOfFile) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);
    if (self.parser.lazy[token.start.line]) {
      let index2 = childFlow.events.length;
      while (index2--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index2][1].end || // …or ends after it.
          childFlow.events[index2][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point3;
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point3 = self.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);
      index2 = indexBeforeExits;
      while (index2 < self.events.length) {
        self.events[index2][1].end = {
          ...point3
        };
        index2++;
      }
      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
      self.events.length = index2;
    }
  }
  function exitContainers(size) {
    let index2 = stack.length;
    while (index2-- > size) {
      const entry = stack[index2];
      self.containerState = entry[1];
      entry[0].exit.call(self, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = void 0;
    childFlow = void 0;
    self.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok3, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}

// node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code) {
  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {
    return 1;
  }
  if (unicodePunctuation(code)) {
    return 2;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index2 = -1;
  while (++index2 < constructs2.length) {
    const resolve = constructs2[index2].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

// node_modules/micromark-core-commonmark/lib/attention.js
var attention = {
  name: "attention",
  resolveAll: resolveAllAttention,
  tokenize: tokenizeAttention
};
function resolveAllAttention(events, context) {
  let index2 = -1;
  let open;
  let group;
  let text3;
  let openingSequence;
  let closingSequence;
  let use;
  let nextEvents;
  let offset;
  while (++index2 < events.length) {
    if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
      open = index2;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
            continue;
          }
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
          const start = {
            ...events[open][1].end
          };
          const end = {
            ...events[index2][1].start
          };
          movePoint(start, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start,
            end: {
              ...events[open][1].end
            }
          };
          closingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...events[index2][1].start
            },
            end
          };
          text3 = {
            type: use > 1 ? "strongText" : "emphasisText",
            start: {
              ...events[open][1].end
            },
            end: {
              ...events[index2][1].start
            }
          };
          group = {
            type: use > 1 ? "strong" : "emphasis",
            start: {
              ...openingSequence.start
            },
            end: {
              ...closingSequence.end
            }
          };
          events[open][1].end = {
            ...openingSequence.start
          };
          events[index2][1].start = {
            ...closingSequence.end
          };
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [["enter", events[open][1], context], ["exit", events[open][1], context]]);
          }
          nextEvents = push(nextEvents, [["enter", group, context], ["enter", openingSequence, context], ["exit", openingSequence, context], ["enter", text3, context]]);
          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
          nextEvents = push(nextEvents, [["exit", text3, context], ["enter", closingSequence, context], ["exit", closingSequence, context], ["exit", group, context]]);
          if (events[index2][1].end.offset - events[index2][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [["enter", events[index2][1], context], ["exit", events[index2][1], context]]);
          } else {
            offset = 0;
          }
          splice(events, open - 1, index2 - open + 3, nextEvents);
          index2 = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }
  index2 = -1;
  while (++index2 < events.length) {
    if (events[index2][1].type === "attentionSequence") {
      events[index2][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous2 = this.previous;
  const before = classifyCharacter(previous2);
  let marker;
  return start;
  function start(code) {
    marker = code;
    effects.enter("attentionSequence");
    return inside(code);
  }
  function inside(code) {
    if (code === marker) {
      effects.consume(code);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code);
    const open = !after || after === 2 && before || attentionMarkers2.includes(code);
    const close = !before || before === 2 && after || attentionMarkers2.includes(previous2);
    token._open = Boolean(marker === 42 ? open : open && (before || !close));
    token._close = Boolean(marker === 42 ? close : close && (after || !open));
    return ok3(code);
  }
}
function movePoint(point3, offset) {
  point3.column += offset;
  point3.offset += offset;
  point3._bufferIndex += offset;
}

// node_modules/micromark-core-commonmark/lib/autolink.js
var autolink = {
  name: "autolink",
  tokenize: tokenizeAutolink
};
function tokenizeAutolink(effects, ok3, nok) {
  let size = 0;
  return start;
  function start(code) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }
  function open(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return schemeOrEmailAtext;
    }
    if (code === 64) {
      return nok(code);
    }
    return emailAtext(code);
  }
  function schemeOrEmailAtext(code) {
    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {
      size = 1;
      return schemeInsideOrEmailAtext(code);
    }
    return emailAtext(code);
  }
  function schemeInsideOrEmailAtext(code) {
    if (code === 58) {
      effects.consume(code);
      size = 0;
      return urlInside;
    }
    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {
      effects.consume(code);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code);
  }
  function urlInside(code) {
    if (code === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    if (code === null || code === 32 || code === 60 || asciiControl(code)) {
      return nok(code);
    }
    effects.consume(code);
    return urlInside;
  }
  function emailAtext(code) {
    if (code === 64) {
      effects.consume(code);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code)) {
      effects.consume(code);
      return emailAtext;
    }
    return nok(code);
  }
  function emailAtSignOrDot(code) {
    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);
  }
  function emailLabel(code) {
    if (code === 46) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code === 62) {
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    return emailValue(code);
  }
  function emailValue(code) {
    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
      const next = code === 45 ? emailValue : emailLabel;
      effects.consume(code);
      return next;
    }
    return nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/blank-line.js
var blankLine = {
  partial: true,
  tokenize: tokenizeBlankLine
};
function tokenizeBlankLine(effects, ok3, nok) {
  return start;
  function start(code) {
    return markdownSpace(code) ? factorySpace(effects, after, "linePrefix")(code) : after(code);
  }
  function after(code) {
    return code === null || markdownLineEnding(code) ? ok3(code) : nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/block-quote.js
var blockQuote = {
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit,
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart
};
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    if (code === 62) {
      const state = self.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code);
  }
  function after(code) {
    if (markdownSpace(code)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok3;
    }
    effects.exit("blockQuotePrefix");
    return ok3(code);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  const self = this;
  return contStart;
  function contStart(code) {
    if (markdownSpace(code)) {
      return factorySpace(effects, contBefore, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code);
    }
    return contBefore(code);
  }
  function contBefore(code) {
    return effects.attempt(blockQuote, ok3, nok)(code);
  }
}
function exit(effects) {
  effects.exit("blockQuote");
}

// node_modules/micromark-core-commonmark/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start;
  function start(code) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code);
    effects.exit("escapeMarker");
    return inside;
  }
  function inside(code) {
    if (asciiPunctuation(code)) {
      effects.enter("characterEscapeValue");
      effects.consume(code);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok3;
    }
    return nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok3, nok) {
  const self = this;
  let size = 0;
  let max;
  let test;
  return start;
  function start(code) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code);
    effects.exit("characterReferenceMarker");
    return open;
  }
  function open(code) {
    if (code === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max = 31;
    test = asciiAlphanumeric;
    return value(code);
  }
  function numeric(code) {
    if (code === 88 || code === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max = 6;
      test = asciiHexDigit;
      return value;
    }
    effects.enter("characterReferenceValue");
    max = 7;
    test = asciiDigit;
    return value(code);
  }
  function value(code) {
    if (code === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {
        return nok(code);
      }
      effects.enter("characterReferenceMarker");
      effects.consume(code);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok3;
    }
    if (test(code) && size++ < max) {
      effects.consume(code);
      return value;
    }
    return nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/code-fenced.js
var nonLazyContinuation = {
  partial: true,
  tokenize: tokenizeNonLazyContinuation
};
var codeFenced = {
  concrete: true,
  name: "codeFenced",
  tokenize: tokenizeCodeFenced
};
function tokenizeCodeFenced(effects, ok3, nok) {
  const self = this;
  const closeStart = {
    partial: true,
    tokenize: tokenizeCloseStart
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start;
  function start(code) {
    return beforeSequenceOpen(code);
  }
  function beforeSequenceOpen(code) {
    const tail = self.events[self.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code);
  }
  function sequenceOpen(code) {
    if (code === marker) {
      sizeOpen++;
      effects.consume(code);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code) ? factorySpace(effects, infoBefore, "whitespace")(code) : infoBefore(code);
  }
  function infoBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFencedFence");
      return self.interrupt ? ok3(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code);
  }
  function info(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code);
    }
    if (markdownSpace(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code);
    }
    if (code === 96 && code === marker) {
      return nok(code);
    }
    effects.consume(code);
    return info;
  }
  function metaBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      return infoBefore(code);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code);
  }
  function meta(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code);
    }
    if (code === 96 && code === marker) {
      return nok(code);
    }
    effects.consume(code);
    return meta;
  }
  function atNonLazyBreak(code) {
    return effects.attempt(closeStart, after, contentBefore)(code);
  }
  function contentBefore(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return contentStart;
  }
  function contentStart(code) {
    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code) : beforeContentChunk(code);
  }
  function beforeContentChunk(code) {
    if (code === null || markdownLineEnding(code)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code);
  }
  function contentChunk(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code);
    }
    effects.consume(code);
    return contentChunk;
  }
  function after(code) {
    effects.exit("codeFenced");
    return ok3(code);
  }
  function tokenizeCloseStart(effects2, ok4, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code) {
      effects2.enter("lineEnding");
      effects2.consume(code);
      effects2.exit("lineEnding");
      return start2;
    }
    function start2(code) {
      effects2.enter("codeFencedFence");
      return markdownSpace(code) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code) : beforeSequenceClose(code);
    }
    function beforeSequenceClose(code) {
      if (code === marker) {
        effects2.enter("codeFencedFenceSequence");
        return sequenceClose(code);
      }
      return nok2(code);
    }
    function sequenceClose(code) {
      if (code === marker) {
        size++;
        effects2.consume(code);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit("codeFencedFenceSequence");
        return markdownSpace(code) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code) : sequenceCloseAfter(code);
      }
      return nok2(code);
    }
    function sequenceCloseAfter(code) {
      if (code === null || markdownLineEnding(code)) {
        effects2.exit("codeFencedFence");
        return ok4(code);
      }
      return nok2(code);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    if (code === null) {
      return nok(code);
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return lineStart;
  }
  function lineStart(code) {
    return self.parser.lazy[self.now().line] ? nok(code) : ok3(code);
  }
}

// node_modules/micromark-core-commonmark/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var furtherStart = {
  partial: true,
  tokenize: tokenizeFurtherStart
};
function tokenizeCodeIndented(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    effects.enter("codeIndented");
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
  }
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);
  }
  function atBreak(code) {
    if (code === null) {
      return after(code);
    }
    if (markdownLineEnding(code)) {
      return effects.attempt(furtherStart, atBreak, after)(code);
    }
    effects.enter("codeFlowValue");
    return inside(code);
  }
  function inside(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFlowValue");
      return atBreak(code);
    }
    effects.consume(code);
    return inside;
  }
  function after(code) {
    effects.exit("codeIndented");
    return ok3(code);
  }
}
function tokenizeFurtherStart(effects, ok3, nok) {
  const self = this;
  return furtherStart2;
  function furtherStart2(code) {
    if (self.parser.lazy[self.now().line]) {
      return nok(code);
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return furtherStart2;
    }
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
  }
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok3(code) : markdownLineEnding(code) ? furtherStart2(code) : nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/code-text.js
var codeText = {
  name: "codeText",
  previous,
  resolve: resolveCodeText,
  tokenize: tokenizeCodeText
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index2;
  let enter;
  if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
    index2 = headEnterIndex;
    while (++index2 < tailExitIndex) {
      if (events[index2][1].type === "codeTextData") {
        events[headEnterIndex][1].type = "codeTextPadding";
        events[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index2 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index2 <= tailExitIndex) {
    if (enter === void 0) {
      if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
        enter = index2;
      }
    } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
      events[enter][1].type = "codeTextData";
      if (index2 !== enter + 2) {
        events[enter][1].end = events[index2 - 1][1].end;
        events.splice(enter + 2, index2 - enter - 2);
        tailExitIndex -= index2 - enter - 2;
        index2 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code) {
  return code !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok3, nok) {
  const self = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start;
  function start(code) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code);
  }
  function sequenceOpen(code) {
    if (code === 96) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between(code);
  }
  function between(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 32) {
      effects.enter("space");
      effects.consume(code);
      effects.exit("space");
      return between;
    }
    if (code === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code);
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return between;
    }
    effects.enter("codeTextData");
    return data(code);
  }
  function data(code) {
    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {
      effects.exit("codeTextData");
      return between(code);
    }
    effects.consume(code);
    return data;
  }
  function sequenceClose(code) {
    if (code === 96) {
      effects.consume(code);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok3(code);
    }
    token.type = "codeTextData";
    return data(code);
  }
}

// node_modules/micromark-util-subtokenize/lib/splice-buffer.js
var SpliceBuffer = class {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(initial) {
    this.left = initial ? [...initial] : [];
    this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(index2) {
    if (index2 < 0 || index2 >= this.left.length + this.right.length) {
      throw new RangeError("Cannot access index `" + index2 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
    }
    if (index2 < this.left.length) return this.left[index2];
    return this.right[this.right.length - index2 + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    this.setCursor(0);
    return this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(start, end) {
    const stop = end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
    if (stop < this.left.length) {
      return this.left.slice(start, stop);
    }
    if (start > this.left.length) {
      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();
    }
    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(start, deleteCount, items) {
    const count = deleteCount || 0;
    this.setCursor(Math.trunc(start));
    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
    if (items) chunkedPush(this.left, items);
    return removed.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    this.setCursor(Number.POSITIVE_INFINITY);
    return this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(item) {
    this.setCursor(Number.POSITIVE_INFINITY);
    this.left.push(item);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(items) {
    this.setCursor(Number.POSITIVE_INFINITY);
    chunkedPush(this.left, items);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(item) {
    this.setCursor(0);
    this.right.push(item);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(items) {
    this.setCursor(0);
    chunkedPush(this.right, items.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(n) {
    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
    if (n < this.left.length) {
      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
      chunkedPush(this.right, removed.reverse());
    } else {
      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
      chunkedPush(this.left, removed.reverse());
    }
  }
};
function chunkedPush(list2, right) {
  let chunkStart = 0;
  if (right.length < 1e4) {
    list2.push(...right);
  } else {
    while (chunkStart < right.length) {
      list2.push(...right.slice(chunkStart, chunkStart + 1e4));
      chunkStart += 1e4;
    }
  }
}

// node_modules/micromark-util-subtokenize/index.js
function subtokenize(eventsArray) {
  const jumps = {};
  let index2 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index2 < events.length) {
    while (index2 in jumps) {
      index2 = jumps[index2];
    }
    event = events.get(index2);
    if (index2 && event[1].type === "chunkFlow" && events.get(index2 - 1)[1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index2));
        index2 = jumps[index2];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index2;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events.get(lineIndex)[1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else if (otherEvent[1].type === "linePrefix") {
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = {
          ...events.get(lineIndex)[1].start
        };
        parameters = events.slice(lineIndex, index2);
        parameters.unshift(event);
        events.splice(lineIndex, index2 - lineIndex + 1, parameters);
      }
    }
  }
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous2;
  let index2 = -1;
  let current = token;
  let adjust = 0;
  let start = 0;
  const breaks = [start];
  while (current) {
    while (events.get(++startPosition)[1] !== current) {
    }
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(null);
      }
      if (previous2) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous2 = current;
    current = current.next;
  }
  current = token;
  while (++index2 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
    ) {
      start = index2 + 1;
      breaks.push(start);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
  } else {
    breaks.pop();
  }
  index2 = breaks.length;
  while (index2--) {
    const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);
    const start2 = startPositions.pop();
    jumps.push([start2, start2 + slice.length - 1]);
    events.splice(start2, 2, slice);
  }
  jumps.reverse();
  index2 = -1;
  while (++index2 < jumps.length) {
    gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
    adjust += jumps[index2][1] - jumps[index2][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/lib/content.js
var content2 = {
  resolve: resolveContent,
  tokenize: tokenizeContent
};
var continuationConstruct = {
  partial: true,
  tokenize: tokenizeContinuation
};
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous2;
  return chunkStart;
  function chunkStart(code) {
    effects.enter("content");
    previous2 = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code);
  }
  function chunkInside(code) {
    if (code === null) {
      return contentEnd(code);
    }
    if (markdownLineEnding(code)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
    }
    effects.consume(code);
    return chunkInside;
  }
  function contentEnd(code) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok3(code);
  }
  function contentContinue(code) {
    effects.consume(code);
    effects.exit("chunkContent");
    previous2.next = effects.enter("chunkContent", {
      contentType: "content",
      previous: previous2
    });
    previous2 = previous2.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self = this;
  return startLookahead;
  function startLookahead(code) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }
  function prefixed(code) {
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }
    const tail = self.events[self.events.length - 1];
    if (!self.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok3(code);
    }
    return effects.interrupt(self.parser.constructs.flow, nok, ok3)(code);
  }
}

// node_modules/micromark-factory-destination/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start;
  function start(code) {
    if (code === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code === null || code === 32 || code === 41 || asciiControl(code)) {
      return nok(code);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code);
  }
  function enclosedBefore(code) {
    if (code === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code);
  }
  function enclosed(code) {
    if (code === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code);
    }
    if (code === null || code === 60 || markdownLineEnding(code)) {
      return nok(code);
    }
    effects.consume(code);
    return code === 92 ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code) {
    if (code === 60 || code === 62 || code === 92) {
      effects.consume(code);
      return enclosed;
    }
    return enclosed(code);
  }
  function raw(code) {
    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code);
    }
    if (balance < limit && code === 40) {
      effects.consume(code);
      balance++;
      return raw;
    }
    if (code === 41) {
      effects.consume(code);
      balance--;
      return raw;
    }
    if (code === null || code === 32 || code === 40 || asciiControl(code)) {
      return nok(code);
    }
    effects.consume(code);
    return code === 92 ? rawEscape : raw;
  }
  function rawEscape(code) {
    if (code === 40 || code === 41 || code === 92) {
      effects.consume(code);
      return raw;
    }
    return raw(code);
  }
}

// node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self = this;
  let size = 0;
  let seen;
  return start;
  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code) {
    if (size > 999 || code === null || code === 91 || code === 93 && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code === 94 && !size && "_hiddenFootnoteSupport" in self.parser.constructs) {
      return nok(code);
    }
    if (code === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code);
  }
  function labelInside(code) {
    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code);
    }
    effects.consume(code);
    if (!seen) seen = !markdownSpace(code);
    return code === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return labelInside;
    }
    return labelInside(code);
  }
}

// node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start;
  function start(code) {
    if (code === 34 || code === 39 || code === 40) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      marker = code === 40 ? 41 : code;
      return begin;
    }
    return nok(code);
  }
  function begin(code) {
    if (code === marker) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atBreak(code);
  }
  function atBreak(code) {
    if (code === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code === null) {
      return nok(code);
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code);
  }
  function inside(code) {
    if (code === marker || code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      return atBreak(code);
    }
    effects.consume(code);
    return code === 92 ? escape : inside;
  }
  function escape(code) {
    if (code === marker || code === 92) {
      effects.consume(code);
      return inside;
    }
    return inside(code);
  }
}

// node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start;
  function start(code) {
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      seen = true;
      return start;
    }
    if (markdownSpace(code)) {
      return factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code);
    }
    return ok3(code);
  }
}

// node_modules/micromark-core-commonmark/lib/definition.js
var definition = {
  name: "definition",
  tokenize: tokenizeDefinition
};
var titleBefore = {
  partial: true,
  tokenize: tokenizeTitleBefore
};
function tokenizeDefinition(effects, ok3, nok) {
  const self = this;
  let identifier;
  return start;
  function start(code) {
    effects.enter("definition");
    return before(code);
  }
  function before(code) {
    return factoryLabel.call(
      self,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(code);
  }
  function labelAfter(code) {
    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));
    if (code === 58) {
      effects.enter("definitionMarker");
      effects.consume(code);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code);
  }
  function markerAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);
  }
  function destinationBefore(code) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(code);
  }
  function destinationAfter(code) {
    return effects.attempt(titleBefore, after, after)(code);
  }
  function after(code) {
    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, "whitespace")(code) : afterWhitespace(code);
  }
  function afterWhitespace(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("definition");
      self.parser.defined.push(identifier);
      return ok3(code);
    }
    return nok(code);
  }
}
function tokenizeTitleBefore(effects, ok3, nok) {
  return titleBefore2;
  function titleBefore2(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);
  }
  function beforeMarker(code) {
    return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code);
  }
  function titleAfter(code) {
    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code) : titleAfterOptionalWhitespace(code);
  }
  function titleAfterOptionalWhitespace(code) {
    return code === null || markdownLineEnding(code) ? ok3(code) : nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start;
  function start(code) {
    effects.enter("hardBreakEscape");
    effects.consume(code);
    return after;
  }
  function after(code) {
    if (markdownLineEnding(code)) {
      effects.exit("hardBreakEscape");
      return ok3(code);
    }
    return nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  resolve: resolveHeadingAtx,
  tokenize: tokenizeHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text3;
  if (events[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: "atxHeadingText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text3 = {
      type: "chunkText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: "text"
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [["enter", content3, context], ["enter", text3, context], ["exit", text3, context], ["exit", content3, context]]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  let size = 0;
  return start;
  function start(code) {
    effects.enter("atxHeading");
    return before(code);
  }
  function before(code) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code);
  }
  function sequenceOpen(code) {
    if (code === 35 && size++ < 6) {
      effects.consume(code);
      return sequenceOpen;
    }
    if (code === null || markdownLineEndingOrSpace(code)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code);
    }
    return nok(code);
  }
  function atBreak(code) {
    if (code === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code);
    }
    if (code === null || markdownLineEnding(code)) {
      effects.exit("atxHeading");
      return ok3(code);
    }
    if (markdownSpace(code)) {
      return factorySpace(effects, atBreak, "whitespace")(code);
    }
    effects.enter("atxHeadingText");
    return data(code);
  }
  function sequenceFurther(code) {
    if (code === 35) {
      effects.consume(code);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code);
  }
  function data(code) {
    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
      effects.exit("atxHeadingText");
      return atBreak(code);
    }
    effects.consume(code);
    return data;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/lib/html-flow.js
var htmlFlow = {
  concrete: true,
  name: "htmlFlow",
  resolveTo: resolveToHtmlFlow,
  tokenize: tokenizeHtmlFlow
};
var blankLineBefore = {
  partial: true,
  tokenize: tokenizeBlankLineBefore
};
var nonLazyContinuationStart = {
  partial: true,
  tokenize: tokenizeNonLazyContinuationStart
};
function resolveToHtmlFlow(events) {
  let index2 = events.length;
  while (index2--) {
    if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
      break;
    }
  }
  if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
    events[index2][1].start = events[index2 - 2][1].start;
    events[index2 + 1][1].start = events[index2 - 2][1].start;
    events.splice(index2 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self = this;
  let marker;
  let closingTag;
  let buffer;
  let index2;
  let markerB;
  return start;
  function start(code) {
    return before(code);
  }
  function before(code) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code);
    return open;
  }
  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen;
    }
    if (code === 47) {
      effects.consume(code);
      closingTag = true;
      return tagCloseStart;
    }
    if (code === 63) {
      effects.consume(code);
      marker = 3;
      return self.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }
  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      marker = 2;
      return commentOpenInside;
    }
    if (code === 91) {
      effects.consume(code);
      marker = 5;
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code)) {
      effects.consume(code);
      marker = 4;
      return self.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code);
  }
  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      return self.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code);
  }
  function cdataOpenInside(code) {
    const value = "CDATA[";
    if (code === value.charCodeAt(index2++)) {
      effects.consume(code);
      if (index2 === value.length) {
        return self.interrupt ? ok3 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code);
  }
  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }
  function tagName(code) {
    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      const slash = code === 47;
      const name = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name)) {
        marker = 1;
        return self.interrupt ? ok3(code) : continuation(code);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = 6;
        if (slash) {
          effects.consume(code);
          return basicSelfClosing;
        }
        return self.interrupt ? ok3(code) : continuation(code);
      }
      marker = 7;
      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);
    }
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }
  function basicSelfClosing(code) {
    if (code === 62) {
      effects.consume(code);
      return self.interrupt ? ok3 : continuation;
    }
    return nok(code);
  }
  function completeClosingTagAfter(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeClosingTagAfter;
    }
    return completeEnd(code);
  }
  function completeAttributeNameBefore(code) {
    if (code === 47) {
      effects.consume(code);
      return completeEnd;
    }
    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameBefore;
    }
    return completeEnd(code);
  }
  function completeAttributeName(code) {
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code);
  }
  function completeAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code);
  }
  function completeAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }
    if (code === 34 || code === 39) {
      effects.consume(code);
      markerB = code;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code);
  }
  function completeAttributeValueQuoted(code) {
    if (code === markerB) {
      effects.consume(code);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }
    effects.consume(code);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {
      return completeAttributeNameAfter(code);
    }
    effects.consume(code);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownSpace(code)) {
      return completeAttributeNameBefore(code);
    }
    return nok(code);
  }
  function completeEnd(code) {
    if (code === 62) {
      effects.consume(code);
      return completeAfter;
    }
    return nok(code);
  }
  function completeAfter(code) {
    if (code === null || markdownLineEnding(code)) {
      return continuation(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAfter;
    }
    return nok(code);
  }
  function continuation(code) {
    if (code === 45 && marker === 2) {
      effects.consume(code);
      return continuationCommentInside;
    }
    if (code === 60 && marker === 1) {
      effects.consume(code);
      return continuationRawTagOpen;
    }
    if (code === 62 && marker === 4) {
      effects.consume(code);
      return continuationClose;
    }
    if (code === 63 && marker === 3) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    if (code === 93 && marker === 5) {
      effects.consume(code);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);
    }
    if (code === null || markdownLineEnding(code)) {
      effects.exit("htmlFlowData");
      return continuationStart(code);
    }
    effects.consume(code);
    return continuation;
  }
  function continuationStart(code) {
    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);
  }
  function continuationStartNonLazy(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return continuationBefore;
  }
  function continuationBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      return continuationStart(code);
    }
    effects.enter("htmlFlowData");
    return continuation(code);
  }
  function continuationCommentInside(code) {
    if (code === 45) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }
  function continuationRawTagOpen(code) {
    if (code === 47) {
      effects.consume(code);
      buffer = "";
      return continuationRawEndTag;
    }
    return continuation(code);
  }
  function continuationRawEndTag(code) {
    if (code === 62) {
      const name = buffer.toLowerCase();
      if (htmlRawNames.includes(name)) {
        effects.consume(code);
        return continuationClose;
      }
      return continuation(code);
    }
    if (asciiAlpha(code) && buffer.length < 8) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return continuationRawEndTag;
    }
    return continuation(code);
  }
  function continuationCdataInside(code) {
    if (code === 93) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }
  function continuationDeclarationInside(code) {
    if (code === 62) {
      effects.consume(code);
      return continuationClose;
    }
    if (code === 45 && marker === 2) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }
  function continuationClose(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code);
    }
    effects.consume(code);
    return continuationClose;
  }
  function continuationAfter(code) {
    effects.exit("htmlFlow");
    return ok3(code);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code);
  }
  function after(code) {
    return self.parser.lazy[self.now().line] ? nok(code) : ok3(code);
  }
}
function tokenizeBlankLineBefore(effects, ok3, nok) {
  return start;
  function start(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-core-commonmark/lib/html-text.js
var htmlText = {
  name: "htmlText",
  tokenize: tokenizeHtmlText
};
function tokenizeHtmlText(effects, ok3, nok) {
  const self = this;
  let marker;
  let index2;
  let returnState;
  return start;
  function start(code) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code);
    return open;
  }
  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen;
    }
    if (code === 47) {
      effects.consume(code);
      return tagCloseStart;
    }
    if (code === 63) {
      effects.consume(code);
      return instruction;
    }
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagOpen;
    }
    return nok(code);
  }
  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentOpenInside;
    }
    if (code === 91) {
      effects.consume(code);
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code)) {
      effects.consume(code);
      return declaration;
    }
    return nok(code);
  }
  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      return commentEnd;
    }
    return nok(code);
  }
  function comment(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 45) {
      effects.consume(code);
      return commentClose;
    }
    if (markdownLineEnding(code)) {
      returnState = comment;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return comment;
  }
  function commentClose(code) {
    if (code === 45) {
      effects.consume(code);
      return commentEnd;
    }
    return comment(code);
  }
  function commentEnd(code) {
    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);
  }
  function cdataOpenInside(code) {
    const value = "CDATA[";
    if (code === value.charCodeAt(index2++)) {
      effects.consume(code);
      return index2 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code);
  }
  function cdata(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 93) {
      effects.consume(code);
      return cdataClose;
    }
    if (markdownLineEnding(code)) {
      returnState = cdata;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return cdata;
  }
  function cdataClose(code) {
    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }
  function cdataEnd(code) {
    if (code === 62) {
      return end(code);
    }
    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }
  function declaration(code) {
    if (code === null || code === 62) {
      return end(code);
    }
    if (markdownLineEnding(code)) {
      returnState = declaration;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return declaration;
  }
  function instruction(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 63) {
      effects.consume(code);
      return instructionClose;
    }
    if (markdownLineEnding(code)) {
      returnState = instruction;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return instruction;
  }
  function instructionClose(code) {
    return code === 62 ? end(code) : instruction(code);
  }
  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagClose;
    }
    return nok(code);
  }
  function tagClose(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagClose;
    }
    return tagCloseBetween(code);
  }
  function tagCloseBetween(code) {
    if (markdownLineEnding(code)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagCloseBetween;
    }
    return end(code);
  }
  function tagOpen(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpen;
    }
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }
  function tagOpenBetween(code) {
    if (code === 47) {
      effects.consume(code);
      return end;
    }
    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenBetween;
    }
    return end(code);
  }
  function tagOpenAttributeName(code) {
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code);
  }
  function tagOpenAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code);
  }
  function tagOpenAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }
    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code === null) {
      return nok(code);
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {
      return nok(code);
    }
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }
  function end(code) {
    if (code === 62) {
      effects.consume(code);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok3;
    }
    return nok(code);
  }
  function lineEndingBefore(code) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }
  function lineEndingAfter(code) {
    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code) : lineEndingAfterPrefix(code);
  }
  function lineEndingAfterPrefix(code) {
    effects.enter("htmlTextData");
    return returnState(code);
  }
}

// node_modules/micromark-core-commonmark/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  resolveAll: resolveAllLabelEnd,
  resolveTo: resolveToLabelEnd,
  tokenize: tokenizeLabelEnd
};
var resourceConstruct = {
  tokenize: tokenizeResource
};
var referenceFullConstruct = {
  tokenize: tokenizeReferenceFull
};
var referenceCollapsedConstruct = {
  tokenize: tokenizeReferenceCollapsed
};
function resolveAllLabelEnd(events) {
  let index2 = -1;
  const newEvents = [];
  while (++index2 < events.length) {
    const token = events[index2][1];
    newEvents.push(events[index2]);
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      const offset = token.type === "labelImage" ? 4 : 2;
      token.type = "data";
      index2 += offset;
    }
  }
  if (events.length !== newEvents.length) {
    splice(events, 0, events.length, newEvents);
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index2 = events.length;
  let offset = 0;
  let token;
  let open;
  let close;
  let media;
  while (index2--) {
    token = events[index2][1];
    if (open) {
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }
      if (events[index2][0] === "enter" && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index2;
        if (token.type !== "labelLink") {
          offset = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close = index2;
    }
  }
  const group = {
    type: events[open][1].type === "labelLink" ? "link" : "image",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  const label = {
    type: "label",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[close][1].end
    }
  };
  const text3 = {
    type: "labelText",
    start: {
      ...events[open + offset + 2][1].end
    },
    end: {
      ...events[close - 2][1].start
    }
  };
  media = [["enter", group, context], ["enter", label, context]];
  media = push(media, events.slice(open + 1, open + offset + 3));
  media = push(media, [["enter", text3, context]]);
  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));
  media = push(media, [["exit", text3, context], events[close - 2], events[close - 1], ["exit", label, context]]);
  media = push(media, events.slice(close + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self = this;
  let index2 = self.events.length;
  let labelStart;
  let defined;
  while (index2--) {
    if ((self.events[index2][1].type === "labelImage" || self.events[index2][1].type === "labelLink") && !self.events[index2][1]._balanced) {
      labelStart = self.events[index2][1];
      break;
    }
  }
  return start;
  function start(code) {
    if (!labelStart) {
      return nok(code);
    }
    if (labelStart._inactive) {
      return labelEndNok(code);
    }
    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({
      start: labelStart.end,
      end: self.now()
    })));
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }
  function after(code) {
    if (code === 40) {
      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);
    }
    if (code === 91) {
      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);
    }
    return defined ? labelEndOk(code) : labelEndNok(code);
  }
  function referenceNotFull(code) {
    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);
  }
  function labelEndOk(code) {
    return ok3(code);
  }
  function labelEndNok(code) {
    labelStart._balanced = true;
    return nok(code);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return resourceStart;
  function resourceStart(code) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code);
    effects.exit("resourceMarker");
    return resourceBefore;
  }
  function resourceBefore(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);
  }
  function resourceOpen(code) {
    if (code === 41) {
      return resourceEnd(code);
    }
    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code);
  }
  function resourceDestinationAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);
  }
  function resourceDestinationMissing(code) {
    return nok(code);
  }
  function resourceBetween(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code);
    }
    return resourceEnd(code);
  }
  function resourceTitleAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);
  }
  function resourceEnd(code) {
    if (code === 41) {
      effects.enter("resourceMarker");
      effects.consume(code);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok3;
    }
    return nok(code);
  }
}
function tokenizeReferenceFull(effects, ok3, nok) {
  const self = this;
  return referenceFull;
  function referenceFull(code) {
    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code);
  }
  function referenceFullAfter(code) {
    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok3(code) : nok(code);
  }
  function referenceFullMissing(code) {
    return nok(code);
  }
}
function tokenizeReferenceCollapsed(effects, ok3, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code) {
    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code) {
    if (code === 93) {
      effects.enter("referenceMarker");
      effects.consume(code);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok3;
    }
    return nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartImage
};
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code);
    effects.exit("labelImageMarker");
    return open;
  }
  function open(code) {
    if (code === 91) {
      effects.enter("labelMarker");
      effects.consume(code);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code);
  }
  function after(code) {
    return code === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code) : ok3(code);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartLink
};
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self = this;
  return start;
  function start(code) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }
  function after(code) {
    return code === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code) : ok3(code);
  }
}

// node_modules/micromark-core-commonmark/lib/line-ending.js
var lineEnding = {
  name: "lineEnding",
  tokenize: tokenizeLineEnding
};
function tokenizeLineEnding(effects, ok3) {
  return start;
  function start(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, ok3, "linePrefix");
  }
}

// node_modules/micromark-core-commonmark/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok3, nok) {
  let size = 0;
  let marker;
  return start;
  function start(code) {
    effects.enter("thematicBreak");
    return before(code);
  }
  function before(code) {
    marker = code;
    return atBreak(code);
  }
  function atBreak(code) {
    if (code === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code);
    }
    if (size >= 3 && (code === null || markdownLineEnding(code))) {
      effects.exit("thematicBreak");
      return ok3(code);
    }
    return nok(code);
  }
  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code) ? factorySpace(effects, atBreak, "whitespace")(code) : atBreak(code);
  }
}

// node_modules/micromark-core-commonmark/lib/list.js
var list = {
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd,
  name: "list",
  tokenize: tokenizeListStart
};
var listItemPrefixWhitespaceConstruct = {
  partial: true,
  tokenize: tokenizeListItemPrefixWhitespace
};
var indentConstruct = {
  partial: true,
  tokenize: tokenizeIndent
};
function tokenizeListStart(effects, ok3, nok) {
  const self = this;
  const tail = self.events[self.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start;
  function start(code) {
    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {
      if (!self.containerState.type) {
        self.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);
      }
      if (!self.interrupt || code === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code);
      }
    }
    return nok(code);
  }
  function inside(code) {
    if (asciiDigit(code) && ++size < 10) {
      effects.consume(code);
      return inside;
    }
    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {
      effects.exit("listItemValue");
      return atMarker(code);
    }
    return nok(code);
  }
  function atMarker(code) {
    effects.enter("listItemMarker");
    effects.consume(code);
    effects.exit("listItemMarker");
    self.containerState.marker = self.containerState.marker || code;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self.interrupt ? nok : onBlank,
      effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
    );
  }
  function onBlank(code) {
    self.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code);
  }
  function otherPrefix(code) {
    if (markdownSpace(code)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code);
  }
  function endOfPrefix(code) {
    self.containerState.size = initialSize + self.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok3(code);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self = this;
  self.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code) {
    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;
    return factorySpace(effects, ok3, "listItemIndent", self.containerState.size + 1)(code);
  }
  function notBlank(code) {
    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
      self.containerState.furtherBlankLines = void 0;
      self.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code);
    }
    self.containerState.furtherBlankLines = void 0;
    self.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code);
  }
  function notInCurrentItem(code) {
    self.containerState._closeFlow = true;
    self.interrupt = void 0;
    return factorySpace(effects, effects.attempt(list, ok3, nok), "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self = this;
  return factorySpace(effects, afterPrefix, "listItemIndent", self.containerState.size + 1);
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok3(code) : nok(code);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self = this;
  return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1);
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return !markdownSpace(code) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok3(code) : nok(code);
  }
}

// node_modules/micromark-core-commonmark/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  resolveTo: resolveToSetextUnderline,
  tokenize: tokenizeSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index2 = events.length;
  let content3;
  let text3;
  let definition2;
  while (index2--) {
    if (events[index2][0] === "enter") {
      if (events[index2][1].type === "content") {
        content3 = index2;
        break;
      }
      if (events[index2][1].type === "paragraph") {
        text3 = index2;
      }
    } else {
      if (events[index2][1].type === "content") {
        events.splice(index2, 1);
      }
      if (!definition2 && events[index2][1].type === "definition") {
        definition2 = index2;
      }
    }
  }
  const heading = {
    type: "setextHeading",
    start: {
      ...events[text3][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  events[text3][1].type = "setextHeadingText";
  if (definition2) {
    events.splice(text3, 0, ["enter", heading, context]);
    events.splice(definition2 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = {
      ...events[definition2][1].end
    };
  } else {
    events[content3][1] = heading;
  }
  events.push(["exit", heading, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self = this;
  let marker;
  return start;
  function start(code) {
    let index2 = self.events.length;
    let paragraph;
    while (index2--) {
      if (self.events[index2][1].type !== "lineEnding" && self.events[index2][1].type !== "linePrefix" && self.events[index2][1].type !== "content") {
        paragraph = self.events[index2][1].type === "paragraph";
        break;
      }
    }
    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
      effects.enter("setextHeadingLine");
      marker = code;
      return before(code);
    }
    return nok(code);
  }
  function before(code) {
    effects.enter("setextHeadingLineSequence");
    return inside(code);
  }
  function inside(code) {
    if (code === marker) {
      effects.consume(code);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code) ? factorySpace(effects, after, "lineSuffix")(code) : after(code);
  }
  function after(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("setextHeadingLine");
      return ok3(code);
    }
    return nok(code);
  }
}

// node_modules/micromark/lib/initialize/flow.js
var flow = {
  tokenize: initializeFlow
};
function initializeFlow(effects) {
  const self = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content2, afterConstruct)), "linePrefix"))
  );
  return initial;
  function atBlankEnding(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code);
    effects.exit("lineEndingBlank");
    self.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    self.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/lib/initialize/text.js
var resolver = {
  resolveAll: createResolver()
};
var string = initializeFactory("string");
var text = initializeFactory("text");
function initializeFactory(field) {
  return {
    resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : void 0),
    tokenize: initializeText
  };
  function initializeText(effects) {
    const self = this;
    const constructs2 = this.parser.constructs[field];
    const text3 = effects.attempt(constructs2, start, notText);
    return start;
    function start(code) {
      return atBreak(code) ? text3(code) : notText(code);
    }
    function notText(code) {
      if (code === null) {
        effects.consume(code);
        return;
      }
      effects.enter("data");
      effects.consume(code);
      return data;
    }
    function data(code) {
      if (atBreak(code)) {
        effects.exit("data");
        return text3(code);
      }
      effects.consume(code);
      return data;
    }
    function atBreak(code) {
      if (code === null) {
        return true;
      }
      const list2 = constructs2[code];
      let index2 = -1;
      if (list2) {
        while (++index2 < list2.length) {
          const item = list2[index2];
          if (!item.previous || item.previous.call(self, self.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index2 = -1;
    let enter;
    while (++index2 <= events.length) {
      if (enter === void 0) {
        if (events[index2] && events[index2][1].type === "data") {
          enter = index2;
          index2++;
        }
      } else if (!events[index2] || events[index2][1].type !== "data") {
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index2 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index2--) {
        const chunk = chunks[index2];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) {
        } else {
          index2++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex,
            _index: data.start._index + index2,
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size
          },
          end: {
            ...data.end
          }
        };
        data.end = {
          ...token.start
        };
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(eventIndex, 0, ["enter", token, context], ["exit", token, context]);
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text2
});
var document3 = {
  [42]: list,
  [43]: list,
  [45]: list,
  [48]: list,
  [49]: list,
  [50]: list,
  [51]: list,
  [52]: list,
  [53]: list,
  [54]: list,
  [55]: list,
  [56]: list,
  [57]: list,
  [62]: blockQuote
};
var contentInitial = {
  [91]: definition
};
var flowInitial = {
  [-2]: codeIndented,
  [-1]: codeIndented,
  [32]: codeIndented
};
var flow2 = {
  [35]: headingAtx,
  [42]: thematicBreak,
  [45]: [setextUnderline, thematicBreak],
  [60]: htmlFlow,
  [61]: setextUnderline,
  [95]: thematicBreak,
  [96]: codeFenced,
  [126]: codeFenced
};
var string2 = {
  [38]: characterReference,
  [92]: characterEscape
};
var text2 = {
  [-5]: lineEnding,
  [-4]: lineEnding,
  [-3]: lineEnding,
  [33]: labelStartImage,
  [38]: characterReference,
  [42]: attention,
  [60]: [autolink, htmlText],
  [91]: labelStartLink,
  [92]: [hardBreakEscape, characterEscape],
  [93]: labelEnd,
  [95]: attention,
  [96]: codeText
};
var insideSpan = {
  null: [attention, resolver]
};
var attentionMarkers = {
  null: [42, 95]
};
var disable = {
  null: []
};

// node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from) {
  let point3 = {
    _bufferIndex: -1,
    _index: 0,
    line: from && from.line || 1,
    column: from && from.column || 1,
    offset: from && from.offset || 0
  };
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    consume,
    enter,
    exit: exit2,
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  const context = {
    code: null,
    containerState: {},
    defineSkip,
    events: [],
    now,
    parser,
    previous: null,
    sliceSerialize,
    sliceStream,
    write
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write(slice) {
    chunks = push(chunks, slice);
    main();
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    } = point3;
    return {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    while (point3._index < chunks.length) {
      const chunk = chunks[point3._index];
      if (typeof chunk === "string") {
        chunkIndex = point3._index;
        if (point3._bufferIndex < 0) {
          point3._bufferIndex = 0;
        }
        while (point3._index === chunkIndex && point3._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point3._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code) {
    consumed = void 0;
    expectedCode = code;
    state = state(code);
  }
  function consume(code) {
    if (markdownLineEnding(code)) {
      point3.line++;
      point3.column = 1;
      point3.offset += code === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code !== -1) {
      point3.column++;
      point3.offset++;
    }
    if (point3._bufferIndex < 0) {
      point3._index++;
    } else {
      point3._bufferIndex++;
      if (point3._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
      // strings.
      /** @type {string} */
      chunks[point3._index].length) {
        point3._bufferIndex = -1;
        point3._index++;
      }
    }
    context.previous = code;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit2(type) {
    const token = stack.pop();
    token.end = now();
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // Looks like a construct.
        handleListOfConstructs([
          /** @type {Construct} */
          constructs2
        ])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map) {
        return start;
        function start(code) {
          const left = code !== null && map[code];
          const all2 = code !== null && map.null;
          const list2 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(left) ? left : left ? [left] : [],
            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
          ];
          return handleListOfConstructs(list2)(code);
        }
      }
      function handleListOfConstructs(list2) {
        listOfConstructs = list2;
        constructIndex = 0;
        if (list2.length === 0) {
          return bogusState;
        }
        return handleConstruct(list2[constructIndex]);
      }
      function handleConstruct(construct) {
        return start;
        function start(code) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code);
        }
      }
      function ok3(code) {
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code) {
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(context.events, from2, context.events.length - from2, construct.resolve(context.events.slice(from2), context));
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      from: startEventsIndex,
      restore
    };
    function restore() {
      point3 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    if (point3.line in columnStart && point3.column < 2) {
      point3.column = columnStart[point3.line];
      point3.offset += columnStart[point3.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index2 = -1;
  const result = [];
  let atTab;
  while (++index2 < chunks.length) {
    const chunk = chunks[index2];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else switch (chunk) {
      case -5: {
        value = "\r";
        break;
      }
      case -4: {
        value = "\n";
        break;
      }
      case -3: {
        value = "\r\n";
        break;
      }
      case -2: {
        value = expandTabs ? " " : "	";
        break;
      }
      case -1: {
        if (!expandTabs && atTab) continue;
        value = " ";
        break;
      }
      default: {
        value = String.fromCharCode(chunk);
      }
    }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/lib/parse.js
function parse(options) {
  const settings = options || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    constructs: constructs2,
    content: create(content),
    defined: [],
    document: create(document2),
    flow: create(flow),
    lazy: {},
    string: create(string),
    text: create(text)
  };
  return parser;
  function create(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

// node_modules/micromark/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/micromark/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer = "";
  let start = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code;
    value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
    startPosition = 0;
    buffer = "";
    if (start) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code) {
          case 0: {
            chunks.push(65533);
            column++;
            break;
          }
          case 9: {
            next = Math.ceil(column / 4) * 4;
            chunks.push(-2);
            while (column++ < next) chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }
    return chunks;
  }
}

// node_modules/micromark-util-decode-string/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === 35) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($2) || $0;
}

// node_modules/mdast-util-from-markdown/lib/index.js
var own2 = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== "string") {
    options = encoding;
    encoding = void 0;
  }
  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));
}
function compiler(options) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText2, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition2),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis),
      hardBreakEscape: opener(hardBreak),
      hardBreakTrailing: opener(hardBreak),
      htmlFlow: opener(html, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html, buffer),
      htmlTextData: onenterdata,
      image: opener(image),
      label: buffer,
      link: opener(link),
      listItem: opener(listItem),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list2, onenterlistordered),
      listUnordered: opener(list2),
      paragraph: opener(paragraph),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading),
      strong: opener(strong),
      thematicBreak: opener(thematicBreak2)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);
  const data = {};
  return compile;
  function compile(events) {
    let tree = {
      type: "root",
      children: []
    };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit2,
      buffer,
      resume,
      data
    };
    const listStack = [];
    let index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
        if (events[index2][0] === "enter") {
          listStack.push(index2);
        } else {
          const tail = listStack.pop();
          index2 = prepareList(events, tail, index2);
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      const handler = config[events[index2][0]];
      if (own2.call(handler, events[index2][1].type)) {
        handler[events[index2][1].type].call(Object.assign({
          sliceSerialize: events[index2][2].sliceSerialize
        }, context), events[index2][1]);
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point2(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point2(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };
    index2 = -1;
    while (++index2 < config.transforms.length) {
      tree = config.transforms[index2](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start, length) {
    let index2 = start - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem2;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index2 <= length) {
      const event = events[index2];
      switch (event[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
          break;
        }
        case "lineEndingBlank": {
          if (event[0] === "enter") {
            if (listItem2 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace": {
          break;
        }
        default: {
          atMarker = void 0;
        }
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem2) {
          let tailIndex = index2;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem2._spread = true;
          }
          listItem2.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index2, 0, ["exit", listItem2, event[2]]);
          index2++;
          length++;
        }
        if (event[1].type === "listItemPrefix") {
          const item = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          listItem2 = item;
          events.splice(index2, 0, ["enter", item, event[2]]);
          index2++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start][1]._spread = listSpread;
    return length;
  }
  function opener(create, and) {
    return open;
    function open(token) {
      enter.call(this, create(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent.children;
    siblings.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler || void 0]);
    node2.position = {
      start: point2(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function closer(and) {
    return close;
    function close(token) {
      if (and) and.call(this, token);
      exit2.call(this, token);
    }
  }
  function exit2(token, onExitError) {
    const node2 = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
        start: token.start,
        end: token.end
      }) + "): it\u2019s not open");
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    node2.position.end = point2(token.end);
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      this.data.expectingFirstListItemValue = void 0;
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.meta = data2;
  }
  function onexitcodefencedfence() {
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    this.data.flowCodeInside = void 0;
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    const siblings = node2.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text3();
      tail.position = {
        start: point2(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: void 0
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point2(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const tail = context.children[context.children.length - 1];
      tail.position.end = point2(token.end);
      this.data.atHardBreak = void 0;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    this.data.atHardBreak = true;
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitlabeltext(token) {
    const string3 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    this.data.inReference = true;
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitresource() {
    this.data.inReference = void 0;
  }
  function onenterreference() {
    this.data.referenceType = "collapsed";
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    this.data.referenceType = "full";
  }
  function onexitcharacterreferencemarker(token) {
    this.data.characterReferenceType = token.type;
  }
  function onexitcharacterreferencevalue(token) {
    const data2 = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    let value;
    if (type) {
      value = decodeNumericCharacterReference(data2, type === "characterReferenceMarkerNumeric" ? 10 : 16);
      this.data.characterReferenceType = void 0;
    } else {
      const result = decodeNamedCharacterReference(data2);
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    tail.value += value;
  }
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    tail.position.end = point2(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function definition2() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function heading() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function hardBreak() {
    return {
      type: "break"
    };
  }
  function html() {
    return {
      type: "html",
      value: ""
    };
  }
  function image() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function link() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function list2(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function strong() {
    return {
      type: "strong",
      children: []
    };
  }
  function text3() {
    return {
      type: "text",
      value: ""
    };
  }
  function thematicBreak2() {
    return {
      type: "thematicBreak"
    };
  }
}
function point2(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}
function configure(combined, extensions) {
  let index2 = -1;
  while (++index2 < extensions.length) {
    const value = extensions[index2];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own2.call(extension2, key)) {
      switch (key) {
        case "canContainEols": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "transforms": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "enter":
        case "exit": {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
          break;
        }
      }
    }
  }
}
function defaultOnError(left, right) {
  if (left) {
    throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
      start: left.start,
      end: left.end
    }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is open");
  } else {
    throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is still open");
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options) {
  const self = this;
  self.parser = parser;
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self.data("settings"),
      ...options,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self.data("micromarkExtensions") || [],
      mdastExtensions: self.data("fromMarkdownExtensions") || []
    });
  }
}

// node_modules/unist-util-is/lib/index.js
var convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test) {
    if (test === null || test === void 0) {
      return ok2;
    }
    if (typeof test === "function") {
      return castFactory(test);
    }
    if (typeof test === "object") {
      return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === "string") {
      return typeFactory(test);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks = [];
  let index2 = -1;
  while (++index2 < tests.length) {
    checks[index2] = convert(tests[index2]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index3 = -1;
    while (++index3 < checks.length) {
      if (checks[index3].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all2);
  function all2(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index2, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index2 === "number" ? index2 : void 0,
        parent || void 0
      )
    );
  }
}
function ok2() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}

// node_modules/unist-util-visit-parents/lib/color.js
function color(d) {
  return d;
}

// node_modules/unist-util-visit-parents/lib/index.js
var empty = [];
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
function visitParents2(tree, test, visitor, reverse) {
  let check;
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
  } else {
    check = test;
  }
  const is2 = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index2, parents) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(node2.type + (name ? "<" + name + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      let result = empty;
      let subresult;
      let offset;
      let grandparents;
      if (!test || is2(node2, index2, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset > -1 && offset < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset];
            subresult = factory(child, offset, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return value === null || value === void 0 ? empty : [value];
}

// node_modules/unist-util-visit/lib/index.js
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test;
  let visitor;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test = void 0;
    visitor = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test = testOrVisitor;
    visitor = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents2(tree, test, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index2 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor(node2, index2, parent);
  }
}

// src/Internal/constants/interface.ts
var SETTINGS_TAB_SOURCEPATH_PREFIX = `@${PREFIX}-settings:`;

// src/Internal/Detecting/Rendered/Fenced.ts
async function renderedFencedCodeDetecting(element2, context, plugin) {
  var _a, _b, _c, _d, _e, _f, _g;
  const view = plugin.app.workspace.getActiveViewOfType(import_obsidian.View);
  const cache = plugin.app.metadataCache.getCache(context.sourcePath);
  if (!view || !cache)
    return;
  const codeDetectingContext = context.sourcePath.startsWith(SETTINGS_TAB_SOURCEPATH_PREFIX) ? "settings" : ((_a = document.querySelector("div.print")) == null ? void 0 : _a.contains(element2)) ? "export" : ((_b = document.querySelector("div.slides")) == null ? void 0 : _b.contains(element2)) ? "slides" : element2.classList.contains("admonition-content") ? "admonition" : element2.querySelector("div.callout-content") !== null ? "callout" : "standalone";
  const editingMode = view.getViewType() === "markdown" && view.currentMode.type === "source";
  const embeddedContent = ((_c = view == null ? void 0 : view.file) == null ? void 0 : _c.path) !== context.sourcePath;
  if (codeDetectingContext === "settings") {
    await applySettingsFencedDetecting(
      element2,
      context
    );
  } else if (codeDetectingContext === "slides" || codeDetectingContext === "export" && plugin.settings.decoratePrint) {
    const fileContentLines = await getFileContentLines(
      context.sourcePath,
      plugin.app.vault.adapter
    );
    await applyDocumentFencedDetecting(
      element2,
      cache,
      fileContentLines
    );
  } else if (codeDetectingContext === "admonition" && embeddedContent) {
    const fileContentLines = await getFileContentLines(
      context.sourcePath,
      plugin.app.vault.adapter
    );
    await applyEmbeddedAdmonitionFencedDetecting(
      element2,
      cache,
      fileContentLines
    );
  } else if (codeDetectingContext === "admonition" && editingMode) {
    const fileContentLines = await getFileContentLines(
      context.sourcePath,
      plugin.app.vault.adapter
    );
    const editing = true;
    await applyAdmonitionFencedDetecting(
      element2,
      // @ts-expect-error Undocumented Obsidian API
      (_d = view == null ? void 0 : view.editMode) == null ? void 0 : _d.editorEl,
      cache,
      fileContentLines,
      editing
    );
  } else if (codeDetectingContext === "callout" && editingMode) {
    const fileContentLines = await getFileContentLines(
      context.sourcePath,
      plugin.app.vault.adapter
    );
    await applyEditingCalloutFencedDetecting(
      element2,
      // @ts-expect-error Undocumented Obsidian API
      (_e = view == null ? void 0 : view.editMode) == null ? void 0 : _e.editorEl,
      cache,
      fileContentLines
    );
  } else if (codeDetectingContext === "admonition") {
    const fileContentLines = await getFileContentLines(
      context.sourcePath,
      plugin.app.vault.adapter
    );
    const editing = false;
    await applyAdmonitionFencedDetecting(
      element2,
      // @ts-expect-error Undocumented Obsidian API
      (_g = (_f = view == null ? void 0 : view.previewMode) == null ? void 0 : _f.renderer) == null ? void 0 : _g.previewEl,
      cache,
      fileContentLines,
      editing
    );
  } else if (codeDetectingContext === "callout") {
    await applyCalloutFencedDetecting(
      element2,
      context
    );
  } else if (codeDetectingContext === "standalone") {
    await applyStandaloneFencedDetecting(
      element2,
      context
    );
  }
}
async function applyStandaloneFencedDetecting(element2, context) {
  if (element2.querySelectorAll("pre:not(.frontmatter) > code").length > 1)
    console.warn("Unexpected number of fenced codeblocks");
  const fenceCodeElement = element2.querySelector("pre:not(.frontmatter) > code");
  if (!fenceCodeElement || !isFenceCodeElement(fenceCodeElement))
    return;
  const fenceSectionLines = getElementSectionLines(element2, context);
  if (!fenceSectionLines)
    return;
  const fenceCodeParametersLine = fenceSectionLines[0];
  applyFenceCodeParametersLine(
    fenceCodeElement,
    fenceCodeParametersLine,
    "standalone"
  );
}
async function applyCalloutFencedDetecting(element2, context) {
  const fenceSectionLines = getElementSectionLines(element2, context);
  if (!fenceSectionLines)
    return;
  applyFenceCodeParametersLinesList(
    element2,
    fenceSectionLines,
    "callout"
  );
}
async function applyEditingCalloutFencedDetecting(element2, contentElement, cache, fileContentLines) {
  const filterSections = (section) => section.type === "callout";
  const calloutSectionsLines = getSectionLines(
    cache,
    fileContentLines,
    filterSections
  );
  if (!calloutSectionsLines)
    return;
  const calloutSections = Array.from(contentElement.querySelectorAll(".cm-embed-block.cm-callout > .markdown-rendered, .HyperMD-callout.HyperMD-quote-1"));
  if (calloutSections.length !== calloutSectionsLines.length)
    return;
  let idxSection = calloutSections.indexOf(element2);
  if (idxSection === -1)
    idxSection = calloutSections.findIndex((element3) => element3.classList.contains("HyperMD-callout"));
  const fenceSectionLines = calloutSectionsLines[idxSection];
  applyFenceCodeParametersLinesList(
    element2,
    fenceSectionLines,
    "callout"
  );
}
async function applyAdmonitionFencedDetecting(element2, contentElement, cache, fileContentLines, editing) {
  const admonitionSectionsLines = getAdmonitionLines(cache, fileContentLines);
  if (!admonitionSectionsLines)
    return;
  const query = editing ? ".callout-content.admonition-content:not(.admonition-parent):not(.internal-embed .callout-content.admonition-content), .HyperMD-codeblock-begin > .cm-hmd-codeblock" : ".callout-content.admonition-content:not(.internal-embed .callout-content.admonition-content):not(.callout-content.admonition-content .callout-content.admonition-content)";
  const admonitionSections = Array.from(contentElement.querySelectorAll(query)).filter((element3) => element3.classList.contains("admonition-content") || RegExp(`^[> ]*[\`~]*ad-`).test(element3.innerText));
  if (admonitionSections.length !== admonitionSectionsLines.length)
    return;
  let idxSection = admonitionSections.indexOf(element2);
  if (idxSection === -1)
    return;
  const fenceSectionLines = admonitionSectionsLines[idxSection];
  applyFenceCodeParametersLinesList(
    element2,
    fenceSectionLines,
    "admonition"
  );
}
async function applyEmbeddedAdmonitionFencedDetecting(element2, cache, fileContentLines) {
  var _a, _b;
  if (!cache)
    return;
  const admonitionSectionsLines = getAdmonitionLines(cache, fileContentLines);
  if (!admonitionSectionsLines)
    return;
  const embedElement = element2 == null ? void 0 : element2.matchParent(".internal-embed");
  if (!embedElement)
    return;
  const embedLink = embedElement == null ? void 0 : embedElement.getAttribute("src");
  if (!embedLink)
    return;
  const subPath = (0, import_obsidian.parseLinktext)(embedLink).subpath;
  let embeddedAdmonitionSectionsLines = admonitionSectionsLines;
  if (subPath !== "") {
    const linkSection = (0, import_obsidian.resolveSubpath)(cache, subPath);
    if (!linkSection)
      return;
    if (linkSection.type === "heading") {
      fileContentLines = typeof ((_a = linkSection.end) == null ? void 0 : _a.line) === "undefined" ? fileContentLines.slice(linkSection.start.line) : fileContentLines.slice(linkSection.start.line, linkSection.end.line + 2);
    } else if (linkSection.type === "block") {
      if (!((_b = linkSection.end) == null ? void 0 : _b.line))
        return;
      fileContentLines = fileContentLines.slice(linkSection.start.line, linkSection.end.line + 1);
    }
    embeddedAdmonitionSectionsLines = embeddedAdmonitionSectionsLines.filter((admonitionSectionLines) => admonitionSectionLines.every((admonitionSectionLine) => fileContentLines.includes(admonitionSectionLine)));
  }
  const embeddedAdmonitionSections = Array.from(embedElement.querySelectorAll(".callout-content.admonition-content:not(.admonition-parent)"));
  if (embeddedAdmonitionSections.length !== embeddedAdmonitionSectionsLines.length)
    return;
  let idxSection = embeddedAdmonitionSections.indexOf(element2);
  if (idxSection === -1)
    return;
  const fenceSectionLines = embeddedAdmonitionSectionsLines[idxSection];
  applyFenceCodeParametersLinesList(
    element2,
    fenceSectionLines,
    "admonition"
  );
}
async function applyDocumentFencedDetecting(element2, cache, fileContentLines) {
  var _a;
  const filterSections = (section) => section.type === "callout" || section.type === "code";
  const fenceDocumentLines = (_a = getSectionLines(
    cache,
    fileContentLines,
    filterSections
  )) == null ? void 0 : _a.flat();
  if (!fenceDocumentLines)
    return;
  const fenceSectionLines = fenceDocumentLines;
  applyFenceCodeParametersLinesList(
    element2,
    fenceSectionLines,
    "export"
  );
}
async function applySettingsFencedDetecting(element2, context) {
  const fenceCodeElement = element2.querySelector("pre:not(.frontmatter) > code");
  if (!fenceCodeElement)
    return;
  if (!isFenceCodeElement(fenceCodeElement))
    return;
  const fenceSectionLines = context.sourcePath.substring(SETTINGS_TAB_SOURCEPATH_PREFIX.length).split("\n");
  const fenceCodeParametersLine = fenceSectionLines[0];
  applyFenceCodeParametersLine(
    fenceCodeElement,
    fenceCodeParametersLine,
    "settings"
  );
}
async function getFileContentLines(sourcePath, adapter) {
  return (await adapter.read(sourcePath)).split(/\n/g);
}
function getElementSectionLines(element2, context) {
  const fenceSectionInfo = context.getSectionInfo(element2);
  if (!fenceSectionInfo)
    return null;
  const fenceSectionLines = Array.from(
    { length: fenceSectionInfo.lineEnd - fenceSectionInfo.lineStart + 1 },
    (_, num) => num + fenceSectionInfo.lineStart
  ).map(
    (lineNumber) => fenceSectionInfo.text.split("\n")[lineNumber]
  );
  return fenceSectionLines;
}
function getSectionLines(cache, fileContentLines, filterSections) {
  const sections = cache == null ? void 0 : cache.sections;
  if (typeof sections === "undefined")
    return null;
  const fenceDocumentLines = sections.filter(
    filterSections
  ).map(
    (section) => fileContentLines.slice(section.position.start.line, section.position.end.line + 1)
  );
  return fenceDocumentLines;
}
function getAdmonitionLines(cache, fileContentLines) {
  var _a;
  const filterSections = (section) => section.type === "code";
  const admonitionSectionLines = (_a = getSectionLines(
    cache,
    fileContentLines,
    filterSections
  )) == null ? void 0 : _a.filter(
    (sectionLinesList) => RegExp(`^[> ]*[\`~]+ad-`).test(sectionLinesList[0])
  );
  return admonitionSectionLines;
}
function getMarkdownFenceParameters(fenceSectionLines) {
  const tree = unified().use(remarkParse).parse(fenceSectionLines.join("\n"));
  const fenceSectionParameters = [];
  visit(
    tree,
    "code",
    (node2) => {
      var _a, _b;
      if (((_a = node2 == null ? void 0 : node2.lang) == null ? void 0 : _a.startsWith("ad-")) && !(node2 == null ? void 0 : node2.meta))
        fenceSectionParameters.push(...getMarkdownFenceParameters((_b = node2 == null ? void 0 : node2.value) == null ? void 0 : _b.split("\n")));
      else
        fenceSectionParameters.push(fenceSectionLines[node2.position.start.line - 1]);
    }
  );
  return fenceSectionParameters;
}
function isFenceCodeElement(fenceCodeElement) {
  if (fenceCodeElement.className.startsWith("language-ad-"))
    return false;
  const fencePreElement = fenceCodeElement.parentElement;
  if (!fencePreElement)
    return false;
  const fenceParentElement = fencePreElement.parentElement;
  if (!fenceParentElement)
    return false;
  return true;
}
function cleanFenceCodeParametersLine(fenceCodeParametersLine) {
  fenceCodeParametersLine = fenceCodeParametersLine.replace(new RegExp(`^[> ]*`), "");
  fenceCodeParametersLine = fenceCodeParametersLine.replace(new RegExp(`^[\`~]+`), "");
  fenceCodeParametersLine += " ";
  return fenceCodeParametersLine;
}
function applyFenceCodeParametersLine(fenceCodeElement, fenceCodeParametersLine, codeDetectingContext) {
  if (!isUndetectedCodeElement(fenceCodeElement))
    return;
  fenceCodeElement.setAttribute(PARAMETERS_ATTRIBUTE, cleanFenceCodeParametersLine(fenceCodeParametersLine));
  fenceCodeElement.setAttribute(DETECTING_CONTEXT, codeDetectingContext);
}
function applyFenceCodeParametersLinesList(element2, fenceSectionLines, codeDetectingContext) {
  const fenceCodeElements = Array.from(element2.querySelectorAll("pre:not(.frontmatter) > code")).filter(isFenceCodeElement);
  const fenceCodeParametersLinesList = getMarkdownFenceParameters(fenceSectionLines);
  if (fenceCodeElements.length !== fenceCodeParametersLinesList.length)
    return;
  for (let idx = 0; idx < fenceCodeElements.length; idx++) {
    const fenceCodeElement = fenceCodeElements[idx];
    const fenceCodeParametersLine = fenceCodeParametersLinesList[idx];
    applyFenceCodeParametersLine(
      fenceCodeElement,
      fenceCodeParametersLine,
      codeDetectingContext
    );
  }
}

// src/Internal/utils/rendered.ts
var import_obsidian2 = require("obsidian");
function toPostProcess(element2, context, plugin) {
  var _a, _b;
  if (!element2 || !(context == null ? void 0 : context.sourcePath))
    return false;
  const view = plugin.app.workspace.getActiveViewOfType(import_obsidian2.View);
  if (!view)
    return false;
  const cache = plugin.app.metadataCache.getCache(context.sourcePath);
  if (((_b = (_a = context.frontmatter) != null ? _a : cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b["code-styler-ignore"]) === true)
    return false;
  return true;
}

// src/Internal/constants/decoration.ts
var BODY_CLASS = PREFIX + "plugin";
var DECORATED_ATTRIBUTE = PREFIX + "decorated";

// src/Internal/Parsing/Fenced.ts
function parseFenceCodeParameters(fenceCodeParametersLine) {
}
function toDecorateFenceCode(fenceCodeParameters) {
  return true;
}

// src/Internal/Decorating/Rendered/Fenced.ts
async function renderedFencedCodeDecorating(element2, context, plugin) {
  var _a, _b, _c;
  const fenceCodeElements = Array.from(element2.querySelectorAll(`pre:not(frontmatter) > code[${PARAMETERS_ATTRIBUTE}]`));
  for (const fenceCodeElement of fenceCodeElements) {
    if (!fenceCodeElement.classList.contains("is-loaded"))
      console.log("WASN'T LOADED");
    const decorated = (_a = fenceCodeElement.getAttribute(DECORATED_ATTRIBUTE)) != null ? _a : "false";
    if (decorated === "true")
      return;
    console.log("decoorate", fenceCodeElement);
    const codeblockParameters = parseFenceCodeParameters((_b = fenceCodeElement.getAttribute(PARAMETERS_ATTRIBUTE)) != null ? _b : " ");
    const codeDetectingContext = (_c = fenceCodeElement.getAttribute(DETECTING_CONTEXT)) != null ? _c : "standalone";
    if (!toDecorateFenceCode(codeblockParameters))
      return;
    fenceCodeElement.setAttribute(DECORATED_ATTRIBUTE, "true");
  }
}
var executeCodeMutationObserver = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.type === "childList" && mutation.target.tagName === "PRE") {
      const executeCodeOutput = mutation.target.querySelector("pre > code ~ code.language-output");
      if (executeCodeOutput)
        executeCodeOutput.classList.add("execute-code-output");
    }
  });
});

// src/Internal/Decorating/Rendered/Inline.ts
async function renderedInlineCodeDecorating(element2, context, plugin) {
}

// src/main.ts
var CodeStylerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor(async (element2, context) => {
      if (!toPostProcess(element2, context, this))
        return;
      await renderedInlineCodeDetecting(element2, context, this);
      await renderedInlineCodeDecorating(element2, context, this);
      await renderedFencedCodeDetecting(element2, context, this);
      await renderedFencedCodeDecorating(element2, context, this);
    });
  }
  onunload() {
    this.executeCodeMutationObserver.disconnect();
    destroyReadingModeElements();
    for (const url of Object.values(this.languageIcons))
      URL.revokeObjectURL(url);
    console.log("Unloaded plugin: Code Styler");
  }
  async loadSettings() {
    this.settings = { ...structuredClone(DEFAULT_SETTINGS), ...convertSettings(await this.loadData()) };
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.app.workspace.updateOptions();
  }
  async initialiseOnLayout() {
    if (!await this.app.vault.adapter.exists(this.app.vault.configDir + EXTERNAL_REFERENCE_PATH)) {
      await this.app.vault.adapter.mkdir(this.app.vault.configDir + EXTERNAL_REFERENCE_PATH);
      await this.app.vault.adapter.write(this.app.vault.configDir + EXTERNAL_REFERENCE_CACHE, JSON.stringify({}));
    }
    if (this.settings.externalReferenceUpdateOnLoad)
      await updateExternalReferencedFiles(this);
    else {
      await cleanExternalReferencedFiles(this);
      this.renderReadingView();
    }
  }
  renderReadingView() {
    this.app.workspace.iterateRootLeaves((leaf) => {
      if (leaf.view instanceof import_obsidian3.MarkdownView && leaf.view.getMode() === "preview")
        leaf.view.previewMode.rerender(true);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvSW50ZXJuYWwvY29uc3RhbnRzL2dlbmVyYWwudHMiLCAic3JjL0ludGVybmFsL2NvbnN0YW50cy9kZXRlY3RpbmcudHMiLCAic3JjL0ludGVybmFsL1BhcnNpbmcvSW5saW5lLnRzIiwgInNyYy9JbnRlcm5hbC9EZXRlY3RpbmcvdXRpbHMudHMiLCAic3JjL0ludGVybmFsL0RldGVjdGluZy9SZW5kZXJlZC9JbmxpbmUudHMiLCAic3JjL0ludGVybmFsL0RldGVjdGluZy9SZW5kZXJlZC9GZW5jZWQudHMiLCAibm9kZV9tb2R1bGVzL2JhaWwvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3VuaWZpZWQvbGliL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kZXZsb3AvbGliL2RlZmF1bHQuanMiLCAibm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvdHJvdWdoL2xpYi9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24vbGliL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy92ZmlsZS1tZXNzYWdlL2xpYi9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnBhdGguYnJvd3Nlci5qcyIsICJub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnByb2MuYnJvd3Nlci5qcyIsICJub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5zaGFyZWQuanMiLCAibm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9taW51cmwuYnJvd3Nlci5qcyIsICJub2RlX21vZHVsZXMvdmZpbGUvbGliL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy91bmlmaWVkL2xpYi9jYWxsYWJsZS1pbnN0YW5jZS5qcyIsICJub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLXN0cmluZy9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RlY29kZS1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlL2luZGV4LmRvbS5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2h1bmtlZC9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY29tYmluZS1leHRlbnNpb25zL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1ub3JtYWxpemUtaWRlbnRpZmllci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS1zcGFjZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9pbml0aWFsaXplL2NvbnRlbnQuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvaW5pdGlhbGl6ZS9kb2N1bWVudC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2xhc3NpZnktY2hhcmFjdGVyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbC9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvYXR0ZW50aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9hdXRvbGluay5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvYmxhbmstbGluZS5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvYmxvY2stcXVvdGUuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2NoYXJhY3Rlci1lc2NhcGUuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2NoYXJhY3Rlci1yZWZlcmVuY2UuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2NvZGUtZmVuY2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9jb2RlLWluZGVudGVkLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9jb2RlLXRleHQuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN1YnRva2VuaXplL2xpYi9zcGxpY2UtYnVmZmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1zdWJ0b2tlbml6ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY29udGVudC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3RvcnktZGVzdGluYXRpb24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1mYWN0b3J5LWxhYmVsL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS10aXRsZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvZGVmaW5pdGlvbi5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvaGFyZC1icmVhay1lc2NhcGUuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2hlYWRpbmctYXR4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1odG1sLXRhZy1uYW1lL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9odG1sLWZsb3cuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2h0bWwtdGV4dC5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvbGFiZWwtZW5kLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9sYWJlbC1zdGFydC1pbWFnZS5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvbGFiZWwtc3RhcnQtbGluay5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvbGluZS1lbmRpbmcuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL3RoZW1hdGljLWJyZWFrLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9saXN0LmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9zZXRleHQtdW5kZXJsaW5lLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2luaXRpYWxpemUvZmxvdy5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9pbml0aWFsaXplL3RleHQuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvY29uc3RydWN0cy5qcyIsICJub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9jcmVhdGUtdG9rZW5pemVyLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL3BhcnNlLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL3Bvc3Rwcm9jZXNzLmpzIiwgIm5vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL3ByZXByb2Nlc3MuanMiLCAibm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWRlY29kZS1zdHJpbmcvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bi9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtaXMvbGliL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvbGliL2NvbG9yLmpzIiwgIm5vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvbGliL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2xpYi9pbmRleC5qcyIsICJzcmMvSW50ZXJuYWwvY29uc3RhbnRzL2ludGVyZmFjZS50cyIsICJzcmMvSW50ZXJuYWwvdXRpbHMvcmVuZGVyZWQudHMiLCAic3JjL0ludGVybmFsL2NvbnN0YW50cy9kZWNvcmF0aW9uLnRzIiwgInNyYy9JbnRlcm5hbC9QYXJzaW5nL0ZlbmNlZC50cyIsICJzcmMvSW50ZXJuYWwvRGVjb3JhdGluZy9SZW5kZXJlZC9GZW5jZWQudHMiLCAic3JjL0ludGVybmFsL0RlY29yYXRpbmcvUmVuZGVyZWQvSW5saW5lLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG4vLyBJZiBuYW1lIGlzICdfX3Byb3RvX18nLCBhbmQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGF2YWlsYWJsZSwgZGVmaW5lIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkgb24gdGFyZ2V0XG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMpIHtcblx0aWYgKGRlZmluZVByb3BlcnR5ICYmIG9wdGlvbnMubmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMubmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBvcHRpb25zLm5ld1ZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR0YXJnZXRbb3B0aW9ucy5uYW1lXSA9IG9wdGlvbnMubmV3VmFsdWU7XG5cdH1cbn07XG5cbi8vIFJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiBfX3Byb3RvX18gaWYgJ19fcHJvdG9fXycgaXMgbm90IGFuIG93biBwcm9wZXJ0eVxudmFyIGdldFByb3BlcnR5ID0gZnVuY3Rpb24gZ2V0UHJvcGVydHkob2JqLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGlmICghaGFzT3duLmNhbGwob2JqLCBuYW1lKSkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9IGVsc2UgaWYgKGdPUEQpIHtcblx0XHRcdC8vIEluIGVhcmx5IHZlcnNpb25zIG9mIG5vZGUsIG9ialsnX19wcm90b19fJ10gaXMgYnVnZ3kgd2hlbiBvYmogaGFzXG5cdFx0XHQvLyBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5LiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCkgd29ya3MuXG5cdFx0XHRyZXR1cm4gZ09QRChvYmosIG5hbWUpLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvYmpbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gZ2V0UHJvcGVydHkodGFyZ2V0LCBuYW1lKTtcblx0XHRcdFx0Y29weSA9IGdldFByb3BlcnR5KG9wdGlvbnMsIG5hbWUpO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSkgfSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogY29weSB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcbiIsICJpbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4vLyBpbXBvcnQgeyBjb252ZXJ0U2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MsIExBTkdVQUdFUywgQ29kZVN0eWxlclNldHRpbmdzLCBSRUZFUkVOQ0VfQ09ERUJMT0NLLCBFWFRFUk5BTF9SRUZFUkVOQ0VfUEFUSCwgRVhURVJOQUxfUkVGRVJFTkNFX0NBQ0hFIH0gZnJvbSBcIi4vX3RlbXAvX09sZC9TZXR0aW5nc1wiO1xuLy8gaW1wb3J0IHsgcmVtb3ZlU3R5bGVzQW5kQ2xhc3NlcywgdXBkYXRlU3R5bGluZyB9IGZyb20gXCIuL190ZW1wL19PbGQvQXBwbHlTdHlsaW5nXCI7XG4vLyBpbXBvcnQgeyBjcmVhdGVDb2RlYmxvY2tDb2RlTWlycm9yRXh0ZW5zaW9ucywgZWRpdGluZ0RvY3VtZW50Rm9sZCB9IGZyb20gXCIuL190ZW1wL19PbGQvRWRpdGluZ1ZpZXdcIjtcbi8vIGltcG9ydCB7IGRlc3Ryb3lSZWFkaW5nTW9kZUVsZW1lbnRzLCByZWFkaW5nRG9jdW1lbnRGb2xkLCBleGVjdXRlQ29kZU11dGF0aW9uT2JzZXJ2ZXIsIHJlYWRpbmdWaWV3Q29kZWJsb2NrRGVjb3JhdGluZ1Bvc3RQcm9jZXNzb3IsIHJlYWRpbmdWaWV3SW5saW5lRGVjb3JhdGluZ1Bvc3RQcm9jZXNzb3IgfSBmcm9tIFwiLi9fdGVtcC9fT2xkL1JlYWRpbmdWaWV3XCI7XG4vLyBpbXBvcnQgeyBjbGVhbkV4dGVybmFsUmVmZXJlbmNlZEZpbGVzLCByZWZlcmVuY2VDb2RlYmxvY2tQcm9jZXNzb3IsIHVwZGF0ZUV4dGVybmFsUmVmZXJlbmNlZEZpbGVzIH0gZnJvbSBcIi4vX3RlbXAvX09sZC9SZWZlcmVuY2luZ1wiO1xuLy8gaW1wb3J0IHsgYWRkTW9kZXMsIHJlbW92ZU1vZGVzIH0gZnJvbSBcIi4vX3RlbXAvX09sZC9TeW50YXhIaWdobGlnaHRpbmdcIjtcbmltcG9ydCB7IENvZGVTdHlsZXJTZXR0aW5ncyB9IGZyb20gXCIuL0ludGVybmFsL3R5cGVzL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBCT0RZX0NMQVNTLCBMQU5HVUFHRVMgfSBmcm9tIFwiLi9JbnRlcm5hbC9jb25zdGFudHMvZGVjb3JhdGlvblwiO1xuaW1wb3J0IHsgU2V0dGluZ3NUYWIgfSBmcm9tIFwiLi9JbnRlcmZhY2UvU2V0dGluZ3MvU2V0dGluZ3NUYWJcIjtcbmltcG9ydCB7IHJlbmRlcmVkSW5saW5lQ29kZURldGVjdGluZyB9IGZyb20gXCIuL0ludGVybmFsL0RldGVjdGluZy9SZW5kZXJlZC9JbmxpbmVcIjtcbmltcG9ydCB7IHJlbmRlcmVkRmVuY2VkQ29kZURldGVjdGluZyB9IGZyb20gXCIuL0ludGVybmFsL0RldGVjdGluZy9SZW5kZXJlZC9GZW5jZWRcIjtcbmltcG9ydCB7IHRvUG9zdFByb2Nlc3MgfSBmcm9tIFwiLi9JbnRlcm5hbC91dGlscy9yZW5kZXJlZFwiO1xuaW1wb3J0IHsgcmVuZGVyZWRGZW5jZWRDb2RlRGVjb3JhdGluZyB9IGZyb20gXCIuL0ludGVybmFsL0RlY29yYXRpbmcvUmVuZGVyZWQvRmVuY2VkXCI7XG5pbXBvcnQgeyByZW5kZXJlZElubGluZUNvZGVEZWNvcmF0aW5nIH0gZnJvbSBcIi4vSW50ZXJuYWwvRGVjb3JhdGluZy9SZW5kZXJlZC9JbmxpbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZVN0eWxlclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBDb2RlU3R5bGVyU2V0dGluZ3M7XG5cdGV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcblx0bGFuZ3VhZ2VJY29uczogUmVjb3JkPHN0cmluZyxzdHJpbmc+O1xuXHRzaXplczoge1xuXHRcdGZvbnQ6IHN0cmluZztcblx0XHR6b29tOiBzdHJpbmc7XG5cdH07XG5cblx0YXN5bmMgb25sb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7IC8vIExvYWQgU2V0dGluZ3Ncblx0XHQvLyBjb25zdCBzZXR0aW5nc1RhYiA9IG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCx0aGlzKTtcblx0XHQvLyB0aGlzLmFkZFNldHRpbmdUYWIoc2V0dGluZ3NUYWIpO1xuXG5cdFx0Ly8gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKEJPRFlfQ0xBU1MpOyAvLyBMb2FkIFN0eWxlc1xuXHRcdC8vIHVwZGF0ZVN0eWxpbmcodGhpcy5zZXR0aW5ncyx0aGlzLmFwcCk7XG5cblx0XHQvLyB0aGlzLmxhbmd1YWdlSWNvbnMgPSBPYmplY3Qua2V5cyhMQU5HVUFHRVMpLnJlZHVjZSgocmVzdWx0OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSwga2V5OiBzdHJpbmcpID0+IHsgLy8gTG9hZCBJY29uc1xuXHRcdC8vIFx0aWYgKExBTkdVQUdFU1trZXldPy5pY29uKVxuXHRcdC8vIFx0XHRyZXN1bHRba2V5XSA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2A8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCI+JHtMQU5HVUFHRVNba2V5XS5pY29ufTwvc3ZnPmBdLCB7IHR5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwiIH0pKTtcblx0XHQvLyBcdHJldHVybiByZXN1bHQ7XG5cdFx0Ly8gfSx7fSk7XG5cdFx0Ly8gdGhpcy5zaXplcyA9IHtcblx0XHQvLyBcdGZvbnQ6IGRvY3VtZW50LmJvZHkuZ2V0Q3NzUHJvcGVydHlWYWx1ZShcIi0tZm9udC10ZXh0LXNpemVcIiksXG5cdFx0Ly8gXHR6b29tOiBkb2N1bWVudC5ib2R5LmdldENzc1Byb3BlcnR5VmFsdWUoXCItLXpvb20tZmFjdG9yXCIpLFxuXHRcdC8vIH07XG5cblx0XHQvLyB0aGlzLmV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlciA9IGV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlcjsgLy8gQWRkIGV4ZWN1dGUgY29kZSBtdXRhdGlvbiBvYnNlcnZlclxuXG5cdFx0Ly8qIFJlbmRlcmluZyBNb2RpZmllcnNcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKGFzeW5jIChlbGVtZW50LCBjb250ZXh0KSA9PiB7XG5cdFx0XHRpZiAoIXRvUG9zdFByb2Nlc3MoZWxlbWVudCwgY29udGV4dCwgdGhpcykpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0YXdhaXQgcmVuZGVyZWRJbmxpbmVDb2RlRGV0ZWN0aW5nKGVsZW1lbnQsIGNvbnRleHQsIHRoaXMpO1xuXHRcdFx0YXdhaXQgcmVuZGVyZWRJbmxpbmVDb2RlRGVjb3JhdGluZyhlbGVtZW50LCBjb250ZXh0LCB0aGlzKTtcblx0XHRcdGF3YWl0IHJlbmRlcmVkRmVuY2VkQ29kZURldGVjdGluZyhlbGVtZW50LCBjb250ZXh0LCB0aGlzKTtcblx0XHRcdGF3YWl0IHJlbmRlcmVkRmVuY2VkQ29kZURlY29yYXRpbmcoZWxlbWVudCwgY29udGV4dCwgdGhpcyk7XG5cdFx0fSlcblxuXHRcdC8vIGFkZE1vZGVzKCk7XG5cdFx0Ly8gdGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFJFRkVSRU5DRV9DT0RFQkxPQ0ssIGFzeW5jIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcblx0XHQvLyBcdGF3YWl0IHJlZmVyZW5jZUNvZGVibG9ja1Byb2Nlc3Nvcihzb3VyY2UsIGVsLCBjdHgsIHRoaXMpO1xuXHRcdC8vIH0pO1xuXG5cdFx0Ly8gdGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3Nvcihhc3luYyAoZWwsIGN0eCkgPT4ge1xuXHRcdC8vIFx0YXdhaXQgcmVhZGluZ1ZpZXdDb2RlYmxvY2tEZWNvcmF0aW5nUG9zdFByb2Nlc3NvcihlbCwgY3R4LCB0aGlzKTsgLy8gQWRkIGNvZGVibG9jayBkZWNvcmF0aW5nIG1hcmtkb3duUG9zdFByb2Nlc3NvclxuXHRcdC8vIH0pO1xuXHRcdC8vIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoYXN5bmMgKGVsLCBjdHgpID0+IHtcblx0XHQvLyBcdGF3YWl0IHJlYWRpbmdWaWV3SW5saW5lRGVjb3JhdGluZ1Bvc3RQcm9jZXNzb3IoZWwsIGN0eCwgdGhpcyk7IC8vIEFkZCBpbmxpbmUgY29kZSBkZWNvcmF0aW5nIG1hcmtkb3duUG9zdFByb2Nlc3NvclxuXHRcdC8vIH0pO1xuXG5cdFx0Ly8gdGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihjcmVhdGVDb2RlYmxvY2tDb2RlTWlycm9yRXh0ZW5zaW9ucyh0aGlzLnNldHRpbmdzLHRoaXMpKTsgLy8gQWRkIGNvZGVtaXJyb3IgZXh0ZW5zaW9uc1xuXG5cdFx0Ly8gbGV0IHpvb21UaW1lb3V0OiBOb2RlSlMuVGltZW91dCA9IHNldFRpbWVvdXQoKCk9Pnt9KTtcblx0XHQvLyB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKFwiY3NzLWNoYW5nZVwiLCgpPT57XG5cdFx0Ly8gXHR1cGRhdGVTdHlsaW5nKHRoaXMuc2V0dGluZ3MsdGhpcy5hcHApOyAvLyBVcGRhdGUgc3R5bGluZyBvbiBjc3MgY2hhbmdlc1xuXHRcdC8vIFx0Y29uc3QgY3VycmVudEZvbnRTaXplID0gZG9jdW1lbnQuYm9keS5nZXRDc3NQcm9wZXJ0eVZhbHVlKFwiLS1mb250LXRleHQtc2l6ZVwiKTtcblx0XHQvLyBcdGlmICh0aGlzLnNpemVzLmZvbnQgIT09IGN1cnJlbnRGb250U2l6ZSkge1xuXHRcdC8vIFx0XHR0aGlzLnNpemVzLmZvbnQgPSBjdXJyZW50Rm9udFNpemU7XG5cdFx0Ly8gXHRcdGNsZWFyVGltZW91dCh6b29tVGltZW91dCk7XG5cdFx0Ly8gXHRcdHpvb21UaW1lb3V0ID0gc2V0VGltZW91dCgoKT0+e1xuXHRcdC8vIFx0XHRcdHRoaXMucmVuZGVyUmVhZGluZ1ZpZXcoKTsgLy8gUmUtcmVuZGVyIG9uIGZvbnQgc2l6ZSBjaGFuZ2VzXG5cdFx0Ly8gXHRcdH0sMTAwMCk7XG5cdFx0Ly8gXHR9XG5cdFx0Ly8gfSx0aGlzKSk7XG5cdFx0Ly8gdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbihcInJlc2l6ZVwiLCgpPT57XG5cdFx0Ly8gXHRjb25zdCBjdXJyZW50Wm9vbVNpemUgPSBkb2N1bWVudC5ib2R5LmdldENzc1Byb3BlcnR5VmFsdWUoXCItLXpvb20tZmFjdG9yXCIpO1xuXHRcdC8vIFx0aWYgKHRoaXMuc2l6ZXMuem9vbSAhPT0gY3VycmVudFpvb21TaXplKSB7XG5cdFx0Ly8gXHRcdHRoaXMuc2l6ZXMuem9vbSA9IGN1cnJlbnRab29tU2l6ZTtcblx0XHQvLyBcdFx0Y2xlYXJUaW1lb3V0KHpvb21UaW1lb3V0KTtcblx0XHQvLyBcdFx0em9vbVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpPT57XG5cdFx0Ly8gXHRcdFx0dGhpcy5yZW5kZXJSZWFkaW5nVmlldygpOyAvLyBSZS1yZW5kZXIgb24gem9vbSBjaGFuZ2VzXG5cdFx0Ly8gXHRcdH0sMTAwMCk7XG5cdFx0Ly8gXHR9XG5cdFx0Ly8gfSx0aGlzKSk7XG5cblx0XHQvLyB0aGlzLmFkZENvbW1hbmQoe2lkOiBcImZvbGQtYWxsXCIsIG5hbWU6IFwiRm9sZCBhbGwgY29kZWJsb2Nrc1wiLCBjYWxsYmFjazogKCk9Pntcblx0XHQvLyBcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdC8vIFx0aWYgKGFjdGl2ZVZpZXcpIHtcblx0XHQvLyBcdFx0aWYgKGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSBcInByZXZpZXdcIilcblx0XHQvLyBcdFx0XHRyZWFkaW5nRG9jdW1lbnRGb2xkKGFjdGl2ZVZpZXcuY29udGVudEVsLHRydWUpO1xuXHRcdC8vIFx0XHRlbHNlIGlmIChhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gXCJzb3VyY2VcIilcblx0XHQvLyBcdFx0XHQvL0B0cy1leHBlY3QtZXJyb3IgVW5kb2N1bWVudGVkIE9ic2lkaWFuIEFQSVxuXHRcdC8vIFx0XHRcdGVkaXRpbmdEb2N1bWVudEZvbGQoYWN0aXZlVmlldy5lZGl0b3IuY20uZG9jVmlldy52aWV3LHRydWUpO1xuXHRcdC8vIFx0fVxuXHRcdC8vIH19KTtcblx0XHQvLyB0aGlzLmFkZENvbW1hbmQoe2lkOiBcInVuZm9sZC1hbGxcIiwgbmFtZTogXCJVbmZvbGQgYWxsIGNvZGVibG9ja3NcIiwgY2FsbGJhY2s6ICgpPT57XG5cdFx0Ly8gXHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHQvLyBcdGlmIChhY3RpdmVWaWV3KSB7XG5cdFx0Ly8gXHRcdGlmIChhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gXCJwcmV2aWV3XCIpXG5cdFx0Ly8gXHRcdFx0cmVhZGluZ0RvY3VtZW50Rm9sZChhY3RpdmVWaWV3LmNvbnRlbnRFbCxmYWxzZSk7XG5cdFx0Ly8gXHRcdGVsc2UgaWYgKGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSBcInNvdXJjZVwiKVxuXHRcdC8vIFx0XHRcdC8vQHRzLWV4cGVjdC1lcnJvciBVbmRvY3VtZW50ZWQgT2JzaWRpYW4gQVBJXG5cdFx0Ly8gXHRcdFx0ZWRpdGluZ0RvY3VtZW50Rm9sZChhY3RpdmVWaWV3LmVkaXRvci5jbS5kb2NWaWV3LnZpZXcsZmFsc2UpO1xuXHRcdC8vIFx0fVxuXHRcdC8vIH19KTtcblx0XHQvLyB0aGlzLmFkZENvbW1hbmQoe2lkOiBcInJlc2V0LWFsbFwiLCBuYW1lOiBcIlJlc2V0IGZvbGQgc3RhdGUgZm9yIGFsbCBjb2RlYmxvY2tzXCIsIGNhbGxiYWNrOiAoKT0+e1xuXHRcdC8vIFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0Ly8gXHRpZiAoYWN0aXZlVmlldykge1xuXHRcdC8vIFx0XHRpZiAoYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09IFwicHJldmlld1wiKVxuXHRcdC8vIFx0XHRcdHJlYWRpbmdEb2N1bWVudEZvbGQoYWN0aXZlVmlldy5jb250ZW50RWwpO1xuXHRcdC8vIFx0XHRlbHNlIGlmIChhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gXCJzb3VyY2VcIilcblx0XHQvLyBcdFx0XHQvL0B0cy1leHBlY3QtZXJyb3IgVW5kb2N1bWVudGVkIE9ic2lkaWFuIEFQSVxuXHRcdC8vIFx0XHRcdGVkaXRpbmdEb2N1bWVudEZvbGQoYWN0aXZlVmlldy5lZGl0b3IuY20uZG9jVmlldy52aWV3KTtcblx0XHQvLyBcdH1cblx0XHQvLyB9fSk7XG5cdFx0Ly8gdGhpcy5hZGRDb21tYW5kKHtpZDogXCJ1cGRhdGUtcmVmZXJlbmNlcy12YXVsdFwiLCBuYW1lOiBcIlVwZGF0ZSBhbGwgZXh0ZXJuYWwgcmVmZXJlbmNlcyBpbiB2YXVsdFwiLCBjYWxsYmFjazogYXN5bmMgKCk9Pntcblx0XHQvLyBcdGF3YWl0IHVwZGF0ZUV4dGVybmFsUmVmZXJlbmNlZEZpbGVzKHRoaXMpO1xuXHRcdC8vIH19KTtcblx0XHQvLyB0aGlzLmFkZENvbW1hbmQoe2lkOiBcInVwZGF0ZS1yZWZlcmVuY2VzLXBhZ2VcIiwgbmFtZTogXCJVcGRhdGUgYWxsIGV4dGVybmFsIHJlZmVyZW5jZXMgaW4gbm90ZVwiLCBjYWxsYmFjazogYXN5bmMgKCk9Pntcblx0XHQvLyBcdGF3YWl0IHVwZGF0ZUV4dGVybmFsUmVmZXJlbmNlZEZpbGVzKHRoaXMsIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk/LnBhdGgpO1xuXHRcdC8vIH19KTtcblx0XHQvLyB0aGlzLmFkZENvbW1hbmQoe2lkOiBcImNsZWFuLXJlZmVyZW5jZXNcIiwgbmFtZTogXCJSZW1vdmUgYWxsIHVubmVlZGVkIGV4dGVybmFsIHJlZmVyZW5jZXNcIiwgY2FsbGJhY2s6IGFzeW5jICgpPT57XG5cdFx0Ly8gXHRhd2FpdCBjbGVhbkV4dGVybmFsUmVmZXJlbmNlZEZpbGVzKHRoaXMpO1xuXHRcdC8vIH19KTtcblxuXHRcdC8vIHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KGFzeW5jICgpID0+IHRoaXMuaW5pdGlhbGlzZU9uTGF5b3V0KCkpOyAvLyBBZGQgZGVjb3JhdGlvbiBvbiBlbmFibGluZyBvZiBwbHVnaW5cblxuXHRcdC8vIGNvbnNvbGUubG9nKFwiTG9hZGVkIHBsdWdpbjogQ29kZSBTdHlsZXJcIik7XG5cdH1cblxuXHRvbnVubG9hZCgpOiB2b2lkIHtcblx0XHQvLyByZW1vdmVNb2RlcygpO1xuXHRcdHRoaXMuZXhlY3V0ZUNvZGVNdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblx0XHQvLyByZW1vdmVTdHlsZXNBbmRDbGFzc2VzKCk7XG5cdFx0ZGVzdHJveVJlYWRpbmdNb2RlRWxlbWVudHMoKTtcblx0XHRmb3IgKGNvbnN0IHVybCBvZiBPYmplY3QudmFsdWVzKHRoaXMubGFuZ3VhZ2VJY29ucykpIC8vIFVubG9hZCBpY29uc1xuXHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuXHRcdGNvbnNvbGUubG9nKFwiVW5sb2FkZWQgcGx1Z2luOiBDb2RlIFN0eWxlclwiKTtcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0aGlzLnNldHRpbmdzID0geyAuLi5zdHJ1Y3R1cmVkQ2xvbmUoREVGQVVMVF9TRVRUSU5HUyksIC4uLmNvbnZlcnRTZXR0aW5ncyhhd2FpdCB0aGlzLmxvYWREYXRhKCkpIH07XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UudXBkYXRlT3B0aW9ucygpO1xuXHRcdC8vIHVwZGF0ZVN0eWxpbmcodGhpcy5zZXR0aW5ncyx0aGlzLmFwcCk7XG5cdH1cblxuXHRhc3luYyBpbml0aWFsaXNlT25MYXlvdXQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKCEoYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHModGhpcy5hcHAudmF1bHQuY29uZmlnRGlyICsgRVhURVJOQUxfUkVGRVJFTkNFX1BBVEgpKSkgey8vIENyZWF0ZSBmb2xkZXIgZm9yIGV4dGVybmFsIHJlZmVyZW5jZXNcblx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIubWtkaXIodGhpcy5hcHAudmF1bHQuY29uZmlnRGlyICsgRVhURVJOQUxfUkVGRVJFTkNFX1BBVEgpO1xuXHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZSh0aGlzLmFwcC52YXVsdC5jb25maWdEaXIgKyBFWFRFUk5BTF9SRUZFUkVOQ0VfQ0FDSEUsIEpTT04uc3RyaW5naWZ5KHt9KSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmV4dGVybmFsUmVmZXJlbmNlVXBkYXRlT25Mb2FkKVxuXHRcdFx0YXdhaXQgdXBkYXRlRXh0ZXJuYWxSZWZlcmVuY2VkRmlsZXModGhpcyk7XG5cdFx0ZWxzZSB7XG5cdFx0XHRhd2FpdCBjbGVhbkV4dGVybmFsUmVmZXJlbmNlZEZpbGVzKHRoaXMpO1xuXHRcdFx0dGhpcy5yZW5kZXJSZWFkaW5nVmlldygpO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlclJlYWRpbmdWaWV3KCk6IHZvaWQge1xuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5pdGVyYXRlUm9vdExlYXZlcygobGVhZjogV29ya3NwYWNlTGVhZikgPT4ge1xuXHRcdFx0aWYgKGxlYWYudmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldyAmJiBsZWFmLnZpZXcuZ2V0TW9kZSgpID09PSBcInByZXZpZXdcIilcblx0XHRcdFx0bGVhZi52aWV3LnByZXZpZXdNb2RlLnJlcmVuZGVyKHRydWUpO1xuXHRcdH0pO1xuXHR9XG59XG4iLCAiZXhwb3J0IGNvbnN0IFBSRUZJWCA9IFwiY3MtXCJcbiIsICJpbXBvcnQgeyBQUkVGSVggfSBmcm9tIFwiLi9nZW5lcmFsXCJcblxuZXhwb3J0IGNvbnN0IFBBUkFNRVRFUlNfQVRUUklCVVRFID0gUFJFRklYICsgXCJjb2RlLXBhcmFtZXRlcnNcIlxuZXhwb3J0IGNvbnN0IEVNUFRZX1BBUkFNRVRFUlNfQVRUUklCVVRFID0gUFJFRklYICsgXCJjb2RlLWVtcHR5LXBhcmFtZXRlcnNcIlxuZXhwb3J0IGNvbnN0IENPTlRFTlRfQVRUUklCVVRFID0gUFJFRklYICsgXCJjb2RlLWNvbnRlbnRcIlxuZXhwb3J0IGNvbnN0IERFVEVDVElOR19DT05URVhUID0gUFJFRklYICsgXCJkZXRlY3RlZC1jb250ZXh0XCJcbiIsICJleHBvcnQgZnVuY3Rpb24gc3BsaXRJbmxpbmVDb2RlUmF3KFxuXHRpbmxpbmVDb2RlUmF3OiBzdHJpbmcsXG4pOiB7IGlubGluZUNvZGVQYXJhbWV0ZXJzOiBzdHJpbmcgfCBudWxsLCBpbmxpbmVDb2RlQ29udGVudDogc3RyaW5nIH0ge1xuXHRjb25zdCBtYXRjaCA9IG5ldyBSZWdFeHAoYF57KC4qPyl9KCAqPykoW14gXS4qKSRgKS5leGVjKGlubGluZUNvZGVSYXcpO1xuXHRpZiAoIW1hdGNoIHx8IHR5cGVvZiBtYXRjaD8uWzFdID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBtYXRjaD8uWzJdID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBtYXRjaD8uWzNdID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdHJldHVybiB7IGlubGluZUNvZGVQYXJhbWV0ZXJzOiBudWxsLCBpbmxpbmVDb2RlQ29udGVudDogaW5saW5lQ29kZVJhdyB9O1xuXHRyZXR1cm4ge2lubGluZUNvZGVQYXJhbWV0ZXJzOiBgeyR7bWF0Y2hbMV19fSR7bWF0Y2hbMl19YCwgaW5saW5lQ29kZUNvbnRlbnQ6IG1hdGNoWzNdfTtcbn1cbiIsICJpbXBvcnQgeyBQQVJBTUVURVJTX0FUVFJJQlVURSB9IGZyb20gXCJzcmMvSW50ZXJuYWwvY29uc3RhbnRzL2RldGVjdGluZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRldGVjdGVkQ29kZUVsZW1lbnQoXG5cdGNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCxcbik6IGJvb2xlYW4ge1xuXHRjb25zdCBwYXJzZWQgPSBjb2RlRWxlbWVudC5nZXRBdHRyaWJ1dGUoUEFSQU1FVEVSU19BVFRSSUJVVEUpXG5cdGlmIChwYXJzZWQpXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlXG59XG4iLCAiaW1wb3J0IHsgQ2FjaGVkTWV0YWRhdGEsIERhdGFBZGFwdGVyLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiwgcGFyc2VMaW5rdGV4dCwgcmVzb2x2ZVN1YnBhdGgsIFNlY3Rpb25DYWNoZSwgVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQ09OVEVOVF9BVFRSSUJVVEUsIEVNUFRZX1BBUkFNRVRFUlNfQVRUUklCVVRFLCBQQVJBTUVURVJTX0FUVFJJQlVURSB9IGZyb20gXCJzcmMvSW50ZXJuYWwvY29uc3RhbnRzL2RldGVjdGluZ1wiO1xuaW1wb3J0IENvZGVTdHlsZXJQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG5pbXBvcnQgeyBzcGxpdElubGluZUNvZGVSYXcgfSBmcm9tIFwiLi4vLi4vUGFyc2luZy9JbmxpbmVcIjtcbmltcG9ydCB7IGlzVW5kZXRlY3RlZENvZGVFbGVtZW50IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJlZElubGluZUNvZGVEZXRlY3RpbmcoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuXHRwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4sXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Zm9yIChjb25zdCBpbmxpbmVDb2RlRWxlbWVudCBvZiBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIjpub3QocHJlKSA+IGNvZGVcIikpIGFzIEFycmF5PEhUTUxFbGVtZW50Pikge1xuXHRcdGNvbnN0IGlubGluZUNvZGVSYXcgPSBpbmxpbmVDb2RlRWxlbWVudC5pbm5lclRleHQ7XG5cdFx0Y29uc3Qge2lubGluZUNvZGVQYXJhbWV0ZXJzLCBpbmxpbmVDb2RlQ29udGVudH0gPSBzcGxpdElubGluZUNvZGVSYXcoaW5saW5lQ29kZVJhdyk7XG5cblx0XHRpZiAoIWlzVW5kZXRlY3RlZENvZGVFbGVtZW50KGlubGluZUNvZGVFbGVtZW50KSlcblx0XHRcdHJldHVybjtcblxuXHRcdGlubGluZUNvZGVFbGVtZW50LnNldEF0dHJpYnV0ZShDT05URU5UX0FUVFJJQlVURSwgaW5saW5lQ29kZUNvbnRlbnQpO1xuXHRcdGlubGluZUNvZGVFbGVtZW50LnNldEF0dHJpYnV0ZShQQVJBTUVURVJTX0FUVFJJQlVURSwgaW5saW5lQ29kZVBhcmFtZXRlcnMgPz8gXCJcIik7XG5cdFx0aW5saW5lQ29kZUVsZW1lbnQuc2V0QXR0cmlidXRlKEVNUFRZX1BBUkFNRVRFUlNfQVRUUklCVVRFLCAoaW5saW5lQ29kZVBhcmFtZXRlcnMgPT09IG51bGwpID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpO1xuXHR9XG59XG4iLCAiaW1wb3J0IHsgQ2FjaGVkTWV0YWRhdGEsIERhdGFBZGFwdGVyLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiwgcGFyc2VMaW5rdGV4dCwgcmVzb2x2ZVN1YnBhdGgsIFNlY3Rpb25DYWNoZSwgVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgREVURUNUSU5HX0NPTlRFWFQsIFBBUkFNRVRFUlNfQVRUUklCVVRFIH0gZnJvbSBcInNyYy9JbnRlcm5hbC9jb25zdGFudHMvZGV0ZWN0aW5nXCI7XG5pbXBvcnQgQ29kZVN0eWxlclBsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB7IHVuaWZpZWQgfSBmcm9tIFwidW5pZmllZFwiO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnO1xuaW1wb3J0IHsgaXNVbmRldGVjdGVkQ29kZUVsZW1lbnQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IFNFVFRJTkdTX1RBQl9TT1VSQ0VQQVRIX1BSRUZJWCB9IGZyb20gXCJzcmMvSW50ZXJuYWwvY29uc3RhbnRzL2ludGVyZmFjZVwiO1xuaW1wb3J0IHsgQ29kZURldGVjdGluZ0NvbnRleHQgfSBmcm9tIFwic3JjL0ludGVybmFsL3R5cGVzL2RldGVjdGluZ1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyZWRGZW5jZWRDb2RlRGV0ZWN0aW5nKFxuXHRlbGVtZW50OiBIVE1MRWxlbWVudCxcblx0Y29udGV4dDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcblx0cGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luLFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IHZpZXcgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKFZpZXcpO1xuXHRjb25zdCBjYWNoZSA9IHBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZS5nZXRDYWNoZShjb250ZXh0LnNvdXJjZVBhdGgpXG5cdGlmICghdmlldyB8fCAhY2FjaGUpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGNvZGVEZXRlY3RpbmdDb250ZXh0OiBDb2RlRGV0ZWN0aW5nQ29udGV4dCA9IGNvbnRleHQuc291cmNlUGF0aC5zdGFydHNXaXRoKFNFVFRJTkdTX1RBQl9TT1VSQ0VQQVRIX1BSRUZJWClcblx0XHQ/IFwic2V0dGluZ3NcIlxuXHRcdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5wcmludFwiKT8uY29udGFpbnMoZWxlbWVudClcblx0XHQ/IFwiZXhwb3J0XCJcblx0XHQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuc2xpZGVzXCIpPy5jb250YWlucyhlbGVtZW50KVxuXHRcdD8gXCJzbGlkZXNcIlxuXHRcdDogZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJhZG1vbml0aW9uLWNvbnRlbnRcIilcblx0XHQ/IFwiYWRtb25pdGlvblwiXG5cdFx0OiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuY2FsbG91dC1jb250ZW50XCIpICE9PSBudWxsXG5cdFx0PyBcImNhbGxvdXRcIlxuXHRcdDogXCJzdGFuZGFsb25lXCI7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgVW5kb2N1bWVudGVkIE9ic2lkaWFuIEFQSVxuXHRjb25zdCBlZGl0aW5nTW9kZSA9ICh2aWV3LmdldFZpZXdUeXBlKCkgPT09IFwibWFya2Rvd25cIikgJiYgKHZpZXcuY3VycmVudE1vZGUudHlwZSA9PT0gXCJzb3VyY2VcIilcblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBVbmRvY3VtZW50ZWQgT2JzaWRpYW4gQVBJXG5cdGNvbnN0IGVtYmVkZGVkQ29udGVudCA9ICh2aWV3Py5maWxlPy5wYXRoICE9PSBjb250ZXh0LnNvdXJjZVBhdGgpO1xuXG5cdGlmIChjb2RlRGV0ZWN0aW5nQ29udGV4dCA9PT0gXCJzZXR0aW5nc1wiKSB7XG5cdFx0YXdhaXQgYXBwbHlTZXR0aW5nc0ZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRjb250ZXh0LFxuXHRcdClcblx0fSBlbHNlIGlmICgoY29kZURldGVjdGluZ0NvbnRleHQgPT09IFwic2xpZGVzXCIpIHx8IChjb2RlRGV0ZWN0aW5nQ29udGV4dCA9PT0gXCJleHBvcnRcIiAmJiBwbHVnaW4uc2V0dGluZ3MuZGVjb3JhdGVQcmludCkpIHtcblx0XHRjb25zdCBmaWxlQ29udGVudExpbmVzID0gYXdhaXQgZ2V0RmlsZUNvbnRlbnRMaW5lcyhcblx0XHRcdGNvbnRleHQuc291cmNlUGF0aCxcblx0XHRcdHBsdWdpbi5hcHAudmF1bHQuYWRhcHRlclxuXHRcdCk7XG5cdFx0YXdhaXQgYXBwbHlEb2N1bWVudEZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRjYWNoZSxcblx0XHRcdGZpbGVDb250ZW50TGluZXMsXG5cdFx0KVxuXHR9IGVsc2UgaWYgKChjb2RlRGV0ZWN0aW5nQ29udGV4dCA9PT0gXCJhZG1vbml0aW9uXCIpICYmIGVtYmVkZGVkQ29udGVudCkgeyAvL05PVEU6IFBvc3NpYmx5IGluZWZmaWNpZW50P1xuXHRcdGNvbnN0IGZpbGVDb250ZW50TGluZXMgPSBhd2FpdCBnZXRGaWxlQ29udGVudExpbmVzKFxuXHRcdFx0Y29udGV4dC5zb3VyY2VQYXRoLFxuXHRcdFx0cGx1Z2luLmFwcC52YXVsdC5hZGFwdGVyXG5cdFx0KTtcblx0XHRhd2FpdCBhcHBseUVtYmVkZGVkQWRtb25pdGlvbkZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRjYWNoZSxcblx0XHRcdGZpbGVDb250ZW50TGluZXMsXG5cdFx0KVxuXHR9IGVsc2UgaWYgKChjb2RlRGV0ZWN0aW5nQ29udGV4dCA9PT0gXCJhZG1vbml0aW9uXCIpICYmIGVkaXRpbmdNb2RlKSB7IC8vTk9URTogUG9zc2libHkgaW5lZmZpY2llbnQ/XG5cdFx0Y29uc3QgZmlsZUNvbnRlbnRMaW5lcyA9IGF3YWl0IGdldEZpbGVDb250ZW50TGluZXMoXG5cdFx0XHRjb250ZXh0LnNvdXJjZVBhdGgsXG5cdFx0XHRwbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXJcblx0XHQpO1xuXHRcdGNvbnN0IGVkaXRpbmcgPSB0cnVlXG5cdFx0YXdhaXQgYXBwbHlBZG1vbml0aW9uRmVuY2VkRGV0ZWN0aW5nKFxuXHRcdFx0ZWxlbWVudCxcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVW5kb2N1bWVudGVkIE9ic2lkaWFuIEFQSVxuXHRcdFx0dmlldz8uZWRpdE1vZGU/LmVkaXRvckVsIGFzIEhUTUxFbGVtZW50LFxuXHRcdFx0Y2FjaGUsXG5cdFx0XHRmaWxlQ29udGVudExpbmVzLFxuXHRcdFx0ZWRpdGluZyxcblx0XHQpXG5cdH0gZWxzZSBpZiAoKGNvZGVEZXRlY3RpbmdDb250ZXh0ID09PSBcImNhbGxvdXRcIikgJiYgZWRpdGluZ01vZGUpIHsgLy9OT1RFOiBQb3NzaWJseSBpbmVmZmljaWVudD9cblx0XHRjb25zdCBmaWxlQ29udGVudExpbmVzID0gYXdhaXQgZ2V0RmlsZUNvbnRlbnRMaW5lcyhcblx0XHRcdGNvbnRleHQuc291cmNlUGF0aCxcblx0XHRcdHBsdWdpbi5hcHAudmF1bHQuYWRhcHRlclxuXHRcdCk7XG5cdFx0YXdhaXQgYXBwbHlFZGl0aW5nQ2FsbG91dEZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFVuZG9jdW1lbnRlZCBPYnNpZGlhbiBBUElcblx0XHRcdHZpZXc/LmVkaXRNb2RlPy5lZGl0b3JFbCBhcyBIVE1MRWxlbWVudCxcblx0XHRcdGNhY2hlLFxuXHRcdFx0ZmlsZUNvbnRlbnRMaW5lcyxcblx0XHQpXG5cdH0gZWxzZSBpZiAoY29kZURldGVjdGluZ0NvbnRleHQgPT09IFwiYWRtb25pdGlvblwiKSB7XG5cdFx0Y29uc3QgZmlsZUNvbnRlbnRMaW5lcyA9IGF3YWl0IGdldEZpbGVDb250ZW50TGluZXMoXG5cdFx0XHRjb250ZXh0LnNvdXJjZVBhdGgsXG5cdFx0XHRwbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXJcblx0XHQpO1xuXHRcdGNvbnN0IGVkaXRpbmcgPSBmYWxzZVxuXHRcdGF3YWl0IGFwcGx5QWRtb25pdGlvbkZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFVuZG9jdW1lbnRlZCBPYnNpZGlhbiBBUElcblx0XHRcdHZpZXc/LnByZXZpZXdNb2RlPy5yZW5kZXJlcj8ucHJldmlld0VsIGFzIEhUTUxFbGVtZW50LFxuXHRcdFx0Y2FjaGUsXG5cdFx0XHRmaWxlQ29udGVudExpbmVzLFxuXHRcdFx0ZWRpdGluZyxcblx0XHQpXG5cdH0gZWxzZSBpZiAoY29kZURldGVjdGluZ0NvbnRleHQgPT09IFwiY2FsbG91dFwiKSB7XG5cdFx0YXdhaXQgYXBwbHlDYWxsb3V0RmVuY2VkRGV0ZWN0aW5nKFxuXHRcdFx0ZWxlbWVudCxcblx0XHRcdGNvbnRleHQsXG5cdFx0KVxuXHR9IGVsc2UgaWYgKGNvZGVEZXRlY3RpbmdDb250ZXh0ID09PSBcInN0YW5kYWxvbmVcIikge1xuXHRcdGF3YWl0IGFwcGx5U3RhbmRhbG9uZUZlbmNlZERldGVjdGluZyhcblx0XHRcdGVsZW1lbnQsXG5cdFx0XHRjb250ZXh0LFxuXHRcdClcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseVN0YW5kYWxvbmVGZW5jZWREZXRlY3RpbmcoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmU6bm90KC5mcm9udG1hdHRlcikgPiBjb2RlXCIpLmxlbmd0aCA+IDEpXG5cdFx0Y29uc29sZS53YXJuKFwiVW5leHBlY3RlZCBudW1iZXIgb2YgZmVuY2VkIGNvZGVibG9ja3NcIilcblxuXHRjb25zdCBmZW5jZUNvZGVFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwicHJlOm5vdCguZnJvbnRtYXR0ZXIpID4gY29kZVwiKSBhcyBIVE1MRWxlbWVudFxuXHRpZiAoIWZlbmNlQ29kZUVsZW1lbnQgfHwgIWlzRmVuY2VDb2RlRWxlbWVudChmZW5jZUNvZGVFbGVtZW50KSlcblx0XHRyZXR1cm47XG5cblx0Y29uc3QgZmVuY2VTZWN0aW9uTGluZXMgPSBnZXRFbGVtZW50U2VjdGlvbkxpbmVzKGVsZW1lbnQsIGNvbnRleHQpXG5cdGlmICghZmVuY2VTZWN0aW9uTGluZXMpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lID0gZmVuY2VTZWN0aW9uTGluZXNbMF1cblx0YXBwbHlGZW5jZUNvZGVQYXJhbWV0ZXJzTGluZShcblx0XHRmZW5jZUNvZGVFbGVtZW50LFxuXHRcdGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lLFxuXHRcdFwic3RhbmRhbG9uZVwiLFxuXHQpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5Q2FsbG91dEZlbmNlZERldGVjdGluZyhcblx0ZWxlbWVudDogSFRNTEVsZW1lbnQsXG5cdGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgZmVuY2VTZWN0aW9uTGluZXMgPSBnZXRFbGVtZW50U2VjdGlvbkxpbmVzKGVsZW1lbnQsIGNvbnRleHQpXG5cdGlmICghZmVuY2VTZWN0aW9uTGluZXMpXG5cdFx0cmV0dXJuO1xuXG5cdGFwcGx5RmVuY2VDb2RlUGFyYW1ldGVyc0xpbmVzTGlzdChcblx0XHRlbGVtZW50LFxuXHRcdGZlbmNlU2VjdGlvbkxpbmVzLFxuXHRcdFwiY2FsbG91dFwiLFxuXHQpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5RWRpdGluZ0NhbGxvdXRGZW5jZWREZXRlY3RpbmcoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsXG5cdGNhY2hlOiBDYWNoZWRNZXRhZGF0YSB8IG51bGwsXG5cdGZpbGVDb250ZW50TGluZXM6IEFycmF5PHN0cmluZz4sXG4pIHtcblx0Y29uc3QgZmlsdGVyU2VjdGlvbnMgPSAoc2VjdGlvbjogU2VjdGlvbkNhY2hlKSA9PiAoc2VjdGlvbi50eXBlID09PSBcImNhbGxvdXRcIilcblx0Y29uc3QgY2FsbG91dFNlY3Rpb25zTGluZXMgPSBnZXRTZWN0aW9uTGluZXMoXG5cdFx0Y2FjaGUsXG5cdFx0ZmlsZUNvbnRlbnRMaW5lcyxcblx0XHRmaWx0ZXJTZWN0aW9ucyxcblx0KVxuXHRpZiAoIWNhbGxvdXRTZWN0aW9uc0xpbmVzKVxuXHRcdHJldHVybjtcblxuXHRjb25zdCBjYWxsb3V0U2VjdGlvbnMgPSAoQXJyYXkuZnJvbShjb250ZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNtLWVtYmVkLWJsb2NrLmNtLWNhbGxvdXQgPiAubWFya2Rvd24tcmVuZGVyZWQsIC5IeXBlck1ELWNhbGxvdXQuSHlwZXJNRC1xdW90ZS0xXCIpKSBhcyBBcnJheTxIVE1MRWxlbWVudD4pXG5cblx0aWYgKGNhbGxvdXRTZWN0aW9ucy5sZW5ndGggIT09IGNhbGxvdXRTZWN0aW9uc0xpbmVzLmxlbmd0aClcblx0XHRyZXR1cm47XG5cblx0bGV0IGlkeFNlY3Rpb24gPSBjYWxsb3V0U2VjdGlvbnMuaW5kZXhPZihlbGVtZW50KVxuXHRpZiAoaWR4U2VjdGlvbiA9PT0gLTEpXG5cdFx0aWR4U2VjdGlvbiA9IGNhbGxvdXRTZWN0aW9ucy5maW5kSW5kZXgoKGVsZW1lbnQpID0+IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiSHlwZXJNRC1jYWxsb3V0XCIpKTtcblx0Ly9UT0RPOiBGSVggLSBUaGlzIGlzbid0IHVuaXF1ZSBpZiBtdWx0aXBsZSBjYWxsb3V0cyBhcmUgaW4gZWRpdGluZyBtb2RlIHJhdGhlciB0aGFuIGVtYmVkIGFzIHRoZXJlIGlzIG5vIGluZm9ybWF0aW9uIHRvIG1hcCB0aGVtXG5cblx0Y29uc3QgZmVuY2VTZWN0aW9uTGluZXMgPSBjYWxsb3V0U2VjdGlvbnNMaW5lc1tpZHhTZWN0aW9uXVxuXHRhcHBseUZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lc0xpc3QoXG5cdFx0ZWxlbWVudCxcblx0XHRmZW5jZVNlY3Rpb25MaW5lcyxcblx0XHRcImNhbGxvdXRcIixcblx0KVxufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseUFkbW9uaXRpb25GZW5jZWREZXRlY3RpbmcoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsXG5cdGNhY2hlOiBDYWNoZWRNZXRhZGF0YSB8IG51bGwsXG5cdGZpbGVDb250ZW50TGluZXM6IEFycmF5PHN0cmluZz4sXG5cdGVkaXRpbmc6IGJvb2xlYW5cbik6IFByb21pc2U8dm9pZD4ge1xuXHRjb25zdCBhZG1vbml0aW9uU2VjdGlvbnNMaW5lcyA9IGdldEFkbW9uaXRpb25MaW5lcyhjYWNoZSwgZmlsZUNvbnRlbnRMaW5lcylcblx0aWYgKCFhZG1vbml0aW9uU2VjdGlvbnNMaW5lcylcblx0XHRyZXR1cm47XG5cblx0Y29uc3QgcXVlcnkgPSBlZGl0aW5nXG5cdFx0PyBcIi5jYWxsb3V0LWNvbnRlbnQuYWRtb25pdGlvbi1jb250ZW50Om5vdCguYWRtb25pdGlvbi1wYXJlbnQpOm5vdCguaW50ZXJuYWwtZW1iZWQgLmNhbGxvdXQtY29udGVudC5hZG1vbml0aW9uLWNvbnRlbnQpLCAuSHlwZXJNRC1jb2RlYmxvY2stYmVnaW4gPiAuY20taG1kLWNvZGVibG9ja1wiXG5cdFx0OiBcIi5jYWxsb3V0LWNvbnRlbnQuYWRtb25pdGlvbi1jb250ZW50Om5vdCguaW50ZXJuYWwtZW1iZWQgLmNhbGxvdXQtY29udGVudC5hZG1vbml0aW9uLWNvbnRlbnQpOm5vdCguY2FsbG91dC1jb250ZW50LmFkbW9uaXRpb24tY29udGVudCAuY2FsbG91dC1jb250ZW50LmFkbW9uaXRpb24tY29udGVudClcIlxuXHRjb25zdCBhZG1vbml0aW9uU2VjdGlvbnMgPSAoQXJyYXkuZnJvbShjb250ZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkgYXMgQXJyYXk8SFRNTEVsZW1lbnQ+KS5maWx0ZXIoKGVsZW1lbnQpID0+IChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImFkbW9uaXRpb24tY29udGVudFwiKSB8fCBSZWdFeHAoYF5bPiBdKltcXGB+XSphZC1gKS50ZXN0KGVsZW1lbnQuaW5uZXJUZXh0KSkpXG5cblx0aWYgKGFkbW9uaXRpb25TZWN0aW9ucy5sZW5ndGggIT09IGFkbW9uaXRpb25TZWN0aW9uc0xpbmVzLmxlbmd0aClcblx0XHRyZXR1cm47XG5cblx0bGV0IGlkeFNlY3Rpb24gPSBhZG1vbml0aW9uU2VjdGlvbnMuaW5kZXhPZihlbGVtZW50KVxuXHRpZiAoaWR4U2VjdGlvbiA9PT0gLTEpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGZlbmNlU2VjdGlvbkxpbmVzID0gYWRtb25pdGlvblNlY3Rpb25zTGluZXNbaWR4U2VjdGlvbl1cblx0YXBwbHlGZW5jZUNvZGVQYXJhbWV0ZXJzTGluZXNMaXN0KFxuXHRcdGVsZW1lbnQsXG5cdFx0ZmVuY2VTZWN0aW9uTGluZXMsXG5cdFx0XCJhZG1vbml0aW9uXCIsXG5cdClcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlFbWJlZGRlZEFkbW9uaXRpb25GZW5jZWREZXRlY3RpbmcoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjYWNoZTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsLFxuXHRmaWxlQ29udGVudExpbmVzOiBBcnJheTxzdHJpbmc+LFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmICghY2FjaGUpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGFkbW9uaXRpb25TZWN0aW9uc0xpbmVzID0gZ2V0QWRtb25pdGlvbkxpbmVzKGNhY2hlLCBmaWxlQ29udGVudExpbmVzKVxuXHRpZiAoIWFkbW9uaXRpb25TZWN0aW9uc0xpbmVzKVxuXHRcdHJldHVybjtcblxuXHRjb25zdCBlbWJlZEVsZW1lbnQgPSBlbGVtZW50Py5tYXRjaFBhcmVudChcIi5pbnRlcm5hbC1lbWJlZFwiKVxuXHRpZiAoIWVtYmVkRWxlbWVudClcblx0XHRyZXR1cm47XG5cblx0Y29uc3QgZW1iZWRMaW5rID0gZW1iZWRFbGVtZW50Py5nZXRBdHRyaWJ1dGUoXCJzcmNcIilcblx0aWYgKCFlbWJlZExpbmspXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IHN1YlBhdGggPSBwYXJzZUxpbmt0ZXh0KGVtYmVkTGluaykuc3VicGF0aFxuXG5cdGxldCBlbWJlZGRlZEFkbW9uaXRpb25TZWN0aW9uc0xpbmVzID0gYWRtb25pdGlvblNlY3Rpb25zTGluZXNcblx0aWYgKHN1YlBhdGggIT09IFwiXCIpIHtcblx0XHRjb25zdCBsaW5rU2VjdGlvbiA9IHJlc29sdmVTdWJwYXRoKGNhY2hlLCBzdWJQYXRoKVxuXHRcdGlmICghbGlua1NlY3Rpb24pXG5cdFx0XHRyZXR1cm47XG5cblx0XHRpZiAobGlua1NlY3Rpb24udHlwZSA9PT0gXCJoZWFkaW5nXCIpIHtcblx0XHRcdGZpbGVDb250ZW50TGluZXMgPSAodHlwZW9mIGxpbmtTZWN0aW9uLmVuZD8ubGluZSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdFx0PyBmaWxlQ29udGVudExpbmVzLnNsaWNlKGxpbmtTZWN0aW9uLnN0YXJ0LmxpbmUpXG5cdFx0XHRcdDogZmlsZUNvbnRlbnRMaW5lcy5zbGljZShsaW5rU2VjdGlvbi5zdGFydC5saW5lLCBsaW5rU2VjdGlvbi5lbmQubGluZSsyKVxuXHRcdH0gZWxzZSBpZiAobGlua1NlY3Rpb24udHlwZSA9PT0gXCJibG9ja1wiKSB7XG5cdFx0XHRpZiAoIWxpbmtTZWN0aW9uLmVuZD8ubGluZSlcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRmaWxlQ29udGVudExpbmVzID0gZmlsZUNvbnRlbnRMaW5lcy5zbGljZShsaW5rU2VjdGlvbi5zdGFydC5saW5lLCBsaW5rU2VjdGlvbi5lbmQubGluZSArIDEpXG5cdFx0fVxuXHRcdGVtYmVkZGVkQWRtb25pdGlvblNlY3Rpb25zTGluZXMgPSBlbWJlZGRlZEFkbW9uaXRpb25TZWN0aW9uc0xpbmVzLmZpbHRlcigoYWRtb25pdGlvblNlY3Rpb25MaW5lcykgPT4gYWRtb25pdGlvblNlY3Rpb25MaW5lcy5ldmVyeSgoYWRtb25pdGlvblNlY3Rpb25MaW5lKSA9PiBmaWxlQ29udGVudExpbmVzLmluY2x1ZGVzKGFkbW9uaXRpb25TZWN0aW9uTGluZSkpKVxuXHR9XG5cblx0Y29uc3QgZW1iZWRkZWRBZG1vbml0aW9uU2VjdGlvbnMgPSAoQXJyYXkuZnJvbShlbWJlZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYWxsb3V0LWNvbnRlbnQuYWRtb25pdGlvbi1jb250ZW50Om5vdCguYWRtb25pdGlvbi1wYXJlbnQpXCIpKSBhcyBBcnJheTxIVE1MRWxlbWVudD4pXG5cblx0aWYgKGVtYmVkZGVkQWRtb25pdGlvblNlY3Rpb25zLmxlbmd0aCAhPT0gZW1iZWRkZWRBZG1vbml0aW9uU2VjdGlvbnNMaW5lcy5sZW5ndGgpXG5cdFx0cmV0dXJuO1xuXG5cdGxldCBpZHhTZWN0aW9uID0gZW1iZWRkZWRBZG1vbml0aW9uU2VjdGlvbnMuaW5kZXhPZihlbGVtZW50KVxuXHRpZiAoaWR4U2VjdGlvbiA9PT0gLTEpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGZlbmNlU2VjdGlvbkxpbmVzID0gZW1iZWRkZWRBZG1vbml0aW9uU2VjdGlvbnNMaW5lc1tpZHhTZWN0aW9uXVxuXHRhcHBseUZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lc0xpc3QoXG5cdFx0ZWxlbWVudCxcblx0XHRmZW5jZVNlY3Rpb25MaW5lcyxcblx0XHRcImFkbW9uaXRpb25cIixcblx0KVxufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseURvY3VtZW50RmVuY2VkRGV0ZWN0aW5nKFxuXHRlbGVtZW50OiBIVE1MRWxlbWVudCxcblx0Y2FjaGU6IENhY2hlZE1ldGFkYXRhIHwgbnVsbCxcblx0ZmlsZUNvbnRlbnRMaW5lczogQXJyYXk8c3RyaW5nPixcbikge1xuXHRjb25zdCBmaWx0ZXJTZWN0aW9ucyA9IChzZWN0aW9uOiBTZWN0aW9uQ2FjaGUpID0+IChzZWN0aW9uLnR5cGUgPT09IFwiY2FsbG91dFwiIHx8IHNlY3Rpb24udHlwZSA9PT0gXCJjb2RlXCIpXG5cdGNvbnN0IGZlbmNlRG9jdW1lbnRMaW5lcyA9IGdldFNlY3Rpb25MaW5lcyhcblx0XHRjYWNoZSxcblx0XHRmaWxlQ29udGVudExpbmVzLFxuXHRcdGZpbHRlclNlY3Rpb25zLFxuXHQpPy5mbGF0KClcblx0aWYgKCFmZW5jZURvY3VtZW50TGluZXMpXG5cdFx0cmV0dXJuO1xuXG5cdGNvbnN0IGZlbmNlU2VjdGlvbkxpbmVzID0gZmVuY2VEb2N1bWVudExpbmVzXG5cdGFwcGx5RmVuY2VDb2RlUGFyYW1ldGVyc0xpbmVzTGlzdChcblx0XHRlbGVtZW50LFxuXHRcdGZlbmNlU2VjdGlvbkxpbmVzLFxuXHRcdFwiZXhwb3J0XCIsXG5cdClcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlTZXR0aW5nc0ZlbmNlZERldGVjdGluZyhcblx0ZWxlbWVudDogSFRNTEVsZW1lbnQsXG5cdGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgZmVuY2VDb2RlRWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcInByZTpub3QoLmZyb250bWF0dGVyKSA+IGNvZGVcIikgYXMgSFRNTEVsZW1lbnRcblx0aWYgKCFmZW5jZUNvZGVFbGVtZW50KVxuXHRcdHJldHVybjtcblxuXHRpZiAoIWlzRmVuY2VDb2RlRWxlbWVudChmZW5jZUNvZGVFbGVtZW50KSlcblx0XHRyZXR1cm47XG5cblx0Y29uc3QgZmVuY2VTZWN0aW9uTGluZXMgPSBjb250ZXh0LnNvdXJjZVBhdGguc3Vic3RyaW5nKFNFVFRJTkdTX1RBQl9TT1VSQ0VQQVRIX1BSRUZJWC5sZW5ndGgpLnNwbGl0KFwiXFxuXCIpXG5cblx0Y29uc3QgZmVuY2VDb2RlUGFyYW1ldGVyc0xpbmUgPSBmZW5jZVNlY3Rpb25MaW5lc1swXTtcblx0YXBwbHlGZW5jZUNvZGVQYXJhbWV0ZXJzTGluZShcblx0XHRmZW5jZUNvZGVFbGVtZW50LFxuXHRcdGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lLFxuXHRcdFwic2V0dGluZ3NcIixcblx0KVxufVxuXG4vLyBUT0RPOiBNT1ZFIFRIZXNlIGZ1bmN0aW9ucyBlbHNld2hlcmVcbmFzeW5jIGZ1bmN0aW9uIGdldEZpbGVDb250ZW50TGluZXMoXG5cdHNvdXJjZVBhdGg6IHN0cmluZyxcblx0YWRhcHRlcjogRGF0YUFkYXB0ZXIsXG4pOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHtcblx0cmV0dXJuIChhd2FpdCBhZGFwdGVyLnJlYWQoc291cmNlUGF0aCkpLnNwbGl0KC9cXG4vZyk7XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRTZWN0aW9uTGluZXMoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuKTogQXJyYXk8c3RyaW5nPiB8IG51bGwge1xuXHRjb25zdCBmZW5jZVNlY3Rpb25JbmZvOiBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiB8IG51bGwgPSBjb250ZXh0LmdldFNlY3Rpb25JbmZvKGVsZW1lbnQpO1xuXHRpZiAoIWZlbmNlU2VjdGlvbkluZm8pXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0Y29uc3QgZmVuY2VTZWN0aW9uTGluZXMgPSBBcnJheS5mcm9tKFxuXHRcdHsgbGVuZ3RoOiBmZW5jZVNlY3Rpb25JbmZvLmxpbmVFbmQgLSBmZW5jZVNlY3Rpb25JbmZvLmxpbmVTdGFydCArIDEgfSxcblx0XHQoXywgbnVtKSA9PiBudW0gKyBmZW5jZVNlY3Rpb25JbmZvLmxpbmVTdGFydCkubWFwKChsaW5lTnVtYmVyKSA9PiBmZW5jZVNlY3Rpb25JbmZvLnRleHQuc3BsaXQoXCJcXG5cIilbbGluZU51bWJlcl0sXG5cdClcblxuXHRyZXR1cm4gZmVuY2VTZWN0aW9uTGluZXNcbn1cblxuZnVuY3Rpb24gZ2V0U2VjdGlvbkxpbmVzKFxuXHRjYWNoZTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsLFxuXHRmaWxlQ29udGVudExpbmVzOiBBcnJheTxzdHJpbmc+LFxuXHRmaWx0ZXJTZWN0aW9uczogKHNlY3Rpb246IFNlY3Rpb25DYWNoZSkgPT4gYm9vbGVhbixcbik6IEFycmF5PEFycmF5PHN0cmluZz4+IHwgbnVsbCB7XG5cdGNvbnN0IHNlY3Rpb25zID0gY2FjaGU/LnNlY3Rpb25zXG5cdGlmICh0eXBlb2Ygc2VjdGlvbnMgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0Y29uc3QgZmVuY2VEb2N1bWVudExpbmVzID0gc2VjdGlvbnMuZmlsdGVyKFxuXHRcdGZpbHRlclNlY3Rpb25zLFxuXHQpLm1hcChcblx0XHQoc2VjdGlvbjogU2VjdGlvbkNhY2hlKSA9PiBmaWxlQ29udGVudExpbmVzLnNsaWNlKHNlY3Rpb24ucG9zaXRpb24uc3RhcnQubGluZSwgc2VjdGlvbi5wb3NpdGlvbi5lbmQubGluZSArIDEpLFxuXHQpXG5cblx0cmV0dXJuIGZlbmNlRG9jdW1lbnRMaW5lc1xufVxuXG5mdW5jdGlvbiBnZXRBZG1vbml0aW9uTGluZXMoXG5cdGNhY2hlOiBDYWNoZWRNZXRhZGF0YSB8IG51bGwsXG5cdGZpbGVDb250ZW50TGluZXM6IEFycmF5PHN0cmluZz4sXG4pIHtcblx0Y29uc3QgZmlsdGVyU2VjdGlvbnMgPSAoc2VjdGlvbjogU2VjdGlvbkNhY2hlKSA9PiAoc2VjdGlvbi50eXBlID09PSBcImNvZGVcIilcblx0Y29uc3QgYWRtb25pdGlvblNlY3Rpb25MaW5lcyA9IGdldFNlY3Rpb25MaW5lcyhcblx0XHRjYWNoZSxcblx0XHRmaWxlQ29udGVudExpbmVzLFxuXHRcdGZpbHRlclNlY3Rpb25zLFxuXHQpPy5maWx0ZXIoXG5cdFx0KHNlY3Rpb25MaW5lc0xpc3QpID0+IChSZWdFeHAoYF5bPiBdKltcXGB+XSthZC1gKS50ZXN0KHNlY3Rpb25MaW5lc0xpc3RbMF0pKVxuXHQpXG5cblx0cmV0dXJuIGFkbW9uaXRpb25TZWN0aW9uTGluZXNcbn1cblxuZnVuY3Rpb24gZ2V0TWFya2Rvd25GZW5jZVBhcmFtZXRlcnMoXG5cdGZlbmNlU2VjdGlvbkxpbmVzOiBBcnJheTxzdHJpbmc+LFxuKTogQXJyYXk8c3RyaW5nPiB7XG5cdGNvbnN0IHRyZWUgPSB1bmlmaWVkKCkudXNlKG1hcmtkb3duKS5wYXJzZShmZW5jZVNlY3Rpb25MaW5lcy5qb2luKFwiXFxuXCIpKTtcblx0Y29uc3QgZmVuY2VTZWN0aW9uUGFyYW1ldGVyczogQXJyYXk8c3RyaW5nPiA9IFtdXG5cdHZpc2l0KFxuXHRcdHRyZWUsXG5cdFx0J2NvZGUnLFxuXHRcdChub2RlOiBhbnkpID0+IHtcblx0XHRcdGlmIChub2RlPy5sYW5nPy5zdGFydHNXaXRoKFwiYWQtXCIpICYmICFub2RlPy5tZXRhKVxuXHRcdFx0XHRmZW5jZVNlY3Rpb25QYXJhbWV0ZXJzLnB1c2goLi4uZ2V0TWFya2Rvd25GZW5jZVBhcmFtZXRlcnMobm9kZT8udmFsdWU/LnNwbGl0KFwiXFxuXCIpKSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZmVuY2VTZWN0aW9uUGFyYW1ldGVycy5wdXNoKGZlbmNlU2VjdGlvbkxpbmVzW25vZGUucG9zaXRpb24uc3RhcnQubGluZS0xXSk7IC8vTk9URTogVXNlZCB0byB1c2UgYFxcYFxcYFxcYCR7bm9kZS5sYW5nIHx8IFwiXCJ9ICR7bm9kZS5tZXRhIHx8IFwiXCJ9YFxuXHRcdH1cblx0KTtcblxuXHRyZXR1cm4gZmVuY2VTZWN0aW9uUGFyYW1ldGVyc1xufVxuXG5mdW5jdGlvbiBpc0ZlbmNlQ29kZUVsZW1lbnQoXG5cdGZlbmNlQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuKTogYm9vbGVhbiB7XG5cdC8vIGlmICghZmVuY2VDb2RlRWxlbWVudC5jbGFzc05hbWUpXG5cdC8vIFx0cmV0dXJuIGZhbHNlO1xuXG5cdGlmIChmZW5jZUNvZGVFbGVtZW50LmNsYXNzTmFtZS5zdGFydHNXaXRoKFwibGFuZ3VhZ2UtYWQtXCIpKVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHRjb25zdCBmZW5jZVByZUVsZW1lbnQgPSBmZW5jZUNvZGVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cdGlmICghZmVuY2VQcmVFbGVtZW50KVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHRjb25zdCBmZW5jZVBhcmVudEVsZW1lbnQgPSBmZW5jZVByZUVsZW1lbnQucGFyZW50RWxlbWVudDtcblx0aWYgKCFmZW5jZVBhcmVudEVsZW1lbnQpXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGNsZWFuRmVuY2VDb2RlUGFyYW1ldGVyc0xpbmUoXG5cdGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuXHRmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZSA9IGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lLnJlcGxhY2UobmV3IFJlZ0V4cChgXls+IF0qYCksICcnKVxuXHRmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZSA9IGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lLnJlcGxhY2UobmV3IFJlZ0V4cChgXltcXGB+XStgKSwgJycpO1xuXHRmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZSArPSBcIiBcIlxuXG5cdHJldHVybiBmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZVxufVxuXG5mdW5jdGlvbiBhcHBseUZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lKFxuXHRmZW5jZUNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCxcblx0ZmVuY2VDb2RlUGFyYW1ldGVyc0xpbmU6IHN0cmluZyxcblx0Y29kZURldGVjdGluZ0NvbnRleHQ6IENvZGVEZXRlY3RpbmdDb250ZXh0LFxuKSB7XG5cdGlmICghaXNVbmRldGVjdGVkQ29kZUVsZW1lbnQoZmVuY2VDb2RlRWxlbWVudCkpXG5cdFx0cmV0dXJuO1xuXG5cdGZlbmNlQ29kZUVsZW1lbnQuc2V0QXR0cmlidXRlKFBBUkFNRVRFUlNfQVRUUklCVVRFLCBjbGVhbkZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lKGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lKSlcblx0ZmVuY2VDb2RlRWxlbWVudC5zZXRBdHRyaWJ1dGUoREVURUNUSU5HX0NPTlRFWFQsIGNvZGVEZXRlY3RpbmdDb250ZXh0KVxufVxuXG5mdW5jdGlvbiBhcHBseUZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lc0xpc3QoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRmZW5jZVNlY3Rpb25MaW5lczogQXJyYXk8c3RyaW5nPixcblx0Y29kZURldGVjdGluZ0NvbnRleHQ6IENvZGVEZXRlY3RpbmdDb250ZXh0LFxuKSB7XG5cdGNvbnN0IGZlbmNlQ29kZUVsZW1lbnRzID0gKEFycmF5LmZyb20oZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlOm5vdCguZnJvbnRtYXR0ZXIpID4gY29kZVwiKSkgYXMgQXJyYXk8SFRNTEVsZW1lbnQ+KS5maWx0ZXIoaXNGZW5jZUNvZGVFbGVtZW50KVxuXHRjb25zdCBmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZXNMaXN0ID0gZ2V0TWFya2Rvd25GZW5jZVBhcmFtZXRlcnMoZmVuY2VTZWN0aW9uTGluZXMpXG5cblx0aWYgKGZlbmNlQ29kZUVsZW1lbnRzLmxlbmd0aCAhPT0gZmVuY2VDb2RlUGFyYW1ldGVyc0xpbmVzTGlzdC5sZW5ndGgpXG5cdFx0cmV0dXJuO1xuXG5cdGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGZlbmNlQ29kZUVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcblx0XHRjb25zdCBmZW5jZUNvZGVFbGVtZW50ID0gZmVuY2VDb2RlRWxlbWVudHNbaWR4XTtcblx0XHRjb25zdCBmZW5jZUNvZGVQYXJhbWV0ZXJzTGluZSA9IGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lc0xpc3RbaWR4XTtcblx0XHRhcHBseUZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lKFxuXHRcdFx0ZmVuY2VDb2RlRWxlbWVudCxcblx0XHRcdGZlbmNlQ29kZVBhcmFtZXRlcnNMaW5lLFxuXHRcdFx0Y29kZURldGVjdGluZ0NvbnRleHQsXG5cdFx0KVxuXHR9XG59XG4iLCAiLyoqXG4gKiBUaHJvdyBhIGdpdmVuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J8bnVsbHx1bmRlZmluZWR9IFtlcnJvcl1cbiAqICAgTWF5YmUgZXJyb3IuXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBlcnJvciBpcyBudWxsfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhaWwoZXJyb3IpIHtcbiAgaWYgKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuIiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndHJvdWdoJykuUGlwZWxpbmV9IFBpcGVsaW5lXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5Db21wYXRpYmxlfSBDb21wYXRpYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZhbHVlfSBWYWx1ZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2luZGV4LmpzJykuQ29tcGlsZVJlc3VsdE1hcH0gQ29tcGlsZVJlc3VsdE1hcFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vaW5kZXguanMnKS5EYXRhfSBEYXRhXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbmRleC5qcycpLlNldHRpbmdzfSBTZXR0aW5nc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0NvbXBpbGVSZXN1bHRNYXBba2V5b2YgQ29tcGlsZVJlc3VsdE1hcF19IENvbXBpbGVSZXN1bHRzXG4gKiAgIEFjY2VwdGFibGUgcmVzdWx0cyBmcm9tIGNvbXBpbGVycy5cbiAqXG4gKiAgIFRvIHJlZ2lzdGVyIGN1c3RvbSByZXN1bHRzLCBhZGQgdGhlbSB0b1xuICogICB7QGxpbmtjb2RlIENvbXBpbGVSZXN1bHRNYXB9LlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVHJlZT1Ob2RlXVxuICogICBUaGUgbm9kZSB0aGF0IHRoZSBjb21waWxlciByZWNlaXZlcyAoZGVmYXVsdDogYE5vZGVgKS5cbiAqIEB0ZW1wbGF0ZSB7Q29tcGlsZVJlc3VsdHN9IFtSZXN1bHQ9Q29tcGlsZVJlc3VsdHNdXG4gKiAgIFRoZSB0aGluZyB0aGF0IHRoZSBjb21waWxlciB5aWVsZHMgKGRlZmF1bHQ6IGBDb21waWxlUmVzdWx0c2ApLlxuICogQGNhbGxiYWNrIENvbXBpbGVyXG4gKiAgIEEgKipjb21waWxlcioqIGhhbmRsZXMgdGhlIGNvbXBpbGluZyBvZiBhIHN5bnRheCB0cmVlIHRvIHNvbWV0aGluZyBlbHNlXG4gKiAgIChpbiBtb3N0IGNhc2VzLCB0ZXh0KSAoVHlwZVNjcmlwdCB0eXBlKS5cbiAqXG4gKiAgIEl0IGlzIHVzZWQgaW4gdGhlIHN0cmluZ2lmeSBwaGFzZSBhbmQgY2FsbGVkIHdpdGggYSB7QGxpbmtjb2RlIE5vZGV9XG4gKiAgIGFuZCB7QGxpbmtjb2RlIFZGaWxlfSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQgdG8gY29tcGlsZS5cbiAqICAgSXQgc2hvdWxkIHJldHVybiB0aGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gdHJlZSAodHlwaWNhbGx5XG4gKiAgIGBzdHJpbmdgKS5cbiAqXG4gKiAgID4gKipOb3RlKio6IHVuaWZpZWQgdHlwaWNhbGx5IGNvbXBpbGVzIGJ5IHNlcmlhbGl6aW5nOiBtb3N0IGNvbXBpbGVyc1xuICogICA+IHJldHVybiBgc3RyaW5nYCAob3IgYFVpbnQ4QXJyYXlgKS5cbiAqICAgPiBTb21lIGNvbXBpbGVycywgc3VjaCBhcyB0aGUgb25lIGNvbmZpZ3VyZWQgd2l0aFxuICogICA+IFtgcmVoeXBlLXJlYWN0YF1bcmVoeXBlLXJlYWN0XSwgcmV0dXJuIG90aGVyIHZhbHVlcyAoaW4gdGhpcyBjYXNlLCBhXG4gKiAgID4gUmVhY3QgdHJlZSkuXG4gKiAgID4gSWYgeW91XHUyMDE5cmUgdXNpbmcgYSBjb21waWxlciB0aGF0IGRvZXNuXHUyMDE5dCBzZXJpYWxpemUsIGV4cGVjdCBkaWZmZXJlbnRcbiAqICAgPiByZXN1bHQgdmFsdWVzLlxuICogICA+XG4gKiAgID4gVG8gcmVnaXN0ZXIgY3VzdG9tIHJlc3VsdHMgaW4gVHlwZVNjcmlwdCwgYWRkIHRoZW0gdG9cbiAqICAgPiB7QGxpbmtjb2RlIENvbXBpbGVSZXN1bHRNYXB9LlxuICpcbiAqICAgW3JlaHlwZS1yZWFjdF06IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWh5cGVqcy9yZWh5cGUtcmVhY3RcbiAqIEBwYXJhbSB7VHJlZX0gdHJlZVxuICogICBUcmVlIHRvIGNvbXBpbGUuXG4gKiBAcGFyYW0ge1ZGaWxlfSBmaWxlXG4gKiAgIEZpbGUgYXNzb2NpYXRlZCB3aXRoIGB0cmVlYC5cbiAqIEByZXR1cm5zIHtSZXN1bHR9XG4gKiAgIE5ldyBjb250ZW50OiBjb21waWxlZCB0ZXh0IChgc3RyaW5nYCBvciBgVWludDhBcnJheWAsIGZvciBgZmlsZS52YWx1ZWApIG9yXG4gKiAgIHNvbWV0aGluZyBlbHNlIChmb3IgYGZpbGUucmVzdWx0YCkuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IFtUcmVlPU5vZGVdXG4gKiAgIFRoZSBub2RlIHRoYXQgdGhlIHBhcnNlciB5aWVsZHMgKGRlZmF1bHQ6IGBOb2RlYClcbiAqIEBjYWxsYmFjayBQYXJzZXJcbiAqICAgQSAqKnBhcnNlcioqIGhhbmRsZXMgdGhlIHBhcnNpbmcgb2YgdGV4dCB0byBhIHN5bnRheCB0cmVlLlxuICpcbiAqICAgSXQgaXMgdXNlZCBpbiB0aGUgcGFyc2UgcGhhc2UgYW5kIGlzIGNhbGxlZCB3aXRoIGEgYHN0cmluZ2AgYW5kXG4gKiAgIHtAbGlua2NvZGUgVkZpbGV9IG9mIHRoZSBkb2N1bWVudCB0byBwYXJzZS5cbiAqICAgSXQgbXVzdCByZXR1cm4gdGhlIHN5bnRheCB0cmVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBmaWxlXG4gKiAgICh7QGxpbmtjb2RlIE5vZGV9KS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb2N1bWVudFxuICogICBEb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAqICAgRmlsZSBhc3NvY2lhdGVkIHdpdGggYGRvY3VtZW50YC5cbiAqIEByZXR1cm5zIHtUcmVlfVxuICogICBOb2RlIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gZmlsZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIFBsdWdpbjxBcnJheTxhbnk+LCBhbnksIGFueT4gfFxuICogICBQbHVnaW5UdXBsZTxBcnJheTxhbnk+LCBhbnksIGFueT4gfFxuICogICBQcmVzZXRcbiAqICl9IFBsdWdnYWJsZVxuICogICBVbmlvbiBvZiB0aGUgZGlmZmVyZW50IHdheXMgdG8gYWRkIHBsdWdpbnMgYW5kIHNldHRpbmdzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0FycmF5PFBsdWdnYWJsZT59IFBsdWdnYWJsZUxpc3RcbiAqICAgTGlzdCBvZiBwbHVnaW5zIGFuZCBwcmVzZXRzLlxuICovXG5cbi8vIE5vdGU6IHdlIGNhblx1MjAxOXQgdXNlIGBjYWxsYmFja2AgeWV0IGFzIGl0IG1lc3NlcyB1cCBgdGhpc2A6XG4vLyAgPGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTUxOTc+LlxuLyoqXG4gKiBAdGVtcGxhdGUge0FycmF5PHVua25vd24+fSBbUGx1Z2luUGFyYW1ldGVycz1bXV1cbiAqICAgQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgcGx1Z2luIChkZWZhdWx0OiBgW11gLCB0aGUgZW1wdHkgdHVwbGUpLlxuICogQHRlbXBsYXRlIHtOb2RlIHwgc3RyaW5nIHwgdW5kZWZpbmVkfSBbSW5wdXQ9Tm9kZV1cbiAqICAgVmFsdWUgdGhhdCBpcyBleHBlY3RlZCBhcyBpbnB1dCAoZGVmYXVsdDogYE5vZGVgKS5cbiAqXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHJldHVybnMgYSB7QGxpbmtjb2RlIFRyYW5zZm9ybWVyfSwgdGhpc1xuICogICAgICAgc2hvdWxkIGJlIHRoZSBub2RlIGl0IGV4cGVjdHMuXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHNldHMgYSB7QGxpbmtjb2RlIFBhcnNlcn0sIHRoaXMgc2hvdWxkIGJlXG4gKiAgICAgICBgc3RyaW5nYC5cbiAqICAgKiAgIElmIHRoZSBwbHVnaW4gc2V0cyBhIHtAbGlua2NvZGUgQ29tcGlsZXJ9LCB0aGlzIHNob3VsZCBiZSB0aGVcbiAqICAgICAgIG5vZGUgaXQgZXhwZWN0cy5cbiAqIEB0ZW1wbGF0ZSBbT3V0cHV0PUlucHV0XVxuICogICBWYWx1ZSB0aGF0IGlzIHlpZWxkZWQgYXMgb3V0cHV0IChkZWZhdWx0OiBgSW5wdXRgKS5cbiAqXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHJldHVybnMgYSB7QGxpbmtjb2RlIFRyYW5zZm9ybWVyfSwgdGhpc1xuICogICAgICAgc2hvdWxkIGJlIHRoZSBub2RlIHRoYXQgdGhhdCB5aWVsZHMuXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHNldHMgYSB7QGxpbmtjb2RlIFBhcnNlcn0sIHRoaXMgc2hvdWxkIGJlIHRoZVxuICogICAgICAgbm9kZSB0aGF0IGl0IHlpZWxkcy5cbiAqICAgKiAgIElmIHRoZSBwbHVnaW4gc2V0cyBhIHtAbGlua2NvZGUgQ29tcGlsZXJ9LCB0aGlzIHNob3VsZCBiZVxuICogICAgICAgcmVzdWx0IGl0IHlpZWxkcy5cbiAqIEB0eXBlZGVmIHsoXG4gKiAgICh0aGlzOiBQcm9jZXNzb3IsIC4uLnBhcmFtZXRlcnM6IFBsdWdpblBhcmFtZXRlcnMpID0+XG4gKiAgICAgSW5wdXQgZXh0ZW5kcyBzdHJpbmcgPyAvLyBQYXJzZXIuXG4gKiAgICAgICAgT3V0cHV0IGV4dGVuZHMgTm9kZSB8IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCB8IHZvaWQgOiBuZXZlciA6XG4gKiAgICAgT3V0cHV0IGV4dGVuZHMgQ29tcGlsZVJlc3VsdHMgPyAvLyBDb21waWxlci5cbiAqICAgICAgICBJbnB1dCBleHRlbmRzIE5vZGUgfCB1bmRlZmluZWQgPyB1bmRlZmluZWQgfCB2b2lkIDogbmV2ZXIgOlxuICogICAgIFRyYW5zZm9ybWVyPFxuICogICAgICAgSW5wdXQgZXh0ZW5kcyBOb2RlID8gSW5wdXQgOiBOb2RlLFxuICogICAgICAgT3V0cHV0IGV4dGVuZHMgTm9kZSA/IE91dHB1dCA6IE5vZGVcbiAqICAgICA+IHwgdW5kZWZpbmVkIHwgdm9pZFxuICogKX0gUGx1Z2luXG4gKiAgIFNpbmdsZSBwbHVnaW4uXG4gKlxuICogICBQbHVnaW5zIGNvbmZpZ3VyZSB0aGUgcHJvY2Vzc29ycyB0aGV5IGFyZSBhcHBsaWVkIG9uIGluIHRoZSBmb2xsb3dpbmdcbiAqICAgd2F5czpcbiAqXG4gKiAgICogICB0aGV5IGNoYW5nZSB0aGUgcHJvY2Vzc29yLCBzdWNoIGFzIHRoZSBwYXJzZXIsIHRoZSBjb21waWxlciwgb3IgYnlcbiAqICAgICAgIGNvbmZpZ3VyaW5nIGRhdGFcbiAqICAgKiAgIHRoZXkgc3BlY2lmeSBob3cgdG8gaGFuZGxlIHRyZWVzIGFuZCBmaWxlc1xuICpcbiAqICAgSW4gcHJhY3RpY2UsIHRoZXkgYXJlIGZ1bmN0aW9ucyB0aGF0IGNhbiByZWNlaXZlIG9wdGlvbnMgYW5kIGNvbmZpZ3VyZSB0aGVcbiAqICAgcHJvY2Vzc29yIChgdGhpc2ApLlxuICpcbiAqICAgPiAqKk5vdGUqKjogcGx1Z2lucyBhcmUgY2FsbGVkIHdoZW4gdGhlIHByb2Nlc3NvciBpcyAqZnJvemVuKiwgbm90IHdoZW5cbiAqICAgPiB0aGV5IGFyZSBhcHBsaWVkLlxuICovXG5cbi8qKlxuICogVHVwbGUgb2YgYSBwbHVnaW4gYW5kIGl0cyBjb25maWd1cmF0aW9uLlxuICpcbiAqIFRoZSBmaXJzdCBpdGVtIGlzIGEgcGx1Z2luLCB0aGUgcmVzdCBhcmUgaXRzIHBhcmFtZXRlcnMuXG4gKlxuICogQHRlbXBsYXRlIHtBcnJheTx1bmtub3duPn0gW1R1cGxlUGFyYW1ldGVycz1bXV1cbiAqICAgQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgcGx1Z2luIChkZWZhdWx0OiBgW11gLCB0aGUgZW1wdHkgdHVwbGUpLlxuICogQHRlbXBsYXRlIHtOb2RlIHwgc3RyaW5nIHwgdW5kZWZpbmVkfSBbSW5wdXQ9dW5kZWZpbmVkXVxuICogICBWYWx1ZSB0aGF0IGlzIGV4cGVjdGVkIGFzIGlucHV0IChvcHRpb25hbCkuXG4gKlxuICogICAqICAgSWYgdGhlIHBsdWdpbiByZXR1cm5zIGEge0BsaW5rY29kZSBUcmFuc2Zvcm1lcn0sIHRoaXNcbiAqICAgICAgIHNob3VsZCBiZSB0aGUgbm9kZSBpdCBleHBlY3RzLlxuICogICAqICAgSWYgdGhlIHBsdWdpbiBzZXRzIGEge0BsaW5rY29kZSBQYXJzZXJ9LCB0aGlzIHNob3VsZCBiZVxuICogICAgICAgYHN0cmluZ2AuXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHNldHMgYSB7QGxpbmtjb2RlIENvbXBpbGVyfSwgdGhpcyBzaG91bGQgYmUgdGhlXG4gKiAgICAgICBub2RlIGl0IGV4cGVjdHMuXG4gKiBAdGVtcGxhdGUgW091dHB1dD11bmRlZmluZWRdIChvcHRpb25hbCkuXG4gKiAgIFZhbHVlIHRoYXQgaXMgeWllbGRlZCBhcyBvdXRwdXQuXG4gKlxuICogICAqICAgSWYgdGhlIHBsdWdpbiByZXR1cm5zIGEge0BsaW5rY29kZSBUcmFuc2Zvcm1lcn0sIHRoaXNcbiAqICAgICAgIHNob3VsZCBiZSB0aGUgbm9kZSB0aGF0IHRoYXQgeWllbGRzLlxuICogICAqICAgSWYgdGhlIHBsdWdpbiBzZXRzIGEge0BsaW5rY29kZSBQYXJzZXJ9LCB0aGlzIHNob3VsZCBiZSB0aGVcbiAqICAgICAgIG5vZGUgdGhhdCBpdCB5aWVsZHMuXG4gKiAgICogICBJZiB0aGUgcGx1Z2luIHNldHMgYSB7QGxpbmtjb2RlIENvbXBpbGVyfSwgdGhpcyBzaG91bGQgYmVcbiAqICAgICAgIHJlc3VsdCBpdCB5aWVsZHMuXG4gKiBAdHlwZWRlZiB7KFxuICogICBbXG4gKiAgICAgcGx1Z2luOiBQbHVnaW48VHVwbGVQYXJhbWV0ZXJzLCBJbnB1dCwgT3V0cHV0PixcbiAqICAgICAuLi5wYXJhbWV0ZXJzOiBUdXBsZVBhcmFtZXRlcnNcbiAqICAgXVxuICogKX0gUGx1Z2luVHVwbGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIFByZXNldFxuICogICBTaGFyYWJsZSBjb25maWd1cmF0aW9uLlxuICpcbiAqICAgVGhleSBjYW4gY29udGFpbiBwbHVnaW5zIGFuZCBzZXR0aW5ncy5cbiAqIEBwcm9wZXJ0eSB7UGx1Z2dhYmxlTGlzdCB8IHVuZGVmaW5lZH0gW3BsdWdpbnNdXG4gKiAgIExpc3Qgb2YgcGx1Z2lucyBhbmQgcHJlc2V0cyAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtTZXR0aW5ncyB8IHVuZGVmaW5lZH0gW3NldHRpbmdzXVxuICogICBTaGFyZWQgc2V0dGluZ3MgZm9yIHBhcnNlcnMgYW5kIGNvbXBpbGVycyAob3B0aW9uYWwpLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtWRmlsZX0gW0ZpbGU9VkZpbGVdXG4gKiAgIFRoZSBmaWxlIHRoYXQgdGhlIGNhbGxiYWNrIHJlY2VpdmVzIChkZWZhdWx0OiBgVkZpbGVgKS5cbiAqIEBjYWxsYmFjayBQcm9jZXNzQ2FsbGJhY2tcbiAqICAgQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHByb2Nlc3MgaXMgZG9uZS5cbiAqXG4gKiAgIENhbGxlZCB3aXRoIGVpdGhlciBhbiBlcnJvciBvciBhIHJlc3VsdC5cbiAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IFtlcnJvcl1cbiAqICAgRmF0YWwgZXJyb3IgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7RmlsZSB8IHVuZGVmaW5lZH0gW2ZpbGVdXG4gKiAgIFByb2Nlc3NlZCBmaWxlIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVHJlZT1Ob2RlXVxuICogICBUaGUgdHJlZSB0aGF0IHRoZSBjYWxsYmFjayByZWNlaXZlcyAoZGVmYXVsdDogYE5vZGVgKS5cbiAqIEBjYWxsYmFjayBSdW5DYWxsYmFja1xuICogICBDYWxsYmFjayBjYWxsZWQgd2hlbiB0cmFuc2Zvcm1lcnMgYXJlIGRvbmUuXG4gKlxuICogICBDYWxsZWQgd2l0aCBlaXRoZXIgYW4gZXJyb3Igb3IgcmVzdWx0cy5cbiAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IFtlcnJvcl1cbiAqICAgRmF0YWwgZXJyb3IgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7VHJlZSB8IHVuZGVmaW5lZH0gW3RyZWVdXG4gKiAgIFRyYW5zZm9ybWVkIHRyZWUgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7VkZpbGUgfCB1bmRlZmluZWR9IFtmaWxlXVxuICogICBGaWxlIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbT3V0cHV0PU5vZGVdXG4gKiAgIE5vZGUgdHlwZSB0aGF0IHRoZSB0cmFuc2Zvcm1lciB5aWVsZHMgKGRlZmF1bHQ6IGBOb2RlYCkuXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtQ2FsbGJhY2tcbiAqICAgQ2FsbGJhY2sgcGFzc2VkIHRvIHRyYW5zZm9ybXMuXG4gKlxuICogICBJZiB0aGUgc2lnbmF0dXJlIG9mIGEgYHRyYW5zZm9ybWVyYCBhY2NlcHRzIGEgdGhpcmQgYXJndW1lbnQsIHRoZVxuICogICB0cmFuc2Zvcm1lciBtYXkgcGVyZm9ybSBhc3luY2hyb25vdXMgb3BlcmF0aW9ucywgYW5kIG11c3QgY2FsbCBpdC5cbiAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IFtlcnJvcl1cbiAqICAgRmF0YWwgZXJyb3IgdG8gc3RvcCB0aGUgcHJvY2VzcyAob3B0aW9uYWwpLlxuICogQHBhcmFtIHtPdXRwdXQgfCB1bmRlZmluZWR9IFt0cmVlXVxuICogICBOZXcsIGNoYW5nZWQsIHRyZWUgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7VkZpbGUgfCB1bmRlZmluZWR9IFtmaWxlXVxuICogICBOZXcsIGNoYW5nZWQsIGZpbGUgKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IFtJbnB1dD1Ob2RlXVxuICogICBOb2RlIHR5cGUgdGhhdCB0aGUgdHJhbnNmb3JtZXIgZXhwZWN0cyAoZGVmYXVsdDogYE5vZGVgKS5cbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gW091dHB1dD1JbnB1dF1cbiAqICAgTm9kZSB0eXBlIHRoYXQgdGhlIHRyYW5zZm9ybWVyIHlpZWxkcyAoZGVmYXVsdDogYElucHV0YCkuXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtZXJcbiAqICAgVHJhbnNmb3JtZXJzIGhhbmRsZSBzeW50YXggdHJlZXMgYW5kIGZpbGVzLlxuICpcbiAqICAgVGhleSBhcmUgZnVuY3Rpb25zIHRoYXQgYXJlIGNhbGxlZCBlYWNoIHRpbWUgYSBzeW50YXggdHJlZSBhbmQgZmlsZSBhcmVcbiAqICAgcGFzc2VkIHRocm91Z2ggdGhlIHJ1biBwaGFzZS5cbiAqICAgV2hlbiBhbiBlcnJvciBvY2N1cnMgaW4gdGhlbSAoZWl0aGVyIGJlY2F1c2UgaXRcdTIwMTlzIHRocm93biwgcmV0dXJuZWQsXG4gKiAgIHJlamVjdGVkLCBvciBwYXNzZWQgdG8gYG5leHRgKSwgdGhlIHByb2Nlc3Mgc3RvcHMuXG4gKlxuICogICBUaGUgcnVuIHBoYXNlIGlzIGhhbmRsZWQgYnkgW2B0cm91Z2hgXVt0cm91Z2hdLCBzZWUgaXRzIGRvY3VtZW50YXRpb24gZm9yXG4gKiAgIHRoZSBleGFjdCBzZW1hbnRpY3Mgb2YgdGhlc2UgZnVuY3Rpb25zLlxuICpcbiAqICAgPiAqKk5vdGUqKjogeW91IHNob3VsZCBsaWtlbHkgaWdub3JlIGBuZXh0YDogZG9uXHUyMDE5dCBhY2NlcHQgaXQuXG4gKiAgID4gaXQgc3VwcG9ydHMgY2FsbGJhY2stc3R5bGUgYXN5bmMgd29yay5cbiAqICAgPiBCdXQgcHJvbWlzZXMgYXJlIGxpa2VseSBlYXNpZXIgdG8gcmVhc29uIGFib3V0LlxuICpcbiAqICAgW3Ryb3VnaF06IGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vdHJvdWdoI2Z1bmN0aW9uLWZuaW5wdXQtbmV4dFxuICogQHBhcmFtIHtJbnB1dH0gdHJlZVxuICogICBUcmVlIHRvIGhhbmRsZS5cbiAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAqICAgRmlsZSB0byBoYW5kbGUuXG4gKiBAcGFyYW0ge1RyYW5zZm9ybUNhbGxiYWNrPE91dHB1dD59IG5leHRcbiAqICAgQ2FsbGJhY2suXG4gKiBAcmV0dXJucyB7KFxuICogICBQcm9taXNlPE91dHB1dCB8IHVuZGVmaW5lZCB8IHZvaWQ+IHxcbiAqICAgUHJvbWlzZTxuZXZlcj4gfCAvLyBGb3Igc29tZSByZWFzb24gdGhpcyBpcyBuZWVkZWQgc2VwYXJhdGVseS5cbiAqICAgT3V0cHV0IHxcbiAqICAgRXJyb3IgfFxuICogICB1bmRlZmluZWQgfFxuICogICB2b2lkXG4gKiApfVxuICogICBJZiB5b3UgYWNjZXB0IGBuZXh0YCwgbm90aGluZy5cbiAqICAgT3RoZXJ3aXNlOlxuICpcbiAqICAgKiAgIGBFcnJvcmAgXHUyMDE0IGZhdGFsIGVycm9yIHRvIHN0b3AgdGhlIHByb2Nlc3NcbiAqICAgKiAgIGBQcm9taXNlPHVuZGVmaW5lZD5gIG9yIGB1bmRlZmluZWRgIFx1MjAxNCB0aGUgbmV4dCB0cmFuc2Zvcm1lciBrZWVwcyB1c2luZ1xuICogICAgICAgc2FtZSB0cmVlXG4gKiAgICogICBgUHJvbWlzZTxOb2RlPmAgb3IgYE5vZGVgIFx1MjAxNCBuZXcsIGNoYW5nZWQsIHRyZWVcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Tm9kZSB8IHVuZGVmaW5lZH0gUGFyc2VUcmVlXG4gKiAgIE91dHB1dCBvZiBgcGFyc2VgLlxuICogQHRlbXBsYXRlIHtOb2RlIHwgdW5kZWZpbmVkfSBIZWFkVHJlZVxuICogICBJbnB1dCBmb3IgYHJ1bmAuXG4gKiBAdGVtcGxhdGUge05vZGUgfCB1bmRlZmluZWR9IFRhaWxUcmVlXG4gKiAgIE91dHB1dCBmb3IgYHJ1bmAuXG4gKiBAdGVtcGxhdGUge05vZGUgfCB1bmRlZmluZWR9IENvbXBpbGVUcmVlXG4gKiAgIElucHV0IG9mIGBzdHJpbmdpZnlgLlxuICogQHRlbXBsYXRlIHtDb21waWxlUmVzdWx0cyB8IHVuZGVmaW5lZH0gQ29tcGlsZVJlc3VsdFxuICogICBPdXRwdXQgb2YgYHN0cmluZ2lmeWAuXG4gKiBAdGVtcGxhdGUge05vZGUgfCBzdHJpbmcgfCB1bmRlZmluZWR9IElucHV0XG4gKiAgIElucHV0IG9mIHBsdWdpbi5cbiAqIEB0ZW1wbGF0ZSBPdXRwdXRcbiAqICAgT3V0cHV0IG9mIHBsdWdpbiAob3B0aW9uYWwpLlxuICogQHR5cGVkZWYgeyhcbiAqICAgSW5wdXQgZXh0ZW5kcyBzdHJpbmdcbiAqICAgICA/IE91dHB1dCBleHRlbmRzIE5vZGUgfCB1bmRlZmluZWRcbiAqICAgICAgID8gLy8gUGFyc2VyLlxuICogICAgICAgICBQcm9jZXNzb3I8XG4gKiAgICAgICAgICAgT3V0cHV0IGV4dGVuZHMgdW5kZWZpbmVkID8gUGFyc2VUcmVlIDogT3V0cHV0LFxuICogICAgICAgICAgIEhlYWRUcmVlLFxuICogICAgICAgICAgIFRhaWxUcmVlLFxuICogICAgICAgICAgIENvbXBpbGVUcmVlLFxuICogICAgICAgICAgIENvbXBpbGVSZXN1bHRcbiAqICAgICAgICAgPlxuICogICAgICAgOiAvLyBVbmtub3duLlxuICogICAgICAgICBQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0PlxuICogICAgIDogT3V0cHV0IGV4dGVuZHMgQ29tcGlsZVJlc3VsdHNcbiAqICAgICA/IElucHV0IGV4dGVuZHMgTm9kZSB8IHVuZGVmaW5lZFxuICogICAgICAgPyAvLyBDb21waWxlci5cbiAqICAgICAgICAgUHJvY2Vzc29yPFxuICogICAgICAgICAgIFBhcnNlVHJlZSxcbiAqICAgICAgICAgICBIZWFkVHJlZSxcbiAqICAgICAgICAgICBUYWlsVHJlZSxcbiAqICAgICAgICAgICBJbnB1dCBleHRlbmRzIHVuZGVmaW5lZCA/IENvbXBpbGVUcmVlIDogSW5wdXQsXG4gKiAgICAgICAgICAgT3V0cHV0IGV4dGVuZHMgdW5kZWZpbmVkID8gQ29tcGlsZVJlc3VsdCA6IE91dHB1dFxuICogICAgICAgICA+XG4gKiAgICAgICA6IC8vIFVua25vd24uXG4gKiAgICAgICAgIFByb2Nlc3NvcjxQYXJzZVRyZWUsIEhlYWRUcmVlLCBUYWlsVHJlZSwgQ29tcGlsZVRyZWUsIENvbXBpbGVSZXN1bHQ+XG4gKiAgICAgOiBJbnB1dCBleHRlbmRzIE5vZGUgfCB1bmRlZmluZWRcbiAqICAgICA/IE91dHB1dCBleHRlbmRzIE5vZGUgfCB1bmRlZmluZWRcbiAqICAgICAgID8gLy8gVHJhbnNmb3JtLlxuICogICAgICAgICBQcm9jZXNzb3I8XG4gKiAgICAgICAgICAgUGFyc2VUcmVlLFxuICogICAgICAgICAgIEhlYWRUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gSW5wdXQgOiBIZWFkVHJlZSxcbiAqICAgICAgICAgICBPdXRwdXQgZXh0ZW5kcyB1bmRlZmluZWQgPyBUYWlsVHJlZSA6IE91dHB1dCxcbiAqICAgICAgICAgICBDb21waWxlVHJlZSxcbiAqICAgICAgICAgICBDb21waWxlUmVzdWx0XG4gKiAgICAgICAgID5cbiAqICAgICAgIDogLy8gVW5rbm93bi5cbiAqICAgICAgICAgUHJvY2Vzc29yPFBhcnNlVHJlZSwgSGVhZFRyZWUsIFRhaWxUcmVlLCBDb21waWxlVHJlZSwgQ29tcGlsZVJlc3VsdD5cbiAqICAgICA6IC8vIFVua25vd24uXG4gKiAgICAgICBQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0PlxuICogKX0gVXNlUGx1Z2luXG4gKiAgIENyZWF0ZSBhIHByb2Nlc3NvciBiYXNlZCBvbiB0aGUgaW5wdXQvb3V0cHV0IG9mIGEge0BsaW5rIFBsdWdpbiBwbHVnaW59LlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtDb21waWxlUmVzdWx0cyB8IHVuZGVmaW5lZH0gUmVzdWx0XG4gKiAgIE5vZGUgdHlwZSB0aGF0IHRoZSB0cmFuc2Zvcm1lciB5aWVsZHMuXG4gKiBAdHlwZWRlZiB7KFxuICogICBSZXN1bHQgZXh0ZW5kcyBWYWx1ZSB8IHVuZGVmaW5lZCA/XG4gKiAgICAgVkZpbGUgOlxuICogICAgIFZGaWxlICYge3Jlc3VsdDogUmVzdWx0fVxuICogICApfSBWRmlsZVdpdGhPdXRwdXRcbiAqICAgVHlwZSB0byBnZW5lcmF0ZSBhIHtAbGlua2NvZGUgVkZpbGV9IGNvcnJlc3BvbmRpbmcgdG8gYSBjb21waWxlciByZXN1bHQuXG4gKlxuICogICBJZiBhIHJlc3VsdCB0aGF0IGlzIG5vdCBhY2NlcHRhYmxlIG9uIGEgYFZGaWxlYCBpcyB1c2VkLCB0aGF0IHdpbGxcbiAqICAgYmUgc3RvcmVkIG9uIHRoZSBgcmVzdWx0YCBmaWVsZCBvZiB7QGxpbmtjb2RlIFZGaWxlfS5cbiAqL1xuXG5pbXBvcnQge2JhaWx9IGZyb20gJ2JhaWwnXG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCdcbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQgaXNQbGFpbk9iaiBmcm9tICdpcy1wbGFpbi1vYmonXG5pbXBvcnQge3Ryb3VnaH0gZnJvbSAndHJvdWdoJ1xuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5pbXBvcnQge0NhbGxhYmxlSW5zdGFuY2V9IGZyb20gJy4vY2FsbGFibGUtaW5zdGFuY2UuanMnXG5cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBkcm9wIGBDb21waWxlcmAsIGBQYXJzZXJgOiBwcmVmZXIgbG93ZXJjYXNlLlxuXG4vLyBUbyBkbzogd2UgY291bGQgc3RhcnQgeWllbGRpbmcgYG5ldmVyYCBpbiBUUyB3aGVuIGEgcGFyc2VyIGlzIG1pc3NpbmcgYW5kXG4vLyBgcGFyc2VgIGlzIGNhbGxlZC5cbi8vIEN1cnJlbnRseSwgd2UgYWxsb3cgZGlyZWN0bHkgc2V0dGluZyBgcHJvY2Vzc29yLnBhcnNlcmAsIHdoaWNoIGlzIHVudHlwZWQuXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlIHwgdW5kZWZpbmVkfSBbUGFyc2VUcmVlPXVuZGVmaW5lZF1cbiAqICAgT3V0cHV0IG9mIGBwYXJzZWAgKG9wdGlvbmFsKS5cbiAqIEB0ZW1wbGF0ZSB7Tm9kZSB8IHVuZGVmaW5lZH0gW0hlYWRUcmVlPXVuZGVmaW5lZF1cbiAqICAgSW5wdXQgZm9yIGBydW5gIChvcHRpb25hbCkuXG4gKiBAdGVtcGxhdGUge05vZGUgfCB1bmRlZmluZWR9IFtUYWlsVHJlZT11bmRlZmluZWRdXG4gKiAgIE91dHB1dCBmb3IgYHJ1bmAgKG9wdGlvbmFsKS5cbiAqIEB0ZW1wbGF0ZSB7Tm9kZSB8IHVuZGVmaW5lZH0gW0NvbXBpbGVUcmVlPXVuZGVmaW5lZF1cbiAqICAgSW5wdXQgb2YgYHN0cmluZ2lmeWAgKG9wdGlvbmFsKS5cbiAqIEB0ZW1wbGF0ZSB7Q29tcGlsZVJlc3VsdHMgfCB1bmRlZmluZWR9IFtDb21waWxlUmVzdWx0PXVuZGVmaW5lZF1cbiAqICAgT3V0cHV0IG9mIGBzdHJpbmdpZnlgIChvcHRpb25hbCkuXG4gKiBAZXh0ZW5kcyB7Q2FsbGFibGVJbnN0YW5jZTxbXSwgUHJvY2Vzc29yPFBhcnNlVHJlZSwgSGVhZFRyZWUsIFRhaWxUcmVlLCBDb21waWxlVHJlZSwgQ29tcGlsZVJlc3VsdD4+fVxuICovXG5leHBvcnQgY2xhc3MgUHJvY2Vzc29yIGV4dGVuZHMgQ2FsbGFibGVJbnN0YW5jZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBwcm9jZXNzb3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBJZiBgUHJvY2Vzc29yKClgIGlzIGNhbGxlZCAody9vIG5ldyksIGBjb3B5YCBpcyBjYWxsZWQgaW5zdGVhZC5cbiAgICBzdXBlcignY29weScpXG5cbiAgICAvKipcbiAgICAgKiBDb21waWxlciB0byB1c2UgKGRlcHJlY2F0ZWQpLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiAgIFVzZSBgY29tcGlsZXJgIGluc3RlYWQuXG4gICAgICogQHR5cGUgeyhcbiAgICAgKiAgIENvbXBpbGVyPFxuICAgICAqICAgICBDb21waWxlVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBDb21waWxlVHJlZSxcbiAgICAgKiAgICAgQ29tcGlsZVJlc3VsdCBleHRlbmRzIHVuZGVmaW5lZCA/IENvbXBpbGVSZXN1bHRzIDogQ29tcGlsZVJlc3VsdFxuICAgICAqICAgPiB8XG4gICAgICogICB1bmRlZmluZWRcbiAgICAgKiApfVxuICAgICAqL1xuICAgIHRoaXMuQ29tcGlsZXIgPSB1bmRlZmluZWRcblxuICAgIC8qKlxuICAgICAqIFBhcnNlciB0byB1c2UgKGRlcHJlY2F0ZWQpLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiAgIFVzZSBgcGFyc2VyYCBpbnN0ZWFkLlxuICAgICAqIEB0eXBlIHsoXG4gICAgICogICBQYXJzZXI8UGFyc2VUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFBhcnNlVHJlZT4gfFxuICAgICAqICAgdW5kZWZpbmVkXG4gICAgICogKX1cbiAgICAgKi9cbiAgICB0aGlzLlBhcnNlciA9IHVuZGVmaW5lZFxuXG4gICAgLy8gTm90ZTogdGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS5cbiAgICAvLyBIb3dldmVyLCB0aGV5IGFyZSBuZWVkZWQgZm9yIHRlc3RzLCBhbmQgVFNDIGdlbmVyYXRlcyBhbiB1bnR5cGVkXG4gICAgLy8gYHByaXZhdGUgZnJlZXplSW5kZXhgIGZpZWxkIGZvciwgd2hpY2ggdHJpcHMgYHR5cGUtY292ZXJhZ2VgIHVwLlxuICAgIC8vIEluc3RlYWQsIHdlIHVzZSBgQGRlcHJlY2F0ZWRgIHRvIHZpc3VhbGl6ZSB0aGF0IHRoZXkgc2hvdWxkblx1MjAxOXQgYmUgdXNlZC5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBsaXN0IG9mIGNvbmZpZ3VyZWQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogICBUaGlzIGlzIGEgcHJpdmF0ZSBpbnRlcm5hbCBwcm9wZXJ0eSBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAqIEB0eXBlIHtBcnJheTxQbHVnaW5UdXBsZTxBcnJheTx1bmtub3duPj4+fVxuICAgICAqL1xuICAgIHRoaXMuYXR0YWNoZXJzID0gW11cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGVyIHRvIHVzZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHsoXG4gICAgICogICBDb21waWxlcjxcbiAgICAgKiAgICAgQ29tcGlsZVRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogQ29tcGlsZVRyZWUsXG4gICAgICogICAgIENvbXBpbGVSZXN1bHQgZXh0ZW5kcyB1bmRlZmluZWQgPyBDb21waWxlUmVzdWx0cyA6IENvbXBpbGVSZXN1bHRcbiAgICAgKiAgID4gfFxuICAgICAqICAgdW5kZWZpbmVkXG4gICAgICogKX1cbiAgICAgKi9cbiAgICB0aGlzLmNvbXBpbGVyID0gdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBzdGF0ZSB0byB0cmFjayB3aGVyZSB3ZSBhcmUgd2hpbGUgZnJlZXppbmcuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqICAgVGhpcyBpcyBhIHByaXZhdGUgaW50ZXJuYWwgcHJvcGVydHkgYW5kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZnJlZXplSW5kZXggPSAtMVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgc3RhdGUgdG8gdHJhY2sgd2hldGhlciB3ZVx1MjAxOXJlIGZyb3plbi5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogICBUaGlzIGlzIGEgcHJpdmF0ZSBpbnRlcm5hbCBwcm9wZXJ0eSBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuZnJvemVuID0gdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogICBUaGlzIGlzIGEgcHJpdmF0ZSBpbnRlcm5hbCBwcm9wZXJ0eSBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAqIEB0eXBlIHtEYXRhfVxuICAgICAqL1xuICAgIHRoaXMubmFtZXNwYWNlID0ge31cblxuICAgIC8qKlxuICAgICAqIFBhcnNlciB0byB1c2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7KFxuICAgICAqICAgUGFyc2VyPFBhcnNlVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBQYXJzZVRyZWU+IHxcbiAgICAgKiAgIHVuZGVmaW5lZFxuICAgICAqICl9XG4gICAgICovXG4gICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWRcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGxpc3Qgb2YgY29uZmlndXJlZCB0cmFuc2Zvcm1lcnMuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqICAgVGhpcyBpcyBhIHByaXZhdGUgaW50ZXJuYWwgcHJvcGVydHkgYW5kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAgICAgKiBAdHlwZSB7UGlwZWxpbmV9XG4gICAgICovXG4gICAgdGhpcy50cmFuc2Zvcm1lcnMgPSB0cm91Z2goKVxuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgYSBwcm9jZXNzb3IuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqICAgVGhpcyBpcyBhIHByaXZhdGUgaW50ZXJuYWwgbWV0aG9kIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn1cbiAgICogICBOZXcgKnVuZnJvemVuKiBwcm9jZXNzb3IgKHtAbGlua2NvZGUgUHJvY2Vzc29yfSkgdGhhdCBpc1xuICAgKiAgIGNvbmZpZ3VyZWQgdG8gd29yayB0aGUgc2FtZSBhcyBpdHMgYW5jZXN0b3IuXG4gICAqICAgV2hlbiB0aGUgZGVzY2VuZGFudCBwcm9jZXNzb3IgaXMgY29uZmlndXJlZCBpbiB0aGUgZnV0dXJlIGl0IGRvZXMgbm90XG4gICAqICAgYWZmZWN0IHRoZSBhbmNlc3RyYWwgcHJvY2Vzc29yLlxuICAgKi9cbiAgY29weSgpIHtcbiAgICAvLyBDYXN0IGFzIHRoZSB0eXBlIHBhcmFtZXRlcnMgd2lsbCBiZSB0aGUgc2FtZSBhZnRlciBhdHRhY2hpbmcuXG4gICAgY29uc3QgZGVzdGluYXRpb24gPVxuICAgICAgLyoqIEB0eXBlIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn0gKi8gKFxuICAgICAgICBuZXcgUHJvY2Vzc29yKClcbiAgICAgIClcbiAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCB0aGlzLmF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGF0dGFjaGVyID0gdGhpcy5hdHRhY2hlcnNbaW5kZXhdXG4gICAgICBkZXN0aW5hdGlvbi51c2UoLi4uYXR0YWNoZXIpXG4gICAgfVxuXG4gICAgZGVzdGluYXRpb24uZGF0YShleHRlbmQodHJ1ZSwge30sIHRoaXMubmFtZXNwYWNlKSlcblxuICAgIHJldHVybiBkZXN0aW5hdGlvblxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgcHJvY2Vzc29yIHdpdGggaW5mbyBhdmFpbGFibGUgdG8gYWxsIHBsdWdpbnMuXG4gICAqIEluZm9ybWF0aW9uIGlzIHN0b3JlZCBpbiBhbiBvYmplY3QuXG4gICAqXG4gICAqIFR5cGljYWxseSwgb3B0aW9ucyBjYW4gYmUgZ2l2ZW4gdG8gYSBzcGVjaWZpYyBwbHVnaW4sIGJ1dCBzb21ldGltZXMgaXRcbiAgICogbWFrZXMgc2Vuc2UgdG8gaGF2ZSBpbmZvcm1hdGlvbiBzaGFyZWQgd2l0aCBzZXZlcmFsIHBsdWdpbnMuXG4gICAqIEZvciBleGFtcGxlLCBhIGxpc3Qgb2YgSFRNTCBlbGVtZW50cyB0aGF0IGFyZSBzZWxmLWNsb3NpbmcsIHdoaWNoIGlzXG4gICAqIG5lZWRlZCBkdXJpbmcgYWxsIHBoYXNlcy5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogc2V0dGluZyBpbmZvcm1hdGlvbiBjYW5ub3Qgb2NjdXIgb24gKmZyb3plbiogcHJvY2Vzc29ycy5cbiAgICogPiBDYWxsIHRoZSBwcm9jZXNzb3IgZmlyc3QgdG8gY3JlYXRlIGEgbmV3IHVuZnJvemVuIHByb2Nlc3Nvci5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdG8gcmVnaXN0ZXIgY3VzdG9tIGRhdGEgaW4gVHlwZVNjcmlwdCwgYXVnbWVudCB0aGVcbiAgICogPiB7QGxpbmtjb2RlIERhdGF9IGludGVyZmFjZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBUaGlzIGV4YW1wbGUgc2hvdyBob3cgdG8gZ2V0IGFuZCBzZXQgaW5mbzpcbiAgICpcbiAgICogICBgYGBqc1xuICAgKiAgIGltcG9ydCB7dW5pZmllZH0gZnJvbSAndW5pZmllZCdcbiAgICpcbiAgICogICBjb25zdCBwcm9jZXNzb3IgPSB1bmlmaWVkKCkuZGF0YSgnYWxwaGEnLCAnYnJhdm8nKVxuICAgKlxuICAgKiAgIHByb2Nlc3Nvci5kYXRhKCdhbHBoYScpIC8vID0+ICdicmF2bydcbiAgICpcbiAgICogICBwcm9jZXNzb3IuZGF0YSgpIC8vID0+IHthbHBoYTogJ2JyYXZvJ31cbiAgICpcbiAgICogICBwcm9jZXNzb3IuZGF0YSh7Y2hhcmxpZTogJ2RlbHRhJ30pXG4gICAqXG4gICAqICAgcHJvY2Vzc29yLmRhdGEoKSAvLyA9PiB7Y2hhcmxpZTogJ2RlbHRhJ31cbiAgICogICBgYGBcbiAgICpcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBEYXRhfSBLZXlcbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEByZXR1cm5zIHtEYXRhfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtEYXRhfSBkYXRhc2V0XG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7S2V5fSBrZXlcbiAgICogQHJldHVybnMge0RhdGFbS2V5XX1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7S2V5fSBrZXlcbiAgICogQHBhcmFtIHtEYXRhW0tleV19IHZhbHVlXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn1cbiAgICpcbiAgICogQHBhcmFtIHtEYXRhIHwgS2V5fSBba2V5XVxuICAgKiAgIEtleSB0byBnZXQgb3Igc2V0LCBvciBlbnRpcmUgZGF0YXNldCB0byBzZXQsIG9yIG5vdGhpbmcgdG8gZ2V0IHRoZVxuICAgKiAgIGVudGlyZSBkYXRhc2V0IChvcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7RGF0YVtLZXldfSBbdmFsdWVdXG4gICAqICAgVmFsdWUgdG8gc2V0IChvcHRpb25hbCkuXG4gICAqIEByZXR1cm5zIHt1bmtub3dufVxuICAgKiAgIFRoZSBjdXJyZW50IHByb2Nlc3NvciB3aGVuIHNldHRpbmcsIHRoZSB2YWx1ZSBhdCBga2V5YCB3aGVuIGdldHRpbmcsIG9yXG4gICAqICAgdGhlIGVudGlyZSBkYXRhc2V0IHdoZW4gZ2V0dGluZyB3aXRob3V0IGtleS5cbiAgICovXG4gIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2V0IGBrZXlgLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCB0aGlzLmZyb3plbilcbiAgICAgICAgdGhpcy5uYW1lc3BhY2Vba2V5XSA9IHZhbHVlXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBga2V5YC5cbiAgICAgIHJldHVybiAob3duLmNhbGwodGhpcy5uYW1lc3BhY2UsIGtleSkgJiYgdGhpcy5uYW1lc3BhY2Vba2V5XSkgfHwgdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgLy8gU2V0IHNwYWNlLlxuICAgIGlmIChrZXkpIHtcbiAgICAgIGFzc2VydFVuZnJvemVuKCdkYXRhJywgdGhpcy5mcm96ZW4pXG4gICAgICB0aGlzLm5hbWVzcGFjZSA9IGtleVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBHZXQgc3BhY2UuXG4gICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlXG4gIH1cblxuICAvKipcbiAgICogRnJlZXplIGEgcHJvY2Vzc29yLlxuICAgKlxuICAgKiBGcm96ZW4gcHJvY2Vzc29ycyBhcmUgbWVhbnQgdG8gYmUgZXh0ZW5kZWQgYW5kIG5vdCB0byBiZSBjb25maWd1cmVkXG4gICAqIGRpcmVjdGx5LlxuICAgKlxuICAgKiBXaGVuIGEgcHJvY2Vzc29yIGlzIGZyb3plbiBpdCBjYW5ub3QgYmUgdW5mcm96ZW4uXG4gICAqIE5ldyBwcm9jZXNzb3JzIHdvcmtpbmcgdGhlIHNhbWUgd2F5IGNhbiBiZSBjcmVhdGVkIGJ5IGNhbGxpbmcgdGhlXG4gICAqIHByb2Nlc3Nvci5cbiAgICpcbiAgICogSXRcdTIwMTlzIHBvc3NpYmxlIHRvIGZyZWV6ZSBwcm9jZXNzb3JzIGV4cGxpY2l0bHkgYnkgY2FsbGluZyBgLmZyZWV6ZSgpYC5cbiAgICogUHJvY2Vzc29ycyBmcmVlemUgYXV0b21hdGljYWxseSB3aGVuIGAucGFyc2UoKWAsIGAucnVuKClgLCBgLnJ1blN5bmMoKWAsXG4gICAqIGAuc3RyaW5naWZ5KClgLCBgLnByb2Nlc3MoKWAsIG9yIGAucHJvY2Vzc1N5bmMoKWAgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb2Nlc3NvcjxQYXJzZVRyZWUsIEhlYWRUcmVlLCBUYWlsVHJlZSwgQ29tcGlsZVRyZWUsIENvbXBpbGVSZXN1bHQ+fVxuICAgKiAgIFRoZSBjdXJyZW50IHByb2Nlc3Nvci5cbiAgICovXG4gIGZyZWV6ZSgpIHtcbiAgICBpZiAodGhpcy5mcm96ZW4pIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gQ2FzdCBzbyB0aGF0IHdlIGNhbiB0eXBlIHBsdWdpbnMgZWFzaWVyLlxuICAgIC8vIFBsdWdpbnMgYXJlIHN1cHBvc2VkIHRvIGJlIHVzYWJsZSBvbiBkaWZmZXJlbnQgcHJvY2Vzc29ycywgbm90IGp1c3Qgb25cbiAgICAvLyB0aGlzIGV4YWN0IHByb2Nlc3Nvci5cbiAgICBjb25zdCBzZWxmID0gLyoqIEB0eXBlIHtQcm9jZXNzb3J9ICovICgvKiogQHR5cGUge3Vua25vd259ICovICh0aGlzKSlcblxuICAgIHdoaWxlICgrK3RoaXMuZnJlZXplSW5kZXggPCB0aGlzLmF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFthdHRhY2hlciwgLi4ub3B0aW9uc10gPSB0aGlzLmF0dGFjaGVyc1t0aGlzLmZyZWV6ZUluZGV4XVxuXG4gICAgICBpZiAob3B0aW9uc1swXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnNbMF0gPT09IHRydWUpIHtcbiAgICAgICAgb3B0aW9uc1swXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGF0dGFjaGVyLmNhbGwoc2VsZiwgLi4ub3B0aW9ucylcblxuICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVycy51c2UodHJhbnNmb3JtZXIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mcm96ZW4gPSB0cnVlXG4gICAgdGhpcy5mcmVlemVJbmRleCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0ZXh0IHRvIGEgc3ludGF4IHRyZWUuXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBwYXJzZWAgZnJlZXplcyB0aGUgcHJvY2Vzc29yIGlmIG5vdCBhbHJlYWR5ICpmcm96ZW4qLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiBgcGFyc2VgIHBlcmZvcm1zIHRoZSBwYXJzZSBwaGFzZSwgbm90IHRoZSBydW4gcGhhc2Ugb3Igb3RoZXJcbiAgICogPiBwaGFzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcGF0aWJsZSB8IHVuZGVmaW5lZH0gW2ZpbGVdXG4gICAqICAgZmlsZSB0byBwYXJzZSAob3B0aW9uYWwpOyB0eXBpY2FsbHkgYHN0cmluZ2Agb3IgYFZGaWxlYDsgYW55IHZhbHVlXG4gICAqICAgYWNjZXB0ZWQgYXMgYHhgIGluIGBuZXcgVkZpbGUoeClgLlxuICAgKiBAcmV0dXJucyB7UGFyc2VUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFBhcnNlVHJlZX1cbiAgICogICBTeW50YXggdHJlZSByZXByZXNlbnRpbmcgYGZpbGVgLlxuICAgKi9cbiAgcGFyc2UoZmlsZSkge1xuICAgIHRoaXMuZnJlZXplKClcbiAgICBjb25zdCByZWFsRmlsZSA9IHZmaWxlKGZpbGUpXG4gICAgY29uc3QgcGFyc2VyID0gdGhpcy5wYXJzZXIgfHwgdGhpcy5QYXJzZXJcbiAgICBhc3NlcnRQYXJzZXIoJ3BhcnNlJywgcGFyc2VyKVxuICAgIHJldHVybiBwYXJzZXIoU3RyaW5nKHJlYWxGaWxlKSwgcmVhbEZpbGUpXG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgZ2l2ZW4gZmlsZSBhcyBjb25maWd1cmVkIG9uIHRoZSBwcm9jZXNzb3IuXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBwcm9jZXNzYCBmcmVlemVzIHRoZSBwcm9jZXNzb3IgaWYgbm90IGFscmVhZHkgKmZyb3plbiouXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBwcm9jZXNzYCBwZXJmb3JtcyB0aGUgcGFyc2UsIHJ1biwgYW5kIHN0cmluZ2lmeSBwaGFzZXMuXG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0NvbXBhdGlibGUgfCB1bmRlZmluZWR9IGZpbGVcbiAgICogQHBhcmFtIHtQcm9jZXNzQ2FsbGJhY2s8VkZpbGVXaXRoT3V0cHV0PENvbXBpbGVSZXN1bHQ+Pn0gZG9uZVxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtDb21wYXRpYmxlIHwgdW5kZWZpbmVkfSBbZmlsZV1cbiAgICogQHJldHVybnMge1Byb21pc2U8VkZpbGVXaXRoT3V0cHV0PENvbXBpbGVSZXN1bHQ+Pn1cbiAgICpcbiAgICogQHBhcmFtIHtDb21wYXRpYmxlIHwgdW5kZWZpbmVkfSBbZmlsZV1cbiAgICogICBGaWxlIChvcHRpb25hbCk7IHR5cGljYWxseSBgc3RyaW5nYCBvciBgVkZpbGVgXTsgYW55IHZhbHVlIGFjY2VwdGVkIGFzXG4gICAqICAgYHhgIGluIGBuZXcgVkZpbGUoeClgLlxuICAgKiBAcGFyYW0ge1Byb2Nlc3NDYWxsYmFjazxWRmlsZVdpdGhPdXRwdXQ8Q29tcGlsZVJlc3VsdD4+IHwgdW5kZWZpbmVkfSBbZG9uZV1cbiAgICogICBDYWxsYmFjayAob3B0aW9uYWwpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxWRmlsZT4gfCB1bmRlZmluZWR9XG4gICAqICAgTm90aGluZyBpZiBgZG9uZWAgaXMgZ2l2ZW4uXG4gICAqICAgT3RoZXJ3aXNlIGEgcHJvbWlzZSwgcmVqZWN0ZWQgd2l0aCBhIGZhdGFsIGVycm9yIG9yIHJlc29sdmVkIHdpdGggdGhlXG4gICAqICAgcHJvY2Vzc2VkIGZpbGUuXG4gICAqXG4gICAqICAgVGhlIHBhcnNlZCwgdHJhbnNmb3JtZWQsIGFuZCBjb21waWxlZCB2YWx1ZSBpcyBhdmFpbGFibGUgYXRcbiAgICogICBgZmlsZS52YWx1ZWAgKHNlZSBub3RlKS5cbiAgICpcbiAgICogICA+ICoqTm90ZSoqOiB1bmlmaWVkIHR5cGljYWxseSBjb21waWxlcyBieSBzZXJpYWxpemluZzogbW9zdFxuICAgKiAgID4gY29tcGlsZXJzIHJldHVybiBgc3RyaW5nYCAob3IgYFVpbnQ4QXJyYXlgKS5cbiAgICogICA+IFNvbWUgY29tcGlsZXJzLCBzdWNoIGFzIHRoZSBvbmUgY29uZmlndXJlZCB3aXRoXG4gICAqICAgPiBbYHJlaHlwZS1yZWFjdGBdW3JlaHlwZS1yZWFjdF0sIHJldHVybiBvdGhlciB2YWx1ZXMgKGluIHRoaXMgY2FzZSwgYVxuICAgKiAgID4gUmVhY3QgdHJlZSkuXG4gICAqICAgPiBJZiB5b3VcdTIwMTlyZSB1c2luZyBhIGNvbXBpbGVyIHRoYXQgZG9lc25cdTIwMTl0IHNlcmlhbGl6ZSwgZXhwZWN0IGRpZmZlcmVudFxuICAgKiAgID4gcmVzdWx0IHZhbHVlcy5cbiAgICogICA+XG4gICAqICAgPiBUbyByZWdpc3RlciBjdXN0b20gcmVzdWx0cyBpbiBUeXBlU2NyaXB0LCBhZGQgdGhlbSB0b1xuICAgKiAgID4ge0BsaW5rY29kZSBDb21waWxlUmVzdWx0TWFwfS5cbiAgICpcbiAgICogICBbcmVoeXBlLXJlYWN0XTogaHR0cHM6Ly9naXRodWIuY29tL3JlaHlwZWpzL3JlaHlwZS1yZWFjdFxuICAgKi9cbiAgcHJvY2VzcyhmaWxlLCBkb25lKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICAgIHRoaXMuZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3MnLCB0aGlzLnBhcnNlciB8fCB0aGlzLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2VzcycsIHRoaXMuY29tcGlsZXIgfHwgdGhpcy5Db21waWxlcilcblxuICAgIHJldHVybiBkb25lID8gZXhlY3V0b3IodW5kZWZpbmVkLCBkb25lKSA6IG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuXG4gICAgLy8gTm90ZTogYHZvaWRgcyBuZWVkZWQgZm9yIFRTLlxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KChmaWxlOiBWRmlsZVdpdGhPdXRwdXQ8Q29tcGlsZVJlc3VsdD4pID0+IHVuZGVmaW5lZCB8IHZvaWQpIHwgdW5kZWZpbmVkfSByZXNvbHZlXG4gICAgICogQHBhcmFtIHsoZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkKSA9PiB1bmRlZmluZWQgfCB2b2lkfSByZWplY3RcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY29uc3QgcmVhbEZpbGUgPSB2ZmlsZShmaWxlKVxuICAgICAgLy8gQXNzdW1lIGBQYXJzZVRyZWVgICh0aGUgcmVzdWx0IG9mIHRoZSBwYXJzZXIpIG1hdGNoZXMgYEhlYWRUcmVlYCAodGhlXG4gICAgICAvLyBpbnB1dCBvZiB0aGUgZmlyc3QgdHJhbnNmb3JtKS5cbiAgICAgIGNvbnN0IHBhcnNlVHJlZSA9XG4gICAgICAgIC8qKiBAdHlwZSB7SGVhZFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogSGVhZFRyZWV9ICovIChcbiAgICAgICAgICAvKiogQHR5cGUge3Vua25vd259ICovIChzZWxmLnBhcnNlKHJlYWxGaWxlKSlcbiAgICAgICAgKVxuXG4gICAgICBzZWxmLnJ1bihwYXJzZVRyZWUsIHJlYWxGaWxlLCBmdW5jdGlvbiAoZXJyb3IsIHRyZWUsIGZpbGUpIHtcbiAgICAgICAgaWYgKGVycm9yIHx8ICF0cmVlIHx8ICFmaWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWxEb25lKGVycm9yKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXNzdW1lIGBUYWlsVHJlZWAgKHRoZSBvdXRwdXQgb2YgdGhlIGxhc3QgdHJhbnNmb3JtKSBtYXRjaGVzXG4gICAgICAgIC8vIGBDb21waWxlVHJlZWAgKHRoZSBpbnB1dCBvZiB0aGUgY29tcGlsZXIpLlxuICAgICAgICBjb25zdCBjb21waWxlVHJlZSA9XG4gICAgICAgICAgLyoqIEB0eXBlIHtDb21waWxlVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBDb21waWxlVHJlZX0gKi8gKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHt1bmtub3dufSAqLyAodHJlZSlcbiAgICAgICAgICApXG5cbiAgICAgICAgY29uc3QgY29tcGlsZVJlc3VsdCA9IHNlbGYuc3RyaW5naWZ5KGNvbXBpbGVUcmVlLCBmaWxlKVxuXG4gICAgICAgIGlmIChsb29rc0xpa2VBVmFsdWUoY29tcGlsZVJlc3VsdCkpIHtcbiAgICAgICAgICBmaWxlLnZhbHVlID0gY29tcGlsZVJlc3VsdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbGUucmVzdWx0ID0gY29tcGlsZVJlc3VsdFxuICAgICAgICB9XG5cbiAgICAgICAgcmVhbERvbmUoZXJyb3IsIC8qKiBAdHlwZSB7VkZpbGVXaXRoT3V0cHV0PENvbXBpbGVSZXN1bHQ+fSAqLyAoZmlsZSkpXG4gICAgICB9KVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IGVycm9yXG4gICAgICAgKiBAcGFyYW0ge1ZGaWxlV2l0aE91dHB1dDxDb21waWxlUmVzdWx0PiB8IHVuZGVmaW5lZH0gW2ZpbGVdXG4gICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZWFsRG9uZShlcnJvciwgZmlsZSkge1xuICAgICAgICBpZiAoZXJyb3IgfHwgIWZpbGUpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoZmlsZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NlcnQoZG9uZSwgJ2Bkb25lYCBpcyBkZWZpbmVkIGlmIGByZXNvbHZlYCBpcyBub3QnKVxuICAgICAgICAgIGRvbmUodW5kZWZpbmVkLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIGdpdmVuIGZpbGUgYXMgY29uZmlndXJlZCBvbiB0aGUgcHJvY2Vzc29yLlxuICAgKlxuICAgKiBBbiBlcnJvciBpcyB0aHJvd24gaWYgYXN5bmNocm9ub3VzIHRyYW5zZm9ybXMgYXJlIGNvbmZpZ3VyZWQuXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBwcm9jZXNzU3luY2AgZnJlZXplcyB0aGUgcHJvY2Vzc29yIGlmIG5vdCBhbHJlYWR5ICpmcm96ZW4qLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiBgcHJvY2Vzc1N5bmNgIHBlcmZvcm1zIHRoZSBwYXJzZSwgcnVuLCBhbmQgc3RyaW5naWZ5IHBoYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21wYXRpYmxlIHwgdW5kZWZpbmVkfSBbZmlsZV1cbiAgICogICBGaWxlIChvcHRpb25hbCk7IHR5cGljYWxseSBgc3RyaW5nYCBvciBgVkZpbGVgOyBhbnkgdmFsdWUgYWNjZXB0ZWQgYXNcbiAgICogICBgeGAgaW4gYG5ldyBWRmlsZSh4KWAuXG4gICAqIEByZXR1cm5zIHtWRmlsZVdpdGhPdXRwdXQ8Q29tcGlsZVJlc3VsdD59XG4gICAqICAgVGhlIHByb2Nlc3NlZCBmaWxlLlxuICAgKlxuICAgKiAgIFRoZSBwYXJzZWQsIHRyYW5zZm9ybWVkLCBhbmQgY29tcGlsZWQgdmFsdWUgaXMgYXZhaWxhYmxlIGF0XG4gICAqICAgYGZpbGUudmFsdWVgIChzZWUgbm90ZSkuXG4gICAqXG4gICAqICAgPiAqKk5vdGUqKjogdW5pZmllZCB0eXBpY2FsbHkgY29tcGlsZXMgYnkgc2VyaWFsaXppbmc6IG1vc3RcbiAgICogICA+IGNvbXBpbGVycyByZXR1cm4gYHN0cmluZ2AgKG9yIGBVaW50OEFycmF5YCkuXG4gICAqICAgPiBTb21lIGNvbXBpbGVycywgc3VjaCBhcyB0aGUgb25lIGNvbmZpZ3VyZWQgd2l0aFxuICAgKiAgID4gW2ByZWh5cGUtcmVhY3RgXVtyZWh5cGUtcmVhY3RdLCByZXR1cm4gb3RoZXIgdmFsdWVzIChpbiB0aGlzIGNhc2UsIGFcbiAgICogICA+IFJlYWN0IHRyZWUpLlxuICAgKiAgID4gSWYgeW91XHUyMDE5cmUgdXNpbmcgYSBjb21waWxlciB0aGF0IGRvZXNuXHUyMDE5dCBzZXJpYWxpemUsIGV4cGVjdCBkaWZmZXJlbnRcbiAgICogICA+IHJlc3VsdCB2YWx1ZXMuXG4gICAqICAgPlxuICAgKiAgID4gVG8gcmVnaXN0ZXIgY3VzdG9tIHJlc3VsdHMgaW4gVHlwZVNjcmlwdCwgYWRkIHRoZW0gdG9cbiAgICogICA+IHtAbGlua2NvZGUgQ29tcGlsZVJlc3VsdE1hcH0uXG4gICAqXG4gICAqICAgW3JlaHlwZS1yZWFjdF06IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWh5cGVqcy9yZWh5cGUtcmVhY3RcbiAgICovXG4gIHByb2Nlc3NTeW5jKGZpbGUpIHtcbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgbGV0IGNvbXBsZXRlID0gZmFsc2VcbiAgICAvKiogQHR5cGUge1ZGaWxlV2l0aE91dHB1dDxDb21waWxlUmVzdWx0PiB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgcmVzdWx0XG5cbiAgICB0aGlzLmZyZWV6ZSgpXG4gICAgYXNzZXJ0UGFyc2VyKCdwcm9jZXNzU3luYycsIHRoaXMucGFyc2VyIHx8IHRoaXMuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzU3luYycsIHRoaXMuY29tcGlsZXIgfHwgdGhpcy5Db21waWxlcilcblxuICAgIHRoaXMucHJvY2VzcyhmaWxlLCByZWFsRG9uZSlcbiAgICBhc3NlcnREb25lKCdwcm9jZXNzU3luYycsICdwcm9jZXNzJywgY29tcGxldGUpXG4gICAgYXNzZXJ0KHJlc3VsdCwgJ3dlIGVpdGhlciBiYWlsZWQgb24gYW4gZXJyb3Igb3IgaGF2ZSBhIHRyZWUnKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1Byb2Nlc3NDYWxsYmFjazxWRmlsZVdpdGhPdXRwdXQ8Q29tcGlsZVJlc3VsdD4+fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlYWxEb25lKGVycm9yLCBmaWxlKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyb3IpXG4gICAgICByZXN1bHQgPSBmaWxlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1biAqdHJhbnNmb3JtZXJzKiBvbiBhIHN5bnRheCB0cmVlLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiBgcnVuYCBmcmVlemVzIHRoZSBwcm9jZXNzb3IgaWYgbm90IGFscmVhZHkgKmZyb3plbiouXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBydW5gIHBlcmZvcm1zIHRoZSBydW4gcGhhc2UsIG5vdCBvdGhlciBwaGFzZXMuXG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0hlYWRUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IEhlYWRUcmVlfSB0cmVlXG4gICAqIEBwYXJhbSB7UnVuQ2FsbGJhY2s8VGFpbFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogVGFpbFRyZWU+fSBkb25lXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0hlYWRUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IEhlYWRUcmVlfSB0cmVlXG4gICAqIEBwYXJhbSB7Q29tcGF0aWJsZSB8IHVuZGVmaW5lZH0gZmlsZVxuICAgKiBAcGFyYW0ge1J1bkNhbGxiYWNrPFRhaWxUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFRhaWxUcmVlPn0gZG9uZVxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtIZWFkVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBIZWFkVHJlZX0gdHJlZVxuICAgKiBAcGFyYW0ge0NvbXBhdGlibGUgfCB1bmRlZmluZWR9IFtmaWxlXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUYWlsVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBUYWlsVHJlZT59XG4gICAqXG4gICAqIEBwYXJhbSB7SGVhZFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogSGVhZFRyZWV9IHRyZWVcbiAgICogICBUcmVlIHRvIHRyYW5zZm9ybSBhbmQgaW5zcGVjdC5cbiAgICogQHBhcmFtIHsoXG4gICAqICAgUnVuQ2FsbGJhY2s8VGFpbFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogVGFpbFRyZWU+IHxcbiAgICogICBDb21wYXRpYmxlXG4gICAqICl9IFtmaWxlXVxuICAgKiAgIEZpbGUgYXNzb2NpYXRlZCB3aXRoIGBub2RlYCAob3B0aW9uYWwpOyBhbnkgdmFsdWUgYWNjZXB0ZWQgYXMgYHhgIGluXG4gICAqICAgYG5ldyBWRmlsZSh4KWAuXG4gICAqIEBwYXJhbSB7UnVuQ2FsbGJhY2s8VGFpbFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogVGFpbFRyZWU+fSBbZG9uZV1cbiAgICogICBDYWxsYmFjayAob3B0aW9uYWwpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUYWlsVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBUYWlsVHJlZT4gfCB1bmRlZmluZWR9XG4gICAqICAgTm90aGluZyBpZiBgZG9uZWAgaXMgZ2l2ZW4uXG4gICAqICAgT3RoZXJ3aXNlLCBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBhIGZhdGFsIGVycm9yIG9yIHJlc29sdmVkIHdpdGggdGhlXG4gICAqICAgdHJhbnNmb3JtZWQgdHJlZS5cbiAgICovXG4gIHJ1bih0cmVlLCBmaWxlLCBkb25lKSB7XG4gICAgYXNzZXJ0Tm9kZSh0cmVlKVxuICAgIHRoaXMuZnJlZXplKClcblxuICAgIGNvbnN0IHRyYW5zZm9ybWVycyA9IHRoaXMudHJhbnNmb3JtZXJzXG5cbiAgICBpZiAoIWRvbmUgJiYgdHlwZW9mIGZpbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvbmUgPSBmaWxlXG4gICAgICBmaWxlID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIGRvbmUgPyBleGVjdXRvcih1bmRlZmluZWQsIGRvbmUpIDogbmV3IFByb21pc2UoZXhlY3V0b3IpXG5cbiAgICAvLyBOb3RlOiBgdm9pZGBzIG5lZWRlZCBmb3IgVFMuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoXG4gICAgICogICAoKHRyZWU6IFRhaWxUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFRhaWxUcmVlKSA9PiB1bmRlZmluZWQgfCB2b2lkKSB8XG4gICAgICogICB1bmRlZmluZWRcbiAgICAgKiApfSByZXNvbHZlXG4gICAgICogQHBhcmFtIHsoZXJyb3I6IEVycm9yKSA9PiB1bmRlZmluZWQgfCB2b2lkfSByZWplY3RcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICB0eXBlb2YgZmlsZSAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgJ2BmaWxlYCBjYW5cdTIwMTl0IGJlIGEgYGRvbmVgIGFueW1vcmUsIHdlIGNoZWNrZWQnXG4gICAgICApXG4gICAgICBjb25zdCByZWFsRmlsZSA9IHZmaWxlKGZpbGUpXG4gICAgICB0cmFuc2Zvcm1lcnMucnVuKHRyZWUsIHJlYWxGaWxlLCByZWFsRG9uZSlcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0Vycm9yIHwgdW5kZWZpbmVkfSBlcnJvclxuICAgICAgICogQHBhcmFtIHtOb2RlfSBvdXRwdXRUcmVlXG4gICAgICAgKiBAcGFyYW0ge1ZGaWxlfSBmaWxlXG4gICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZWFsRG9uZShlcnJvciwgb3V0cHV0VHJlZSwgZmlsZSkge1xuICAgICAgICBjb25zdCByZXN1bHRpbmdUcmVlID1cbiAgICAgICAgICAvKiogQHR5cGUge1RhaWxUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFRhaWxUcmVlfSAqLyAoXG4gICAgICAgICAgICBvdXRwdXRUcmVlIHx8IHRyZWVcbiAgICAgICAgICApXG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdGluZ1RyZWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0KGRvbmUsICdgZG9uZWAgaXMgZGVmaW5lZCBpZiBgcmVzb2x2ZWAgaXMgbm90JylcbiAgICAgICAgICBkb25lKHVuZGVmaW5lZCwgcmVzdWx0aW5nVHJlZSwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gKnRyYW5zZm9ybWVycyogb24gYSBzeW50YXggdHJlZS5cbiAgICpcbiAgICogQW4gZXJyb3IgaXMgdGhyb3duIGlmIGFzeW5jaHJvbm91cyB0cmFuc2Zvcm1zIGFyZSBjb25maWd1cmVkLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiBgcnVuU3luY2AgZnJlZXplcyB0aGUgcHJvY2Vzc29yIGlmIG5vdCBhbHJlYWR5ICpmcm96ZW4qLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiBgcnVuU3luY2AgcGVyZm9ybXMgdGhlIHJ1biBwaGFzZSwgbm90IG90aGVyIHBoYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtIZWFkVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBIZWFkVHJlZX0gdHJlZVxuICAgKiAgIFRyZWUgdG8gdHJhbnNmb3JtIGFuZCBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0NvbXBhdGlibGUgfCB1bmRlZmluZWR9IFtmaWxlXVxuICAgKiAgIEZpbGUgYXNzb2NpYXRlZCB3aXRoIGBub2RlYCAob3B0aW9uYWwpOyBhbnkgdmFsdWUgYWNjZXB0ZWQgYXMgYHhgIGluXG4gICAqICAgYG5ldyBWRmlsZSh4KWAuXG4gICAqIEByZXR1cm5zIHtUYWlsVHJlZSBleHRlbmRzIHVuZGVmaW5lZCA/IE5vZGUgOiBUYWlsVHJlZX1cbiAgICogICBUcmFuc2Zvcm1lZCB0cmVlLlxuICAgKi9cbiAgcnVuU3luYyh0cmVlLCBmaWxlKSB7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIGxldCBjb21wbGV0ZSA9IGZhbHNlXG4gICAgLyoqIEB0eXBlIHsoVGFpbFRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogVGFpbFRyZWUpIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCByZXN1bHRcblxuICAgIHRoaXMucnVuKHRyZWUsIGZpbGUsIHJlYWxEb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncnVuU3luYycsICdydW4nLCBjb21wbGV0ZSlcbiAgICBhc3NlcnQocmVzdWx0LCAnd2UgZWl0aGVyIGJhaWxlZCBvbiBhbiBlcnJvciBvciBoYXZlIGEgdHJlZScpXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1J1bkNhbGxiYWNrPFRhaWxUcmVlIGV4dGVuZHMgdW5kZWZpbmVkID8gTm9kZSA6IFRhaWxUcmVlPn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWFsRG9uZShlcnJvciwgdHJlZSkge1xuICAgICAgYmFpbChlcnJvcilcbiAgICAgIHJlc3VsdCA9IHRyZWVcbiAgICAgIGNvbXBsZXRlID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIGEgc3ludGF4IHRyZWUuXG4gICAqXG4gICAqID4gKipOb3RlKio6IGBzdHJpbmdpZnlgIGZyZWV6ZXMgdGhlIHByb2Nlc3NvciBpZiBub3QgYWxyZWFkeSAqZnJvemVuKi5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogYHN0cmluZ2lmeWAgcGVyZm9ybXMgdGhlIHN0cmluZ2lmeSBwaGFzZSwgbm90IHRoZSBydW4gcGhhc2VcbiAgICogPiBvciBvdGhlciBwaGFzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcGlsZVRyZWUgZXh0ZW5kcyB1bmRlZmluZWQgPyBOb2RlIDogQ29tcGlsZVRyZWV9IHRyZWVcbiAgICogICBUcmVlIHRvIGNvbXBpbGUuXG4gICAqIEBwYXJhbSB7Q29tcGF0aWJsZSB8IHVuZGVmaW5lZH0gW2ZpbGVdXG4gICAqICAgRmlsZSBhc3NvY2lhdGVkIHdpdGggYG5vZGVgIChvcHRpb25hbCk7IGFueSB2YWx1ZSBhY2NlcHRlZCBhcyBgeGAgaW5cbiAgICogICBgbmV3IFZGaWxlKHgpYC5cbiAgICogQHJldHVybnMge0NvbXBpbGVSZXN1bHQgZXh0ZW5kcyB1bmRlZmluZWQgPyBWYWx1ZSA6IENvbXBpbGVSZXN1bHR9XG4gICAqICAgVGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdHJlZSAoc2VlIG5vdGUpLlxuICAgKlxuICAgKiAgID4gKipOb3RlKio6IHVuaWZpZWQgdHlwaWNhbGx5IGNvbXBpbGVzIGJ5IHNlcmlhbGl6aW5nOiBtb3N0IGNvbXBpbGVyc1xuICAgKiAgID4gcmV0dXJuIGBzdHJpbmdgIChvciBgVWludDhBcnJheWApLlxuICAgKiAgID4gU29tZSBjb21waWxlcnMsIHN1Y2ggYXMgdGhlIG9uZSBjb25maWd1cmVkIHdpdGhcbiAgICogICA+IFtgcmVoeXBlLXJlYWN0YF1bcmVoeXBlLXJlYWN0XSwgcmV0dXJuIG90aGVyIHZhbHVlcyAoaW4gdGhpcyBjYXNlLCBhXG4gICAqICAgPiBSZWFjdCB0cmVlKS5cbiAgICogICA+IElmIHlvdVx1MjAxOXJlIHVzaW5nIGEgY29tcGlsZXIgdGhhdCBkb2Vzblx1MjAxOXQgc2VyaWFsaXplLCBleHBlY3QgZGlmZmVyZW50XG4gICAqICAgPiByZXN1bHQgdmFsdWVzLlxuICAgKiAgID5cbiAgICogICA+IFRvIHJlZ2lzdGVyIGN1c3RvbSByZXN1bHRzIGluIFR5cGVTY3JpcHQsIGFkZCB0aGVtIHRvXG4gICAqICAgPiB7QGxpbmtjb2RlIENvbXBpbGVSZXN1bHRNYXB9LlxuICAgKlxuICAgKiAgIFtyZWh5cGUtcmVhY3RdOiBodHRwczovL2dpdGh1Yi5jb20vcmVoeXBlanMvcmVoeXBlLXJlYWN0XG4gICAqL1xuICBzdHJpbmdpZnkodHJlZSwgZmlsZSkge1xuICAgIHRoaXMuZnJlZXplKClcbiAgICBjb25zdCByZWFsRmlsZSA9IHZmaWxlKGZpbGUpXG4gICAgY29uc3QgY29tcGlsZXIgPSB0aGlzLmNvbXBpbGVyIHx8IHRoaXMuQ29tcGlsZXJcbiAgICBhc3NlcnRDb21waWxlcignc3RyaW5naWZ5JywgY29tcGlsZXIpXG4gICAgYXNzZXJ0Tm9kZSh0cmVlKVxuXG4gICAgcmV0dXJuIGNvbXBpbGVyKHRyZWUsIHJlYWxGaWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgcHJvY2Vzc29yIHRvIHVzZSBhIHBsdWdpbiwgYSBsaXN0IG9mIHVzYWJsZSB2YWx1ZXMsIG9yIGFcbiAgICogcHJlc2V0LlxuICAgKlxuICAgKiBJZiB0aGUgcHJvY2Vzc29yIGlzIGFscmVhZHkgdXNpbmcgYSBwbHVnaW4sIHRoZSBwcmV2aW91cyBwbHVnaW5cbiAgICogY29uZmlndXJhdGlvbiBpcyBjaGFuZ2VkIGJhc2VkIG9uIHRoZSBvcHRpb25zIHRoYXQgYXJlIHBhc3NlZCBpbi5cbiAgICogSW4gb3RoZXIgd29yZHMsIHRoZSBwbHVnaW4gaXMgbm90IGFkZGVkIGEgc2Vjb25kIHRpbWUuXG4gICAqXG4gICAqID4gKipOb3RlKio6IGB1c2VgIGNhbm5vdCBiZSBjYWxsZWQgb24gKmZyb3plbiogcHJvY2Vzc29ycy5cbiAgICogPiBDYWxsIHRoZSBwcm9jZXNzb3IgZmlyc3QgdG8gY3JlYXRlIGEgbmV3IHVuZnJvemVuIHByb2Nlc3Nvci5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBUaGVyZSBhcmUgbWFueSB3YXlzIHRvIHBhc3MgcGx1Z2lucyB0byBgLnVzZSgpYC5cbiAgICogICBUaGlzIGV4YW1wbGUgZ2l2ZXMgYW4gb3ZlcnZpZXc6XG4gICAqXG4gICAqICAgYGBganNcbiAgICogICBpbXBvcnQge3VuaWZpZWR9IGZyb20gJ3VuaWZpZWQnXG4gICAqXG4gICAqICAgdW5pZmllZCgpXG4gICAqICAgICAvLyBQbHVnaW4gd2l0aCBvcHRpb25zOlxuICAgKiAgICAgLnVzZShwbHVnaW5BLCB7eDogdHJ1ZSwgeTogdHJ1ZX0pXG4gICAqICAgICAvLyBQYXNzaW5nIHRoZSBzYW1lIHBsdWdpbiBhZ2FpbiBtZXJnZXMgY29uZmlndXJhdGlvbiAodG8gYHt4OiB0cnVlLCB5OiBmYWxzZSwgejogdHJ1ZX1gKTpcbiAgICogICAgIC51c2UocGx1Z2luQSwge3k6IGZhbHNlLCB6OiB0cnVlfSlcbiAgICogICAgIC8vIFBsdWdpbnM6XG4gICAqICAgICAudXNlKFtwbHVnaW5CLCBwbHVnaW5DXSlcbiAgICogICAgIC8vIFR3byBwbHVnaW5zLCB0aGUgc2Vjb25kIHdpdGggb3B0aW9uczpcbiAgICogICAgIC51c2UoW3BsdWdpbkQsIFtwbHVnaW5FLCB7fV1dKVxuICAgKiAgICAgLy8gUHJlc2V0IHdpdGggcGx1Z2lucyBhbmQgc2V0dGluZ3M6XG4gICAqICAgICAudXNlKHtwbHVnaW5zOiBbcGx1Z2luRiwgW3BsdWdpbkcsIHt9XV0sIHNldHRpbmdzOiB7cG9zaXRpb246IGZhbHNlfX0pXG4gICAqICAgICAvLyBTZXR0aW5ncyBvbmx5OlxuICAgKiAgICAgLnVzZSh7c2V0dGluZ3M6IHtwb3NpdGlvbjogZmFsc2V9fSlcbiAgICogICBgYGBcbiAgICpcbiAgICogQHRlbXBsYXRlIHtBcnJheTx1bmtub3duPn0gW1BhcmFtZXRlcnM9W11dXG4gICAqIEB0ZW1wbGF0ZSB7Tm9kZSB8IHN0cmluZyB8IHVuZGVmaW5lZH0gW0lucHV0PXVuZGVmaW5lZF1cbiAgICogQHRlbXBsYXRlIFtPdXRwdXQ9SW5wdXRdXG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge1ByZXNldCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcmVzZXRdXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7UGx1Z2dhYmxlTGlzdH0gbGlzdFxuICAgKiBAcmV0dXJucyB7UHJvY2Vzc29yPFBhcnNlVHJlZSwgSGVhZFRyZWUsIFRhaWxUcmVlLCBDb21waWxlVHJlZSwgQ29tcGlsZVJlc3VsdD59XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge1BsdWdpbjxQYXJhbWV0ZXJzLCBJbnB1dCwgT3V0cHV0Pn0gcGx1Z2luXG4gICAqIEBwYXJhbSB7Li4uKFBhcmFtZXRlcnMgfCBbYm9vbGVhbl0pfSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtVc2VQbHVnaW48UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0LCBJbnB1dCwgT3V0cHV0Pn1cbiAgICpcbiAgICogQHBhcmFtIHtQbHVnZ2FibGVMaXN0IHwgUGx1Z2luIHwgUHJlc2V0IHwgbnVsbCB8IHVuZGVmaW5lZH0gdmFsdWVcbiAgICogICBVc2FibGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7Li4udW5rbm93bn0gcGFyYW1ldGVyc1xuICAgKiAgIFBhcmFtZXRlcnMsIHdoZW4gYSBwbHVnaW4gaXMgZ2l2ZW4gYXMgYSB1c2FibGUgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3I8UGFyc2VUcmVlLCBIZWFkVHJlZSwgVGFpbFRyZWUsIENvbXBpbGVUcmVlLCBDb21waWxlUmVzdWx0Pn1cbiAgICogICBDdXJyZW50IHByb2Nlc3Nvci5cbiAgICovXG4gIHVzZSh2YWx1ZSwgLi4ucGFyYW1ldGVycykge1xuICAgIGNvbnN0IGF0dGFjaGVycyA9IHRoaXMuYXR0YWNoZXJzXG4gICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5uYW1lc3BhY2VcblxuICAgIGFzc2VydFVuZnJvemVuKCd1c2UnLCB0aGlzLmZyb3plbilcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBFbXB0eS5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkUGx1Z2luKHZhbHVlLCBwYXJhbWV0ZXJzKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGFkZExpc3QodmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSwgbm90IGAnICsgdmFsdWUgKyAnYCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UGx1Z2dhYmxlfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFkZFBsdWdpbih2YWx1ZSwgW10pXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgY29uc3QgW3BsdWdpbiwgLi4ucGFyYW1ldGVyc10gPVxuICAgICAgICAgICAgLyoqIEB0eXBlIHtQbHVnaW5UdXBsZTxBcnJheTx1bmtub3duPj59ICovICh2YWx1ZSlcbiAgICAgICAgICBhZGRQbHVnaW4ocGx1Z2luLCBwYXJhbWV0ZXJzKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFByZXNldCh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ByZXNldH0gcmVzdWx0XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQcmVzZXQocmVzdWx0KSB7XG4gICAgICBpZiAoISgncGx1Z2lucycgaW4gcmVzdWx0KSAmJiAhKCdzZXR0aW5ncycgaW4gcmVzdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSBidXQgcmVjZWl2ZWQgYW4gZW1wdHkgcHJlc2V0LCB3aGljaCBpcyBwcm9iYWJseSBhIG1pc3Rha2U6IHByZXNldHMgdHlwaWNhbGx5IGNvbWUgd2l0aCBgcGx1Z2luc2AgYW5kIHNvbWV0aW1lcyB3aXRoIGBzZXR0aW5nc2AsIGJ1dCB0aGlzIGhhcyBuZWl0aGVyJ1xuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGFkZExpc3QocmVzdWx0LnBsdWdpbnMpXG5cbiAgICAgIGlmIChyZXN1bHQuc2V0dGluZ3MpIHtcbiAgICAgICAgbmFtZXNwYWNlLnNldHRpbmdzID0gZXh0ZW5kKHRydWUsIG5hbWVzcGFjZS5zZXR0aW5ncywgcmVzdWx0LnNldHRpbmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UGx1Z2dhYmxlTGlzdCB8IG51bGwgfCB1bmRlZmluZWR9IHBsdWdpbnNcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3QocGx1Z2lucykge1xuICAgICAgbGV0IGluZGV4ID0gLTFcblxuICAgICAgaWYgKHBsdWdpbnMgPT09IG51bGwgfHwgcGx1Z2lucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBsdWdpbnMpKSB7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgcGx1Z2lucy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCB0aGluZyA9IHBsdWdpbnNbaW5kZXhdXG4gICAgICAgICAgYWRkKHRoaW5nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIGxpc3Qgb2YgcGx1Z2lucywgbm90IGAnICsgcGx1Z2lucyArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1BsdWdpbn0gcGx1Z2luXG4gICAgICogQHBhcmFtIHtBcnJheTx1bmtub3duPn0gcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUGx1Z2luKHBsdWdpbiwgcGFyYW1ldGVycykge1xuICAgICAgbGV0IGluZGV4ID0gLTFcbiAgICAgIGxldCBlbnRyeUluZGV4ID0gLTFcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhdHRhY2hlcnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChhdHRhY2hlcnNbaW5kZXhdWzBdID09PSBwbHVnaW4pIHtcbiAgICAgICAgICBlbnRyeUluZGV4ID0gaW5kZXhcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRyeUluZGV4ID09PSAtMSkge1xuICAgICAgICBhdHRhY2hlcnMucHVzaChbcGx1Z2luLCAuLi5wYXJhbWV0ZXJzXSlcbiAgICAgIH1cbiAgICAgIC8vIE9ubHkgc2V0IGlmIHRoZXJlIHdhcyBhdCBsZWFzdCBhIGBwcmltYXJ5YCB2YWx1ZSwgb3RoZXJ3aXNlIHdlXHUyMDE5ZCBjaGFuZ2VcbiAgICAgIC8vIGBhcmd1bWVudHMubGVuZ3RoYC5cbiAgICAgIGVsc2UgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgW3ByaW1hcnksIC4uLnJlc3RdID0gcGFyYW1ldGVyc1xuICAgICAgICBjb25zdCBjdXJyZW50UHJpbWFyeSA9IGF0dGFjaGVyc1tlbnRyeUluZGV4XVsxXVxuICAgICAgICBpZiAoaXNQbGFpbk9iaihjdXJyZW50UHJpbWFyeSkgJiYgaXNQbGFpbk9iaihwcmltYXJ5KSkge1xuICAgICAgICAgIHByaW1hcnkgPSBleHRlbmQodHJ1ZSwgY3VycmVudFByaW1hcnksIHByaW1hcnkpXG4gICAgICAgIH1cblxuICAgICAgICBhdHRhY2hlcnNbZW50cnlJbmRleF0gPSBbcGx1Z2luLCBwcmltYXJ5LCAuLi5yZXN0XVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBOb3RlOiB0aGlzIHJldHVybnMgYSAqY2FsbGFibGUqIGluc3RhbmNlLlxuLy8gVGhhdFx1MjAxOXMgd2h5IGl0XHUyMDE5cyBkb2N1bWVudGVkIGFzIGEgZnVuY3Rpb24uXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBwcm9jZXNzb3IuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgVGhpcyBleGFtcGxlIHNob3dzIGhvdyBhIG5ldyBwcm9jZXNzb3IgY2FuIGJlIGNyZWF0ZWQgKGZyb20gYHJlbWFya2ApIGFuZCBsaW5rZWRcbiAqICAgdG8gKipzdGRpbioqKDQpIGFuZCAqKnN0ZG91dCoqKDQpLlxuICpcbiAqICAgYGBganNcbiAqICAgaW1wb3J0IHByb2Nlc3MgZnJvbSAnbm9kZTpwcm9jZXNzJ1xuICogICBpbXBvcnQgY29uY2F0U3RyZWFtIGZyb20gJ2NvbmNhdC1zdHJlYW0nXG4gKiAgIGltcG9ydCB7cmVtYXJrfSBmcm9tICdyZW1hcmsnXG4gKlxuICogICBwcm9jZXNzLnN0ZGluLnBpcGUoXG4gKiAgICAgY29uY2F0U3RyZWFtKGZ1bmN0aW9uIChidWYpIHtcbiAqICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKFN0cmluZyhyZW1hcmsoKS5wcm9jZXNzU3luYyhidWYpKSlcbiAqICAgICB9KVxuICogICApXG4gKiAgIGBgYFxuICpcbiAqIEByZXR1cm5zXG4gKiAgIE5ldyAqdW5mcm96ZW4qIHByb2Nlc3NvciAoYHByb2Nlc3NvcmApLlxuICpcbiAqICAgVGhpcyBwcm9jZXNzb3IgaXMgY29uZmlndXJlZCB0byB3b3JrIHRoZSBzYW1lIGFzIGl0cyBhbmNlc3Rvci5cbiAqICAgV2hlbiB0aGUgZGVzY2VuZGFudCBwcm9jZXNzb3IgaXMgY29uZmlndXJlZCBpbiB0aGUgZnV0dXJlIGl0IGRvZXMgbm90XG4gKiAgIGFmZmVjdCB0aGUgYW5jZXN0cmFsIHByb2Nlc3Nvci5cbiAqL1xuZXhwb3J0IGNvbnN0IHVuaWZpZWQgPSBuZXcgUHJvY2Vzc29yKCkuZnJlZXplKClcblxuLyoqXG4gKiBBc3NlcnQgYSBwYXJzZXIgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBQYXJzZXJ9XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnNlcihuYW1lLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYHBhcnNlcmAnKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IGEgY29tcGlsZXIgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBDb21waWxlcn1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Q29tcGlsZXIobmFtZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBjb21waWxlcmAnKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoZSBwcm9jZXNzb3IgaXMgbm90IGZyb3plbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt1bmtub3dufSBmcm96ZW5cbiAqIEByZXR1cm5zIHthc3NlcnRzIGZyb3plbiBpcyBmYWxzZX1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VW5mcm96ZW4obmFtZSwgZnJvemVuKSB7XG4gIGlmIChmcm96ZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2Fubm90IGNhbGwgYCcgK1xuICAgICAgICBuYW1lICtcbiAgICAgICAgJ2Agb24gYSBmcm96ZW4gcHJvY2Vzc29yLlxcbkNyZWF0ZSBhIG5ldyBwcm9jZXNzb3IgZmlyc3QsIGJ5IGNhbGxpbmcgaXQ6IHVzZSBgcHJvY2Vzc29yKClgIGluc3RlYWQgb2YgYHByb2Nlc3NvcmAuJ1xuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBgbm9kZWAgaXMgYSB1bmlzdCBub2RlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gbm9kZVxuICogQHJldHVybnMge2Fzc2VydHMgbm9kZSBpcyBOb2RlfVxuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUpIHtcbiAgLy8gYGlzUGxhaW5PYmpgIHVuZm9ydHVuYXRlbHkgdXNlcyBgYW55YCBpbnN0ZWFkIG9mIGB1bmtub3duYC5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIGlmICghaXNQbGFpbk9iaihub2RlKSB8fCB0eXBlb2Ygbm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIG5vZGUsIGdvdCBgJyArIG5vZGUgKyAnYCcpXG4gICAgLy8gRmluZS5cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IGBjb21wbGV0ZWAgaXMgYHRydWVgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gYXN5bmNOYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBjb21wbGV0ZSBpcyB0cnVlfVxuICovXG5mdW5jdGlvbiBhc3NlcnREb25lKG5hbWUsIGFzeW5jTmFtZSwgY29tcGxldGUpIHtcbiAgaWYgKCFjb21wbGV0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBmaW5pc2hlZCBhc3luYy4gVXNlIGAnICsgYXN5bmNOYW1lICsgJ2AgaW5zdGVhZCdcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbXBhdGlibGUgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtWRmlsZX1cbiAqL1xuZnVuY3Rpb24gdmZpbGUodmFsdWUpIHtcbiAgcmV0dXJuIGxvb2tzTGlrZUFWRmlsZSh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBWRmlsZSh2YWx1ZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbXBhdGlibGUgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBWRmlsZX1cbiAqL1xuZnVuY3Rpb24gbG9va3NMaWtlQVZGaWxlKHZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIHZhbHVlICYmXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAnbWVzc2FnZScgaW4gdmFsdWUgJiZcbiAgICAgICdtZXNzYWdlcycgaW4gdmFsdWVcbiAgKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gW3ZhbHVlXVxuICogQHJldHVybnMge3ZhbHVlIGlzIFZhbHVlfVxuICovXG5mdW5jdGlvbiBsb29rc0xpa2VBVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgaXNVaW50OEFycmF5KHZhbHVlKVxufVxuXG4vKipcbiAqIEFzc2VydCBgdmFsdWVgIGlzIGFuIGBVaW50OEFycmF5YC5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiAgIHRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIFVpbnQ4QXJyYXl9XG4gKiAgIFdoZXRoZXIgYHZhbHVlYCBpcyBhbiBgVWludDhBcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICB2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ2J5dGVMZW5ndGgnIGluIHZhbHVlICYmXG4gICAgICAnYnl0ZU9mZnNldCcgaW4gdmFsdWVcbiAgKVxufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4pIHtcbiAgcmV0dXJuIGZuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbCgpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBvaygpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlYWNoYWJsZSgpIHt9XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG5cdHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbHVlKTtcbn1cbiIsICIvLyBUbyBkbzogcmVtb3ZlIGB2b2lkYHNcbi8vIFRvIGRvOiByZW1vdmUgYG51bGxgIGZyb20gb3V0cHV0IG9mIG91ciBBUElzLCBhbGxvdyBpdCBhcyB1c2VyIEFQSXMuXG5cbi8qKlxuICogQHR5cGVkZWYgeyhlcnJvcj86IEVycm9yIHwgbnVsbCB8IHVuZGVmaW5lZCwgLi4ub3V0cHV0OiBBcnJheTxhbnk+KSA9PiB2b2lkfSBDYWxsYmFja1xuICogICBDYWxsYmFjay5cbiAqXG4gKiBAdHlwZWRlZiB7KC4uLmlucHV0OiBBcnJheTxhbnk+KSA9PiBhbnl9IE1pZGRsZXdhcmVcbiAqICAgV2FyZS5cbiAqXG4gKiBAdHlwZWRlZiBQaXBlbGluZVxuICogICBQaXBlbGluZS5cbiAqIEBwcm9wZXJ0eSB7UnVufSBydW5cbiAqICAgUnVuIHRoZSBwaXBlbGluZS5cbiAqIEBwcm9wZXJ0eSB7VXNlfSB1c2VcbiAqICAgQWRkIG1pZGRsZXdhcmUuXG4gKlxuICogQHR5cGVkZWYgeyguLi5pbnB1dDogQXJyYXk8YW55PikgPT4gdm9pZH0gUnVuXG4gKiAgIENhbGwgYWxsIG1pZGRsZXdhcmUuXG4gKlxuICogICBDYWxscyBgZG9uZWAgb24gY29tcGxldGlvbiB3aXRoIGVpdGhlciBhbiBlcnJvciBvciB0aGUgb3V0cHV0IG9mIHRoZVxuICogICBsYXN0IG1pZGRsZXdhcmUuXG4gKlxuICogICA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogYXMgdGhlIGxlbmd0aCBvZiBpbnB1dCBkZWZpbmVzIHdoZXRoZXIgYXN5bmMgZnVuY3Rpb25zIGdldCBhXG4gKiAgID4gYG5leHRgIGZ1bmN0aW9uLFxuICogICA+IGl0XHUyMDE5cyByZWNvbW1lbmRlZCB0byBrZWVwIGBpbnB1dGAgYXQgb25lIHZhbHVlIG5vcm1hbGx5LlxuXG4gKlxuICogQHR5cGVkZWYgeyhmbjogTWlkZGxld2FyZSkgPT4gUGlwZWxpbmV9IFVzZVxuICogICBBZGQgbWlkZGxld2FyZS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBuZXcgbWlkZGxld2FyZS5cbiAqXG4gKiBAcmV0dXJucyB7UGlwZWxpbmV9XG4gKiAgIFBpcGVsaW5lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJvdWdoKCkge1xuICAvKiogQHR5cGUge0FycmF5PE1pZGRsZXdhcmU+fSAqL1xuICBjb25zdCBmbnMgPSBbXVxuICAvKiogQHR5cGUge1BpcGVsaW5lfSAqL1xuICBjb25zdCBwaXBlbGluZSA9IHtydW4sIHVzZX1cblxuICByZXR1cm4gcGlwZWxpbmVcblxuICAvKiogQHR5cGUge1J1bn0gKi9cbiAgZnVuY3Rpb24gcnVuKC4uLnZhbHVlcykge1xuICAgIGxldCBtaWRkbGV3YXJlSW5kZXggPSAtMVxuICAgIC8qKiBAdHlwZSB7Q2FsbGJhY2t9ICovXG4gICAgY29uc3QgY2FsbGJhY2sgPSB2YWx1ZXMucG9wKClcblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uIGFzIGxhc3QgYXJndW1lbnQsIG5vdCAnICsgY2FsbGJhY2spXG4gICAgfVxuXG4gICAgbmV4dChudWxsLCAuLi52YWx1ZXMpXG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIG5leHQgYGZuYCwgb3Igd2VcdTIwMTlyZSBkb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFcnJvciB8IG51bGwgfCB1bmRlZmluZWR9IGVycm9yXG4gICAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBvdXRwdXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZXh0KGVycm9yLCAuLi5vdXRwdXQpIHtcbiAgICAgIGNvbnN0IGZuID0gZm5zWysrbWlkZGxld2FyZUluZGV4XVxuICAgICAgbGV0IGluZGV4ID0gLTFcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBub24tbnVsbGlzaCBpbnB1dCBpbnRvIHZhbHVlcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3V0cHV0W2luZGV4XSA9PT0gbnVsbCB8fCBvdXRwdXRbaW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvdXRwdXRbaW5kZXhdID0gdmFsdWVzW2luZGV4XVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgdGhlIG5ld2x5IGNyZWF0ZWQgYG91dHB1dGAgZm9yIHRoZSBuZXh0IGNhbGwuXG4gICAgICB2YWx1ZXMgPSBvdXRwdXRcblxuICAgICAgLy8gTmV4dCBvciBkb25lLlxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHdyYXAoZm4sIG5leHQpKC4uLm91dHB1dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIC4uLm91dHB1dClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge1VzZX0gKi9cbiAgZnVuY3Rpb24gdXNlKG1pZGRlbHdhcmUpIHtcbiAgICBpZiAodHlwZW9mIG1pZGRlbHdhcmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBgbWlkZGVsd2FyZWAgdG8gYmUgYSBmdW5jdGlvbiwgbm90ICcgKyBtaWRkZWx3YXJlXG4gICAgICApXG4gICAgfVxuXG4gICAgZm5zLnB1c2gobWlkZGVsd2FyZSlcbiAgICByZXR1cm4gcGlwZWxpbmVcbiAgfVxufVxuXG4vKipcbiAqIFdyYXAgYG1pZGRsZXdhcmVgIGludG8gYSB1bmlmb3JtIGludGVyZmFjZS5cbiAqXG4gKiBZb3UgY2FuIHBhc3MgYWxsIGlucHV0IHRvIHRoZSByZXN1bHRpbmcgZnVuY3Rpb24uXG4gKiBgY2FsbGJhY2tgIGlzIHRoZW4gY2FsbGVkIHdpdGggdGhlIG91dHB1dCBvZiBgbWlkZGxld2FyZWAuXG4gKlxuICogSWYgYG1pZGRsZXdhcmVgIGFjY2VwdHMgbW9yZSBhcmd1bWVudHMgdGhhbiB0aGUgbGF0ZXIgZ2l2ZW4gaW4gaW5wdXQsXG4gKiBhbiBleHRyYSBgZG9uZWAgZnVuY3Rpb24gaXMgcGFzc2VkIHRvIGl0IGFmdGVyIHRoYXQgaW5wdXQsXG4gKiB3aGljaCBtdXN0IGJlIGNhbGxlZCBieSBgbWlkZGxld2FyZWAuXG4gKlxuICogVGhlIGZpcnN0IHZhbHVlIGluIGBpbnB1dGAgaXMgdGhlIG1haW4gaW5wdXQgdmFsdWUuXG4gKiBBbGwgb3RoZXIgaW5wdXQgdmFsdWVzIGFyZSB0aGUgcmVzdCBpbnB1dCB2YWx1ZXMuXG4gKiBUaGUgdmFsdWVzIGdpdmVuIHRvIGBjYWxsYmFja2AgYXJlIHRoZSBpbnB1dCB2YWx1ZXMsXG4gKiBtZXJnZWQgd2l0aCBldmVyeSBub24tbnVsbGlzaCBvdXRwdXQgdmFsdWUuXG4gKlxuICogKiBpZiBgbWlkZGxld2FyZWAgdGhyb3dzIGFuIGVycm9yLFxuICogICByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkLFxuICogICBvciBjYWxscyB0aGUgZ2l2ZW4gYGRvbmVgIGZ1bmN0aW9uIHdpdGggYW4gZXJyb3IsXG4gKiAgIGBjYWxsYmFja2AgaXMgY2FsbGVkIHdpdGggdGhhdCBlcnJvclxuICogKiBpZiBgbWlkZGxld2FyZWAgcmV0dXJucyBhIHZhbHVlIG9yIHJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQsXG4gKiAgIHRoYXQgdmFsdWUgaXMgdGhlIG1haW4gb3V0cHV0IHZhbHVlXG4gKiAqIGlmIGBtaWRkbGV3YXJlYCBjYWxscyBgZG9uZWAsXG4gKiAgIGFsbCBub24tbnVsbGlzaCB2YWx1ZXMgZXhjZXB0IGZvciB0aGUgZmlyc3Qgb25lICh0aGUgZXJyb3IpIG92ZXJ3cml0ZSB0aGVcbiAqICAgb3V0cHV0IHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TWlkZGxld2FyZX0gbWlkZGxld2FyZVxuICogICBGdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtDYWxsYmFja30gY2FsbGJhY2tcbiAqICAgQ2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIG91dHB1dCBvZiBgbWlkZGxld2FyZWAuXG4gKiBAcmV0dXJucyB7UnVufVxuICogICBXcmFwcGVkIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKG1pZGRsZXdhcmUsIGNhbGxiYWNrKSB7XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IGNhbGxlZFxuXG4gIHJldHVybiB3cmFwcGVkXG5cbiAgLyoqXG4gICAqIENhbGwgYG1pZGRsZXdhcmVgLlxuICAgKiBAdGhpcyB7YW55fVxuICAgKiBAcGFyYW0ge0FycmF5PGFueT59IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiB3cmFwcGVkKC4uLnBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBmbkV4cGVjdHNDYWxsYmFjayA9IG1pZGRsZXdhcmUubGVuZ3RoID4gcGFyYW1ldGVycy5sZW5ndGhcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICBsZXQgcmVzdWx0XG5cbiAgICBpZiAoZm5FeHBlY3RzQ2FsbGJhY2spIHtcbiAgICAgIHBhcmFtZXRlcnMucHVzaChkb25lKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBtaWRkbGV3YXJlLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGV4Y2VwdGlvbiA9IC8qKiBAdHlwZSB7RXJyb3J9ICovIChlcnJvcilcblxuICAgICAgLy8gV2VsbCwgdGhpcyBpcyBxdWl0ZSB0aGUgcGlja2xlLlxuICAgICAgLy8gYG1pZGRsZXdhcmVgIHJlY2VpdmVkIGEgY2FsbGJhY2sgYW5kIGNhbGxlZCBpdCBzeW5jaHJvbm91c2x5LCBidXQgdGhhdFxuICAgICAgLy8gdGhyZXcgYW4gZXJyb3IuXG4gICAgICAvLyBUaGUgb25seSB0aGluZyBsZWZ0IHRvIGRvIGlzIHRvIHRocm93IHRoZSB0aGluZyBpbnN0ZWFkLlxuICAgICAgaWYgKGZuRXhwZWN0c0NhbGxiYWNrICYmIGNhbGxlZCkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb25cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvbmUoZXhjZXB0aW9uKVxuICAgIH1cblxuICAgIGlmICghZm5FeHBlY3RzQ2FsbGJhY2spIHtcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4gJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdC50aGVuKHRoZW4sIGRvbmUpXG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGRvbmUocmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhlbihyZXN1bHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgYGNhbGxiYWNrYCwgb25seSBvbmNlLlxuICAgKlxuICAgKiBAdHlwZSB7Q2FsbGJhY2t9XG4gICAqL1xuICBmdW5jdGlvbiBkb25lKGVycm9yLCAuLi5vdXRwdXQpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZVxuICAgICAgY2FsbGJhY2soZXJyb3IsIC4uLm91dHB1dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCBgZG9uZWAgd2l0aCBvbmUgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG4gICAqL1xuICBmdW5jdGlvbiB0aGVuKHZhbHVlKSB7XG4gICAgZG9uZShudWxsLCB2YWx1ZSlcbiAgfVxufVxuIiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Qb3NpdGlvbn0gUG9zaXRpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIE5vZGVMaWtlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZVxuICogQHByb3BlcnR5IHtQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbcG9zaXRpb25dXG4gKlxuICogQHR5cGVkZWYgUG9pbnRMaWtlXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtsaW5lXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29sdW1uXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbb2Zmc2V0XVxuICpcbiAqIEB0eXBlZGVmIFBvc2l0aW9uTGlrZVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbc3RhcnRdXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmRdXG4gKi9cblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIHBvc2l0aW9uYWwgaW5mbyBvZiBhIHBvaW50LCBwb3NpdGlvbiAoc3RhcnQgYW5kIGVuZCBwb2ludHMpLFxuICogb3Igbm9kZS5cbiAqXG4gKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IFBvaW50IHwgUG9pbnRMaWtlIHwgUG9zaXRpb24gfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gKiAgIE5vZGUsIHBvc2l0aW9uLCBvciBwb2ludC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFByZXR0eSBwcmludGVkIHBvc2l0aW9uYWwgaW5mbyBvZiBhIG5vZGUgKGBzdHJpbmdgKS5cbiAqXG4gKiAgIEluIHRoZSBmb3JtYXQgb2YgYSByYW5nZSBgbHM6Y3MtbGU6Y2VgICh3aGVuIGdpdmVuIGBub2RlYCBvciBgcG9zaXRpb25gKVxuICogICBvciBhIHBvaW50IGBsOmNgICh3aGVuIGdpdmVuIGBwb2ludGApLCB3aGVyZSBgbGAgc3RhbmRzIGZvciBsaW5lLCBgY2AgZm9yXG4gKiAgIGNvbHVtbiwgYHNgIGZvciBgc3RhcnRgLCBhbmQgYGVgIGZvciBlbmQuXG4gKiAgIEFuIGVtcHR5IHN0cmluZyAoYCcnYCkgaXMgcmV0dXJuZWQgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIG5laXRoZXIgYG5vZGVgLFxuICogICBgcG9zaXRpb25gLCBub3IgYHBvaW50YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVBvc2l0aW9uKHZhbHVlKSB7XG4gIC8vIE5vdGhpbmcuXG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKCdwb3NpdGlvbicgaW4gdmFsdWUgfHwgJ3R5cGUnIGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlLnBvc2l0aW9uKVxuICB9XG5cbiAgLy8gUG9zaXRpb24uXG4gIGlmICgnc3RhcnQnIGluIHZhbHVlIHx8ICdlbmQnIGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlKVxuICB9XG5cbiAgLy8gUG9pbnQuXG4gIGlmICgnbGluZScgaW4gdmFsdWUgfHwgJ2NvbHVtbicgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gcG9pbnQodmFsdWUpXG4gIH1cblxuICAvLyA/XG4gIHJldHVybiAnJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UG9pbnQgfCBQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBwb2ludFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcG9pbnQocG9pbnQpIHtcbiAgcmV0dXJuIGluZGV4KHBvaW50ICYmIHBvaW50LmxpbmUpICsgJzonICsgaW5kZXgocG9pbnQgJiYgcG9pbnQuY29sdW1uKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UG9zaXRpb24gfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBwb3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBvc2l0aW9uKHBvcykge1xuICByZXR1cm4gcG9pbnQocG9zICYmIHBvcy5zdGFydCkgKyAnLScgKyBwb2ludChwb3MgJiYgcG9zLmVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBpbmRleCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMVxufVxuIiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Qb3NpdGlvbn0gUG9zaXRpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3QgJiB7dHlwZTogc3RyaW5nLCBwb3NpdGlvbj86IFBvc2l0aW9uIHwgdW5kZWZpbmVkfX0gTm9kZUxpa2VcbiAqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkge0FycmF5PE5vZGU+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2FuY2VzdG9yc11cbiAqICAgU3RhY2sgb2YgKGluY2x1c2l2ZSkgYW5jZXN0b3Igbm9kZXMgc3Vycm91bmRpbmcgdGhlIG1lc3NhZ2UgKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7RXJyb3IgfCBudWxsIHwgdW5kZWZpbmVkfSBbY2F1c2VdXG4gKiAgIE9yaWdpbmFsIGVycm9yIGNhdXNlIG9mIHRoZSBtZXNzYWdlIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge1BvaW50IHwgUG9zaXRpb24gfCBudWxsIHwgdW5kZWZpbmVkfSBbcGxhY2VdXG4gKiAgIFBsYWNlIG9mIG1lc3NhZ2UgKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3J1bGVJZF1cbiAqICAgQ2F0ZWdvcnkgb2YgbWVzc2FnZSAob3B0aW9uYWwsIGV4YW1wbGU6IGAnbXktcnVsZSdgKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3NvdXJjZV1cbiAqICAgTmFtZXNwYWNlIG9mIHdobyBzZW50IHRoZSBtZXNzYWdlIChvcHRpb25hbCwgZXhhbXBsZTogYCdteS1wYWNrYWdlJ2ApLlxuICovXG5cbmltcG9ydCB7c3RyaW5naWZ5UG9zaXRpb259IGZyb20gJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJ1xuXG4vKipcbiAqIE1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBWRmlsZU1lc3NhZ2UgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtZXNzYWdlIGZvciBgcmVhc29uYC5cbiAgICpcbiAgICogPiBcdUQ4M0VcdURFQTYgKipOb3RlKio6IGFsc28gaGFzIG9ic29sZXRlIHNpZ25hdHVyZXMuXG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJuc1xuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zXG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7UG9pbnQgfCBQb3NpdGlvbiB8IG51bGwgfCB1bmRlZmluZWR9IHBsYWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnNcbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJuc1xuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtOb2RlIHwgTm9kZUxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJuc1xuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJuc1xuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJuc1xuICAgKlxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlIHwgc3RyaW5nfSBjYXVzZU9yUmVhc29uXG4gICAqICAgUmVhc29uIGZvciBtZXNzYWdlLCBzaG91bGQgdXNlIG1hcmtkb3duLlxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IE9wdGlvbnMgfCBQb2ludCB8IFBvc2l0aW9uIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNPclBhcmVudE9yUGxhY2VdXG4gICAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJuc1xuICAgKiAgIEluc3RhbmNlIG9mIGBWRmlsZU1lc3NhZ2VgLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgY29uc3RydWN0b3IoY2F1c2VPclJlYXNvbiwgb3B0aW9uc09yUGFyZW50T3JQbGFjZSwgb3JpZ2luKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JQYXJlbnRPclBsYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgb3JpZ2luID0gb3B0aW9uc09yUGFyZW50T3JQbGFjZVxuICAgICAgb3B0aW9uc09yUGFyZW50T3JQbGFjZSA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCByZWFzb24gPSAnJ1xuICAgIC8qKiBAdHlwZSB7T3B0aW9uc30gKi9cbiAgICBsZXQgb3B0aW9ucyA9IHt9XG4gICAgbGV0IGxlZ2FjeUNhdXNlID0gZmFsc2VcblxuICAgIGlmIChvcHRpb25zT3JQYXJlbnRPclBsYWNlKSB7XG4gICAgICAvLyBQb2ludC5cbiAgICAgIGlmIChcbiAgICAgICAgJ2xpbmUnIGluIG9wdGlvbnNPclBhcmVudE9yUGxhY2UgJiZcbiAgICAgICAgJ2NvbHVtbicgaW4gb3B0aW9uc09yUGFyZW50T3JQbGFjZVxuICAgICAgKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7cGxhY2U6IG9wdGlvbnNPclBhcmVudE9yUGxhY2V9XG4gICAgICB9XG4gICAgICAvLyBQb3NpdGlvbi5cbiAgICAgIGVsc2UgaWYgKFxuICAgICAgICAnc3RhcnQnIGluIG9wdGlvbnNPclBhcmVudE9yUGxhY2UgJiZcbiAgICAgICAgJ2VuZCcgaW4gb3B0aW9uc09yUGFyZW50T3JQbGFjZVxuICAgICAgKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7cGxhY2U6IG9wdGlvbnNPclBhcmVudE9yUGxhY2V9XG4gICAgICB9XG4gICAgICAvLyBOb2RlLlxuICAgICAgZWxzZSBpZiAoJ3R5cGUnIGluIG9wdGlvbnNPclBhcmVudE9yUGxhY2UpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBhbmNlc3RvcnM6IFtvcHRpb25zT3JQYXJlbnRPclBsYWNlXSxcbiAgICAgICAgICBwbGFjZTogb3B0aW9uc09yUGFyZW50T3JQbGFjZS5wb3NpdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBPcHRpb25zLlxuICAgICAgZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSB7Li4ub3B0aW9uc09yUGFyZW50T3JQbGFjZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhdXNlT3JSZWFzb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWFzb24gPSBjYXVzZU9yUmVhc29uXG4gICAgfVxuICAgIC8vIEVycm9yLlxuICAgIGVsc2UgaWYgKCFvcHRpb25zLmNhdXNlICYmIGNhdXNlT3JSZWFzb24pIHtcbiAgICAgIGxlZ2FjeUNhdXNlID0gdHJ1ZVxuICAgICAgcmVhc29uID0gY2F1c2VPclJlYXNvbi5tZXNzYWdlXG4gICAgICBvcHRpb25zLmNhdXNlID0gY2F1c2VPclJlYXNvblxuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5ydWxlSWQgJiYgIW9wdGlvbnMuc291cmNlICYmIHR5cGVvZiBvcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBpbmRleCA9IG9yaWdpbi5pbmRleE9mKCc6JylcblxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBvcHRpb25zLnJ1bGVJZCA9IG9yaWdpblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5zb3VyY2UgPSBvcmlnaW4uc2xpY2UoMCwgaW5kZXgpXG4gICAgICAgIG9wdGlvbnMucnVsZUlkID0gb3JpZ2luLnNsaWNlKGluZGV4ICsgMSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMucGxhY2UgJiYgb3B0aW9ucy5hbmNlc3RvcnMgJiYgb3B0aW9ucy5hbmNlc3RvcnMpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IG9wdGlvbnMuYW5jZXN0b3JzW29wdGlvbnMuYW5jZXN0b3JzLmxlbmd0aCAtIDFdXG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgb3B0aW9ucy5wbGFjZSA9IHBhcmVudC5wb3NpdGlvblxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0ID1cbiAgICAgIG9wdGlvbnMucGxhY2UgJiYgJ3N0YXJ0JyBpbiBvcHRpb25zLnBsYWNlXG4gICAgICAgID8gb3B0aW9ucy5wbGFjZS5zdGFydFxuICAgICAgICA6IG9wdGlvbnMucGxhY2VcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIC8qKlxuICAgICAqIFN0YWNrIG9mIGFuY2VzdG9yIG5vZGVzIHN1cnJvdW5kaW5nIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PE5vZGU+IHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuYW5jZXN0b3JzID0gb3B0aW9ucy5hbmNlc3RvcnMgfHwgdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBPcmlnaW5hbCBlcnJvciBjYXVzZSBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFcnJvciB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmNhdXNlID0gb3B0aW9ucy5jYXVzZSB8fCB1bmRlZmluZWRcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGNvbHVtbiBvZiBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbHVtbiA9IHN0YXJ0ID8gc3RhcnQuY29sdW1uIDogdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBTdGF0ZSBvZiBwcm9ibGVtLlxuICAgICAqXG4gICAgICogKiBgdHJ1ZWAgXHUyMDE0IGVycm9yLCBmaWxlIG5vdCB1c2FibGVcbiAgICAgKiAqIGBmYWxzZWAgXHUyMDE0IHdhcm5pbmcsIGNoYW5nZSBtYXkgYmUgbmVlZGVkXG4gICAgICogKiBgdW5kZWZpbmVkYCBcdTIwMTQgY2hhbmdlIGxpa2VseSBub3QgbmVlZGVkXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5mYXRhbCA9IHVuZGVmaW5lZFxuXG4gICAgLyoqXG4gICAgICogUGF0aCBvZiBhIGZpbGUgKHVzZWQgdGhyb3VnaG91dCB0aGUgYFZGaWxlYCBlY29zeXN0ZW0pLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmZpbGVcblxuICAgIC8vIEZpZWxkIGZyb20gYEVycm9yYC5cbiAgICAvKipcbiAgICAgKiBSZWFzb24gZm9yIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubWVzc2FnZSA9IHJlYXNvblxuXG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgbGluZSBvZiBlcnJvci5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5saW5lID0gc3RhcnQgPyBzdGFydC5saW5lIDogdW5kZWZpbmVkXG5cbiAgICAvLyBGaWVsZCBmcm9tIGBFcnJvcmAuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplZCBwb3NpdGlvbmFsIGluZm8gb2YgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIE9uIG5vcm1hbCBlcnJvcnMsIHRoaXMgd291bGQgYmUgc29tZXRoaW5nIGxpa2UgYFBhcnNlRXJyb3JgLCBidWl0IGluXG4gICAgICogYFZGaWxlYCBtZXNzYWdlcyB3ZSB1c2UgdGhpcyBzcGFjZSB0byBzaG93IHdoZXJlIGFuIGVycm9yIGhhcHBlbmVkLlxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IHN0cmluZ2lmeVBvc2l0aW9uKG9wdGlvbnMucGxhY2UpIHx8ICcxOjEnXG5cbiAgICAvKipcbiAgICAgKiBQbGFjZSBvZiBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge1BvaW50IHwgUG9zaXRpb24gfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5wbGFjZSA9IG9wdGlvbnMucGxhY2UgfHwgdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBSZWFzb24gZm9yIG1lc3NhZ2UsIHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVhc29uID0gdGhpcy5tZXNzYWdlXG5cbiAgICAvKipcbiAgICAgKiBDYXRlZ29yeSBvZiBtZXNzYWdlIChleGFtcGxlOiBgJ215LXJ1bGUnYCkuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nIHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMucnVsZUlkID0gb3B0aW9ucy5ydWxlSWQgfHwgdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBOYW1lc3BhY2Ugb2YgbWVzc2FnZSAoZXhhbXBsZTogYCdteS1wYWNrYWdlJ2ApLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnNvdXJjZSA9IG9wdGlvbnMuc291cmNlIHx8IHVuZGVmaW5lZFxuXG4gICAgLy8gRmllbGQgZnJvbSBgRXJyb3JgLlxuICAgIC8qKlxuICAgICAqIFN0YWNrIG9mIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgbm9ybWFsIGVycm9ycyB0byBzaG93IHdoZXJlIHNvbWV0aGluZyBoYXBwZW5lZCBpblxuICAgICAqIHByb2dyYW1taW5nIGNvZGUsIGlycmVsZXZhbnQgZm9yIGBWRmlsZWAgbWVzc2FnZXMsXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RhY2sgPVxuICAgICAgbGVnYWN5Q2F1c2UgJiYgb3B0aW9ucy5jYXVzZSAmJiB0eXBlb2Ygb3B0aW9ucy5jYXVzZS5zdGFjayA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBvcHRpb25zLmNhdXNlLnN0YWNrXG4gICAgICAgIDogJydcblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgZmllbGRzIGFyZSBcdTIwMUN3ZWxsIGtub3duXHUyMDFELlxuICAgIC8vIE5vdCBzdGFuZGFyZC5cbiAgICAvLyBGZWVsIGZyZWUgdG8gYWRkIG90aGVyIG5vbi1zdGFuZGFyZCBmaWVsZHMgdG8geW91ciBtZXNzYWdlcy5cblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIHNvdXJjZSB2YWx1ZSB0aGF0XHUyMDE5cyBiZWluZyByZXBvcnRlZCwgd2hpY2ggaXMgZGVlbWVkXG4gICAgICogaW5jb3JyZWN0LlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmFjdHVhbFxuXG4gICAgLyoqXG4gICAgICogU3VnZ2VzdCBhY2NlcHRhYmxlIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYGFjdHVhbGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPiB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmV4cGVjdGVkXG5cbiAgICAvKipcbiAgICAgKiBMb25nIGZvcm0gZGVzY3JpcHRpb24gb2YgdGhlIG1lc3NhZ2UgKHlvdSBzaG91bGQgdXNlIG1hcmtkb3duKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5ub3RlXG5cbiAgICAvKipcbiAgICAgKiBMaW5rIHRvIGRvY3MgZm9yIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogPiBcdUQ4M0RcdURDNDkgKipOb3RlKio6IHRoaXMgbXVzdCBiZSBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIGB4YFxuICAgICAqID4gdG8gYG5ldyBVUkwoeClgLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnVybFxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH1cbn1cblxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5maWxlID0gJydcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUubmFtZSA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLnJlYXNvbiA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLm1lc3NhZ2UgPSAnJ1xuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5zdGFjayA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLmNvbHVtbiA9IHVuZGVmaW5lZFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5saW5lID0gdW5kZWZpbmVkXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLmFuY2VzdG9ycyA9IHVuZGVmaW5lZFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5jYXVzZSA9IHVuZGVmaW5lZFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5mYXRhbCA9IHVuZGVmaW5lZFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5wbGFjZSA9IHVuZGVmaW5lZFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5ydWxlSWQgPSB1bmRlZmluZWRcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUuc291cmNlID0gdW5kZWZpbmVkXG4iLCAiLy8gQSBkZXJpdmF0aXZlIHdvcmsgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJpZnkvcGF0aC1icm93c2VyaWZ5Pi5cbi8vIFdoaWNoIGlzIGxpY2Vuc2VkOlxuLy9cbi8vIE1JVCBMaWNlbnNlXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEphbWVzIEhhbGxpZGF5XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxuLy8gdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xuLy8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2Zcbi8vIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xuLy8gRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4vLyBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcbi8vIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4vLyBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gQSBkZXJpdmF0aXZlIHdvcmsgYmFzZWQgb246XG4vL1xuLy8gUGFydHMgb2YgdGhhdCBhcmUgZXh0cmFjdGVkIGZyb20gTm9kZVx1MjAxOXMgaW50ZXJuYWwgYHBhdGhgIG1vZHVsZTpcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL3BhdGguanM+LlxuLy8gV2hpY2ggaXMgbGljZW5zZWQ6XG4vL1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCBjb25zdCBtaW5wYXRoID0ge2Jhc2VuYW1lLCBkaXJuYW1lLCBleHRuYW1lLCBqb2luLCBzZXA6ICcvJ31cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWRlcHRoLCBjb21wbGV4aXR5ICovXG5cbi8qKlxuICogR2V0IHRoZSBiYXNlbmFtZSBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtleHRuYW1lXVxuICogICBFeHRlbnNpb24gdG8gc3RyaXAuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTdGVtIG9yIGJhc2VuYW1lLlxuICovXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoLCBleHRuYW1lKSB7XG4gIGlmIChleHRuYW1lICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGV4dG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJleHRcIiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJylcbiAgfVxuXG4gIGFzc2VydFBhdGgocGF0aClcbiAgbGV0IHN0YXJ0ID0gMFxuICBsZXQgZW5kID0gLTFcbiAgbGV0IGluZGV4ID0gcGF0aC5sZW5ndGhcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgc2Vlbk5vblNsYXNoXG5cbiAgaWYgKFxuICAgIGV4dG5hbWUgPT09IHVuZGVmaW5lZCB8fFxuICAgIGV4dG5hbWUubGVuZ3RoID09PSAwIHx8XG4gICAgZXh0bmFtZS5sZW5ndGggPiBwYXRoLmxlbmd0aFxuICApIHtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKHBhdGguY29kZVBvaW50QXQoaW5kZXgpID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93LlxuICAgICAgICBpZiAoc2Vlbk5vblNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpbmRleCArIDFcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBwYXRoIGNvbXBvbmVudC5cbiAgICAgICAgc2Vlbk5vblNsYXNoID0gdHJ1ZVxuICAgICAgICBlbmQgPSBpbmRleCArIDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW5kIDwgMCA/ICcnIDogcGF0aC5zbGljZShzdGFydCwgZW5kKVxuICB9XG5cbiAgaWYgKGV4dG5hbWUgPT09IHBhdGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGxldCBmaXJzdE5vblNsYXNoRW5kID0gLTFcbiAgbGV0IGV4dG5hbWVJbmRleCA9IGV4dG5hbWUubGVuZ3RoIC0gMVxuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKHBhdGguY29kZVBvaW50QXQoaW5kZXgpID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3cuXG4gICAgICBpZiAoc2Vlbk5vblNsYXNoKSB7XG4gICAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kIDwgMCkge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgcmVtZW1iZXIgdGhpcyBpbmRleCBpbiBjYXNlXG4gICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZy5cbiAgICAgICAgc2Vlbk5vblNsYXNoID0gdHJ1ZVxuICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaW5kZXggKyAxXG4gICAgICB9XG5cbiAgICAgIGlmIChleHRuYW1lSW5kZXggPiAtMSkge1xuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGV4cGxpY2l0IGV4dGVuc2lvbi5cbiAgICAgICAgaWYgKHBhdGguY29kZVBvaW50QXQoaW5kZXgpID09PSBleHRuYW1lLmNvZGVQb2ludEF0KGV4dG5hbWVJbmRleC0tKSkge1xuICAgICAgICAgIGlmIChleHRuYW1lSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgIGVuZCA9IGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEV4dGVuc2lvbiBkb2VzIG5vdCBtYXRjaCwgc28gb3VyIHJlc3VsdCBpcyB0aGUgZW50aXJlIHBhdGhcbiAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICBleHRuYW1lSW5kZXggPSAtMVxuICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZFxuICB9IGVsc2UgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgPSBwYXRoLmxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZClcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRpcm5hbWUgZnJvbSBhIHBhdGguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqICAgRmlsZSBwYXRoLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRmlsZSBwYXRoLlxuICovXG5mdW5jdGlvbiBkaXJuYW1lKHBhdGgpIHtcbiAgYXNzZXJ0UGF0aChwYXRoKVxuXG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnLidcbiAgfVxuXG4gIGxldCBlbmQgPSAtMVxuICBsZXQgaW5kZXggPSBwYXRoLmxlbmd0aFxuICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gIGxldCB1bm1hdGNoZWRTbGFzaFxuXG4gIC8vIFByZWZpeCBgLS1gIGlzIGltcG9ydGFudCB0byBub3QgcnVuIG9uIGAwYC5cbiAgd2hpbGUgKC0taW5kZXgpIHtcbiAgICBpZiAocGF0aC5jb2RlUG9pbnRBdChpbmRleCkgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgaWYgKHVubWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgIGVuZCA9IGluZGV4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdW5tYXRjaGVkU2xhc2gpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICB1bm1hdGNoZWRTbGFzaCA9IHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW5kIDwgMFxuICAgID8gcGF0aC5jb2RlUG9pbnRBdCgwKSA9PT0gNDcgLyogYC9gICovXG4gICAgICA/ICcvJ1xuICAgICAgOiAnLidcbiAgICA6IGVuZCA9PT0gMSAmJiBwYXRoLmNvZGVQb2ludEF0KDApID09PSA0NyAvKiBgL2AgKi9cbiAgICAgID8gJy8vJ1xuICAgICAgOiBwYXRoLnNsaWNlKDAsIGVuZClcbn1cblxuLyoqXG4gKiBHZXQgYW4gZXh0bmFtZSBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBFeHRuYW1lLlxuICovXG5mdW5jdGlvbiBleHRuYW1lKHBhdGgpIHtcbiAgYXNzZXJ0UGF0aChwYXRoKVxuXG4gIGxldCBpbmRleCA9IHBhdGgubGVuZ3RoXG5cbiAgbGV0IGVuZCA9IC0xXG4gIGxldCBzdGFydFBhcnQgPSAwXG4gIGxldCBzdGFydERvdCA9IC0xXG4gIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmQuXG4gIGxldCBwcmVEb3RTdGF0ZSA9IDBcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgdW5tYXRjaGVkU2xhc2hcblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNvZGVQb2ludEF0KGluZGV4KVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vdy5cbiAgICAgIGlmICh1bm1hdGNoZWRTbGFzaCkge1xuICAgICAgICBzdGFydFBhcnQgPSBpbmRleCArIDFcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gZXh0ZW5zaW9uLlxuICAgICAgdW5tYXRjaGVkU2xhc2ggPSB0cnVlXG4gICAgICBlbmQgPSBpbmRleCArIDFcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNDYgLyogYC5gICovKSB7XG4gICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb24uXG4gICAgICBpZiAoc3RhcnREb3QgPCAwKSB7XG4gICAgICAgIHN0YXJ0RG90ID0gaW5kZXhcbiAgICAgIH0gZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcbiAgICAgICAgcHJlRG90U3RhdGUgPSAxXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGFydERvdCA+IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb24uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xXG4gICAgfVxuICB9XG5cbiAgaWYgKFxuICAgIHN0YXJ0RG90IDwgMCB8fFxuICAgIGVuZCA8IDAgfHxcbiAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdC5cbiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5IGAuLmAuXG4gICAgKHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKVxuICApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpXG59XG5cbi8qKlxuICogSm9pbiBzZWdtZW50cyBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHNlZ21lbnRzXG4gKiAgIFBhdGggc2VnbWVudHMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIGpvaW4oLi4uc2VnbWVudHMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG4gIGxldCBqb2luZWRcblxuICB3aGlsZSAoKytpbmRleCA8IHNlZ21lbnRzLmxlbmd0aCkge1xuICAgIGFzc2VydFBhdGgoc2VnbWVudHNbaW5kZXhdKVxuXG4gICAgaWYgKHNlZ21lbnRzW2luZGV4XSkge1xuICAgICAgam9pbmVkID1cbiAgICAgICAgam9pbmVkID09PSB1bmRlZmluZWQgPyBzZWdtZW50c1tpbmRleF0gOiBqb2luZWQgKyAnLycgKyBzZWdtZW50c1tpbmRleF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gam9pbmVkID09PSB1bmRlZmluZWQgPyAnLicgOiBub3JtYWxpemUoam9pbmVkKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIGJhc2ljIGZpbGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbi8vIE5vdGU6IGBub3JtYWxpemVgIGlzIG5vdCBleHBvc2VkIGFzIGBwYXRoLm5vcm1hbGl6ZWAsIHNvIHNvbWUgY29kZSBpc1xuLy8gbWFudWFsbHkgcmVtb3ZlZCBmcm9tIGl0LlxuZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgYXNzZXJ0UGF0aChwYXRoKVxuXG4gIGNvbnN0IGFic29sdXRlID0gcGF0aC5jb2RlUG9pbnRBdCgwKSA9PT0gNDcgLyogYC9gICovXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoIGFjY29yZGluZyB0byBQT1NJWCBydWxlcy5cbiAgbGV0IHZhbHVlID0gbm9ybWFsaXplU3RyaW5nKHBhdGgsICFhYnNvbHV0ZSlcblxuICBpZiAodmFsdWUubGVuZ3RoID09PSAwICYmICFhYnNvbHV0ZSkge1xuICAgIHZhbHVlID0gJy4nXG4gIH1cblxuICBpZiAodmFsdWUubGVuZ3RoID4gMCAmJiBwYXRoLmNvZGVQb2ludEF0KHBhdGgubGVuZ3RoIC0gMSkgPT09IDQ3IC8qIC8gKi8pIHtcbiAgICB2YWx1ZSArPSAnLydcbiAgfVxuXG4gIHJldHVybiBhYnNvbHV0ZSA/ICcvJyArIHZhbHVlIDogdmFsdWVcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGAuYCBhbmQgYC4uYCBlbGVtZW50cyBpbiBhIHBhdGggd2l0aCBkaXJlY3RvcnkgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqICAgRmlsZSBwYXRoLlxuICogQHBhcmFtIHtib29sZWFufSBhbGxvd0Fib3ZlUm9vdFxuICogICBXaGV0aGVyIGAuLmAgY2FuIG1vdmUgYWJvdmUgcm9vdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIEZpbGUgcGF0aC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nKHBhdGgsIGFsbG93QWJvdmVSb290KSB7XG4gIGxldCByZXN1bHQgPSAnJ1xuICBsZXQgbGFzdFNlZ21lbnRMZW5ndGggPSAwXG4gIGxldCBsYXN0U2xhc2ggPSAtMVxuICBsZXQgZG90cyA9IDBcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBjb2RlXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgbGFzdFNsYXNoSW5kZXhcblxuICB3aGlsZSAoKytpbmRleCA8PSBwYXRoLmxlbmd0aCkge1xuICAgIGlmIChpbmRleCA8IHBhdGgubGVuZ3RoKSB7XG4gICAgICBjb2RlID0gcGF0aC5jb2RlUG9pbnRBdChpbmRleClcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgY29kZSA9IDQ3IC8qIGAvYCAqL1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGluZGV4IC0gMSB8fCBkb3RzID09PSAxKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGluZGV4IC0gMSAmJiBkb3RzID09PSAyKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXN1bHQubGVuZ3RoIDwgMiB8fFxuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8XG4gICAgICAgICAgcmVzdWx0LmNvZGVQb2ludEF0KHJlc3VsdC5sZW5ndGggLSAxKSAhPT0gNDYgLyogYC5gICovIHx8XG4gICAgICAgICAgcmVzdWx0LmNvZGVQb2ludEF0KHJlc3VsdC5sZW5ndGggLSAyKSAhPT0gNDYgLyogYC5gICovXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgbGFzdFNsYXNoSW5kZXggPSByZXN1bHQubGFzdEluZGV4T2YoJy8nKVxuXG4gICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggIT09IHJlc3VsdC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAnJ1xuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBsYXN0U2xhc2hJbmRleClcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlc3VsdC5sZW5ndGggLSAxIC0gcmVzdWx0Lmxhc3RJbmRleE9mKCcvJylcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGluZGV4XG4gICAgICAgICAgICAgIGRvdHMgPSAwXG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gJydcbiAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMFxuICAgICAgICAgICAgbGFzdFNsYXNoID0gaW5kZXhcbiAgICAgICAgICAgIGRvdHMgPSAwXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0ICsgJy8uLicgOiAnLi4nXG4gICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlc3VsdCArPSAnLycgKyBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGluZGV4KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IHBhdGguc2xpY2UobGFzdFNsYXNoICsgMSwgaW5kZXgpXG4gICAgICAgIH1cblxuICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IGluZGV4IC0gbGFzdFNsYXNoIC0gMVxuICAgICAgfVxuXG4gICAgICBsYXN0U2xhc2ggPSBpbmRleFxuICAgICAgZG90cyA9IDBcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ2IC8qIGAuYCAqLyAmJiBkb3RzID4gLTEpIHtcbiAgICAgIGRvdHMrK1xuICAgIH0gZWxzZSB7XG4gICAgICBkb3RzID0gLTFcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogTWFrZSBzdXJlIGBwYXRoYCBpcyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBwYXRoIGlzIHN0cmluZ31cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1BhdGggbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQgJyArIEpTT04uc3RyaW5naWZ5KHBhdGgpXG4gICAgKVxuICB9XG59XG5cbi8qIGVzbGludC1lbmFibGUgbWF4LWRlcHRoLCBjb21wbGV4aXR5ICovXG4iLCAiLy8gU29tZXdoYXQgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanM+LlxuLy8gQnV0IEkgZG9uXHUyMDE5dCB0aGluayBvbmUgdGlueSBsaW5lIG9mIGNvZGUgY2FuIGJlIGNvcHlyaWdodGVkLiBcdUQ4M0RcdURFMDVcbmV4cG9ydCBjb25zdCBtaW5wcm9jID0ge2N3ZH1cblxuZnVuY3Rpb24gY3dkKCkge1xuICByZXR1cm4gJy8nXG59XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYSB2YWx1ZSBoYXMgdGhlIHNoYXBlIG9mIGEgV0hBVFdHIFVSTCBvYmplY3QuXG4gKlxuICogVXNpbmcgYSBzeW1ib2wgb3IgaW5zdGFuY2VvZiB3b3VsZCBub3QgYmUgYWJsZSB0byByZWNvZ25pemUgVVJMIG9iamVjdHNcbiAqIGNvbWluZyBmcm9tIG90aGVyIGltcGxlbWVudGF0aW9ucyAoZS5nLiBpbiBFbGVjdHJvbiksIHNvIGluc3RlYWQgd2UgYXJlXG4gKiBjaGVja2luZyBzb21lIHdlbGwga25vd24gcHJvcGVydGllcyBmb3IgYSBsYWNrIG9mIGEgYmV0dGVyIHRlc3QuXG4gKlxuICogV2UgdXNlIGBocmVmYCBhbmQgYHByb3RvY29sYCBhcyB0aGV5IGFyZSB0aGUgb25seSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gKiBlYXN5IHRvIHJldHJpZXZlIGFuZCBjYWxjdWxhdGUgZHVlIHRvIHRoZSBsYXp5IG5hdHVyZSBvZiB0aGUgZ2V0dGVycy5cbiAqXG4gKiBXZSBjaGVjayBmb3IgYXV0aCBhdHRyaWJ1dGUgdG8gZGlzdGluZ3Vpc2ggbGVnYWN5IHVybCBpbnN0YW5jZSB3aXRoXG4gKiBXSEFUV0cgVVJMIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gZmlsZVVybE9yUGF0aFxuICogICBGaWxlIHBhdGggb3IgVVJMLlxuICogQHJldHVybnMge2ZpbGVVcmxPclBhdGggaXMgVVJMfVxuICogICBXaGV0aGVyIGl0XHUyMDE5cyBhIFVSTC5cbiAqL1xuLy8gRnJvbTogPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzZhMzQwM2MvbGliL2ludGVybmFsL3VybC5qcyNMNzIwPlxuZXhwb3J0IGZ1bmN0aW9uIGlzVXJsKGZpbGVVcmxPclBhdGgpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgZmlsZVVybE9yUGF0aCAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIGZpbGVVcmxPclBhdGggPT09ICdvYmplY3QnICYmXG4gICAgICAnaHJlZicgaW4gZmlsZVVybE9yUGF0aCAmJlxuICAgICAgZmlsZVVybE9yUGF0aC5ocmVmICYmXG4gICAgICAncHJvdG9jb2wnIGluIGZpbGVVcmxPclBhdGggJiZcbiAgICAgIGZpbGVVcmxPclBhdGgucHJvdG9jb2wgJiZcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluZGV4aW5nIGlzIGZpbmUuXG4gICAgICBmaWxlVXJsT3JQYXRoLmF1dGggPT09IHVuZGVmaW5lZFxuICApXG59XG4iLCAiaW1wb3J0IHtpc1VybH0gZnJvbSAnLi9taW51cmwuc2hhcmVkLmpzJ1xuXG5leHBvcnQge2lzVXJsfSBmcm9tICcuL21pbnVybC5zaGFyZWQuanMnXG5cbi8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzZhMzQwM2MvbGliL2ludGVybmFsL3VybC5qcz5cblxuLyoqXG4gKiBAcGFyYW0ge1VSTCB8IHN0cmluZ30gcGF0aFxuICogICBGaWxlIFVSTC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIEZpbGUgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsVG9QYXRoKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSBuZXcgVVJMKHBhdGgpXG4gIH0gZWxzZSBpZiAoIWlzVXJsKHBhdGgpKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInBhdGhcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIGFuIGluc3RhbmNlIG9mIFVSTC4gUmVjZWl2ZWQgYCcgK1xuICAgICAgICBwYXRoICtcbiAgICAgICAgJ2AnXG4gICAgKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfQVJHX1RZUEUnXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIGlmIChwYXRoLnByb3RvY29sICE9PSAnZmlsZTonKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKCdUaGUgVVJMIG11c3QgYmUgb2Ygc2NoZW1lIGZpbGUnKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfVVJMX1NDSEVNRSdcbiAgICB0aHJvdyBlcnJvclxuICB9XG5cbiAgcmV0dXJuIGdldFBhdGhGcm9tVVJMUG9zaXgocGF0aClcbn1cblxuLyoqXG4gKiBHZXQgYSBwYXRoIGZyb20gYSBQT1NJWCBVUkwuXG4gKlxuICogQHBhcmFtIHtVUkx9IHVybFxuICogICBVUkwuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhGcm9tVVJMUG9zaXgodXJsKSB7XG4gIGlmICh1cmwuaG9zdG5hbWUgIT09ICcnKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0ZpbGUgVVJMIGhvc3QgbXVzdCBiZSBcImxvY2FsaG9zdFwiIG9yIGVtcHR5IG9uIGRhcndpbidcbiAgICApXG4gICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9IT1NUJ1xuICAgIHRocm93IGVycm9yXG4gIH1cblxuICBjb25zdCBwYXRobmFtZSA9IHVybC5wYXRobmFtZVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgcGF0aG5hbWUubGVuZ3RoKSB7XG4gICAgaWYgKFxuICAgICAgcGF0aG5hbWUuY29kZVBvaW50QXQoaW5kZXgpID09PSAzNyAvKiBgJWAgKi8gJiZcbiAgICAgIHBhdGhuYW1lLmNvZGVQb2ludEF0KGluZGV4ICsgMSkgPT09IDUwIC8qIGAyYCAqL1xuICAgICkge1xuICAgICAgY29uc3QgdGhpcmQgPSBwYXRobmFtZS5jb2RlUG9pbnRBdChpbmRleCArIDIpXG4gICAgICBpZiAodGhpcmQgPT09IDcwIC8qIGBGYCAqLyB8fCB0aGlyZCA9PT0gMTAyIC8qIGBmYCAqLykge1xuICAgICAgICAvKiogQHR5cGUge05vZGVKUy5FcnJub0V4Y2VwdGlvbn0gKi9cbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdGaWxlIFVSTCBwYXRoIG11c3Qgbm90IGluY2x1ZGUgZW5jb2RlZCAvIGNoYXJhY3RlcnMnXG4gICAgICAgIClcbiAgICAgICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9QQVRIJ1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpXG59XG4iLCAiLyoqXG4gKiBAaW1wb3J0IHtOb2RlLCBQb2ludCwgUG9zaXRpb259IGZyb20gJ3VuaXN0J1xuICogQGltcG9ydCB7T3B0aW9ucyBhcyBNZXNzYWdlT3B0aW9uc30gZnJvbSAndmZpbGUtbWVzc2FnZSdcbiAqIEBpbXBvcnQge0NvbXBhdGlibGUsIERhdGEsIE1hcCwgT3B0aW9ucywgVmFsdWV9IGZyb20gJ3ZmaWxlJ1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdCAmIHt0eXBlOiBzdHJpbmcsIHBvc2l0aW9uPzogUG9zaXRpb24gfCB1bmRlZmluZWR9fSBOb2RlTGlrZVxuICovXG5cbmltcG9ydCB7VkZpbGVNZXNzYWdlfSBmcm9tICd2ZmlsZS1tZXNzYWdlJ1xuaW1wb3J0IHttaW5wYXRofSBmcm9tICcjbWlucGF0aCdcbmltcG9ydCB7bWlucHJvY30gZnJvbSAnI21pbnByb2MnXG5pbXBvcnQge3VybFRvUGF0aCwgaXNVcmx9IGZyb20gJyNtaW51cmwnXG5cbi8qKlxuICogT3JkZXIgb2Ygc2V0dGluZyAobGVhc3Qgc3BlY2lmaWMgdG8gbW9zdCksIHdlIG5lZWQgdGhpcyBiZWNhdXNlIG90aGVyd2lzZVxuICogYHtzdGVtOiAnYScsIHBhdGg6ICd+L2IuanMnfWAgd291bGQgdGhyb3csIGFzIGEgcGF0aCBpcyBuZWVkZWQgYmVmb3JlIGFcbiAqIHN0ZW0gY2FuIGJlIHNldC5cbiAqL1xuY29uc3Qgb3JkZXIgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuICAnaGlzdG9yeScsXG4gICdwYXRoJyxcbiAgJ2Jhc2VuYW1lJyxcbiAgJ3N0ZW0nLFxuICAnZXh0bmFtZScsXG4gICdkaXJuYW1lJ1xuXSlcblxuZXhwb3J0IGNsYXNzIFZGaWxlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyB2aXJ0dWFsIGZpbGUuXG4gICAqXG4gICAqIGBvcHRpb25zYCBpcyB0cmVhdGVkIGFzOlxuICAgKlxuICAgKiAqICAgYHN0cmluZ2Agb3IgYFVpbnQ4QXJyYXlgIFx1MjAxNCBge3ZhbHVlOiBvcHRpb25zfWBcbiAgICogKiAgIGBVUkxgIFx1MjAxNCBge3BhdGg6IG9wdGlvbnN9YFxuICAgKiAqICAgYFZGaWxlYCBcdTIwMTQgc2hhbGxvdyBjb3BpZXMgaXRzIGRhdGEgb3ZlciB0byB0aGUgbmV3IGZpbGVcbiAgICogKiAgIGBvYmplY3RgIFx1MjAxNCBhbGwgZmllbGRzIGFyZSBzaGFsbG93IGNvcGllZCBvdmVyIHRvIHRoZSBuZXcgZmlsZVxuICAgKlxuICAgKiBQYXRoIHJlbGF0ZWQgZmllbGRzIGFyZSBzZXQgaW4gdGhlIGZvbGxvd2luZyBvcmRlciAobGVhc3Qgc3BlY2lmaWMgdG9cbiAgICogbW9zdCBzcGVjaWZpYyk6IGBoaXN0b3J5YCwgYHBhdGhgLCBgYmFzZW5hbWVgLCBgc3RlbWAsIGBleHRuYW1lYCxcbiAgICogYGRpcm5hbWVgLlxuICAgKlxuICAgKiBZb3UgY2Fubm90IHNldCBgZGlybmFtZWAgb3IgYGV4dG5hbWVgIHdpdGhvdXQgc2V0dGluZyBlaXRoZXIgYGhpc3RvcnlgLFxuICAgKiBgcGF0aGAsIGBiYXNlbmFtZWAsIG9yIGBzdGVtYCB0b28uXG4gICAqXG4gICAqIEBwYXJhbSB7Q29tcGF0aWJsZSB8IG51bGwgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAgICogICBGaWxlIHZhbHVlLlxuICAgKiBAcmV0dXJuc1xuICAgKiAgIE5ldyBpbnN0YW5jZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgLyoqIEB0eXBlIHtPcHRpb25zIHwgVkZpbGV9ICovXG4gICAgbGV0IG9wdGlvbnNcblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH0gZWxzZSBpZiAoaXNVcmwodmFsdWUpKSB7XG4gICAgICBvcHRpb25zID0ge3BhdGg6IHZhbHVlfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCBpc1VpbnQ4QXJyYXkodmFsdWUpKSB7XG4gICAgICBvcHRpb25zID0ge3ZhbHVlfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gdmFsdWVcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cblxuICAgIC8qKlxuICAgICAqIEJhc2Ugb2YgYHBhdGhgIChkZWZhdWx0OiBgcHJvY2Vzcy5jd2QoKWAgb3IgYCcvJ2AgaW4gYnJvd3NlcnMpLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICAvLyBQcmV2ZW50IGNhbGxpbmcgYGN3ZGAgKHdoaWNoIGNvdWxkIGJlIGV4cGVuc2l2ZSkgaWYgaXRcdTIwMTlzIG5vdCBuZWVkZWQ7XG4gICAgLy8gdGhlIGVtcHR5IHN0cmluZyB3aWxsIGJlIG92ZXJyaWRkZW4gaW4gdGhlIG5leHQgYmxvY2suXG4gICAgdGhpcy5jd2QgPSAnY3dkJyBpbiBvcHRpb25zID8gJycgOiBtaW5wcm9jLmN3ZCgpXG5cbiAgICAvKipcbiAgICAgKiBQbGFjZSB0byBzdG9yZSBjdXN0b20gaW5mbyAoZGVmYXVsdDogYHt9YCkuXG4gICAgICpcbiAgICAgKiBJdFx1MjAxOXMgT0sgdG8gc3RvcmUgY3VzdG9tIGRhdGEgZGlyZWN0bHkgb24gdGhlIGZpbGUgYnV0IG1vdmluZyBpdCB0b1xuICAgICAqIGBkYXRhYCBpcyByZWNvbW1lbmRlZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtEYXRhfVxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IHt9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGZpbGUgcGF0aHMgdGhlIGZpbGUgbW92ZWQgYmV0d2Vlbi5cbiAgICAgKlxuICAgICAqIFRoZSBmaXJzdCBpcyB0aGUgb3JpZ2luYWwgcGF0aCBhbmQgdGhlIGxhc3QgaXMgdGhlIGN1cnJlbnQgcGF0aC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuaGlzdG9yeSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIG1lc3NhZ2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTxWRmlsZU1lc3NhZ2U+fVxuICAgICAqL1xuICAgIHRoaXMubWVzc2FnZXMgPSBbXVxuXG4gICAgLyoqXG4gICAgICogUmF3IHZhbHVlLlxuICAgICAqXG4gICAgICogQHR5cGUge1ZhbHVlfVxuICAgICAqL1xuICAgIHRoaXMudmFsdWVcblxuICAgIC8vIFRoZSBiZWxvdyBhcmUgbm9uLXN0YW5kYXJkLCB0aGV5IGFyZSBcdTIwMUN3ZWxsLWtub3duXHUyMDFELlxuICAgIC8vIEFzIGluLCB1c2VkIGluIHNldmVyYWwgdG9vbHMuXG4gICAgLyoqXG4gICAgICogU291cmNlIG1hcC5cbiAgICAgKlxuICAgICAqIFRoaXMgdHlwZSBpcyBlcXVpdmFsZW50IHRvIHRoZSBgUmF3U291cmNlTWFwYCB0eXBlIGZyb20gdGhlIGBzb3VyY2UtbWFwYFxuICAgICAqIG1vZHVsZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtNYXAgfCBudWxsIHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMubWFwXG5cbiAgICAvKipcbiAgICAgKiBDdXN0b20sIG5vbi1zdHJpbmcsIGNvbXBpbGVkLCByZXByZXNlbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZCBieSB1bmlmaWVkIHRvIHN0b3JlIG5vbi1zdHJpbmcgcmVzdWx0cy5cbiAgICAgKiBPbmUgZXhhbXBsZSBpcyB3aGVuIHR1cm5pbmcgbWFya2Rvd24gaW50byBSZWFjdCBub2Rlcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHt1bmtub3dufVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGEgZmlsZSB3YXMgc2F2ZWQgdG8gZGlzay5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZCBieSB2ZmlsZSByZXBvcnRlcnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnN0b3JlZFxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5cbiAgICAvLyBTZXQgcGF0aCByZWxhdGVkIHByb3BlcnRpZXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgb3JkZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBmaWVsZCA9IG9yZGVyW2luZGV4XVxuXG4gICAgICAvLyBOb3RlOiB3ZSBzcGVjaWZpY2FsbHkgdXNlIGBpbmAgaW5zdGVhZCBvZiBgaGFzT3duUHJvcGVydHlgIHRvIGFjY2VwdFxuICAgICAgLy8gYHZmaWxlYHMgdG9vLlxuICAgICAgaWYgKFxuICAgICAgICBmaWVsZCBpbiBvcHRpb25zICYmXG4gICAgICAgIG9wdGlvbnNbZmllbGRdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgb3B0aW9uc1tmaWVsZF0gIT09IG51bGxcbiAgICAgICkge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUUyBkb2Vzblx1MjAxOXQgdW5kZXJzdGFuZCBiYXNpYyByZWFsaXR5LlxuICAgICAgICB0aGlzW2ZpZWxkXSA9IGZpZWxkID09PSAnaGlzdG9yeScgPyBbLi4ub3B0aW9uc1tmaWVsZF1dIDogb3B0aW9uc1tmaWVsZF1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgZmllbGRcblxuICAgIC8vIFNldCBub24tcGF0aCByZWxhdGVkIHByb3BlcnRpZXMuXG4gICAgZm9yIChmaWVsZCBpbiBvcHRpb25zKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBmaW5lIHRvIHNldCBvdGhlciB0aGluZ3MuXG4gICAgICBpZiAoIW9yZGVyLmluY2x1ZGVzKGZpZWxkKSkge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBmaW5lIHRvIHNldCBvdGhlciB0aGluZ3MuXG4gICAgICAgIHRoaXNbZmllbGRdID0gb3B0aW9uc1tmaWVsZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBiYXNlbmFtZSAoaW5jbHVkaW5nIGV4dG5hbWUpIChleGFtcGxlOiBgJ2luZGV4Lm1pbi5qcydgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICogICBCYXNlbmFtZS5cbiAgICovXG4gIGdldCBiYXNlbmFtZSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZydcbiAgICAgID8gbWlucGF0aC5iYXNlbmFtZSh0aGlzLnBhdGgpXG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBiYXNlbmFtZSAoaW5jbHVkaW5nIGV4dG5hbWUpIChgJ2luZGV4Lm1pbi5qcydgKS5cbiAgICpcbiAgICogQ2Fubm90IGNvbnRhaW4gcGF0aCBzZXBhcmF0b3JzIChgJy8nYCBvbiB1bml4LCBtYWNPUywgYW5kIGJyb3dzZXJzLCBgJ1xcJ2BcbiAgICogb24gd2luZG93cykuXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQgKHVzZSBgZmlsZS5wYXRoID0gZmlsZS5kaXJuYW1lYCBpbnN0ZWFkKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VuYW1lXG4gICAqICAgQmFzZW5hbWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHNldCBiYXNlbmFtZShiYXNlbmFtZSkge1xuICAgIGFzc2VydE5vbkVtcHR5KGJhc2VuYW1lLCAnYmFzZW5hbWUnKVxuICAgIGFzc2VydFBhcnQoYmFzZW5hbWUsICdiYXNlbmFtZScpXG4gICAgdGhpcy5wYXRoID0gbWlucGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgYmFzZW5hbWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwYXJlbnQgcGF0aCAoZXhhbXBsZTogYCd+J2ApLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgdW5kZWZpbmVkfVxuICAgKiAgIERpcm5hbWUuXG4gICAqL1xuICBnZXQgZGlybmFtZSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZydcbiAgICAgID8gbWlucGF0aC5kaXJuYW1lKHRoaXMucGF0aClcbiAgICAgIDogdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBwYXJlbnQgcGF0aCAoZXhhbXBsZTogYCd+J2ApLlxuICAgKlxuICAgKiBDYW5ub3QgYmUgc2V0IGlmIHRoZXJlXHUyMDE5cyBubyBgcGF0aGAgeWV0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gZGlybmFtZVxuICAgKiAgIERpcm5hbWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHNldCBkaXJuYW1lKGRpcm5hbWUpIHtcbiAgICBhc3NlcnRQYXRoKHRoaXMuYmFzZW5hbWUsICdkaXJuYW1lJylcbiAgICB0aGlzLnBhdGggPSBtaW5wYXRoLmpvaW4oZGlybmFtZSB8fCAnJywgdGhpcy5iYXNlbmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGV4dG5hbWUgKGluY2x1ZGluZyBkb3QpIChleGFtcGxlOiBgJy5qcydgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAgICogICBFeHRuYW1lLlxuICAgKi9cbiAgZ2V0IGV4dG5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICA/IG1pbnBhdGguZXh0bmFtZSh0aGlzLnBhdGgpXG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZXh0bmFtZSAoaW5jbHVkaW5nIGRvdCkgKGV4YW1wbGU6IGAnLmpzJ2ApLlxuICAgKlxuICAgKiBDYW5ub3QgY29udGFpbiBwYXRoIHNlcGFyYXRvcnMgKGAnLydgIG9uIHVuaXgsIG1hY09TLCBhbmQgYnJvd3NlcnMsIGAnXFwnYFxuICAgKiBvbiB3aW5kb3dzKS5cbiAgICogQ2Fubm90IGJlIHNldCBpZiB0aGVyZVx1MjAxOXMgbm8gYHBhdGhgIHlldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IGV4dG5hbWVcbiAgICogICBFeHRuYW1lLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBzZXQgZXh0bmFtZShleHRuYW1lKSB7XG4gICAgYXNzZXJ0UGFydChleHRuYW1lLCAnZXh0bmFtZScpXG4gICAgYXNzZXJ0UGF0aCh0aGlzLmRpcm5hbWUsICdleHRuYW1lJylcblxuICAgIGlmIChleHRuYW1lKSB7XG4gICAgICBpZiAoZXh0bmFtZS5jb2RlUG9pbnRBdCgwKSAhPT0gNDYgLyogYC5gICovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIG11c3Qgc3RhcnQgd2l0aCBgLmAnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZXh0bmFtZS5pbmNsdWRlcygnLicsIDEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIGNhbm5vdCBjb250YWluIG11bHRpcGxlIGRvdHMnKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucGF0aCA9IG1pbnBhdGguam9pbih0aGlzLmRpcm5hbWUsIHRoaXMuc3RlbSArIChleHRuYW1lIHx8ICcnKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZ1bGwgcGF0aCAoZXhhbXBsZTogYCd+L2luZGV4Lm1pbi5qcydgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogICBQYXRoLlxuICAgKi9cbiAgZ2V0IHBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGZ1bGwgcGF0aCAoZXhhbXBsZTogYCd+L2luZGV4Lm1pbi5qcydgKS5cbiAgICpcbiAgICogQ2Fubm90IGJlIG51bGxpZmllZC5cbiAgICogWW91IGNhbiBzZXQgYSBmaWxlIFVSTCAoYSBgVVJMYCBvYmplY3Qgd2l0aCBhIGBmaWxlOmAgcHJvdG9jb2wpIHdoaWNoIHdpbGxcbiAgICogYmUgdHVybmVkIGludG8gYSBwYXRoIHdpdGggYHVybC5maWxlVVJMVG9QYXRoYC5cbiAgICpcbiAgICogQHBhcmFtIHtVUkwgfCBzdHJpbmd9IHBhdGhcbiAgICogICBQYXRoLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBzZXQgcGF0aChwYXRoKSB7XG4gICAgaWYgKGlzVXJsKHBhdGgpKSB7XG4gICAgICBwYXRoID0gdXJsVG9QYXRoKHBhdGgpXG4gICAgfVxuXG4gICAgYXNzZXJ0Tm9uRW1wdHkocGF0aCwgJ3BhdGgnKVxuXG4gICAgaWYgKHRoaXMucGF0aCAhPT0gcGF0aCkge1xuICAgICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzdGVtIChiYXNlbmFtZSB3L28gZXh0bmFtZSkgKGV4YW1wbGU6IGAnaW5kZXgubWluJ2ApLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgdW5kZWZpbmVkfVxuICAgKiAgIFN0ZW0uXG4gICAqL1xuICBnZXQgc3RlbSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZydcbiAgICAgID8gbWlucGF0aC5iYXNlbmFtZSh0aGlzLnBhdGgsIHRoaXMuZXh0bmFtZSlcbiAgICAgIDogdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBzdGVtIChiYXNlbmFtZSB3L28gZXh0bmFtZSkgKGV4YW1wbGU6IGAnaW5kZXgubWluJ2ApLlxuICAgKlxuICAgKiBDYW5ub3QgY29udGFpbiBwYXRoIHNlcGFyYXRvcnMgKGAnLydgIG9uIHVuaXgsIG1hY09TLCBhbmQgYnJvd3NlcnMsIGAnXFwnYFxuICAgKiBvbiB3aW5kb3dzKS5cbiAgICogQ2Fubm90IGJlIG51bGxpZmllZCAodXNlIGBmaWxlLnBhdGggPSBmaWxlLmRpcm5hbWVgIGluc3RlYWQpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RlbVxuICAgKiAgIFN0ZW0uXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHNldCBzdGVtKHN0ZW0pIHtcbiAgICBhc3NlcnROb25FbXB0eShzdGVtLCAnc3RlbScpXG4gICAgYXNzZXJ0UGFydChzdGVtLCAnc3RlbScpXG4gICAgdGhpcy5wYXRoID0gbWlucGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgc3RlbSArICh0aGlzLmV4dG5hbWUgfHwgJycpKVxuICB9XG5cbiAgLy8gTm9ybWFsIHByb3RvdHlwYWwgbWV0aG9kcy5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZhdGFsIG1lc3NhZ2UgZm9yIGByZWFzb25gIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsZS5cbiAgICpcbiAgICogVGhlIGBmYXRhbGAgZmllbGQgb2YgdGhlIG1lc3NhZ2UgaXMgc2V0IHRvIGB0cnVlYCAoZXJyb3I7IGZpbGUgbm90IHVzYWJsZSlcbiAgICogYW5kIHRoZSBgZmlsZWAgZmllbGQgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGZpbGUgcGF0aC5cbiAgICogVGhlIG1lc3NhZ2UgaXMgYWRkZWQgdG8gdGhlIGBtZXNzYWdlc2AgZmllbGQgb24gYGZpbGVgLlxuICAgKlxuICAgKiA+IFx1RDgzRVx1REVBNiAqKk5vdGUqKjogYWxzbyBoYXMgb2Jzb2xldGUgc2lnbmF0dXJlcy5cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtNZXNzYWdlT3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge25ldmVyfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge1BvaW50IHwgUG9zaXRpb24gfCBudWxsIHwgdW5kZWZpbmVkfSBwbGFjZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtuZXZlcn1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2V9IGNhdXNlXG4gICAqIEBwYXJhbSB7UG9pbnQgfCBQb3NpdGlvbiB8IG51bGwgfCB1bmRlZmluZWR9IHBsYWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge25ldmVyfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtFcnJvciB8IFZGaWxlTWVzc2FnZX0gY2F1c2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2UgfCBzdHJpbmd9IGNhdXNlT3JSZWFzb25cbiAgICogICBSZWFzb24gZm9yIG1lc3NhZ2UsIHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgTWVzc2FnZU9wdGlvbnMgfCBQb2ludCB8IFBvc2l0aW9uIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNPclBhcmVudE9yUGxhY2VdXG4gICAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqICAgTmV2ZXIuXG4gICAqIEB0aHJvd3Mge1ZGaWxlTWVzc2FnZX1cbiAgICogICBNZXNzYWdlLlxuICAgKi9cbiAgZmFpbChjYXVzZU9yUmVhc29uLCBvcHRpb25zT3JQYXJlbnRPclBsYWNlLCBvcmlnaW4pIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGUgb3ZlcmxvYWRzIGFyZSBmaW5lLlxuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UoY2F1c2VPclJlYXNvbiwgb3B0aW9uc09yUGFyZW50T3JQbGFjZSwgb3JpZ2luKVxuXG4gICAgbWVzc2FnZS5mYXRhbCA9IHRydWVcblxuICAgIHRocm93IG1lc3NhZ2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5mbyBtZXNzYWdlIGZvciBgcmVhc29uYCBhc3NvY2lhdGVkIHdpdGggdGhlIGZpbGUuXG4gICAqXG4gICAqIFRoZSBgZmF0YWxgIGZpZWxkIG9mIHRoZSBtZXNzYWdlIGlzIHNldCB0byBgdW5kZWZpbmVkYCAoaW5mbzsgY2hhbmdlXG4gICAqIGxpa2VseSBub3QgbmVlZGVkKSBhbmQgdGhlIGBmaWxlYCBmaWVsZCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgZmlsZSBwYXRoLlxuICAgKiBUaGUgbWVzc2FnZSBpcyBhZGRlZCB0byB0aGUgYG1lc3NhZ2VzYCBmaWVsZCBvbiBgZmlsZWAuXG4gICAqXG4gICAqID4gXHVEODNFXHVERUE2ICoqTm90ZSoqOiBhbHNvIGhhcyBvYnNvbGV0ZSBzaWduYXR1cmVzLlxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge01lc3NhZ2VPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge1BvaW50IHwgUG9zaXRpb24gfCBudWxsIHwgdW5kZWZpbmVkfSBwbGFjZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2UgfCBzdHJpbmd9IGNhdXNlT3JSZWFzb25cbiAgICogICBSZWFzb24gZm9yIG1lc3NhZ2UsIHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgTWVzc2FnZU9wdGlvbnMgfCBQb2ludCB8IFBvc2l0aW9uIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNPclBhcmVudE9yUGxhY2VdXG4gICAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBpbmZvKGNhdXNlT3JSZWFzb24sIG9wdGlvbnNPclBhcmVudE9yUGxhY2UsIG9yaWdpbikge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSBvdmVybG9hZHMgYXJlIGZpbmUuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZShjYXVzZU9yUmVhc29uLCBvcHRpb25zT3JQYXJlbnRPclBsYWNlLCBvcmlnaW4pXG5cbiAgICBtZXNzYWdlLmZhdGFsID0gdW5kZWZpbmVkXG5cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lc3NhZ2UgZm9yIGByZWFzb25gIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlsZS5cbiAgICpcbiAgICogVGhlIGBmYXRhbGAgZmllbGQgb2YgdGhlIG1lc3NhZ2UgaXMgc2V0IHRvIGBmYWxzZWAgKHdhcm5pbmc7IGNoYW5nZSBtYXkgYmVcbiAgICogbmVlZGVkKSBhbmQgdGhlIGBmaWxlYCBmaWVsZCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgZmlsZSBwYXRoLlxuICAgKiBUaGUgbWVzc2FnZSBpcyBhZGRlZCB0byB0aGUgYG1lc3NhZ2VzYCBmaWVsZCBvbiBgZmlsZWAuXG4gICAqXG4gICAqID4gXHVEODNFXHVERUE2ICoqTm90ZSoqOiBhbHNvIGhhcyBvYnNvbGV0ZSBzaWduYXR1cmVzLlxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge01lc3NhZ2VPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29yaWdpbl1cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICpcbiAgICogQG92ZXJsb2FkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cbiAgICogQHBhcmFtIHtQb2ludCB8IFBvc2l0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGxhY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKlxuICAgKiBAb3ZlcmxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge1BvaW50IHwgUG9zaXRpb24gfCBudWxsIHwgdW5kZWZpbmVkfSBwbGFjZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBvdmVybG9hZFxuICAgKiBAcGFyYW0ge0Vycm9yIHwgVkZpbGVNZXNzYWdlfSBjYXVzZVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqIEByZXR1cm5zIHtWRmlsZU1lc3NhZ2V9XG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3IgfCBWRmlsZU1lc3NhZ2UgfCBzdHJpbmd9IGNhdXNlT3JSZWFzb25cbiAgICogICBSZWFzb24gZm9yIG1lc3NhZ2UsIHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgTWVzc2FnZU9wdGlvbnMgfCBQb2ludCB8IFBvc2l0aW9uIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNPclBhcmVudE9yUGxhY2VdXG4gICAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBtZXNzYWdlKGNhdXNlT3JSZWFzb24sIG9wdGlvbnNPclBhcmVudE9yUGxhY2UsIG9yaWdpbikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgVkZpbGVNZXNzYWdlKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhlIG92ZXJsb2FkcyBhcmUgZmluZS5cbiAgICAgIGNhdXNlT3JSZWFzb24sXG4gICAgICBvcHRpb25zT3JQYXJlbnRPclBsYWNlLFxuICAgICAgb3JpZ2luXG4gICAgKVxuXG4gICAgaWYgKHRoaXMucGF0aCkge1xuICAgICAgbWVzc2FnZS5uYW1lID0gdGhpcy5wYXRoICsgJzonICsgbWVzc2FnZS5uYW1lXG4gICAgICBtZXNzYWdlLmZpbGUgPSB0aGlzLnBhdGhcbiAgICB9XG5cbiAgICBtZXNzYWdlLmZhdGFsID0gZmFsc2VcblxuICAgIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKVxuXG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemUgdGhlIGZpbGUuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHdoaWNoIGVuY29kaW5ncyBhcmUgc3VwcG9ydGVkIGRlcGVuZHMgb24gdGhlIGVuZ2luZS5cbiAgICogPiBGb3IgaW5mbyBvbiBOb2RlLmpzLCBzZWU6XG4gICAqID4gPGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdXRpbC5odG1sI3doYXR3Zy1zdXBwb3J0ZWQtZW5jb2RpbmdzPi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5jb2Rpbmc9J3V0ZjgnXVxuICAgKiAgIENoYXJhY3RlciBlbmNvZGluZyB0byB1bmRlcnN0YW5kIGB2YWx1ZWAgYXMgd2hlbiBpdFx1MjAxOXMgYSBgVWludDhBcnJheWBcbiAgICogICAoZGVmYXVsdDogYCd1dGYtOCdgKS5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogICBTZXJpYWxpemVkIGZpbGUuXG4gICAqL1xuICB0b1N0cmluZyhlbmNvZGluZykge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICAgfVxuXG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZyB8fCB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKHRoaXMudmFsdWUpXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGEgcGF0aCAoYXMgaW4sIGRvZXMgbm90IGNvbnRhaW4gYHBhdGguc2VwYCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJ0XG4gKiAgIEZpbGUgcGF0aCBwYXJ0LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqICAgUGFydCBuYW1lLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGFydChwYXJ0LCBuYW1lKSB7XG4gIGlmIChwYXJ0ICYmIHBhcnQuaW5jbHVkZXMobWlucGF0aC5zZXApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBhIHBhdGg6IGRpZCBub3QgZXhwZWN0IGAnICsgbWlucGF0aC5zZXAgKyAnYCdcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGVtcHR5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBwYXJ0XG4gKiAgIFRoaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqICAgUGFydCBuYW1lLlxuICogQHJldHVybnMge2Fzc2VydHMgcGFydCBpcyBzdHJpbmd9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vbkVtcHR5KHBhcnQsIG5hbWUpIHtcbiAgaWYgKCFwYXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgZW1wdHknKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IGBwYXRoYCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IHBhdGhcbiAqICAgUGF0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgIERlcGVuZGVuY3kgbmFtZS5cbiAqIEByZXR1cm5zIHthc3NlcnRzIHBhdGggaXMgc3RyaW5nfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGgsIG5hbWUpIHtcbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGAnICsgbmFtZSArICdgIHJlcXVpcmVzIGBwYXRoYCB0byBiZSBzZXQgdG9vJylcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBgdmFsdWVgIGlzIGFuIGBVaW50OEFycmF5YC5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiAgIHRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIFVpbnQ4QXJyYXl9XG4gKiAgIFdoZXRoZXIgYHZhbHVlYCBpcyBhbiBgVWludDhBcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICB2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ2J5dGVMZW5ndGgnIGluIHZhbHVlICYmXG4gICAgICAnYnl0ZU9mZnNldCcgaW4gdmFsdWVcbiAgKVxufVxuIiwgImV4cG9ydCBjb25zdCBDYWxsYWJsZUluc3RhbmNlID1cbiAgLyoqXG4gICAqIEB0eXBlIHtuZXcgPFBhcmFtZXRlcnMgZXh0ZW5kcyBBcnJheTx1bmtub3duPiwgUmVzdWx0Pihwcm9wZXJ0eTogc3RyaW5nIHwgc3ltYm9sKSA9PiAoLi4ucGFyYW1ldGVyczogUGFyYW1ldGVycykgPT4gUmVzdWx0fVxuICAgKi9cbiAgKFxuICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICAoXG4gICAgICAvKipcbiAgICAgICAqIEB0aGlzIHtGdW5jdGlvbn1cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgc3ltYm9sfSBwcm9wZXJ0eVxuICAgICAgICogQHJldHVybnMgeyguLi5wYXJhbWV0ZXJzOiBBcnJheTx1bmtub3duPikgPT4gdW5rbm93bn1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGNvbnN0ciA9IHNlbGYuY29uc3RydWN0b3JcbiAgICAgICAgY29uc3QgcHJvdG8gPSAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcgfCBzeW1ib2wsIEZ1bmN0aW9uPn0gKi8gKFxuICAgICAgICAgIC8vIFByb3RvdHlwZXMgZG8gZXhpc3QuXG4gICAgICAgICAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gICAgICAgICAgY29uc3RyLnByb3RvdHlwZVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcHJvdG9bcHJvcGVydHldXG4gICAgICAgIC8qKiBAdHlwZSB7KC4uLnBhcmFtZXRlcnM6IEFycmF5PHVua25vd24+KSA9PiB1bmtub3dufSAqL1xuICAgICAgICBjb25zdCBhcHBseSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuYXBwbHkoYXBwbHksIGFyZ3VtZW50cylcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcHBseSwgcHJvdG8pXG5cbiAgICAgICAgLy8gTm90IG5lZWRlZCBmb3IgdXMgaW4gYHVuaWZpZWRgOiB3ZSBvbmx5IGNhbGwgdGhpcyBvbiB0aGUgYGNvcHlgXG4gICAgICAgIC8vIGZ1bmN0aW9uLFxuICAgICAgICAvLyBhbmQgd2UgZG9uJ3QgbmVlZCB0byBhZGQgaXRzIGZpZWxkcyAoYGxlbmd0aGAsIGBuYW1lYClcbiAgICAgICAgLy8gb3Zlci5cbiAgICAgICAgLy8gU2VlIGFsc286IEdILTI0Ni5cbiAgICAgICAgLy8gY29uc3QgbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSlcbiAgICAgICAgLy9cbiAgICAgICAgLy8gZm9yIChjb25zdCBwIG9mIG5hbWVzKSB7XG4gICAgICAgIC8vICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIHApXG4gICAgICAgIC8vICAgaWYgKGRlc2NyaXB0b3IpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHBseSwgcCwgZGVzY3JpcHRvcilcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHJldHVybiBhcHBseVxuICAgICAgfVxuICAgIClcbiAgKVxuIiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Ob2Rlc30gTm9kZXNcbiAqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmNsdWRlSW1hZ2VBbHQ9dHJ1ZV1cbiAqICAgV2hldGhlciB0byB1c2UgYGFsdGAgZm9yIGBpbWFnZWBzIChkZWZhdWx0OiBgdHJ1ZWApLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2luY2x1ZGVIdG1sPXRydWVdXG4gKiAgIFdoZXRoZXIgdG8gdXNlIGB2YWx1ZWAgb2YgSFRNTCAoZGVmYXVsdDogYHRydWVgKS5cbiAqL1xuXG4vKiogQHR5cGUge09wdGlvbnN9ICovXG5jb25zdCBlbXB0eU9wdGlvbnMgPSB7fVxuXG4vKipcbiAqIEdldCB0aGUgdGV4dCBjb250ZW50IG9mIGEgbm9kZSBvciBsaXN0IG9mIG5vZGVzLlxuICpcbiAqIFByZWZlcnMgdGhlIG5vZGVcdTIwMTlzIHBsYWluLXRleHQgZmllbGRzLCBvdGhlcndpc2Ugc2VyaWFsaXplcyBpdHMgY2hpbGRyZW4sXG4gKiBhbmQgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGFycmF5LCBzZXJpYWxpemUgdGhlIG5vZGVzIGluIGl0LlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gW3ZhbHVlXVxuICogICBUaGluZyB0byBzZXJpYWxpemUsIHR5cGljYWxseSBgTm9kZWAuXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBgdmFsdWVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IGVtcHR5T3B0aW9uc1xuICBjb25zdCBpbmNsdWRlSW1hZ2VBbHQgPVxuICAgIHR5cGVvZiBzZXR0aW5ncy5pbmNsdWRlSW1hZ2VBbHQgPT09ICdib29sZWFuJ1xuICAgICAgPyBzZXR0aW5ncy5pbmNsdWRlSW1hZ2VBbHRcbiAgICAgIDogdHJ1ZVxuICBjb25zdCBpbmNsdWRlSHRtbCA9XG4gICAgdHlwZW9mIHNldHRpbmdzLmluY2x1ZGVIdG1sID09PSAnYm9vbGVhbicgPyBzZXR0aW5ncy5pbmNsdWRlSHRtbCA6IHRydWVcblxuICByZXR1cm4gb25lKHZhbHVlLCBpbmNsdWRlSW1hZ2VBbHQsIGluY2x1ZGVIdG1sKVxufVxuXG4vKipcbiAqIE9uZSBub2RlIG9yIHNldmVyYWwgbm9kZXMuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICBUaGluZyB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVJbWFnZUFsdFxuICogICBJbmNsdWRlIGltYWdlIGBhbHRgcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUh0bWxcbiAqICAgSW5jbHVkZSBIVE1MLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBub2RlLlxuICovXG5mdW5jdGlvbiBvbmUodmFsdWUsIGluY2x1ZGVJbWFnZUFsdCwgaW5jbHVkZUh0bWwpIHtcbiAgaWYgKG5vZGUodmFsdWUpKSB7XG4gICAgaWYgKCd2YWx1ZScgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50eXBlID09PSAnaHRtbCcgJiYgIWluY2x1ZGVIdG1sID8gJycgOiB2YWx1ZS52YWx1ZVxuICAgIH1cblxuICAgIGlmIChpbmNsdWRlSW1hZ2VBbHQgJiYgJ2FsdCcgaW4gdmFsdWUgJiYgdmFsdWUuYWx0KSB7XG4gICAgICByZXR1cm4gdmFsdWUuYWx0XG4gICAgfVxuXG4gICAgaWYgKCdjaGlsZHJlbicgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiBhbGwodmFsdWUuY2hpbGRyZW4sIGluY2x1ZGVJbWFnZUFsdCwgaW5jbHVkZUh0bWwpXG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGFsbCh2YWx1ZSwgaW5jbHVkZUltYWdlQWx0LCBpbmNsdWRlSHRtbClcbiAgfVxuXG4gIHJldHVybiAnJ1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIGxpc3Qgb2Ygbm9kZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheTx1bmtub3duPn0gdmFsdWVzXG4gKiAgIFRoaW5nIHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUltYWdlQWx0XG4gKiAgIEluY2x1ZGUgaW1hZ2UgYGFsdGBzLlxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlSHRtbFxuICogICBJbmNsdWRlIEhUTUwuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTZXJpYWxpemVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBhbGwodmFsdWVzLCBpbmNsdWRlSW1hZ2VBbHQsIGluY2x1ZGVIdG1sKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gb25lKHZhbHVlc1tpbmRleF0sIGluY2x1ZGVJbWFnZUFsdCwgaW5jbHVkZUh0bWwpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYHZhbHVlYCBsb29rcyBsaWtlIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiAgIFRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIE5vZGVzfVxuICogICBXaGV0aGVyIGB2YWx1ZWAgaXMgYSBub2RlLlxuICovXG5mdW5jdGlvbiBub2RlKHZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXG59XG4iLCAiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJylcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd8ZmFsc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZSh2YWx1ZSkge1xuICBjb25zdCBjaGFyYWN0ZXJSZWZlcmVuY2UgPSAnJicgKyB2YWx1ZSArICc7J1xuICBlbGVtZW50LmlubmVySFRNTCA9IGNoYXJhY3RlclJlZmVyZW5jZVxuICBjb25zdCBjaGFyID0gZWxlbWVudC50ZXh0Q29udGVudFxuXG4gIC8vIFNvbWUgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgZG8gbm90IHJlcXVpcmUgdGhlIGNsb3Npbmcgc2VtaWNvbG9uXG4gIC8vIChgJm5vdGAsIGZvciBpbnN0YW5jZSksIHdoaWNoIGxlYWRzIHRvIHNpdHVhdGlvbnMgd2hlcmUgcGFyc2luZyB0aGUgYXNzdW1lZFxuICAvLyBuYW1lZCByZWZlcmVuY2Ugb2YgYCZub3RpdDtgIHdpbGwgcmVzdWx0IGluIHRoZSBzdHJpbmcgYFx1MDBBQ2l0O2AuXG4gIC8vIFdoZW4gd2UgZW5jb3VudGVyIGEgdHJhaWxpbmcgc2VtaWNvbG9uIGFmdGVyIHBhcnNpbmcsIGFuZCB0aGUgY2hhcmFjdGVyXG4gIC8vIHJlZmVyZW5jZSB0byBkZWNvZGUgd2FzIG5vdCBhIHNlbWljb2xvbiAoYCZzZW1pO2ApLCB3ZSBjYW4gYXNzdW1lIHRoYXQgdGhlXG4gIC8vIG1hdGNoaW5nIHdhcyBub3QgY29tcGxldGUuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IFR5cGVTY3JpcHQgaXMgd3JvbmcgdGhhdCBgdGV4dENvbnRlbnRgIG9uIGVsZW1lbnRzIGNhblxuICAvLyB5aWVsZCBgbnVsbGAuXG4gIGlmIChjaGFyLmNoYXJDb2RlQXQoY2hhci5sZW5ndGggLSAxKSA9PT0gNTkgLyogYDtgICovICYmIHZhbHVlICE9PSAnc2VtaScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIElmIHRoZSBkZWNvZGVkIHN0cmluZyBpcyBlcXVhbCB0byB0aGUgaW5wdXQsIHRoZSBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhc1xuICAvLyBub3QgdmFsaWQuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IFR5cGVTY3JpcHQgaXMgd3JvbmcgdGhhdCBgdGV4dENvbnRlbnRgIG9uIGVsZW1lbnRzIGNhblxuICAvLyB5aWVsZCBgbnVsbGAuXG4gIHJldHVybiBjaGFyID09PSBjaGFyYWN0ZXJSZWZlcmVuY2UgPyBmYWxzZSA6IGNoYXJcbn1cbiIsICIvKipcbiAqIExpa2UgYEFycmF5I3NwbGljZWAsIGJ1dCBzbWFydGVyIGZvciBnaWFudCBhcnJheXMuXG4gKlxuICogYEFycmF5I3NwbGljZWAgdGFrZXMgYWxsIGl0ZW1zIHRvIGJlIGluc2VydGVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnQgd2hpY2hcbiAqIGNhdXNlcyBhIHN0YWNrIG92ZXJmbG93IGluIFY4IHdoZW4gdHJ5aW5nIHRvIGluc2VydCAxMDBrIGl0ZW1zIGZvciBpbnN0YW5jZS5cbiAqXG4gKiBPdGhlcndpc2UsIHRoaXMgZG9lcyBub3QgcmV0dXJuIHRoZSByZW1vdmVkIGl0ZW1zLCBhbmQgdGFrZXMgYGl0ZW1zYCBhcyBhblxuICogYXJyYXkgaW5zdGVhZCBvZiByZXN0IHBhcmFtZXRlcnMuXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxpc3RcbiAqICAgTGlzdCB0byBvcGVyYXRlIG9uLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiAgIEluZGV4IHRvIHJlbW92ZS9pbnNlcnQgYXQgKGNhbiBiZSBuZWdhdGl2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gcmVtb3ZlXG4gKiAgIE51bWJlciBvZiBpdGVtcyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBpdGVtc1xuICogICBJdGVtcyB0byBpbmplY3QgaW50byBgbGlzdGAuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaWNlKGxpc3QsIHN0YXJ0LCByZW1vdmUsIGl0ZW1zKSB7XG4gIGNvbnN0IGVuZCA9IGxpc3QubGVuZ3RoO1xuICBsZXQgY2h1bmtTdGFydCA9IDA7XG4gIC8qKiBAdHlwZSB7QXJyYXk8dW5rbm93bj59ICovXG4gIGxldCBwYXJhbWV0ZXJzO1xuXG4gIC8vIE1ha2Ugc3RhcnQgYmV0d2VlbiB6ZXJvIGFuZCBgZW5kYCAoaW5jbHVkZWQpLlxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBlbmQgPyAwIDogZW5kICsgc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBzdGFydCA+IGVuZCA/IGVuZCA6IHN0YXJ0O1xuICB9XG4gIHJlbW92ZSA9IHJlbW92ZSA+IDAgPyByZW1vdmUgOiAwO1xuXG4gIC8vIE5vIG5lZWQgdG8gY2h1bmsgdGhlIGl0ZW1zIGlmIHRoZXJlXHUyMDE5cyBvbmx5IGEgY291cGxlICgxMGspIGl0ZW1zLlxuICBpZiAoaXRlbXMubGVuZ3RoIDwgMTAwMDApIHtcbiAgICBwYXJhbWV0ZXJzID0gQXJyYXkuZnJvbShpdGVtcyk7XG4gICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCByZW1vdmUpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSHVzaCwgaXRcdTIwMTlzIGZpbmUuXG4gICAgbGlzdC5zcGxpY2UoLi4ucGFyYW1ldGVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRGVsZXRlIGByZW1vdmVgIGl0ZW1zIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YFxuICAgIGlmIChyZW1vdmUpIGxpc3Quc3BsaWNlKHN0YXJ0LCByZW1vdmUpO1xuXG4gICAgLy8gSW5zZXJ0IHRoZSBpdGVtcyBpbiBjaHVua3MgdG8gbm90IGNhdXNlIHN0YWNrIG92ZXJmbG93cy5cbiAgICB3aGlsZSAoY2h1bmtTdGFydCA8IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgcGFyYW1ldGVycyA9IGl0ZW1zLnNsaWNlKGNodW5rU3RhcnQsIGNodW5rU3RhcnQgKyAxMDAwMCk7XG4gICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoc3RhcnQsIDApO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIdXNoLCBpdFx1MjAxOXMgZmluZS5cbiAgICAgIGxpc3Quc3BsaWNlKC4uLnBhcmFtZXRlcnMpO1xuICAgICAgY2h1bmtTdGFydCArPSAxMDAwMDtcbiAgICAgIHN0YXJ0ICs9IDEwMDAwO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFwcGVuZCBgaXRlbXNgIChhbiBhcnJheSkgYXQgdGhlIGVuZCBvZiBgbGlzdGAgKGFub3RoZXIgYXJyYXkpLlxuICogV2hlbiBgbGlzdGAgd2FzIGVtcHR5LCByZXR1cm5zIGBpdGVtc2AgaW5zdGVhZC5cbiAqXG4gKiBUaGlzIHByZXZlbnRzIGEgcG90ZW50aWFsbHkgZXhwZW5zaXZlIG9wZXJhdGlvbiB3aGVuIGBsaXN0YCBpcyBlbXB0eSxcbiAqIGFuZCBhZGRzIGl0ZW1zIGluIGJhdGNoZXMgdG8gcHJldmVudCBWOCBmcm9tIGhhbmdpbmcuXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxpc3RcbiAqICAgTGlzdCB0byBvcGVyYXRlIG9uLlxuICogQHBhcmFtIHtBcnJheTxUPn0gaXRlbXNcbiAqICAgSXRlbXMgdG8gYWRkIHRvIGBsaXN0YC5cbiAqIEByZXR1cm5zIHtBcnJheTxUPn1cbiAqICAgRWl0aGVyIGBsaXN0YCBvciBgaXRlbXNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVzaChsaXN0LCBpdGVtcykge1xuICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgc3BsaWNlKGxpc3QsIGxpc3QubGVuZ3RoLCAwLCBpdGVtcyk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBFeHRlbnNpb24sXG4gKiAgIEhhbmRsZXMsXG4gKiAgIEh0bWxFeHRlbnNpb24sXG4gKiAgIE5vcm1hbGl6ZWRFeHRlbnNpb25cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5cbmNvbnN0IGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDb21iaW5lIG11bHRpcGxlIHN5bnRheCBleHRlbnNpb25zIGludG8gb25lLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxFeHRlbnNpb24+fSBleHRlbnNpb25zXG4gKiAgIExpc3Qgb2Ygc3ludGF4IGV4dGVuc2lvbnMuXG4gKiBAcmV0dXJucyB7Tm9ybWFsaXplZEV4dGVuc2lvbn1cbiAqICAgQSBzaW5nbGUgY29tYmluZWQgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xuICAvKiogQHR5cGUge05vcm1hbGl6ZWRFeHRlbnNpb259ICovXG4gIGNvbnN0IGFsbCA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBleHRlbnNpb25zLmxlbmd0aCkge1xuICAgIHN5bnRheEV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbnNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGFsbFxufVxuXG4vKipcbiAqIE1lcmdlIGBleHRlbnNpb25gIGludG8gYGFsbGAuXG4gKlxuICogQHBhcmFtIHtOb3JtYWxpemVkRXh0ZW5zaW9ufSBhbGxcbiAqICAgRXh0ZW5zaW9uIHRvIG1lcmdlIGludG8uXG4gKiBAcGFyYW0ge0V4dGVuc2lvbn0gZXh0ZW5zaW9uXG4gKiAgIEV4dGVuc2lvbiB0byBtZXJnZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIHN5bnRheEV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbikge1xuICAvKiogQHR5cGUge2tleW9mIEV4dGVuc2lvbn0gKi9cbiAgbGV0IGhvb2tcblxuICBmb3IgKGhvb2sgaW4gZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgbWF5YmUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFsbCwgaG9vaykgPyBhbGxbaG9va10gOiB1bmRlZmluZWRcbiAgICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICAgIGNvbnN0IGxlZnQgPSBtYXliZSB8fCAoYWxsW2hvb2tdID0ge30pXG4gICAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IHVuZGVmaW5lZH0gKi9cbiAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltob29rXVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBjb2RlXG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIGZvciAoY29kZSBpbiByaWdodCkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobGVmdCwgY29kZSkpIGxlZnRbY29kZV0gPSBbXVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHJpZ2h0W2NvZGVdXG4gICAgICAgIGNvbnN0cnVjdHMoXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGEgbGlzdC5cbiAgICAgICAgICBsZWZ0W2NvZGVdLFxuICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgYGxpc3RgIGludG8gYGV4aXN0aW5nYCAoYm90aCBsaXN0cyBvZiBjb25zdHJ1Y3RzKS5cbiAqIE11dGF0ZXMgYGV4aXN0aW5nYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHVua25vd24+fSBleGlzdGluZ1xuICogICBMaXN0IG9mIGNvbnN0cnVjdHMgdG8gbWVyZ2UgaW50by5cbiAqIEBwYXJhbSB7QXJyYXk8dW5rbm93bj59IGxpc3RcbiAqICAgTGlzdCBvZiBjb25zdHJ1Y3RzIHRvIG1lcmdlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0cyhleGlzdGluZywgbGlzdCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0FycmF5PHVua25vd24+fSAqL1xuICBjb25zdCBiZWZvcmUgPSBbXVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYW4gb2JqZWN0LlxuICAgIDsobGlzdFtpbmRleF0uYWRkID09PSAnYWZ0ZXInID8gZXhpc3RpbmcgOiBiZWZvcmUpLnB1c2gobGlzdFtpbmRleF0pXG4gIH1cblxuICBzcGxpY2UoZXhpc3RpbmcsIDAsIDAsIGJlZm9yZSlcbn1cblxuLyoqXG4gKiBDb21iaW5lIG11bHRpcGxlIEhUTUwgZXh0ZW5zaW9ucyBpbnRvIG9uZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8SHRtbEV4dGVuc2lvbj59IGh0bWxFeHRlbnNpb25zXG4gKiAgIExpc3Qgb2YgSFRNTCBleHRlbnNpb25zLlxuICogQHJldHVybnMge0h0bWxFeHRlbnNpb259XG4gKiAgIFNpbmdsZSBjb21iaW5lZCBIVE1MIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVIdG1sRXh0ZW5zaW9ucyhodG1sRXh0ZW5zaW9ucykge1xuICAvKiogQHR5cGUge0h0bWxFeHRlbnNpb259ICovXG4gIGNvbnN0IGhhbmRsZXJzID0ge31cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGh0bWxFeHRlbnNpb25zLmxlbmd0aCkge1xuICAgIGh0bWxFeHRlbnNpb24oaGFuZGxlcnMsIGh0bWxFeHRlbnNpb25zW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiBoYW5kbGVyc1xufVxuXG4vKipcbiAqIE1lcmdlIGBleHRlbnNpb25gIGludG8gYGFsbGAuXG4gKlxuICogQHBhcmFtIHtIdG1sRXh0ZW5zaW9ufSBhbGxcbiAqICAgRXh0ZW5zaW9uIHRvIG1lcmdlIGludG8uXG4gKiBAcGFyYW0ge0h0bWxFeHRlbnNpb259IGV4dGVuc2lvblxuICogICBFeHRlbnNpb24gdG8gbWVyZ2UuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBodG1sRXh0ZW5zaW9uKGFsbCwgZXh0ZW5zaW9uKSB7XG4gIC8qKiBAdHlwZSB7a2V5b2YgSHRtbEV4dGVuc2lvbn0gKi9cbiAgbGV0IGhvb2tcblxuICBmb3IgKGhvb2sgaW4gZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgbWF5YmUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFsbCwgaG9vaykgPyBhbGxbaG9va10gOiB1bmRlZmluZWRcbiAgICBjb25zdCBsZWZ0ID0gbWF5YmUgfHwgKGFsbFtob29rXSA9IHt9KVxuICAgIGNvbnN0IHJpZ2h0ID0gZXh0ZW5zaW9uW2hvb2tdXG4gICAgLyoqIEB0eXBlIHtrZXlvZiBIYW5kbGVzfSAqL1xuICAgIGxldCB0eXBlXG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIGZvciAodHlwZSBpbiByaWdodCkge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGFzc3VtZSBkb2N1bWVudCB2cyByZWd1bGFyIGhhbmRsZXIgYXJlIG1hbmFnZWQgY29ycmVjdGx5LlxuICAgICAgICBsZWZ0W3R5cGVdID0gcmlnaHRbdHlwZV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsICIvKipcbiAqIFR1cm4gdGhlIG51bWJlciAoaW4gc3RyaW5nIGZvcm0gYXMgZWl0aGVyIGhleGEtIG9yIHBsYWluIGRlY2ltYWwpIGNvbWluZyBmcm9tXG4gKiBhIG51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBpbnRvIGEgY2hhcmFjdGVyLlxuICpcbiAqIFNvcnQgb2YgbGlrZSBgU3RyaW5nLmZyb21Db2RlUG9pbnQoTnVtYmVyLnBhcnNlSW50KHZhbHVlLCBiYXNlKSlgLCBidXQgbWFrZXNcbiAqIG5vbi1jaGFyYWN0ZXJzIGFuZCBjb250cm9sIGNoYXJhY3RlcnMgc2FmZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgVmFsdWUgdG8gZGVjb2RlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJhc2VcbiAqICAgTnVtZXJpYyBiYXNlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgQ2hhcmFjdGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh2YWx1ZSwgYmFzZSkge1xuICBjb25zdCBjb2RlID0gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCBiYXNlKTtcbiAgaWYgKFxuICAvLyBDMCBleGNlcHQgZm9yIEhULCBMRiwgRkYsIENSLCBzcGFjZS5cbiAgY29kZSA8IDkgfHwgY29kZSA9PT0gMTEgfHwgY29kZSA+IDEzICYmIGNvZGUgPCAzMiB8fFxuICAvLyBDb250cm9sIGNoYXJhY3RlciAoREVMKSBvZiBDMCwgYW5kIEMxIGNvbnRyb2xzLlxuICBjb2RlID4gMTI2ICYmIGNvZGUgPCAxNjAgfHxcbiAgLy8gTG9uZSBoaWdoIHN1cnJvZ2F0ZXMgYW5kIGxvdyBzdXJyb2dhdGVzLlxuICBjb2RlID4gNTVfMjk1ICYmIGNvZGUgPCA1N18zNDQgfHxcbiAgLy8gTm9uY2hhcmFjdGVycy5cbiAgY29kZSA+IDY0Xzk3NSAmJiBjb2RlIDwgNjVfMDA4IHx8IC8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbiAgKGNvZGUgJiA2NV81MzUpID09PSA2NV81MzUgfHwgKGNvZGUgJiA2NV81MzUpID09PSA2NV81MzQgfHwgLyogZXNsaW50LWVuYWJsZSBuby1iaXR3aXNlICovXG4gIC8vIE91dCBvZiByYW5nZVxuICBjb2RlID4gMV8xMTRfMTExKSB7XG4gICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICB9XG4gIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKTtcbn0iLCAiLyoqXG4gKiBOb3JtYWxpemUgYW4gaWRlbnRpZmllciAoYXMgZm91bmQgaW4gcmVmZXJlbmNlcywgZGVmaW5pdGlvbnMpLlxuICpcbiAqIENvbGxhcHNlcyBtYXJrZG93biB3aGl0ZXNwYWNlLCB0cmltLCBhbmQgdGhlbiBsb3dlci0gYW5kIHVwcGVyY2FzZS5cbiAqXG4gKiBTb21lIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQgXHUyMDFDdXBwZXJjYXNlXHUyMDFELCBzdWNoIGFzIFUrMDNGNCAoYFx1MDNGNGApLCBidXQgaWYgdGhlaXJcbiAqIGxvd2VyY2FzZSBjb3VudGVycGFydCAoVSswM0I4IChgXHUwM0I4YCkpIGlzIHVwcGVyY2FzZWQgd2lsbCByZXN1bHQgaW4gYSBkaWZmZXJlbnRcbiAqIHVwcGVyY2FzZSBjaGFyYWN0ZXIgKFUrMDM5OCAoYFx1MDM5OGApKS5cbiAqIFNvLCB0byBnZXQgYSBjYW5vbmljYWwgZm9ybSwgd2UgcGVyZm9ybSBib3RoIGxvd2VyLSBhbmQgdXBwZXJjYXNlLlxuICpcbiAqIFVzaW5nIHVwcGVyY2FzZSBsYXN0IG1ha2VzIHN1cmUga2V5cyB3aWxsIG5ldmVyIGludGVyYWN0IHdpdGggZGVmYXVsdFxuICogcHJvdG90eXBhbCB2YWx1ZXMgKHN1Y2ggYXMgYGNvbnN0cnVjdG9yYCk6IG5vdGhpbmcgaW4gdGhlIHByb3RvdHlwZSBvZlxuICogYE9iamVjdGAgaXMgdXBwZXJjYXNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBJZGVudGlmaWVyIHRvIG5vcm1hbGl6ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIE5vcm1hbGl6ZWQgaWRlbnRpZmllci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUlkZW50aWZpZXIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlXG4gIC8vIENvbGxhcHNlIG1hcmtkb3duIHdoaXRlc3BhY2UuXG4gIC5yZXBsYWNlKC9bXFx0XFxuXFxyIF0rL2csIFwiIFwiKVxuICAvLyBUcmltLlxuICAucmVwbGFjZSgvXiB8ICQvZywgJycpXG4gIC8vIFNvbWUgY2hhcmFjdGVycyBhcmUgY29uc2lkZXJlZCBcdTIwMUN1cHBlcmNhc2VcdTIwMUQsIGJ1dCBpZiB0aGVpciBsb3dlcmNhc2VcbiAgLy8gY291bnRlcnBhcnQgaXMgdXBwZXJjYXNlZCB3aWxsIHJlc3VsdCBpbiBhIGRpZmZlcmVudCB1cHBlcmNhc2VcbiAgLy8gY2hhcmFjdGVyLlxuICAvLyBIZW5jZSwgdG8gZ2V0IHRoYXQgZm9ybSwgd2UgcGVyZm9ybSBib3RoIGxvd2VyLSBhbmQgdXBwZXJjYXNlLlxuICAvLyBVcHBlciBjYXNlIG1ha2VzIHN1cmUga2V5cyB3aWxsIG5vdCBpbnRlcmFjdCB3aXRoIGRlZmF1bHQgcHJvdG90eXBhbFxuICAvLyBtZXRob2RzOiBubyBtZXRob2QgaXMgdXBwZXJjYXNlLlxuICAudG9Mb3dlckNhc2UoKS50b1VwcGVyQ2FzZSgpO1xufSIsICIvKipcbiAqIEBpbXBvcnQge0NvZGV9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBhbHBoYSAoYGFgIHRocm91Z2ggYHpgLFxuICogY2FzZSBpbnNlbnNpdGl2ZSkuXG4gKlxuICogQW4gKipBU0NJSSBhbHBoYSoqIGlzIGFuIEFTQ0lJIHVwcGVyIGFscGhhIG9yIEFTQ0lJIGxvd2VyIGFscGhhLlxuICpcbiAqIEFuICoqQVNDSUkgdXBwZXIgYWxwaGEqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDA0MSAoYEFgKVxuICogdG8gVSswMDVBIChgWmApLlxuICpcbiAqIEFuICoqQVNDSUkgbG93ZXIgYWxwaGEqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDA2MSAoYGFgKVxuICogdG8gVSswMDdBIChgemApLlxuICpcbiAqIEBwYXJhbSBjb2RlXG4gKiAgIENvZGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciBpdCBtYXRjaGVzLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlBbHBoYSA9IHJlZ2V4Q2hlY2soL1tBLVphLXpdLyk7XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBhbHBoYW51bWVyaWMgKGBhYFxuICogdGhyb3VnaCBgemAsIGNhc2UgaW5zZW5zaXRpdmUsIG9yIGAwYCB0aHJvdWdoIGA5YCkuXG4gKlxuICogQW4gKipBU0NJSSBhbHBoYW51bWVyaWMqKiBpcyBhbiBBU0NJSSBkaWdpdCAoc2VlIGBhc2NpaURpZ2l0YCkgb3IgQVNDSUkgYWxwaGFcbiAqIChzZWUgYGFzY2lpQWxwaGFgKS5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzY2lpQWxwaGFudW1lcmljID0gcmVnZXhDaGVjaygvW1xcZEEtWmEtel0vKTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGF0ZXh0LlxuICpcbiAqIGF0ZXh0IGlzIGFuIEFTQ0lJIGFscGhhbnVtZXJpYyAoc2VlIGBhc2NpaUFscGhhbnVtZXJpY2ApLCBvciBhIGNoYXJhY3RlciBpblxuICogdGhlIGluY2x1c2l2ZSByYW5nZXMgVSswMDIzIE5VTUJFUiBTSUdOIChgI2ApIHRvIFUrMDAyNyBBUE9TVFJPUEhFIChgJ2ApLFxuICogVSswMDJBIEFTVEVSSVNLIChgKmApLCBVKzAwMkIgUExVUyBTSUdOIChgK2ApLCBVKzAwMkQgREFTSCAoYC1gKSwgVSswMDJGXG4gKiBTTEFTSCAoYC9gKSwgVSswMDNEIEVRVUFMUyBUTyAoYD1gKSwgVSswMDNGIFFVRVNUSU9OIE1BUksgKGA/YCksIFUrMDA1RVxuICogQ0FSRVQgKGBeYCkgdG8gVSswMDYwIEdSQVZFIEFDQ0VOVCAoYGAgYCBgYCksIG9yIFUrMDA3QiBMRUZUIENVUkxZIEJSQUNFXG4gKiAoYHtgKSB0byBVKzAwN0UgVElMREUgKGB+YCkuXG4gKlxuICogU2VlOlxuICogKipcXFtSRkM1MzIyXSoqOlxuICogW0ludGVybmV0IE1lc3NhZ2UgRm9ybWF0XShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTMyMikuXG4gKiBQLiBSZXNuaWNrLlxuICogSUVURi5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzY2lpQXRleHQgPSByZWdleENoZWNrKC9bIy0nKitcXC0tOT0/QS1aXi1+XS8pO1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhbiBBU0NJSSBjb250cm9sIGNoYXJhY3Rlci5cbiAqXG4gKiBBbiAqKkFTQ0lJIGNvbnRyb2wqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDAwMCBOVUxMIChOVUwpXG4gKiB0byBVKzAwMUYgKFVTKSwgb3IgVSswMDdGIChERUwpLlxuICpcbiAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzY2lpQ29udHJvbChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gU3BlY2lhbCB3aGl0ZXNwYWNlIGNvZGVzICh3aGljaCBoYXZlIG5lZ2F0aXZlIHZhbHVlcyksIEMwIGFuZCBDb250cm9sXG4gICAgLy8gY2hhcmFjdGVyIERFTFxuICAgIGNvZGUgIT09IG51bGwgJiYgKGNvZGUgPCAzMiB8fCBjb2RlID09PSAxMjcpXG4gICk7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBkaWdpdCAoYDBgIHRocm91Z2ggYDlgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGRpZ2l0KiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBVKzAwMzAgKGAwYCkgdG9cbiAqIFUrMDAzOSAoYDlgKS5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzY2lpRGlnaXQgPSByZWdleENoZWNrKC9cXGQvKTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGhleCBkaWdpdCAoYGFgIHRocm91Z2hcbiAqIGBmYCwgY2FzZSBpbnNlbnNpdGl2ZSwgb3IgYDBgIHRocm91Z2ggYDlgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGhleCBkaWdpdCoqIGlzIGFuIEFTQ0lJIGRpZ2l0IChzZWUgYGFzY2lpRGlnaXRgKSwgQVNDSUkgdXBwZXIgaGV4XG4gKiBkaWdpdCwgb3IgYW4gQVNDSUkgbG93ZXIgaGV4IGRpZ2l0LlxuICpcbiAqIEFuICoqQVNDSUkgdXBwZXIgaGV4IGRpZ2l0KiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBVKzAwNDFcbiAqIChgQWApIHRvIFUrMDA0NiAoYEZgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGxvd2VyIGhleCBkaWdpdCoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDYxXG4gKiAoYGFgKSB0byBVKzAwNjYgKGBmYCkuXG4gKlxuICogQHBhcmFtIGNvZGVcbiAqICAgQ29kZS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGl0IG1hdGNoZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBhc2NpaUhleERpZ2l0ID0gcmVnZXhDaGVjaygvW1xcZEEtRmEtZl0vKTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIEFTQ0lJIHB1bmN0dWF0aW9uLlxuICpcbiAqIEFuICoqQVNDSUkgcHVuY3R1YXRpb24qKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlcyBVKzAwMjFcbiAqIEVYQ0xBTUFUSU9OIE1BUksgKGAhYCkgdG8gVSswMDJGIFNMQVNIIChgL2ApLCBVKzAwM0EgQ09MT04gKGA6YCkgdG8gVSswMDQwIEFUXG4gKiBTSUdOIChgQGApLCBVKzAwNUIgTEVGVCBTUVVBUkUgQlJBQ0tFVCAoYFtgKSB0byBVKzAwNjAgR1JBVkUgQUNDRU5UXG4gKiAoYGAgYCBgYCksIG9yIFUrMDA3QiBMRUZUIENVUkxZIEJSQUNFIChge2ApIHRvIFUrMDA3RSBUSUxERSAoYH5gKS5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzY2lpUHVuY3R1YXRpb24gPSByZWdleENoZWNrKC9bIS0vOi1AWy1gey1+XS8pO1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhIG1hcmtkb3duIGxpbmUgZW5kaW5nLlxuICpcbiAqIEEgKiptYXJrZG93biBsaW5lIGVuZGluZyoqIGlzIHRoZSB2aXJ0dWFsIGNoYXJhY3RlcnMgTS0wMDAzIENBUlJJQUdFIFJFVFVSTlxuICogTElORSBGRUVEIChDUkxGKSwgTS0wMDA0IExJTkUgRkVFRCAoTEYpIGFuZCBNLTAwMDUgQ0FSUklBR0UgUkVUVVJOIChDUikuXG4gKlxuICogSW4gbWljcm9tYXJrLCB0aGUgYWN0dWFsIGNoYXJhY3RlciBVKzAwMEEgTElORSBGRUVEIChMRikgYW5kIFUrMDAwRCBDQVJSSUFHRVxuICogUkVUVVJOIChDUikgYXJlIHJlcGxhY2VkIGJ5IHRoZXNlIHZpcnR1YWwgY2hhcmFjdGVycyBkZXBlbmRpbmcgb24gd2hldGhlclxuICogdGhleSBvY2N1cnJlZCB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqICAgQ29kZS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGl0IG1hdGNoZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkge1xuICByZXR1cm4gY29kZSAhPT0gbnVsbCAmJiBjb2RlIDwgLTI7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIGNoYXJhY3RlciBjb2RlIGlzIGEgbWFya2Rvd24gbGluZSBlbmRpbmcgKHNlZVxuICogYG1hcmtkb3duTGluZUVuZGluZ2ApIG9yIG1hcmtkb3duIHNwYWNlIChzZWUgYG1hcmtkb3duU3BhY2VgKS5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqICAgQ29kZS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGl0IG1hdGNoZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgIT09IG51bGwgJiYgKGNvZGUgPCAwIHx8IGNvZGUgPT09IDMyKTtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgY2hhcmFjdGVyIGNvZGUgaXMgYSBtYXJrZG93biBzcGFjZS5cbiAqXG4gKiBBICoqbWFya2Rvd24gc3BhY2UqKiBpcyB0aGUgY29uY3JldGUgY2hhcmFjdGVyIFUrMDAyMCBTUEFDRSAoU1ApIGFuZCB0aGVcbiAqIHZpcnR1YWwgY2hhcmFjdGVycyBNLTAwMDEgVklSVFVBTCBTUEFDRSAoVlMpIGFuZCBNLTAwMDIgSE9SSVpPTlRBTCBUQUIgKEhUKS5cbiAqXG4gKiBJbiBtaWNyb21hcmssIHRoZSBhY3R1YWwgY2hhcmFjdGVyIFUrMDAwOSBDSEFSQUNURVIgVEFCVUxBVElPTiAoSFQpIGlzXG4gKiByZXBsYWNlZCBieSBvbmUgTS0wMDAyIEhPUklaT05UQUwgVEFCIChIVCkgYW5kIGJldHdlZW4gMCBhbmQgMyBNLTAwMDEgVklSVFVBTFxuICogU1BBQ0UgKFZTKSBjaGFyYWN0ZXJzLCBkZXBlbmRpbmcgb24gdGhlIGNvbHVtbiBhdCB3aGljaCB0aGUgdGFiIG9jY3VycmVkLlxuICpcbiAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgaXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duU3BhY2UoY29kZSkge1xuICByZXR1cm4gY29kZSA9PT0gLTIgfHwgY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzI7XG59XG5cbi8vIFNpemUgbm90ZTogcmVtb3ZpbmcgQVNDSUkgZnJvbSB0aGUgcmVnZXggYW5kIHVzaW5nIGBhc2NpaVB1bmN0dWF0aW9uYCBoZXJlXG4vLyBJbiBmYWN0IGFkZHMgdG8gdGhlIGJ1bmRsZSBzaXplLlxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIFVuaWNvZGUgcHVuY3R1YXRpb24uXG4gKlxuICogQSAqKlVuaWNvZGUgcHVuY3R1YXRpb24qKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgVW5pY29kZSBgUGNgIChQdW5jdHVhdGlvbixcbiAqIENvbm5lY3RvciksIGBQZGAgKFB1bmN0dWF0aW9uLCBEYXNoKSwgYFBlYCAoUHVuY3R1YXRpb24sIENsb3NlKSwgYFBmYFxuICogKFB1bmN0dWF0aW9uLCBGaW5hbCBxdW90ZSksIGBQaWAgKFB1bmN0dWF0aW9uLCBJbml0aWFsIHF1b3RlKSwgYFBvYFxuICogKFB1bmN0dWF0aW9uLCBPdGhlciksIG9yIGBQc2AgKFB1bmN0dWF0aW9uLCBPcGVuKSBjYXRlZ29yaWVzLCBvciBhbiBBU0NJSVxuICogcHVuY3R1YXRpb24gKHNlZSBgYXNjaWlQdW5jdHVhdGlvbmApLlxuICpcbiAqIFNlZTpcbiAqICoqXFxbVU5JQ09ERV0qKjpcbiAqIFtUaGUgVW5pY29kZSBTdGFuZGFyZF0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvdmVyc2lvbnMvKS5cbiAqIFVuaWNvZGUgQ29uc29ydGl1bS5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnNcbiAqICAgV2hldGhlciBpdCBtYXRjaGVzLlxuICovXG5leHBvcnQgY29uc3QgdW5pY29kZVB1bmN0dWF0aW9uID0gcmVnZXhDaGVjaygvXFxwe1B9fFxccHtTfS91KTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIFVuaWNvZGUgd2hpdGVzcGFjZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBkb2VzIGhhbmRsZSBtaWNyb21hcmsgc3BlY2lmaWMgbWFya2Rvd24gd2hpdGVzcGFjZSBjaGFyYWN0ZXJzLlxuICogU2VlIGBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlYCB0byBjaGVjayB0aGF0LlxuICpcbiAqIEEgKipVbmljb2RlIHdoaXRlc3BhY2UqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgVW5pY29kZSBgWnNgIChTZXBhcmF0b3IsXG4gKiBTcGFjZSkgY2F0ZWdvcnksIG9yIFUrMDAwOSBDSEFSQUNURVIgVEFCVUxBVElPTiAoSFQpLCBVKzAwMEEgTElORSBGRUVEIChMRiksXG4gKiBVKzAwMEMgKEZGKSwgb3IgVSswMDBEIENBUlJJQUdFIFJFVFVSTiAoQ1IpICgqKlxcW1VOSUNPREVdKiopLlxuICpcbiAqIFNlZTpcbiAqICoqXFxbVU5JQ09ERV0qKjpcbiAqIFtUaGUgVW5pY29kZSBTdGFuZGFyZF0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvdmVyc2lvbnMvKS5cbiAqIFVuaWNvZGUgQ29uc29ydGl1bS5cbiAqXG4gKiBAcGFyYW0gY29kZVxuICogICBDb2RlLlxuICogQHJldHVybnNcbiAqICAgV2hldGhlciBpdCBtYXRjaGVzLlxuICovXG5leHBvcnQgY29uc3QgdW5pY29kZVdoaXRlc3BhY2UgPSByZWdleENoZWNrKC9cXHMvKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjb2RlIGNoZWNrIGZyb20gYSByZWdleC5cbiAqXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhcbiAqICAgRXhwcmVzc2lvbi5cbiAqIEByZXR1cm5zIHsoY29kZTogQ29kZSkgPT4gYm9vbGVhbn1cbiAqICAgQ2hlY2suXG4gKi9cbmZ1bmN0aW9uIHJlZ2V4Q2hlY2socmVnZXgpIHtcbiAgcmV0dXJuIGNoZWNrO1xuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgY29kZSBtYXRjaGVzIHRoZSBib3VuZCByZWdleC5cbiAgICpcbiAgICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gICAqICAgQ2hhcmFjdGVyIGNvZGUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiAgIFdoZXRoZXIgdGhlIGNoYXJhY3RlciBjb2RlIG1hdGNoZXMgdGhlIGJvdW5kIHJlZ2V4LlxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2soY29kZSkge1xuICAgIHJldHVybiBjb2RlICE9PSBudWxsICYmIGNvZGUgPiAtMSAmJiByZWdleC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7RWZmZWN0cywgU3RhdGUsIFRva2VuVHlwZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgbWFya2Rvd25TcGFjZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG5cbi8vIFRvIGRvOiBpbXBsZW1lbnQgYHNwYWNlT3JUYWJgLCBgc3BhY2VPclRhYk1pbk1heGAsIGBzcGFjZU9yVGFiV2l0aE9wdGlvbnNgLlxuXG4vKipcbiAqIFBhcnNlIHNwYWNlcyBhbmQgdGFicy5cbiAqXG4gKiBUaGVyZSBpcyBubyBgbm9rYCBwYXJhbWV0ZXI6XG4gKlxuICogKiAgIHNwYWNlcyBpbiBtYXJrZG93biBhcmUgb2Z0ZW4gb3B0aW9uYWwsIGluIHdoaWNoIGNhc2UgdGhpcyBmYWN0b3J5IGNhbiBiZVxuICogICAgIHVzZWQgYW5kIGBva2Agd2lsbCBiZSBzd2l0Y2hlZCB0byB3aGV0aGVyIHNwYWNlcyB3ZXJlIGZvdW5kIG9yIG5vdFxuICogKiAgIG9uZSBsaW5lIGVuZGluZyBvciBzcGFjZSBjYW4gYmUgZGV0ZWN0ZWQgd2l0aCBgbWFya2Rvd25TcGFjZShjb2RlKWAgcmlnaHRcbiAqICAgICBiZWZvcmUgdXNpbmcgYGZhY3RvcnlTcGFjZWBcbiAqXG4gKiAjIyMjIyMgRXhhbXBsZXNcbiAqXG4gKiBXaGVyZSBgXHUyNDA5YCByZXByZXNlbnRzIGEgdGFiIChwbHVzIGhvdyBtdWNoIGl0IGV4cGFuZHMpIGFuZCBgXHUyNDIwYCByZXByZXNlbnRzIGFcbiAqIHNpbmdsZSBzcGFjZS5cbiAqXG4gKiBgYGBtYXJrZG93blxuICogXHUyNDA5XG4gKiBcdTI0MjBcdTI0MjBcdTI0MjBcdTI0MjBcbiAqIFx1MjQwOVx1MjQyMFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtFZmZlY3RzfSBlZmZlY3RzXG4gKiAgIENvbnRleHQuXG4gKiBAcGFyYW0ge1N0YXRlfSBva1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHN1Y2Nlc3NmdWwuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gdHlwZVxuICogICBUeXBlIChgJyBcXHQnYCkuXG4gKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gW21heD1JbmZpbml0eV1cbiAqICAgTWF4IChleGNsdXNpdmUpLlxuICogQHJldHVybnMge1N0YXRlfVxuICogICBTdGFydCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgdHlwZSwgbWF4KSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4ID8gbWF4IC0gMSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgbGV0IHNpemUgPSAwO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpO1xuICAgICAgcmV0dXJuIHByZWZpeChjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG9rKGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gcHJlZml4KGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSAmJiBzaXplKysgPCBsaW1pdCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG4gICAgZWZmZWN0cy5leGl0KHR5cGUpO1xuICAgIHJldHVybiBvayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBJbml0aWFsQ29uc3RydWN0LFxuICogICBJbml0aWFsaXplcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKiBAdHlwZSB7SW5pdGlhbENvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb250ZW50ID0ge1xuICB0b2tlbml6ZTogaW5pdGlhbGl6ZUNvbnRlbnRcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtJbml0aWFsaXplcn1cbiAqICAgQ29udGVudC5cbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRlbnQoZWZmZWN0cykge1xuICBjb25zdCBjb250ZW50U3RhcnQgPSBlZmZlY3RzLmF0dGVtcHQodGhpcy5wYXJzZXIuY29uc3RydWN0cy5jb250ZW50SW5pdGlhbCwgYWZ0ZXJDb250ZW50U3RhcnRDb25zdHJ1Y3QsIHBhcmFncmFwaEluaXRpYWwpO1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBjb250ZW50U3RhcnQ7XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJDb250ZW50U3RhcnRDb25zdHJ1Y3QoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nXCIpO1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgY29udGVudFN0YXJ0LCBcImxpbmVQcmVmaXhcIik7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBwYXJhZ3JhcGhJbml0aWFsKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwicGFyYWdyYXBoXCIpO1xuICAgIHJldHVybiBsaW5lU3RhcnQoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBsaW5lU3RhcnQoY29kZSkge1xuICAgIGNvbnN0IHRva2VuID0gZWZmZWN0cy5lbnRlcihcImNodW5rVGV4dFwiLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJ0ZXh0XCIsXG4gICAgICBwcmV2aW91c1xuICAgIH0pO1xuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgcHJldmlvdXMubmV4dCA9IHRva2VuO1xuICAgIH1cbiAgICBwcmV2aW91cyA9IHRva2VuO1xuICAgIHJldHVybiBkYXRhKGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNodW5rVGV4dFwiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcInBhcmFncmFwaFwiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2h1bmtUZXh0XCIpO1xuICAgICAgcmV0dXJuIGxpbmVTdGFydDtcbiAgICB9XG5cbiAgICAvLyBEYXRhLlxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIENvbnRhaW5lclN0YXRlLFxuICogICBJbml0aWFsQ29uc3RydWN0LFxuICogICBJbml0aWFsaXplcixcbiAqICAgUG9pbnQsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplcixcbiAqICAgVG9rZW5cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7W0NvbnN0cnVjdCwgQ29udGFpbmVyU3RhdGVdfSBTdGFja0l0ZW1cbiAqICAgQ29uc3RydWN0IGFuZCBpdHMgc3RhdGUuXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbmltcG9ydCB7IHNwbGljZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnO1xuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGRvY3VtZW50ID0ge1xuICB0b2tlbml6ZTogaW5pdGlhbGl6ZURvY3VtZW50XG59O1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IGNvbnRhaW5lckNvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplQ29udGFpbmVyXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIFNlbGYuXG4gKiBAdHlwZSB7SW5pdGlhbGl6ZXJ9XG4gKiAgIEluaXRpYWxpemVyLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplRG9jdW1lbnQoZWZmZWN0cykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgLyoqIEB0eXBlIHtBcnJheTxTdGFja0l0ZW0+fSAqL1xuICBjb25zdCBzdGFjayA9IFtdO1xuICBsZXQgY29udGludWVkID0gMDtcbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHQgfCB1bmRlZmluZWR9ICovXG4gIGxldCBjaGlsZEZsb3c7XG4gIC8qKiBAdHlwZSB7VG9rZW4gfCB1bmRlZmluZWR9ICovXG4gIGxldCBjaGlsZFRva2VuO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGxpbmVTdGFydE9mZnNldDtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBGaXJzdCB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIG9wZW4gYmxvY2tzLCBzdGFydGluZyB3aXRoIHRoZSByb290XG4gICAgLy8gZG9jdW1lbnQsIGFuZCBkZXNjZW5kaW5nIHRocm91Z2ggbGFzdCBjaGlsZHJlbiBkb3duIHRvIHRoZSBsYXN0IG9wZW5cbiAgICAvLyBibG9jay5cbiAgICAvLyBFYWNoIGJsb2NrIGltcG9zZXMgYSBjb25kaXRpb24gdGhhdCB0aGUgbGluZSBtdXN0IHNhdGlzZnkgaWYgdGhlIGJsb2NrIGlzXG4gICAgLy8gdG8gcmVtYWluIG9wZW4uXG4gICAgLy8gRm9yIGV4YW1wbGUsIGEgYmxvY2sgcXVvdGUgcmVxdWlyZXMgYSBgPmAgY2hhcmFjdGVyLlxuICAgIC8vIEEgcGFyYWdyYXBoIHJlcXVpcmVzIGEgbm9uLWJsYW5rIGxpbmUuXG4gICAgLy8gSW4gdGhpcyBwaGFzZSB3ZSBtYXkgbWF0Y2ggYWxsIG9yIGp1c3Qgc29tZSBvZiB0aGUgb3BlbiBibG9ja3MuXG4gICAgLy8gQnV0IHdlIGNhbm5vdCBjbG9zZSB1bm1hdGNoZWQgYmxvY2tzIHlldCwgYmVjYXVzZSB3ZSBtYXkgaGF2ZSBhIGxhenlcbiAgICAvLyBjb250aW51YXRpb24gbGluZS5cbiAgICBpZiAoY29udGludWVkIDwgc3RhY2subGVuZ3RoKSB7XG4gICAgICBjb25zdCBpdGVtID0gc3RhY2tbY29udGludWVkXTtcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSBpdGVtWzFdO1xuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChpdGVtWzBdLmNvbnRpbnVhdGlvbiwgZG9jdW1lbnRDb250aW51ZSwgY2hlY2tOZXdDb250YWluZXJzKShjb2RlKTtcbiAgICB9XG5cbiAgICAvLyBEb25lLlxuICAgIHJldHVybiBjaGVja05ld0NvbnRhaW5lcnMoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkb2N1bWVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBjb250aW51ZWQrKztcblxuICAgIC8vIE5vdGU6IHRoaXMgZmllbGQgaXMgY2FsbGVkIGBfY2xvc2VGbG93YCBidXQgaXQgYWxzbyBjbG9zZXMgY29udGFpbmVycy5cbiAgICAvLyBQZXJoYXBzIGEgZ29vZCBpZGVhIHRvIHJlbmFtZSBpdCBidXQgaXRcdTIwMTlzIGFscmVhZHkgdXNlZCBpbiB0aGUgd2lsZCBieVxuICAgIC8vIGV4dGVuc2lvbnMuXG4gICAgaWYgKHNlbGYuY29udGFpbmVyU3RhdGUuX2Nsb3NlRmxvdykge1xuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGNoaWxkRmxvdykge1xuICAgICAgICBjbG9zZUZsb3coKTtcbiAgICAgIH1cblxuICAgICAgLy8gTm90ZTogdGhpcyBhbGdvcml0aG0gZm9yIG1vdmluZyBldmVudHMgYXJvdW5kIGlzIHNpbWlsYXIgdG8gdGhlXG4gICAgICAvLyBhbGdvcml0aG0gd2hlbiBkZWFsaW5nIHdpdGggbGF6eSBsaW5lcyBpbiBgd3JpdGVUb0NoaWxkYC5cbiAgICAgIGNvbnN0IGluZGV4QmVmb3JlRXhpdHMgPSBzZWxmLmV2ZW50cy5sZW5ndGg7XG4gICAgICBsZXQgaW5kZXhCZWZvcmVGbG93ID0gaW5kZXhCZWZvcmVFeGl0cztcbiAgICAgIC8qKiBAdHlwZSB7UG9pbnQgfCB1bmRlZmluZWR9ICovXG4gICAgICBsZXQgcG9pbnQ7XG5cbiAgICAgIC8vIEZpbmQgdGhlIGZsb3cgY2h1bmsuXG4gICAgICB3aGlsZSAoaW5kZXhCZWZvcmVGbG93LS0pIHtcbiAgICAgICAgaWYgKHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMF0gPT09ICdleGl0JyAmJiBzZWxmLmV2ZW50c1tpbmRleEJlZm9yZUZsb3ddWzFdLnR5cGUgPT09IFwiY2h1bmtGbG93XCIpIHtcbiAgICAgICAgICBwb2ludCA9IHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMV0uZW5kO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBleGl0Q29udGFpbmVycyhjb250aW51ZWQpO1xuXG4gICAgICAvLyBGaXggcG9zaXRpb25zLlxuICAgICAgbGV0IGluZGV4ID0gaW5kZXhCZWZvcmVFeGl0cztcbiAgICAgIHdoaWxlIChpbmRleCA8IHNlbGYuZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0uZW5kID0ge1xuICAgICAgICAgIC4uLnBvaW50XG4gICAgICAgIH07XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIC8vIEluamVjdCB0aGUgZXhpdHMgZWFybGllciAodGhleVx1MjAxOXJlIHN0aWxsIGFsc28gYXQgdGhlIGVuZCkuXG4gICAgICBzcGxpY2Uoc2VsZi5ldmVudHMsIGluZGV4QmVmb3JlRmxvdyArIDEsIDAsIHNlbGYuZXZlbnRzLnNsaWNlKGluZGV4QmVmb3JlRXhpdHMpKTtcblxuICAgICAgLy8gRGlzY2FyZCB0aGUgZHVwbGljYXRlIGV4aXRzLlxuICAgICAgc2VsZi5ldmVudHMubGVuZ3RoID0gaW5kZXg7XG4gICAgICByZXR1cm4gY2hlY2tOZXdDb250YWluZXJzKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnQoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjaGVja05ld0NvbnRhaW5lcnMoY29kZSkge1xuICAgIC8vIE5leHQsIGFmdGVyIGNvbnN1bWluZyB0aGUgY29udGludWF0aW9uIG1hcmtlcnMgZm9yIGV4aXN0aW5nIGJsb2Nrcywgd2VcbiAgICAvLyBsb29rIGZvciBuZXcgYmxvY2sgc3RhcnRzIChlLmcuIGA+YCBmb3IgYSBibG9jayBxdW90ZSkuXG4gICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgbmV3IGJsb2NrIHN0YXJ0LCB3ZSBjbG9zZSBhbnkgYmxvY2tzIHVubWF0Y2hlZCBpblxuICAgIC8vIHN0ZXAgMSBiZWZvcmUgY3JlYXRpbmcgdGhlIG5ldyBibG9jayBhcyBhIGNoaWxkIG9mIHRoZSBsYXN0IG1hdGNoZWRcbiAgICAvLyBibG9jay5cbiAgICBpZiAoY29udGludWVkID09PSBzdGFjay5sZW5ndGgpIHtcbiAgICAgIC8vIE5vIG5lZWQgdG8gYGNoZWNrYCB3aGV0aGVyIHRoZXJlXHUyMDE5cyBhIGNvbnRhaW5lciwgb2YgYGV4aXRDb250YWluZXJzYFxuICAgICAgLy8gd291bGQgYmUgbW9vdC5cbiAgICAgIC8vIFdlIGNhbiBpbnN0ZWFkIGltbWVkaWF0ZWx5IGBhdHRlbXB0YCB0byBwYXJzZSBvbmUuXG4gICAgICBpZiAoIWNoaWxkRmxvdykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRDb250aW51ZWQoY29kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgY29uY3JldGUgY29udGVudCwgc3VjaCBhcyBibG9jayBIVE1MIG9yIGZlbmNlZCBjb2RlLFxuICAgICAgLy8gd2UgY2FuXHUyMDE5dCBoYXZlIGNvbnRhaW5lcnMgXHUyMDFDcGllcmNlXHUyMDFEIGludG8gdGhlbSwgc28gd2UgY2FuIGltbWVkaWF0ZWx5XG4gICAgICAvLyBzdGFydC5cbiAgICAgIGlmIChjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdCAmJiBjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdC5jb25jcmV0ZSkge1xuICAgICAgICByZXR1cm4gZmxvd1N0YXJ0KGNvZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBkbyBoYXZlIGZsb3csIGl0IGNvdWxkIHN0aWxsIGJlIGEgYmxhbmsgbGluZSxcbiAgICAgIC8vIGJ1dCB3ZVx1MjAxOWQgYmUgaW50ZXJydXB0aW5nIGl0IHcvIGEgbmV3IGNvbnRhaW5lciBpZiB0aGVyZVx1MjAxOXMgYSBjdXJyZW50XG4gICAgICAvLyBjb25zdHJ1Y3QuXG4gICAgICAvLyBUbyBkbzogbmV4dCBtYWpvcjogcmVtb3ZlIGBfZ2ZtVGFibGVEeW5hbWljSW50ZXJydXB0SGFja2AgKG5vIGxvbmdlclxuICAgICAgLy8gbmVlZGVkIGluIG1pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXRhYmxlQDEuMC42KS5cbiAgICAgIHNlbGYuaW50ZXJydXB0ID0gQm9vbGVhbihjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdCAmJiAhY2hpbGRGbG93Ll9nZm1UYWJsZUR5bmFtaWNJbnRlcnJ1cHRIYWNrKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBjb250YWluZXIuXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IHt9O1xuICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKGNvbnRhaW5lckNvbnN0cnVjdCwgdGhlcmVJc0FOZXdDb250YWluZXIsIHRoZXJlSXNOb05ld0NvbnRhaW5lcikoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0aGVyZUlzQU5ld0NvbnRhaW5lcihjb2RlKSB7XG4gICAgaWYgKGNoaWxkRmxvdykgY2xvc2VGbG93KCk7XG4gICAgZXhpdENvbnRhaW5lcnMoY29udGludWVkKTtcbiAgICByZXR1cm4gZG9jdW1lbnRDb250aW51ZWQoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0aGVyZUlzTm9OZXdDb250YWluZXIoY29kZSkge1xuICAgIHNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSA9IGNvbnRpbnVlZCAhPT0gc3RhY2subGVuZ3RoO1xuICAgIGxpbmVTdGFydE9mZnNldCA9IHNlbGYubm93KCkub2Zmc2V0O1xuICAgIHJldHVybiBmbG93U3RhcnQoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkb2N1bWVudENvbnRpbnVlZChjb2RlKSB7XG4gICAgLy8gVHJ5IG5ldyBjb250YWluZXJzLlxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSB7fTtcbiAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGNvbnRhaW5lckNvbnN0cnVjdCwgY29udGFpbmVyQ29udGludWUsIGZsb3dTdGFydCkoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb250YWluZXJDb250aW51ZShjb2RlKSB7XG4gICAgY29udGludWVkKys7XG4gICAgc3RhY2sucHVzaChbc2VsZi5jdXJyZW50Q29uc3RydWN0LCBzZWxmLmNvbnRhaW5lclN0YXRlXSk7XG4gICAgLy8gVHJ5IGFub3RoZXIuXG4gICAgcmV0dXJuIGRvY3VtZW50Q29udGludWVkKGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZmxvd1N0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkRmxvdykgY2xvc2VGbG93KCk7XG4gICAgICBleGl0Q29udGFpbmVycygwKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hpbGRGbG93ID0gY2hpbGRGbG93IHx8IHNlbGYucGFyc2VyLmZsb3coc2VsZi5ub3coKSk7XG4gICAgZWZmZWN0cy5lbnRlcihcImNodW5rRmxvd1wiLCB7XG4gICAgICBfdG9rZW5pemVyOiBjaGlsZEZsb3csXG4gICAgICBjb250ZW50VHlwZTogXCJmbG93XCIsXG4gICAgICBwcmV2aW91czogY2hpbGRUb2tlblxuICAgIH0pO1xuICAgIHJldHVybiBmbG93Q29udGludWUoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBmbG93Q29udGludWUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICB3cml0ZVRvQ2hpbGQoZWZmZWN0cy5leGl0KFwiY2h1bmtGbG93XCIpLCB0cnVlKTtcbiAgICAgIGV4aXRDb250YWluZXJzKDApO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICB3cml0ZVRvQ2hpbGQoZWZmZWN0cy5leGl0KFwiY2h1bmtGbG93XCIpKTtcbiAgICAgIC8vIEdldCByZWFkeSBmb3IgdGhlIG5leHQgbGluZS5cbiAgICAgIGNvbnRpbnVlZCA9IDA7XG4gICAgICBzZWxmLmludGVycnVwdCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBmbG93Q29udGludWU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAgICogICBUb2tlbi5cbiAgICogQHBhcmFtIHtib29sZWFuIHwgdW5kZWZpbmVkfSBbZW5kT2ZGaWxlXVxuICAgKiAgIFdoZXRoZXIgdGhlIHRva2VuIGlzIGF0IHRoZSBlbmQgb2YgdGhlIGZpbGUgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBmdW5jdGlvbiB3cml0ZVRvQ2hpbGQodG9rZW4sIGVuZE9mRmlsZSkge1xuICAgIGNvbnN0IHN0cmVhbSA9IHNlbGYuc2xpY2VTdHJlYW0odG9rZW4pO1xuICAgIGlmIChlbmRPZkZpbGUpIHN0cmVhbS5wdXNoKG51bGwpO1xuICAgIHRva2VuLnByZXZpb3VzID0gY2hpbGRUb2tlbjtcbiAgICBpZiAoY2hpbGRUb2tlbikgY2hpbGRUb2tlbi5uZXh0ID0gdG9rZW47XG4gICAgY2hpbGRUb2tlbiA9IHRva2VuO1xuICAgIGNoaWxkRmxvdy5kZWZpbmVTa2lwKHRva2VuLnN0YXJ0KTtcbiAgICBjaGlsZEZsb3cud3JpdGUoc3RyZWFtKTtcblxuICAgIC8vIEFscmlnaHQsIHNvIHdlIGp1c3QgYWRkZWQgYSBsYXp5IGxpbmU6XG4gICAgLy9cbiAgICAvLyBgYGBtYXJrZG93blxuICAgIC8vID4gYVxuICAgIC8vIGIuXG4gICAgLy9cbiAgICAvLyBPcjpcbiAgICAvL1xuICAgIC8vID4gfn5+Y1xuICAgIC8vIGRcbiAgICAvL1xuICAgIC8vIE9yOlxuICAgIC8vXG4gICAgLy8gPiB8IGUgfFxuICAgIC8vIGZcbiAgICAvLyBgYGBcbiAgICAvL1xuICAgIC8vIFRoZSBjb25zdHJ1Y3QgaW4gdGhlIHNlY29uZCBleGFtcGxlIChmZW5jZWQgY29kZSkgZG9lcyBub3QgYWNjZXB0IGxhenlcbiAgICAvLyBsaW5lcywgc28gaXQgbWFya2VkIGl0c2VsZiBhcyBkb25lIGF0IHRoZSBlbmQgb2YgaXRzIGZpcnN0IGxpbmUsIGFuZFxuICAgIC8vIHRoZW4gdGhlIGNvbnRlbnQgY29uc3RydWN0IHBhcnNlcyBgZGAuXG4gICAgLy8gTW9zdCBjb25zdHJ1Y3RzIGluIG1hcmtkb3duIG1hdGNoIG9uIHRoZSBmaXJzdCBsaW5lOiBpZiB0aGUgZmlyc3QgbGluZVxuICAgIC8vIGZvcm1zIGEgY29uc3RydWN0LCBhIG5vbi1sYXp5IGxpbmUgY2FuXHUyMDE5dCBcdTIwMUN1bm1ha2VcdTIwMUQgaXQuXG4gICAgLy9cbiAgICAvLyBUaGUgY29uc3RydWN0IGluIHRoZSB0aGlyZCBleGFtcGxlIGlzIHBvdGVudGlhbGx5IGEgR0ZNIHRhYmxlLCBhbmRcbiAgICAvLyB0aG9zZSBhcmUgKndlaXJkKi5cbiAgICAvLyBJdCAqY291bGQqIGJlIGEgdGFibGUsIGZyb20gdGhlIGZpcnN0IGxpbmUsIGlmIHRoZSBmb2xsb3dpbmcgbGluZVxuICAgIC8vIG1hdGNoZXMgYSBjb25kaXRpb24uXG4gICAgLy8gSW4gdGhpcyBjYXNlLCB0aGF0IHNlY29uZCBsaW5lIGlzIGxhenksIHdoaWNoIFx1MjAxQ3VubWFrZXNcdTIwMUQgdGhlIGZpcnN0IGxpbmVcbiAgICAvLyBhbmQgdHVybnMgdGhlIHdob2xlIGludG8gb25lIGNvbnRlbnQgYmxvY2suXG4gICAgLy9cbiAgICAvLyBXZVx1MjAxOXZlIG5vdyBwYXJzZWQgdGhlIG5vbi1sYXp5IGFuZCB0aGUgbGF6eSBsaW5lLCBhbmQgY2FuIGZpZ3VyZSBvdXRcbiAgICAvLyB3aGV0aGVyIHRoZSBsYXp5IGxpbmUgc3RhcnRlZCBhIG5ldyBmbG93IGJsb2NrLlxuICAgIC8vIElmIGl0IGRpZCwgd2UgZXhpdCB0aGUgY3VycmVudCBjb250YWluZXJzIGJldHdlZW4gdGhlIHR3byBmbG93IGJsb2Nrcy5cbiAgICBpZiAoc2VsZi5wYXJzZXIubGF6eVt0b2tlbi5zdGFydC5saW5lXSkge1xuICAgICAgbGV0IGluZGV4ID0gY2hpbGRGbG93LmV2ZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoXG4gICAgICAgIC8vIFRoZSB0b2tlbiBzdGFydHMgYmVmb3JlIHRoZSBsaW5lIGVuZGluZ1x1MjAyNlxuICAgICAgICBjaGlsZEZsb3cuZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQgPCBsaW5lU3RhcnRPZmZzZXQgJiYgKFxuICAgICAgICAvLyBcdTIwMjZhbmQgZWl0aGVyIGlzIG5vdCBlbmRlZCB5ZXRcdTIwMjZcbiAgICAgICAgIWNoaWxkRmxvdy5ldmVudHNbaW5kZXhdWzFdLmVuZCB8fFxuICAgICAgICAvLyBcdTIwMjZvciBlbmRzIGFmdGVyIGl0LlxuICAgICAgICBjaGlsZEZsb3cuZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0ID4gbGluZVN0YXJ0T2Zmc2V0KSkge1xuICAgICAgICAgIC8vIEV4aXQ6IHRoZXJlXHUyMDE5cyBzdGlsbCBzb21ldGhpbmcgb3Blbiwgd2hpY2ggbWVhbnMgaXRcdTIwMTlzIGEgbGF6eSBsaW5lXG4gICAgICAgICAgLy8gcGFydCBvZiBzb21ldGhpbmcuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdGU6IHRoaXMgYWxnb3JpdGhtIGZvciBtb3ZpbmcgZXZlbnRzIGFyb3VuZCBpcyBzaW1pbGFyIHRvIHRoZVxuICAgICAgLy8gYWxnb3JpdGhtIHdoZW4gY2xvc2luZyBmbG93IGluIGBkb2N1bWVudENvbnRpbnVlYC5cbiAgICAgIGNvbnN0IGluZGV4QmVmb3JlRXhpdHMgPSBzZWxmLmV2ZW50cy5sZW5ndGg7XG4gICAgICBsZXQgaW5kZXhCZWZvcmVGbG93ID0gaW5kZXhCZWZvcmVFeGl0cztcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgICAgIGxldCBzZWVuO1xuICAgICAgLyoqIEB0eXBlIHtQb2ludCB8IHVuZGVmaW5lZH0gKi9cbiAgICAgIGxldCBwb2ludDtcblxuICAgICAgLy8gRmluZCB0aGUgcHJldmlvdXMgY2h1bmsgKHRoZSBvbmUgYmVmb3JlIHRoZSBsYXp5IGxpbmUpLlxuICAgICAgd2hpbGUgKGluZGV4QmVmb3JlRmxvdy0tKSB7XG4gICAgICAgIGlmIChzZWxmLmV2ZW50c1tpbmRleEJlZm9yZUZsb3ddWzBdID09PSAnZXhpdCcgJiYgc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS50eXBlID09PSBcImNodW5rRmxvd1wiKSB7XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHBvaW50ID0gc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS5lbmQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGV4aXRDb250YWluZXJzKGNvbnRpbnVlZCk7XG5cbiAgICAgIC8vIEZpeCBwb3NpdGlvbnMuXG4gICAgICBpbmRleCA9IGluZGV4QmVmb3JlRXhpdHM7XG4gICAgICB3aGlsZSAoaW5kZXggPCBzZWxmLmV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLmVuZCA9IHtcbiAgICAgICAgICAuLi5wb2ludFxuICAgICAgICB9O1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICAvLyBJbmplY3QgdGhlIGV4aXRzIGVhcmxpZXIgKHRoZXlcdTIwMTlyZSBzdGlsbCBhbHNvIGF0IHRoZSBlbmQpLlxuICAgICAgc3BsaWNlKHNlbGYuZXZlbnRzLCBpbmRleEJlZm9yZUZsb3cgKyAxLCAwLCBzZWxmLmV2ZW50cy5zbGljZShpbmRleEJlZm9yZUV4aXRzKSk7XG5cbiAgICAgIC8vIERpc2NhcmQgdGhlIGR1cGxpY2F0ZSBleGl0cy5cbiAgICAgIHNlbGYuZXZlbnRzLmxlbmd0aCA9IGluZGV4O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiAgIFNpemUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGV4aXRDb250YWluZXJzKHNpemUpIHtcbiAgICBsZXQgaW5kZXggPSBzdGFjay5sZW5ndGg7XG5cbiAgICAvLyBFeGl0IG9wZW4gY29udGFpbmVycy5cbiAgICB3aGlsZSAoaW5kZXgtLSA+IHNpemUpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gc3RhY2tbaW5kZXhdO1xuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IGVudHJ5WzFdO1xuICAgICAgZW50cnlbMF0uZXhpdC5jYWxsKHNlbGYsIGVmZmVjdHMpO1xuICAgIH1cbiAgICBzdGFjay5sZW5ndGggPSBzaXplO1xuICB9XG4gIGZ1bmN0aW9uIGNsb3NlRmxvdygpIHtcbiAgICBjaGlsZEZsb3cud3JpdGUoW251bGxdKTtcbiAgICBjaGlsZFRva2VuID0gdW5kZWZpbmVkO1xuICAgIGNoaWxkRmxvdyA9IHVuZGVmaW5lZDtcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLl9jbG9zZUZsb3cgPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqICAgVG9rZW5pemVyLlxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvbnRhaW5lcihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBlZmZlY3RzLmF0dGVtcHQodGhpcy5wYXJzZXIuY29uc3RydWN0cy5kb2N1bWVudCwgb2ssIG5vayksIFwibGluZVByZWZpeFwiLCB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJykgPyB1bmRlZmluZWQgOiA0KTtcbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtDb2RlfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLCB1bmljb2RlUHVuY3R1YXRpb24sIHVuaWNvZGVXaGl0ZXNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKlxuICogQ2xhc3NpZnkgd2hldGhlciBhIGNvZGUgcmVwcmVzZW50cyB3aGl0ZXNwYWNlLCBwdW5jdHVhdGlvbiwgb3Igc29tZXRoaW5nXG4gKiBlbHNlLlxuICpcbiAqIFVzZWQgZm9yIGF0dGVudGlvbiAoZW1waGFzaXMsIHN0cm9uZyksIHdob3NlIHNlcXVlbmNlcyBjYW4gb3BlbiBvciBjbG9zZVxuICogYmFzZWQgb24gdGhlIGNsYXNzIG9mIHN1cnJvdW5kaW5nIGNoYXJhY3RlcnMuXG4gKlxuICogPiBcdUQ4M0RcdURDNDkgKipOb3RlKio6IGVvZiAoYG51bGxgKSBpcyBzZWVuIGFzIHdoaXRlc3BhY2UuXG4gKlxuICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gKiAgIENvZGUuXG4gKiBAcmV0dXJucyB7dHlwZW9mIGNvbnN0YW50cy5jaGFyYWN0ZXJHcm91cFdoaXRlc3BhY2UgfCB0eXBlb2YgY29uc3RhbnRzLmNoYXJhY3Rlckdyb3VwUHVuY3R1YXRpb24gfCB1bmRlZmluZWR9XG4gKiAgIEdyb3VwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSkge1xuICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHx8IHVuaWNvZGVXaGl0ZXNwYWNlKGNvZGUpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKHVuaWNvZGVQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgIHJldHVybiAyO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7RXZlbnQsIFJlc29sdmVyLCBUb2tlbml6ZUNvbnRleHR9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbi8qKlxuICogQ2FsbCBhbGwgYHJlc29sdmVBbGxgcy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8e3Jlc29sdmVBbGw/OiBSZXNvbHZlciB8IHVuZGVmaW5lZH0+fSBjb25zdHJ1Y3RzXG4gKiAgIExpc3Qgb2YgY29uc3RydWN0cywgb3B0aW9uYWxseSB3aXRoIGByZXNvbHZlQWxsYHMuXG4gKiBAcGFyYW0ge0FycmF5PEV2ZW50Pn0gZXZlbnRzXG4gKiAgIExpc3Qgb2YgZXZlbnRzLlxuICogQHBhcmFtIHtUb2tlbml6ZUNvbnRleHR9IGNvbnRleHRcbiAqICAgQ29udGV4dCB1c2VkIGJ5IGB0b2tlbml6ZWAuXG4gKiBAcmV0dXJucyB7QXJyYXk8RXZlbnQ+fVxuICogICBDaGFuZ2VkIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBbGwoY29uc3RydWN0cywgZXZlbnRzLCBjb250ZXh0KSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8UmVzb2x2ZXI+fSAqL1xuICBjb25zdCBjYWxsZWQgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgY29uc3RydWN0cy5sZW5ndGgpIHtcbiAgICBjb25zdCByZXNvbHZlID0gY29uc3RydWN0c1tpbmRleF0ucmVzb2x2ZUFsbFxuXG4gICAgaWYgKHJlc29sdmUgJiYgIWNhbGxlZC5pbmNsdWRlcyhyZXNvbHZlKSkge1xuICAgICAgZXZlbnRzID0gcmVzb2x2ZShldmVudHMsIGNvbnRleHQpXG4gICAgICBjYWxsZWQucHVzaChyZXNvbHZlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbiIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIEV2ZW50LFxuICogICBQb2ludCxcbiAqICAgUmVzb2x2ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplcixcbiAqICAgVG9rZW5cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgcHVzaCwgc3BsaWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCc7XG5pbXBvcnQgeyBjbGFzc2lmeUNoYXJhY3RlciB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNsYXNzaWZ5LWNoYXJhY3Rlcic7XG5pbXBvcnQgeyByZXNvbHZlQWxsIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwnO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYXR0ZW50aW9uID0ge1xuICBuYW1lOiAnYXR0ZW50aW9uJyxcbiAgcmVzb2x2ZUFsbDogcmVzb2x2ZUFsbEF0dGVudGlvbixcbiAgdG9rZW5pemU6IHRva2VuaXplQXR0ZW50aW9uXG59O1xuXG4vKipcbiAqIFRha2UgYWxsIGV2ZW50cyBhbmQgcmVzb2x2ZSBhdHRlbnRpb24gdG8gZW1waGFzaXMgb3Igc3Ryb25nLlxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHJlc29sdmVBbGxBdHRlbnRpb24oZXZlbnRzLCBjb250ZXh0KSB7XG4gIGxldCBpbmRleCA9IC0xO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IG9wZW47XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBncm91cDtcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IHRleHQ7XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBvcGVuaW5nU2VxdWVuY2U7XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBjbG9zaW5nU2VxdWVuY2U7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgdXNlO1xuICAvKiogQHR5cGUge0FycmF5PEV2ZW50Pn0gKi9cbiAgbGV0IG5leHRFdmVudHM7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgb2Zmc2V0O1xuXG4gIC8vIFdhbGsgdGhyb3VnaCBhbGwgZXZlbnRzLlxuICAvL1xuICAvLyBOb3RlOiBwZXJmb3JtYW5jZSBvZiB0aGlzIGlzIGZpbmUgb24gYW4gbWIgb2Ygbm9ybWFsIG1hcmtkb3duLCBidXQgaXRcdTIwMTlzXG4gIC8vIGEgYm90dGxlbmVjayBmb3IgbWFsaWNpb3VzIHN0dWZmLlxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICAvLyBGaW5kIGEgdG9rZW4gdGhhdCBjYW4gY2xvc2UuXG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnICYmIGV2ZW50c1tpbmRleF1bMV0uX2Nsb3NlKSB7XG4gICAgICBvcGVuID0gaW5kZXg7XG5cbiAgICAgIC8vIE5vdyB3YWxrIGJhY2sgdG8gZmluZCBhbiBvcGVuZXIuXG4gICAgICB3aGlsZSAob3Blbi0tKSB7XG4gICAgICAgIC8vIEZpbmQgYSB0b2tlbiB0aGF0IGNhbiBvcGVuIHRoZSBjbG9zZXIuXG4gICAgICAgIGlmIChldmVudHNbb3Blbl1bMF0gPT09ICdleGl0JyAmJiBldmVudHNbb3Blbl1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJyAmJiBldmVudHNbb3Blbl1bMV0uX29wZW4gJiZcbiAgICAgICAgLy8gSWYgdGhlIG1hcmtlcnMgYXJlIHRoZSBzYW1lOlxuICAgICAgICBjb250ZXh0LnNsaWNlU2VyaWFsaXplKGV2ZW50c1tvcGVuXVsxXSkuY2hhckNvZGVBdCgwKSA9PT0gY29udGV4dC5zbGljZVNlcmlhbGl6ZShldmVudHNbaW5kZXhdWzFdKS5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIG9wZW5pbmcgY2FuIGNsb3NlIG9yIHRoZSBjbG9zaW5nIGNhbiBvcGVuLFxuICAgICAgICAgIC8vIGFuZCB0aGUgY2xvc2Ugc2l6ZSAqaXMgbm90KiBhIG11bHRpcGxlIG9mIHRocmVlLFxuICAgICAgICAgIC8vIGJ1dCB0aGUgc3VtIG9mIHRoZSBvcGVuaW5nIGFuZCBjbG9zaW5nIHNpemUgKmlzKiBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgICAgICAgICAvLyB0aGVuIGRvblx1MjAxOXQgbWF0Y2guXG4gICAgICAgICAgaWYgKChldmVudHNbb3Blbl1bMV0uX2Nsb3NlIHx8IGV2ZW50c1tpbmRleF1bMV0uX29wZW4pICYmIChldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCkgJSAzICYmICEoKGV2ZW50c1tvcGVuXVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW29wZW5dWzFdLnN0YXJ0Lm9mZnNldCArIGV2ZW50c1tpbmRleF1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSAlIDMpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBOdW1iZXIgb2YgbWFya2VycyB0byB1c2UgZnJvbSB0aGUgc2VxdWVuY2UuXG4gICAgICAgICAgdXNlID0gZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ID4gMSAmJiBldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCA+IDEgPyAyIDogMTtcbiAgICAgICAgICBjb25zdCBzdGFydCA9IHtcbiAgICAgICAgICAgIC4uLmV2ZW50c1tvcGVuXVsxXS5lbmRcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IGVuZCA9IHtcbiAgICAgICAgICAgIC4uLmV2ZW50c1tpbmRleF1bMV0uc3RhcnRcbiAgICAgICAgICB9O1xuICAgICAgICAgIG1vdmVQb2ludChzdGFydCwgLXVzZSk7XG4gICAgICAgICAgbW92ZVBvaW50KGVuZCwgdXNlKTtcbiAgICAgICAgICBvcGVuaW5nU2VxdWVuY2UgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gXCJzdHJvbmdTZXF1ZW5jZVwiIDogXCJlbXBoYXNpc1NlcXVlbmNlXCIsXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAuLi5ldmVudHNbb3Blbl1bMV0uZW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjbG9zaW5nU2VxdWVuY2UgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gXCJzdHJvbmdTZXF1ZW5jZVwiIDogXCJlbXBoYXNpc1NlcXVlbmNlXCIsXG4gICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAuLi5ldmVudHNbaW5kZXhdWzFdLnN0YXJ0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0ZXh0ID0ge1xuICAgICAgICAgICAgdHlwZTogdXNlID4gMSA/IFwic3Ryb25nVGV4dFwiIDogXCJlbXBoYXNpc1RleHRcIixcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgIC4uLmV2ZW50c1tvcGVuXVsxXS5lbmRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgLi4uZXZlbnRzW2luZGV4XVsxXS5zdGFydFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZ3JvdXAgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gXCJzdHJvbmdcIiA6IFwiZW1waGFzaXNcIixcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgIC4uLm9wZW5pbmdTZXF1ZW5jZS5zdGFydFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAuLi5jbG9zaW5nU2VxdWVuY2UuZW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBldmVudHNbb3Blbl1bMV0uZW5kID0ge1xuICAgICAgICAgICAgLi4ub3BlbmluZ1NlcXVlbmNlLnN0YXJ0XG4gICAgICAgICAgfTtcbiAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0ID0ge1xuICAgICAgICAgICAgLi4uY2xvc2luZ1NlcXVlbmNlLmVuZFxuICAgICAgICAgIH07XG4gICAgICAgICAgbmV4dEV2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgbWFya2VycyBpbiB0aGUgb3BlbmluZywgYWRkIHRoZW0gYmVmb3JlLlxuICAgICAgICAgIGlmIChldmVudHNbb3Blbl1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tvcGVuXVsxXS5zdGFydC5vZmZzZXQpIHtcbiAgICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtbJ2VudGVyJywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XSwgWydleGl0JywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9wZW5pbmcuXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2gobmV4dEV2ZW50cywgW1snZW50ZXInLCBncm91cCwgY29udGV4dF0sIFsnZW50ZXInLCBvcGVuaW5nU2VxdWVuY2UsIGNvbnRleHRdLCBbJ2V4aXQnLCBvcGVuaW5nU2VxdWVuY2UsIGNvbnRleHRdLCBbJ2VudGVyJywgdGV4dCwgY29udGV4dF1dKTtcblxuICAgICAgICAgIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgICAgICAgICAvLyBCZXR3ZWVuLlxuICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIHJlc29sdmVBbGwoY29udGV4dC5wYXJzZXIuY29uc3RydWN0cy5pbnNpZGVTcGFuLm51bGwsIGV2ZW50cy5zbGljZShvcGVuICsgMSwgaW5kZXgpLCBjb250ZXh0KSk7XG5cbiAgICAgICAgICAvLyBDbG9zaW5nLlxuICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSwgWydlbnRlcicsIGNsb3NpbmdTZXF1ZW5jZSwgY29udGV4dF0sIFsnZXhpdCcsIGNsb3NpbmdTZXF1ZW5jZSwgY29udGV4dF0sIFsnZXhpdCcsIGdyb3VwLCBjb250ZXh0XV0pO1xuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgbWFya2VycyBpbiB0aGUgY2xvc2luZywgYWRkIHRoZW0gYWZ0ZXIuXG4gICAgICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAyO1xuICAgICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2gobmV4dEV2ZW50cywgW1snZW50ZXInLCBldmVudHNbaW5kZXhdWzFdLCBjb250ZXh0XSwgWydleGl0JywgZXZlbnRzW2luZGV4XVsxXSwgY29udGV4dF1dKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlKGV2ZW50cywgb3BlbiAtIDEsIGluZGV4IC0gb3BlbiArIDMsIG5leHRFdmVudHMpO1xuICAgICAgICAgIGluZGV4ID0gb3BlbiArIG5leHRFdmVudHMubGVuZ3RoIC0gb2Zmc2V0IC0gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSByZW1haW5pbmcgc2VxdWVuY2VzLlxuICBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnKSB7XG4gICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPSAnZGF0YSc7XG4gICAgfVxuICB9XG4gIHJldHVybiBldmVudHM7XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQXR0ZW50aW9uKGVmZmVjdHMsIG9rKSB7XG4gIGNvbnN0IGF0dGVudGlvbk1hcmtlcnMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmF0dGVudGlvbk1hcmtlcnMubnVsbDtcbiAgY29uc3QgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzO1xuICBjb25zdCBiZWZvcmUgPSBjbGFzc2lmeUNoYXJhY3RlcihwcmV2aW91cyk7XG5cbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlcjtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBCZWZvcmUgYSBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgbWFya2VyID0gY29kZTtcbiAgICBlZmZlY3RzLmVudGVyKCdhdHRlbnRpb25TZXF1ZW5jZScpO1xuICAgIHJldHVybiBpbnNpZGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gYSBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqXG4gICAqICAgICBeXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gaW5zaWRlO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbiA9IGVmZmVjdHMuZXhpdCgnYXR0ZW50aW9uU2VxdWVuY2UnKTtcblxuICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRoaXMgdG8gcmVzb2x2ZXIsIGp1c3QgbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIGNvbnN0IGFmdGVyID0gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSk7XG5cbiAgICAvLyBBbHdheXMgcG9wdWxhdGVkIGJ5IGRlZmF1bHRzLlxuXG4gICAgY29uc3Qgb3BlbiA9ICFhZnRlciB8fCBhZnRlciA9PT0gMiAmJiBiZWZvcmUgfHwgYXR0ZW50aW9uTWFya2Vycy5pbmNsdWRlcyhjb2RlKTtcbiAgICBjb25zdCBjbG9zZSA9ICFiZWZvcmUgfHwgYmVmb3JlID09PSAyICYmIGFmdGVyIHx8IGF0dGVudGlvbk1hcmtlcnMuaW5jbHVkZXMocHJldmlvdXMpO1xuICAgIHRva2VuLl9vcGVuID0gQm9vbGVhbihtYXJrZXIgPT09IDQyID8gb3BlbiA6IG9wZW4gJiYgKGJlZm9yZSB8fCAhY2xvc2UpKTtcbiAgICB0b2tlbi5fY2xvc2UgPSBCb29sZWFuKG1hcmtlciA9PT0gNDIgPyBjbG9zZSA6IGNsb3NlICYmIChhZnRlciB8fCAhb3BlbikpO1xuICAgIHJldHVybiBvayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIE1vdmUgYSBwb2ludCBhIGJpdC5cbiAqXG4gKiBOb3RlOiBgbW92ZWAgb25seSB3b3JrcyBpbnNpZGUgbGluZXMhIEl0XHUyMDE5cyBub3QgcG9zc2libGUgdG8gbW92ZSBwYXN0IG90aGVyXG4gKiBjaHVua3MgKHJlcGxhY2VtZW50IGNoYXJhY3RlcnMsIHRhYnMsIG9yIGxpbmUgZW5kaW5ncykuXG4gKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqICAgUG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiAgIEFtb3VudCB0byBtb3ZlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gbW92ZVBvaW50KHBvaW50LCBvZmZzZXQpIHtcbiAgcG9pbnQuY29sdW1uICs9IG9mZnNldDtcbiAgcG9pbnQub2Zmc2V0ICs9IG9mZnNldDtcbiAgcG9pbnQuX2J1ZmZlckluZGV4ICs9IG9mZnNldDtcbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgYXNjaWlBbHBoYW51bWVyaWMsIGFzY2lpQWxwaGEsIGFzY2lpQXRleHQsIGFzY2lpQ29udHJvbCB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBhdXRvbGluayA9IHtcbiAgbmFtZTogJ2F1dG9saW5rJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQXV0b2xpbmtcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplQXV0b2xpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICBsZXQgc2l6ZSA9IDA7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgYW4gYXV0b2xpbmsuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhPGh0dHBzOi8vZXhhbXBsZS5jb20+YlxuICAgKiAgICAgIF5cbiAgICogPiB8IGE8dXNlckBleGFtcGxlLmNvbT5iXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJhdXRvbGlua1wiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiYXV0b2xpbmtNYXJrZXJcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImF1dG9saW5rTWFya2VyXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJhdXRvbGlua1Byb3RvY29sXCIpO1xuICAgIHJldHVybiBvcGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8YCwgYXQgcHJvdG9jb2wgb3IgYXRleHQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhPGh0dHBzOi8vZXhhbXBsZS5jb20+YlxuICAgKiAgICAgICBeXG4gICAqID4gfCBhPHVzZXJAZXhhbXBsZS5jb20+YlxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHNjaGVtZU9yRW1haWxBdGV4dDtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDY0KSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZW1haWxBdGV4dChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBzZWNvbmQgYnl0ZSBvZiBwcm90b2NvbCBvciBhdGV4dC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGE8aHR0cHM6Ly9leGFtcGxlLmNvbT5iXG4gICAqICAgICAgICBeXG4gICAqID4gfCBhPHVzZXJAZXhhbXBsZS5jb20+YlxuICAgKiAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc2NoZW1lT3JFbWFpbEF0ZXh0KGNvZGUpIHtcbiAgICAvLyBBU0NJSSBhbHBoYW51bWVyaWMgYW5kIGArYCwgYC1gLCBhbmQgYC5gLlxuICAgIGlmIChjb2RlID09PSA0MyB8fCBjb2RlID09PSA0NSB8fCBjb2RlID09PSA0NiB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkge1xuICAgICAgLy8gQ291bnQgdGhlIHByZXZpb3VzIGFscGhhYmV0aWNhbCBmcm9tIGBvcGVuYCB0b28uXG4gICAgICBzaXplID0gMTtcbiAgICAgIHJldHVybiBzY2hlbWVJbnNpZGVPckVtYWlsQXRleHQoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBlbWFpbEF0ZXh0KGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGFtYmlndW91cyBwcm90b2NvbCBvciBhdGV4dC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGE8aHR0cHM6Ly9leGFtcGxlLmNvbT5iXG4gICAqICAgICAgICBeXG4gICAqID4gfCBhPHVzZXJAZXhhbXBsZS5jb20+YlxuICAgKiAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNTgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHNpemUgPSAwO1xuICAgICAgcmV0dXJuIHVybEluc2lkZTtcbiAgICB9XG5cbiAgICAvLyBBU0NJSSBhbHBoYW51bWVyaWMgYW5kIGArYCwgYC1gLCBhbmQgYC5gLlxuICAgIGlmICgoY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUgfHwgY29kZSA9PT0gNDYgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpICYmIHNpemUrKyA8IDMyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0O1xuICAgIH1cbiAgICBzaXplID0gMDtcbiAgICByZXR1cm4gZW1haWxBdGV4dChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBwcm90b2NvbCwgaW4gVVJMLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYTxodHRwczovL2V4YW1wbGUuY29tPmJcbiAgICogICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdXJsSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImF1dG9saW5rUHJvdG9jb2xcIik7XG4gICAgICBlZmZlY3RzLmVudGVyKFwiYXV0b2xpbmtNYXJrZXJcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJhdXRvbGlua01hcmtlclwiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImF1dG9saW5rXCIpO1xuICAgICAgcmV0dXJuIG9rO1xuICAgIH1cblxuICAgIC8vIEFTQ0lJIGNvbnRyb2wsIHNwYWNlLCBvciBgPGAuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gMzIgfHwgY29kZSA9PT0gNjAgfHwgYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIHVybEluc2lkZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBlbWFpbCBhdGV4dC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGE8dXNlci5uYW1lQGV4YW1wbGUuY29tPmJcbiAgICogICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGVtYWlsQXRleHQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2NCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGVtYWlsQXRTaWduT3JEb3Q7XG4gICAgfVxuICAgIGlmIChhc2NpaUF0ZXh0KGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gZW1haWxBdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBsYWJlbCwgYWZ0ZXIgYXQtc2lnbiBvciBkb3QuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhPHVzZXIubmFtZUBleGFtcGxlLmNvbT5iXG4gICAqICAgICAgICAgICAgICAgICBeICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGVtYWlsQXRTaWduT3JEb3QoY29kZSkge1xuICAgIHJldHVybiBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSA/IGVtYWlsTGFiZWwoY29kZSkgOiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gbGFiZWwsIHdoZXJlIGAuYCBhbmQgYD5gIGFyZSBhbGxvd2VkLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYTx1c2VyLm5hbWVAZXhhbXBsZS5jb20+YlxuICAgKiAgICAgICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBlbWFpbExhYmVsKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDYpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHNpemUgPSAwO1xuICAgICAgcmV0dXJuIGVtYWlsQXRTaWduT3JEb3Q7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgLy8gRXhpdCwgdGhlbiBjaGFuZ2UgdGhlIHRva2VuIHR5cGUuXG4gICAgICBlZmZlY3RzLmV4aXQoXCJhdXRvbGlua1Byb3RvY29sXCIpLnR5cGUgPSBcImF1dG9saW5rRW1haWxcIjtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJhdXRvbGlua01hcmtlclwiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImF1dG9saW5rTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiYXV0b2xpbmtcIik7XG4gICAgICByZXR1cm4gb2s7XG4gICAgfVxuICAgIHJldHVybiBlbWFpbFZhbHVlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGxhYmVsLCB3aGVyZSBgLmAgYW5kIGA+YCBhcmUgKm5vdCogYWxsb3dlZC5cbiAgICpcbiAgICogVGhvdWdoLCB0aGlzIGlzIGFsc28gdXNlZCBpbiBgZW1haWxMYWJlbGAgdG8gcGFyc2Ugb3RoZXIgdmFsdWVzLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYTx1c2VyLm5hbWVAZXgtYW1wbGUuY29tPmJcbiAgICogICAgICAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGVtYWlsVmFsdWUoY29kZSkge1xuICAgIC8vIEFTQ0lJIGFscGhhbnVtZXJpYyBvciBgLWAuXG4gICAgaWYgKChjb2RlID09PSA0NSB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkgJiYgc2l6ZSsrIDwgNjMpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBjb2RlID09PSA0NSA/IGVtYWlsVmFsdWUgOiBlbWFpbExhYmVsO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGJsYW5rTGluZSA9IHtcbiAgcGFydGlhbDogdHJ1ZSxcbiAgdG9rZW5pemU6IHRva2VuaXplQmxhbmtMaW5lXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUJsYW5rTGluZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgYmxhbmsgbGluZS5cbiAgICpcbiAgICogPiBcdUQ4M0RcdURDNDkgKipOb3RlKio6IGBcdTI0MjBgIHJlcHJlc2VudHMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBcdTI0MjBcdTI0MjBcdTI0MEFcbiAgICogICAgIF5cbiAgICogPiB8IFx1MjQwQVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpID8gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyLCBcImxpbmVQcmVmaXhcIikoY29kZSkgOiBhZnRlcihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBlb2YvZW9sLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogYFx1MjQyMGAgcmVwcmVzZW50cyBhIHNwYWNlIGNoYXJhY3Rlci5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFx1MjQyMFx1MjQyMFx1MjQwQVxuICAgKiAgICAgICBeXG4gICAqID4gfCBcdTI0MEFcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIEV4aXRlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGZhY3RvcnlTcGFjZSB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJztcbmltcG9ydCB7IG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYmxvY2tRdW90ZSA9IHtcbiAgY29udGludWF0aW9uOiB7XG4gICAgdG9rZW5pemU6IHRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvblxuICB9LFxuICBleGl0LFxuICBuYW1lOiAnYmxvY2tRdW90ZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUJsb2NrUXVvdGVTdGFydFxufTtcblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVCbG9ja1F1b3RlU3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBibG9jayBxdW90ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ID4gYVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgY29uc3Qgc3RhdGUgPSBzZWxmLmNvbnRhaW5lclN0YXRlO1xuICAgICAgaWYgKCFzdGF0ZS5vcGVuKSB7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIoXCJibG9ja1F1b3RlXCIsIHtcbiAgICAgICAgICBfY29udGFpbmVyOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5vcGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJibG9ja1F1b3RlUHJlZml4XCIpO1xuICAgICAgZWZmZWN0cy5lbnRlcihcImJsb2NrUXVvdGVNYXJrZXJcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJibG9ja1F1b3RlTWFya2VyXCIpO1xuICAgICAgcmV0dXJuIGFmdGVyO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA+YCwgYmVmb3JlIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA+IGFcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZVwiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImJsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiYmxvY2tRdW90ZVByZWZpeFwiKTtcbiAgICAgIHJldHVybiBvaztcbiAgICB9XG4gICAgZWZmZWN0cy5leGl0KFwiYmxvY2tRdW90ZVByZWZpeFwiKTtcbiAgICByZXR1cm4gb2soY29kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBTdGFydCBvZiBibG9jayBxdW90ZSBjb250aW51YXRpb24uXG4gKlxuICogYGBgbWFya2Rvd25cbiAqICAgfCA+IGFcbiAqID4gfCA+IGJcbiAqICAgICBeXG4gKiBgYGBcbiAqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVCbG9ja1F1b3RlQ29udGludWF0aW9uKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBjb250U3RhcnQ7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGJsb2NrIHF1b3RlIGNvbnRpbnVhdGlvbi5cbiAgICpcbiAgICogQWxzbyB1c2VkIHRvIHBhcnNlIHRoZSBmaXJzdCBibG9jayBxdW90ZSBvcGVuaW5nLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgPiBhXG4gICAqID4gfCA+IGJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRTdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgY29udEJlZm9yZSwgXCJsaW5lUHJlZml4XCIsIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKSA/IHVuZGVmaW5lZCA6IDQpKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29udEJlZm9yZShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBgPmAsIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIEFsc28gdXNlZCB0byBwYXJzZSB0aGUgZmlyc3QgYmxvY2sgcXVvdGUgb3BlbmluZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8ID4gYVxuICAgKiA+IHwgPiBiXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb250QmVmb3JlKGNvZGUpIHtcbiAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGJsb2NrUXVvdGUsIG9rLCBub2spKGNvZGUpO1xuICB9XG59XG5cbi8qKiBAdHlwZSB7RXhpdGVyfSAqL1xuZnVuY3Rpb24gZXhpdChlZmZlY3RzKSB7XG4gIGVmZmVjdHMuZXhpdChcImJsb2NrUXVvdGVcIik7XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGFzY2lpUHVuY3R1YXRpb24gfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY2hhcmFjdGVyRXNjYXBlID0ge1xuICBuYW1lOiAnY2hhcmFjdGVyRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ2hhcmFjdGVyRXNjYXBlXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNoYXJhY3RlckVzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgY2hhcmFjdGVyIGVzY2FwZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGFcXCpiXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJjaGFyYWN0ZXJFc2NhcGVcIik7XG4gICAgZWZmZWN0cy5lbnRlcihcImVzY2FwZU1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwiZXNjYXBlTWFya2VyXCIpO1xuICAgIHJldHVybiBpbnNpZGU7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYFxcYCwgYXQgcHVuY3R1YXRpb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhXFwqYlxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIC8vIEFTQ0lJIHB1bmN0dWF0aW9uLlxuICAgIGlmIChhc2NpaVB1bmN0dWF0aW9uKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwiY2hhcmFjdGVyRXNjYXBlVmFsdWVcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjaGFyYWN0ZXJFc2NhcGVWYWx1ZVwiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNoYXJhY3RlckVzY2FwZVwiKTtcbiAgICAgIHJldHVybiBvaztcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBkZWNvZGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZSB9IGZyb20gJ2RlY29kZS1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlJztcbmltcG9ydCB7IGFzY2lpQWxwaGFudW1lcmljLCBhc2NpaURpZ2l0LCBhc2NpaUhleERpZ2l0IH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlclJlZmVyZW5jZSA9IHtcbiAgbmFtZTogJ2NoYXJhY3RlclJlZmVyZW5jZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNoYXJhY3RlclJlZmVyZW5jZVxufTtcblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVDaGFyYWN0ZXJSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgbGV0IHNpemUgPSAwO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IG1heDtcbiAgLyoqIEB0eXBlIHsoY29kZTogQ29kZSkgPT4gYm9vbGVhbn0gKi9cbiAgbGV0IHRlc3Q7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgY2hhcmFjdGVyIHJlZmVyZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEmYW1wO2JcbiAgICogICAgICBeXG4gICAqID4gfCBhJiMxMjM7YlxuICAgKiAgICAgIF5cbiAgICogPiB8IGEmI3g5O2JcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcihcImNoYXJhY3RlclJlZmVyZW5jZVwiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyXCIpO1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICBlZmZlY3RzLmV4aXQoXCJjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJcIik7XG4gICAgcmV0dXJuIG9wZW47XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYCZgLCBhdCBgI2AgZm9yIG51bWVyaWMgcmVmZXJlbmNlcyBvciBhbHBoYW51bWVyaWMgZm9yIG5hbWVkXG4gICAqIHJlZmVyZW5jZXMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhJmFtcDtiXG4gICAqICAgICAgIF5cbiAgICogPiB8IGEmIzEyMztiXG4gICAqICAgICAgIF5cbiAgICogPiB8IGEmI3g5O2JcbiAgICogICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM1KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwiY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpY1wiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWNcIik7XG4gICAgICByZXR1cm4gbnVtZXJpYztcbiAgICB9XG4gICAgZWZmZWN0cy5lbnRlcihcImNoYXJhY3RlclJlZmVyZW5jZVZhbHVlXCIpO1xuICAgIG1heCA9IDMxO1xuICAgIHRlc3QgPSBhc2NpaUFscGhhbnVtZXJpYztcbiAgICByZXR1cm4gdmFsdWUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYCNgLCBhdCBgeGAgZm9yIGhleGFkZWNpbWFscyBvciBkaWdpdCBmb3IgZGVjaW1hbHMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhJiMxMjM7YlxuICAgKiAgICAgICAgXlxuICAgKiA+IHwgYSYjeDk7YlxuICAgKiAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbnVtZXJpYyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDg4IHx8IGNvZGUgPT09IDEyMCkge1xuICAgICAgZWZmZWN0cy5lbnRlcihcImNoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWxcIik7XG4gICAgICBlZmZlY3RzLmVudGVyKFwiY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWVcIik7XG4gICAgICBtYXggPSA2O1xuICAgICAgdGVzdCA9IGFzY2lpSGV4RGlnaXQ7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZVwiKTtcbiAgICBtYXggPSA3O1xuICAgIHRlc3QgPSBhc2NpaURpZ2l0O1xuICAgIHJldHVybiB2YWx1ZShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBtYXJrZXJzIChgJiN4YCwgYCYjYCwgb3IgYCZgKSwgaW4gdmFsdWUsIGJlZm9yZSBgO2AuXG4gICAqXG4gICAqIFRoZSBjaGFyYWN0ZXIgcmVmZXJlbmNlIGtpbmQgZGVmaW5lcyB3aGF0IGFuZCBob3cgbWFueSBjaGFyYWN0ZXJzIGFyZVxuICAgKiBhbGxvd2VkLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSZhbXA7YlxuICAgKiAgICAgICBeXl5cbiAgICogPiB8IGEmIzEyMztiXG4gICAqICAgICAgICBeXl5cbiAgICogPiB8IGEmI3g5O2JcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB2YWx1ZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDU5ICYmIHNpemUpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gZWZmZWN0cy5leGl0KFwiY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWVcIik7XG4gICAgICBpZiAodGVzdCA9PT0gYXNjaWlBbHBoYW51bWVyaWMgJiYgIWRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKHNlbGYuc2xpY2VTZXJpYWxpemUodG9rZW4pKSkge1xuICAgICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBUbyBkbzogYG1hcmtkb3duLXJzYCB1c2VzIGEgZGlmZmVyZW50IG5hbWU6XG4gICAgICAvLyBgQ2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyU2VtaWAuXG4gICAgICBlZmZlY3RzLmVudGVyKFwiY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2hhcmFjdGVyUmVmZXJlbmNlXCIpO1xuICAgICAgcmV0dXJuIG9rO1xuICAgIH1cbiAgICBpZiAodGVzdChjb2RlKSAmJiBzaXplKysgPCBtYXgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCBub25MYXp5Q29udGludWF0aW9uID0ge1xuICBwYXJ0aWFsOiB0cnVlLFxuICB0b2tlbml6ZTogdG9rZW5pemVOb25MYXp5Q29udGludWF0aW9uXG59O1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlRmVuY2VkID0ge1xuICBjb25jcmV0ZTogdHJ1ZSxcbiAgbmFtZTogJ2NvZGVGZW5jZWQnLFxuICB0b2tlbml6ZTogdG9rZW5pemVDb2RlRmVuY2VkXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVGZW5jZWQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG4gIGNvbnN0IGNsb3NlU3RhcnQgPSB7XG4gICAgcGFydGlhbDogdHJ1ZSxcbiAgICB0b2tlbml6ZTogdG9rZW5pemVDbG9zZVN0YXJ0XG4gIH07XG4gIGxldCBpbml0aWFsUHJlZml4ID0gMDtcbiAgbGV0IHNpemVPcGVuID0gMDtcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlcjtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBjb2RlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgfn5+anNcbiAgICogICAgIF5cbiAgICogICB8IGFsZXJ0KDEpXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBUbyBkbzogcGFyc2Ugd2hpdGVzcGFjZSBsaWtlIGBtYXJrZG93bi1yc2AuXG4gICAgcmV0dXJuIGJlZm9yZVNlcXVlbmNlT3Blbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBvcGVuaW5nIGZlbmNlLCBhZnRlciBwcmVmaXgsIGF0IHNlcXVlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgfn5+anNcbiAgICogICAgIF5cbiAgICogICB8IGFsZXJ0KDEpXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZm9yZVNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdO1xuICAgIGluaXRpYWxQcmVmaXggPSB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gXCJsaW5lUHJlZml4XCIgPyB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA6IDA7XG4gICAgbWFya2VyID0gY29kZTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY29kZUZlbmNlZFwiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY29kZUZlbmNlZEZlbmNlXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZVwiKTtcbiAgICByZXR1cm4gc2VxdWVuY2VPcGVuKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIG9wZW5pbmcgZmVuY2Ugc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCB+fn5qc1xuICAgKiAgICAgIF5cbiAgICogICB8IGFsZXJ0KDEpXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgc2l6ZU9wZW4rKztcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBzZXF1ZW5jZU9wZW47XG4gICAgfVxuICAgIGlmIChzaXplT3BlbiA8IDMpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuZXhpdChcImNvZGVGZW5jZWRGZW5jZVNlcXVlbmNlXCIpO1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpID8gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGluZm9CZWZvcmUsIFwid2hpdGVzcGFjZVwiKShjb2RlKSA6IGluZm9CZWZvcmUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gb3BlbmluZyBmZW5jZSwgYWZ0ZXIgdGhlIHNlcXVlbmNlIChhbmQgb3B0aW9uYWwgd2hpdGVzcGFjZSksIGJlZm9yZSBpbmZvLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgfn5+anNcbiAgICogICAgICAgIF5cbiAgICogICB8IGFsZXJ0KDEpXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGluZm9CZWZvcmUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwiY29kZUZlbmNlZEZlbmNlXCIpO1xuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBlZmZlY3RzLmNoZWNrKG5vbkxhenlDb250aW51YXRpb24sIGF0Tm9uTGF6eUJyZWFrLCBhZnRlcikoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJjb2RlRmVuY2VkRmVuY2VJbmZvXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJjaHVua1N0cmluZ1wiLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJzdHJpbmdcIlxuICAgIH0pO1xuICAgIHJldHVybiBpbmZvKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGluZm8uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCB+fn5qc1xuICAgKiAgICAgICAgXlxuICAgKiAgIHwgYWxlcnQoMSlcbiAgICogICB8IH5+flxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5mbyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjaHVua1N0cmluZ1wiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNvZGVGZW5jZWRGZW5jZUluZm9cIik7XG4gICAgICByZXR1cm4gaW5mb0JlZm9yZShjb2RlKTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNodW5rU3RyaW5nXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiY29kZUZlbmNlZEZlbmNlSW5mb1wiKTtcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgbWV0YUJlZm9yZSwgXCJ3aGl0ZXNwYWNlXCIpKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gOTYgJiYgY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIGluZm87XG4gIH1cblxuICAvKipcbiAgICogSW4gb3BlbmluZyBmZW5jZSwgYWZ0ZXIgaW5mbyBhbmQgd2hpdGVzcGFjZSwgYmVmb3JlIG1ldGEuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCB+fn5qcyBldmFsXG4gICAqICAgICAgICAgICBeXG4gICAqICAgfCBhbGVydCgxKVxuICAgKiAgIHwgfn5+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBtZXRhQmVmb3JlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBpbmZvQmVmb3JlKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmVudGVyKFwiY29kZUZlbmNlZEZlbmNlTWV0YVwiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY2h1bmtTdHJpbmdcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwic3RyaW5nXCJcbiAgICB9KTtcbiAgICByZXR1cm4gbWV0YShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBtZXRhLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgfn5+anMgZXZhbFxuICAgKiAgICAgICAgICAgXlxuICAgKiAgIHwgYWxlcnQoMSlcbiAgICogICB8IH5+flxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbWV0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjaHVua1N0cmluZ1wiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNvZGVGZW5jZWRGZW5jZU1ldGFcIik7XG4gICAgICByZXR1cm4gaW5mb0JlZm9yZShjb2RlKTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDk2ICYmIGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBtZXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0IGVvbC9lb2YgaW4gY29kZSwgYmVmb3JlIGEgbm9uLWxhenkgY2xvc2luZyBmZW5jZSBvciBjb250ZW50LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgfn5+anNcbiAgICogICAgICAgICAgXlxuICAgKiA+IHwgYWxlcnQoMSlcbiAgICogICAgICAgICAgICAgXlxuICAgKiAgIHwgfn5+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdE5vbkxhenlCcmVhayhjb2RlKSB7XG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChjbG9zZVN0YXJ0LCBhZnRlciwgY29udGVudEJlZm9yZSkoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQmVmb3JlIGNvZGUgY29udGVudCwgbm90IGEgY2xvc2luZyBmZW5jZSwgYXQgZW9sLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgfn5+anNcbiAgICogPiB8IGFsZXJ0KDEpXG4gICAqICAgICAgICAgICAgIF5cbiAgICogICB8IH5+flxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29udGVudEJlZm9yZShjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgcmV0dXJuIGNvbnRlbnRTdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCZWZvcmUgY29kZSBjb250ZW50LCBub3QgYSBjbG9zaW5nIGZlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgfn5+anNcbiAgICogPiB8IGFsZXJ0KDEpXG4gICAqICAgICBeXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRlbnRTdGFydChjb2RlKSB7XG4gICAgcmV0dXJuIGluaXRpYWxQcmVmaXggPiAwICYmIG1hcmtkb3duU3BhY2UoY29kZSkgPyBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYmVmb3JlQ29udGVudENodW5rLCBcImxpbmVQcmVmaXhcIiwgaW5pdGlhbFByZWZpeCArIDEpKGNvZGUpIDogYmVmb3JlQ29udGVudENodW5rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZm9yZSBjb2RlIGNvbnRlbnQsIGFmdGVyIG9wdGlvbmFsIHByZWZpeC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IH5+fmpzXG4gICAqID4gfCBhbGVydCgxKVxuICAgKiAgICAgXlxuICAgKiAgIHwgfn5+XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiZWZvcmVDb250ZW50Q2h1bmsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2sobm9uTGF6eUNvbnRpbnVhdGlvbiwgYXROb25MYXp5QnJlYWssIGFmdGVyKShjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5lbnRlcihcImNvZGVGbG93VmFsdWVcIik7XG4gICAgcmV0dXJuIGNvbnRlbnRDaHVuayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb2RlIGNvbnRlbnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCB+fn5qc1xuICAgKiA+IHwgYWxlcnQoMSlcbiAgICogICAgIF5eXl5eXl5eXG4gICAqICAgfCB+fn5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRlbnRDaHVuayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjb2RlRmxvd1ZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGJlZm9yZUNvbnRlbnRDaHVuayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjb250ZW50Q2h1bms7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgY29kZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IH5+fmpzXG4gICAqICAgfCBhbGVydCgxKVxuICAgKiA+IHwgfn5+XG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KFwiY29kZUZlbmNlZFwiKTtcbiAgICByZXR1cm4gb2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAgICogICBDb250ZXh0LlxuICAgKiBAdHlwZSB7VG9rZW5pemVyfVxuICAgKi9cbiAgZnVuY3Rpb24gdG9rZW5pemVDbG9zZVN0YXJ0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgcmV0dXJuIHN0YXJ0QmVmb3JlO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdGF0ZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydEJlZm9yZShjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwibGluZUVuZGluZ1wiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgICByZXR1cm4gc3RhcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVmb3JlIGNsb3NpbmcgZmVuY2UsIGF0IG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAgICpcbiAgICAgKiBgYGBtYXJrZG93blxuICAgICAqICAgfCB+fn5qc1xuICAgICAqICAgfCBhbGVydCgxKVxuICAgICAqID4gfCB+fn5cbiAgICAgKiAgICAgXlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHR5cGUge1N0YXRlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgICAgIC8vIFRvIGRvOiBgZW50ZXJgIGhlcmUgb3IgaW4gbmV4dCBzdGF0ZT9cbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJjb2RlRmVuY2VkRmVuY2VcIik7XG4gICAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKSA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBiZWZvcmVTZXF1ZW5jZUNsb3NlLCBcImxpbmVQcmVmaXhcIiwgc2VsZi5wYXJzZXIuY29uc3RydWN0cy5kaXNhYmxlLm51bGwuaW5jbHVkZXMoJ2NvZGVJbmRlbnRlZCcpID8gdW5kZWZpbmVkIDogNCkoY29kZSkgOiBiZWZvcmVTZXF1ZW5jZUNsb3NlKGNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluIGNsb3NpbmcgZmVuY2UsIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UsIGF0IHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogYGBgbWFya2Rvd25cbiAgICAgKiAgIHwgfn5+anNcbiAgICAgKiAgIHwgYWxlcnQoMSlcbiAgICAgKiA+IHwgfn5+XG4gICAgICogICAgIF5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdGF0ZX1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmVTZXF1ZW5jZUNsb3NlKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgICAgZWZmZWN0cy5lbnRlcihcImNvZGVGZW5jZWRGZW5jZVNlcXVlbmNlXCIpO1xuICAgICAgICByZXR1cm4gc2VxdWVuY2VDbG9zZShjb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW4gY2xvc2luZyBmZW5jZSBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIGBgYG1hcmtkb3duXG4gICAgICogICB8IH5+fmpzXG4gICAgICogICB8IGFsZXJ0KDEpXG4gICAgICogPiB8IH5+flxuICAgICAqICAgICBeXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RhdGV9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VxdWVuY2VDbG9zZShjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICAgIHNpemUrKztcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgICByZXR1cm4gc2VxdWVuY2VDbG9zZTtcbiAgICAgIH1cbiAgICAgIGlmIChzaXplID49IHNpemVPcGVuKSB7XG4gICAgICAgIGVmZmVjdHMuZXhpdChcImNvZGVGZW5jZWRGZW5jZVNlcXVlbmNlXCIpO1xuICAgICAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKSA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBzZXF1ZW5jZUNsb3NlQWZ0ZXIsIFwid2hpdGVzcGFjZVwiKShjb2RlKSA6IHNlcXVlbmNlQ2xvc2VBZnRlcihjb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWZ0ZXIgY2xvc2luZyBmZW5jZSBzZXF1ZW5jZSwgYWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZS5cbiAgICAgKlxuICAgICAqIGBgYG1hcmtkb3duXG4gICAgICogICB8IH5+fmpzXG4gICAgICogICB8IGFsZXJ0KDEpXG4gICAgICogPiB8IH5+flxuICAgICAqICAgICAgICBeXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RhdGV9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VxdWVuY2VDbG9zZUFmdGVyKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgICBlZmZlY3RzLmV4aXQoXCJjb2RlRmVuY2VkRmVuY2VcIik7XG4gICAgICAgIHJldHVybiBvayhjb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTm9uTGF6eUNvbnRpbnVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgcmV0dXJuIGxpbmVTdGFydDtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBsaW5lU3RhcnQoY29kZSkge1xuICAgIHJldHVybiBzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0gPyBub2soY29kZSkgOiBvayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZUluZGVudGVkID0ge1xuICBuYW1lOiAnY29kZUluZGVudGVkJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZUluZGVudGVkXG59O1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IGZ1cnRoZXJTdGFydCA9IHtcbiAgcGFydGlhbDogdHJ1ZSxcbiAgdG9rZW5pemU6IHRva2VuaXplRnVydGhlclN0YXJ0XG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVJbmRlbnRlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGNvZGUgKGluZGVudGVkKS5cbiAgICpcbiAgICogPiAqKlBhcnNpbmcgbm90ZSoqOiBpdCBpcyBub3QgbmVlZGVkIHRvIGNoZWNrIGlmIHRoaXMgZmlyc3QgbGluZSBpcyBhXG4gICAqID4gZmlsbGVkIGxpbmUgKHRoYXQgaXQgaGFzIGEgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyKSwgYmVjYXVzZSBibGFuayBsaW5lc1xuICAgKiA+IGFyZSBwYXJzZWQgYWxyZWFkeSwgc28gd2UgbmV2ZXIgcnVuIGludG8gdGhhdC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBUbyBkbzogbWFudWFsbHkgY2hlY2sgaWYgaW50ZXJydXB0aW5nIGxpa2UgYG1hcmtkb3duLXJzYC5cblxuICAgIGVmZmVjdHMuZW50ZXIoXCJjb2RlSW5kZW50ZWRcIik7XG4gICAgLy8gVG8gZG86IHVzZSBhbiBpbXByb3ZlZCBgc3BhY2Vfb3JfdGFiYCBmdW5jdGlvbiBsaWtlIGBtYXJrZG93bi1yc2AsXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gZHJvcCB0aGUgbmV4dCBzdGF0ZS5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyUHJlZml4LCBcImxpbmVQcmVmaXhcIiwgNCArIDEpKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0IHN0YXJ0LCBhZnRlciAxIG9yIDQgc3BhY2VzLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBjb25zdCB0YWlsID0gc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHRhaWwgJiYgdGFpbFsxXS50eXBlID09PSBcImxpbmVQcmVmaXhcIiAmJiB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA+PSA0ID8gYXRCcmVhayhjb2RlKSA6IG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBhIGJyZWFrLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgICAgIF4gIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWZ0ZXIoY29kZSk7XG4gICAgfVxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoZnVydGhlclN0YXJ0LCBhdEJyZWFrLCBhZnRlcikoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJjb2RlRmxvd1ZhbHVlXCIpO1xuICAgIHJldHVybiBpbnNpZGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY29kZSBjb250ZW50LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgICAgIGFhYVxuICAgKiAgICAgICAgIF5eXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjb2RlRmxvd1ZhbHVlXCIpO1xuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gaW5zaWRlO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdChcImNvZGVJbmRlbnRlZFwiKTtcbiAgICAvLyBUbyBkbzogYWxsb3cgaW50ZXJydXB0aW5nIGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICAvLyBGZWVsIGZyZWUgdG8gaW50ZXJydXB0LlxuICAgIC8vIHRva2VuaXplci5pbnRlcnJ1cHQgPSBmYWxzZVxuICAgIHJldHVybiBvayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUZ1cnRoZXJTdGFydChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gZnVydGhlclN0YXJ0O1xuXG4gIC8qKlxuICAgKiBBdCBlb2wsIHRyeWluZyB0byBwYXJzZSBhbm90aGVyIGluZGVudC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICAgICBeXG4gICAqICAgfCAgICAgYmJiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBmdXJ0aGVyU3RhcnQoY29kZSkge1xuICAgIC8vIFRvIGRvOiBpbXByb3ZlIGBsYXp5YCAvIGBwaWVyY2VgIGhhbmRsaW5nLlxuICAgIC8vIElmIHRoaXMgaXMgYSBsYXp5IGxpbmUsIGl0IGNhblx1MjAxOXQgYmUgY29kZS5cbiAgICBpZiAoc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwibGluZUVuZGluZ1wiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgICByZXR1cm4gZnVydGhlclN0YXJ0O1xuICAgIH1cblxuICAgIC8vIFRvIGRvOiB0aGUgY29kZSBoZXJlIGluIGBtaWNyb21hcmstanNgIGlzIGEgYml0IGRpZmZlcmVudCBmcm9tXG4gICAgLy8gYG1hcmtkb3duLXJzYCBiZWNhdXNlIHRoZXJlIGl0IGNhbiBhdHRlbXB0IHNwYWNlcy5cbiAgICAvLyBXZSBjYW5cdTIwMTl0IHlldC5cbiAgICAvL1xuICAgIC8vIFRvIGRvOiB1c2UgYW4gaW1wcm92ZWQgYHNwYWNlX29yX3RhYmAgZnVuY3Rpb24gbGlrZSBgbWFya2Rvd24tcnNgLFxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIGRyb3AgdGhlIG5leHQgc3RhdGUuXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlclByZWZpeCwgXCJsaW5lUHJlZml4XCIsIDQgKyAxKShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBzdGFydCwgYWZ0ZXIgMSBvciA0IHNwYWNlcy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICAgICBhYWFcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gXCJsaW5lUHJlZml4XCIgJiYgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gNCA/IG9rKGNvZGUpIDogbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpID8gZnVydGhlclN0YXJ0KGNvZGUpIDogbm9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgUHJldmlvdXMsXG4gKiAgIFJlc29sdmVyLFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXIsXG4gKiAgIFRva2VuXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IG1hcmtkb3duTGluZUVuZGluZyB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlVGV4dCA9IHtcbiAgbmFtZTogJ2NvZGVUZXh0JyxcbiAgcHJldmlvdXMsXG4gIHJlc29sdmU6IHJlc29sdmVDb2RlVGV4dCxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZVRleHRcbn07XG5cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBkb25cdTIwMTl0IHJlc29sdmUsIGxpa2UgYG1hcmtkb3duLXJzYC5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlQ29kZVRleHQoZXZlbnRzKSB7XG4gIGxldCB0YWlsRXhpdEluZGV4ID0gZXZlbnRzLmxlbmd0aCAtIDQ7XG4gIGxldCBoZWFkRW50ZXJJbmRleCA9IDM7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgaW5kZXg7XG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgZW50ZXI7XG5cbiAgLy8gSWYgd2Ugc3RhcnQgYW5kIGVuZCB3aXRoIGFuIEVPTCBvciBhIHNwYWNlLlxuICBpZiAoKGV2ZW50c1toZWFkRW50ZXJJbmRleF1bMV0udHlwZSA9PT0gXCJsaW5lRW5kaW5nXCIgfHwgZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID09PSAnc3BhY2UnKSAmJiAoZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPT09IFwibGluZUVuZGluZ1wiIHx8IGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID09PSAnc3BhY2UnKSkge1xuICAgIGluZGV4ID0gaGVhZEVudGVySW5kZXg7XG5cbiAgICAvLyBBbmQgd2UgaGF2ZSBkYXRhLlxuICAgIHdoaWxlICgrK2luZGV4IDwgdGFpbEV4aXRJbmRleCkge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gXCJjb2RlVGV4dERhdGFcIikge1xuICAgICAgICAvLyBUaGVuIHdlIGhhdmUgcGFkZGluZy5cbiAgICAgICAgZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID0gXCJjb2RlVGV4dFBhZGRpbmdcIjtcbiAgICAgICAgZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPSBcImNvZGVUZXh0UGFkZGluZ1wiO1xuICAgICAgICBoZWFkRW50ZXJJbmRleCArPSAyO1xuICAgICAgICB0YWlsRXhpdEluZGV4IC09IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE1lcmdlIGFkamFjZW50IHNwYWNlcyBhbmQgZGF0YS5cbiAgaW5kZXggPSBoZWFkRW50ZXJJbmRleCAtIDE7XG4gIHRhaWxFeGl0SW5kZXgrKztcbiAgd2hpbGUgKCsraW5kZXggPD0gdGFpbEV4aXRJbmRleCkge1xuICAgIGlmIChlbnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaW5kZXggIT09IHRhaWxFeGl0SW5kZXggJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSBcImxpbmVFbmRpbmdcIikge1xuICAgICAgICBlbnRlciA9IGluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IHRhaWxFeGl0SW5kZXggfHwgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSBcImxpbmVFbmRpbmdcIikge1xuICAgICAgZXZlbnRzW2VudGVyXVsxXS50eXBlID0gXCJjb2RlVGV4dERhdGFcIjtcbiAgICAgIGlmIChpbmRleCAhPT0gZW50ZXIgKyAyKSB7XG4gICAgICAgIGV2ZW50c1tlbnRlcl1bMV0uZW5kID0gZXZlbnRzW2luZGV4IC0gMV1bMV0uZW5kO1xuICAgICAgICBldmVudHMuc3BsaWNlKGVudGVyICsgMiwgaW5kZXggLSBlbnRlciAtIDIpO1xuICAgICAgICB0YWlsRXhpdEluZGV4IC09IGluZGV4IC0gZW50ZXIgLSAyO1xuICAgICAgICBpbmRleCA9IGVudGVyICsgMjtcbiAgICAgIH1cbiAgICAgIGVudGVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnRzO1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7UHJldmlvdXN9XG4gKi9cbmZ1bmN0aW9uIHByZXZpb3VzKGNvZGUpIHtcbiAgLy8gSWYgdGhlcmUgaXMgYSBwcmV2aW91cyBjb2RlLCB0aGVyZSB3aWxsIGFsd2F5cyBiZSBhIHRhaWwuXG4gIHJldHVybiBjb2RlICE9PSA5NiB8fCB0aGlzLmV2ZW50c1t0aGlzLmV2ZW50cy5sZW5ndGggLSAxXVsxXS50eXBlID09PSBcImNoYXJhY3RlckVzY2FwZVwiO1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVUZXh0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGxldCBzaXplT3BlbiA9IDA7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgc2l6ZTtcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IHRva2VuO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIGNvZGUgKHRleHQpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYGFgXG4gICAqICAgICBeXG4gICAqID4gfCBcXGBhYFxuICAgKiAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwiY29kZVRleHRcIik7XG4gICAgZWZmZWN0cy5lbnRlcihcImNvZGVUZXh0U2VxdWVuY2VcIik7XG4gICAgcmV0dXJuIHNlcXVlbmNlT3Blbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBvcGVuaW5nIHNlcXVlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYGFgXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzZXF1ZW5jZU9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgc2l6ZU9wZW4rKztcbiAgICAgIHJldHVybiBzZXF1ZW5jZU9wZW47XG4gICAgfVxuICAgIGVmZmVjdHMuZXhpdChcImNvZGVUZXh0U2VxdWVuY2VcIik7XG4gICAgcmV0dXJuIGJldHdlZW4oY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQmV0d2VlbiBzb21ldGhpbmcgYW5kIHNvbWV0aGluZyBlbHNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYGFgXG4gICAqICAgICAgXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJldHdlZW4oY29kZSkge1xuICAgIC8vIEVPRi5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG5cbiAgICAvLyBUbyBkbzogbmV4dCBtYWpvcjogZG9uXHUyMDE5dCBkbyBzcGFjZXMgaW4gcmVzb2x2ZSwgYnV0IHdoZW4gY29tcGlsaW5nLFxuICAgIC8vIGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICAvLyBUYWJzIGRvblx1MjAxOXQgd29yaywgYW5kIHZpcnR1YWwgc3BhY2VzIGRvblx1MjAxOXQgbWFrZSBzZW5zZS5cbiAgICBpZiAoY29kZSA9PT0gMzIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3NwYWNlJyk7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoJ3NwYWNlJyk7XG4gICAgICByZXR1cm4gYmV0d2VlbjtcbiAgICB9XG5cbiAgICAvLyBDbG9zaW5nIGZlbmNlPyBDb3VsZCBhbHNvIGJlIGRhdGEuXG4gICAgaWYgKGNvZGUgPT09IDk2KSB7XG4gICAgICB0b2tlbiA9IGVmZmVjdHMuZW50ZXIoXCJjb2RlVGV4dFNlcXVlbmNlXCIpO1xuICAgICAgc2l6ZSA9IDA7XG4gICAgICByZXR1cm4gc2VxdWVuY2VDbG9zZShjb2RlKTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgICAgcmV0dXJuIGJldHdlZW47XG4gICAgfVxuXG4gICAgLy8gRGF0YS5cbiAgICBlZmZlY3RzLmVudGVyKFwiY29kZVRleHREYXRhXCIpO1xuICAgIHJldHVybiBkYXRhKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGRhdGEuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBgYWBcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAzMiB8fCBjb2RlID09PSA5NiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNvZGVUZXh0RGF0YVwiKTtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogSW4gY2xvc2luZyBzZXF1ZW5jZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGBhYFxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzZXF1ZW5jZUNsb3NlKGNvZGUpIHtcbiAgICAvLyBNb3JlLlxuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgc2l6ZSsrO1xuICAgICAgcmV0dXJuIHNlcXVlbmNlQ2xvc2U7XG4gICAgfVxuXG4gICAgLy8gRG9uZSFcbiAgICBpZiAoc2l6ZSA9PT0gc2l6ZU9wZW4pIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImNvZGVUZXh0U2VxdWVuY2VcIik7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjb2RlVGV4dFwiKTtcbiAgICAgIHJldHVybiBvayhjb2RlKTtcbiAgICB9XG5cbiAgICAvLyBNb3JlIG9yIGxlc3MgYWNjZW50czogbWFyayBhcyBkYXRhLlxuICAgIHRva2VuLnR5cGUgPSBcImNvZGVUZXh0RGF0YVwiO1xuICAgIHJldHVybiBkYXRhKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogU29tZSBvZiB0aGUgaW50ZXJuYWwgb3BlcmF0aW9ucyBvZiBtaWNyb21hcmsgZG8gbG90cyBvZiBlZGl0aW5nXG4gKiBvcGVyYXRpb25zIG9uIHZlcnkgbGFyZ2UgYXJyYXlzLiBUaGlzIHJ1bnMgaW50byBwcm9ibGVtcyB3aXRoIHR3b1xuICogcHJvcGVydGllcyBvZiBtb3N0IGNpcmNhLTIwMjAgSmF2YVNjcmlwdCBpbnRlcnByZXRlcnM6XG4gKlxuICogIC0gQXJyYXktbGVuZ3RoIG1vZGlmaWNhdGlvbnMgYXQgdGhlIGhpZ2ggZW5kIG9mIGFuIGFycmF5IChwdXNoL3BvcCkgYXJlXG4gKiAgICBleHBlY3RlZCB0byBiZSBjb21tb24gYW5kIGFyZSBpbXBsZW1lbnRlZCBpbiAoYW1vcnRpemVkKSB0aW1lXG4gKiAgICBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZiBlbGVtZW50cyBhZGRlZCBvciByZW1vdmVkLCB3aGVyZWFzXG4gKiAgICBvdGhlciBvcGVyYXRpb25zIChzaGlmdC91bnNoaWZ0IGFuZCBzcGxpY2UpIGFyZSBtdWNoIGxlc3MgZWZmaWNpZW50LlxuICogIC0gRnVuY3Rpb24gYXJndW1lbnRzIGFyZSBwYXNzZWQgb24gdGhlIHN0YWNrLCBzbyBhZGRpbmcgdGVucyBvZiB0aG91c2FuZHNcbiAqICAgIG9mIGVsZW1lbnRzIHRvIGFuIGFycmF5IHdpdGggYGFyci5wdXNoKC4uLm5ld0VsZW1lbnRzKWAgd2lsbCBmcmVxdWVudGx5XG4gKiAgICBjYXVzZSBzdGFjayBvdmVyZmxvd3MuIChzZWUgPGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMTIzNzY5L3JhbmdlZXJyb3ItbWF4aW11bS1jYWxsLXN0YWNrLXNpemUtZXhjZWVkZWQtd2h5PilcbiAqXG4gKiBTcGxpY2VCdWZmZXJzIGFyZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiBnYXAgYnVmZmVycywgd2hpY2ggYXJlIGFcbiAqIGdlbmVyYWxpemF0aW9uIG9mIHRoZSBcInF1ZXVlIG1hZGUgb2YgdHdvIHN0YWNrc1wiIGlkZWEuIFRoZSBzcGxpY2UgYnVmZmVyXG4gKiBtYWludGFpbnMgYSBjdXJzb3IsIGFuZCBtb3ZpbmcgdGhlIGN1cnNvciBoYXMgY29zdCBwcm9wb3J0aW9uYWwgdG8gdGhlXG4gKiBkaXN0YW5jZSB0aGUgY3Vyc29yIG1vdmVzLCBidXQgaW5zZXJ0aW5nLCBkZWxldGluZywgb3Igc3BsaWNpbmcgaW5cbiAqIG5ldyBpbmZvcm1hdGlvbiBhdCB0aGUgY3Vyc29yIGlzIGFzIGVmZmljaWVudCBhcyB0aGUgcHVzaC9wb3Agb3BlcmF0aW9uLlxuICogVGhpcyBhbGxvd3MgZm9yIGFuIGVmZmljaWVudCBzZXF1ZW5jZSBvZiBzcGxpY2VzIChvciBwdXNoZXMsIHBvcHMsIHNoaWZ0cyxcbiAqIG9yIHVuc2hpZnRzKSBhcyBsb25nIHN1Y2ggZWRpdHMgaGFwcGVuIGF0IHRoZSBzYW1lIHBhcnQgb2YgdGhlIGFycmF5IG9yXG4gKiBnZW5lcmFsbHkgc3dlZXAgdGhyb3VnaCB0aGUgYXJyYXkgZnJvbSB0aGUgYmVnaW5uaW5nIHRvIHRoZSBlbmQuXG4gKlxuICogVGhlIGludGVyZmFjZSBmb3Igc3BsaWNlIGJ1ZmZlcnMgYWxzbyBzdXBwb3J0cyBsYXJnZSBudW1iZXJzIG9mIGlucHV0cyBieVxuICogcGFzc2luZyBhIHNpbmdsZSBhcnJheSBhcmd1bWVudCByYXRoZXIgcGFzc2luZyBtdWx0aXBsZSBhcmd1bWVudHMgb24gdGhlXG4gKiBmdW5jdGlvbiBjYWxsIHN0YWNrLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwbGljZUJ1ZmZlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8VD4gfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5pdGlhbF1cbiAgICogICBJbml0aWFsIGl0ZW1zIChvcHRpb25hbCkuXG4gICAqIEByZXR1cm5zXG4gICAqICAgU3BsaWNlIGJ1ZmZlci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGluaXRpYWwpIHtcbiAgICAvKiogQHR5cGUge0FycmF5PFQ+fSAqL1xuICAgIHRoaXMubGVmdCA9IGluaXRpYWwgPyBbLi4uaW5pdGlhbF0gOiBbXTtcbiAgICAvKiogQHR5cGUge0FycmF5PFQ+fSAqL1xuICAgIHRoaXMucmlnaHQgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheSBhY2Nlc3M7XG4gICAqIGRvZXMgbm90IG1vdmUgdGhlIGN1cnNvci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqICAgSW5kZXguXG4gICAqIEByZXR1cm4ge1R9XG4gICAqICAgSXRlbS5cbiAgICovXG4gIGdldChpbmRleCkge1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5sZWZ0Lmxlbmd0aCArIHRoaXMucmlnaHQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ2Fubm90IGFjY2VzcyBpbmRleCBgJyArIGluZGV4ICsgJ2AgaW4gYSBzcGxpY2UgYnVmZmVyIG9mIHNpemUgYCcgKyAodGhpcy5sZWZ0Lmxlbmd0aCArIHRoaXMucmlnaHQubGVuZ3RoKSArICdgJyk7XG4gICAgfVxuICAgIGlmIChpbmRleCA8IHRoaXMubGVmdC5sZW5ndGgpIHJldHVybiB0aGlzLmxlZnRbaW5kZXhdO1xuICAgIHJldHVybiB0aGlzLnJpZ2h0W3RoaXMucmlnaHQubGVuZ3RoIC0gaW5kZXggKyB0aGlzLmxlZnQubGVuZ3RoIC0gMV07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgc3BsaWNlIGJ1ZmZlciwgb25lIGdyZWF0ZXIgdGhhbiB0aGUgbGFyZ2VzdCBpbmRleCBpbiB0aGVcbiAgICogYXJyYXkuXG4gICAqL1xuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmxlZnQubGVuZ3RoICsgdGhpcy5yaWdodC5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuZCByZXR1cm4gYGxpc3RbMF1gO1xuICAgKiBtb3ZlcyB0aGUgY3Vyc29yIHRvIGAwYC5cbiAgICpcbiAgICogQHJldHVybnMge1QgfCB1bmRlZmluZWR9XG4gICAqICAgSXRlbSwgb3B0aW9uYWwuXG4gICAqL1xuICBzaGlmdCgpIHtcbiAgICB0aGlzLnNldEN1cnNvcigwKTtcbiAgICByZXR1cm4gdGhpcy5yaWdodC5wb3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTbGljZSB0aGUgYnVmZmVyIHRvIGdldCBhbiBhcnJheTtcbiAgICogZG9lcyBub3QgbW92ZSB0aGUgY3Vyc29yLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICogICBTdGFydC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5kXVxuICAgKiAgIEVuZCAob3B0aW9uYWwpLlxuICAgKiBAcmV0dXJucyB7QXJyYXk8VD59XG4gICAqICAgQXJyYXkgb2YgaXRlbXMuXG4gICAqL1xuICBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgY29uc3Qgc3RvcCA9IGVuZCA9PT0gbnVsbCB8fCBlbmQgPT09IHVuZGVmaW5lZCA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IGVuZDtcbiAgICBpZiAoc3RvcCA8IHRoaXMubGVmdC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlZnQuc2xpY2Uoc3RhcnQsIHN0b3ApO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPiB0aGlzLmxlZnQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yaWdodC5zbGljZSh0aGlzLnJpZ2h0Lmxlbmd0aCAtIHN0b3AgKyB0aGlzLmxlZnQubGVuZ3RoLCB0aGlzLnJpZ2h0Lmxlbmd0aCAtIHN0YXJ0ICsgdGhpcy5sZWZ0Lmxlbmd0aCkucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sZWZ0LnNsaWNlKHN0YXJ0KS5jb25jYXQodGhpcy5yaWdodC5zbGljZSh0aGlzLnJpZ2h0Lmxlbmd0aCAtIHN0b3AgKyB0aGlzLmxlZnQubGVuZ3RoKS5yZXZlcnNlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1pbWljcyB0aGUgYmVoYXZpb3Igb2YgQXJyYXkucHJvdG90eXBlLnNwbGljZSgpIGV4Y2VwdCBmb3IgdGhlIGNoYW5nZSBvZlxuICAgKiBpbnRlcmZhY2UgbmVjZXNzYXJ5IHRvIGF2b2lkIHNlZ2ZhdWx0cyB3aGVuIHBhdGNoaW5nIGluIHZlcnkgbGFyZ2UgYXJyYXlzLlxuICAgKlxuICAgKiBUaGlzIG9wZXJhdGlvbiBtb3ZlcyBjdXJzb3IgaXMgbW92ZWQgdG8gYHN0YXJ0YCBhbmQgcmVzdWx0cyBpbiB0aGUgY3Vyc29yXG4gICAqIHBsYWNlZCBhZnRlciBhbnkgaW5zZXJ0ZWQgaXRlbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKiAgIFN0YXJ0O1xuICAgKiAgIHplcm8tYmFzZWQgaW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgY2hhbmdpbmcgdGhlIGFycmF5O1xuICAgKiAgIG5lZ2F0aXZlIG51bWJlcnMgY291bnQgYmFja3dhcmRzIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgYW5kIHZhbHVlc1xuICAgKiAgIHRoYXQgYXJlIG91dC1vZiBib3VuZHMgYXJlIGNsYW1wZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGVuZCBvZiB0aGUgYXJyYXkuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2RlbGV0ZUNvdW50PTBdXG4gICAqICAgRGVsZXRlIGNvdW50IChkZWZhdWx0OiBgMGApO1xuICAgKiAgIG1heGltdW0gbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRlbGV0ZSwgc3RhcnRpbmcgZnJvbSBzdGFydC5cbiAgICogQHBhcmFtIHtBcnJheTxUPiB8IG51bGwgfCB1bmRlZmluZWR9IFtpdGVtcz1bXV1cbiAgICogICBJdGVtcyB0byBpbmNsdWRlIGluIHBsYWNlIG9mIHRoZSBkZWxldGVkIGl0ZW1zIChkZWZhdWx0OiBgW11gKS5cbiAgICogQHJldHVybiB7QXJyYXk8VD59XG4gICAqICAgQW55IHJlbW92ZWQgaXRlbXMuXG4gICAqL1xuICBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50LCBpdGVtcykge1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGNvbnN0IGNvdW50ID0gZGVsZXRlQ291bnQgfHwgMDtcbiAgICB0aGlzLnNldEN1cnNvcihNYXRoLnRydW5jKHN0YXJ0KSk7XG4gICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMucmlnaHQuc3BsaWNlKHRoaXMucmlnaHQubGVuZ3RoIC0gY291bnQsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgaWYgKGl0ZW1zKSBjaHVua2VkUHVzaCh0aGlzLmxlZnQsIGl0ZW1zKTtcbiAgICByZXR1cm4gcmVtb3ZlZC5yZXZlcnNlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuZCByZXR1cm4gdGhlIGhpZ2hlc3QtbnVtYmVyZWQgaXRlbSBpbiB0aGUgYXJyYXksIHNvXG4gICAqIGBsaXN0W2xpc3QubGVuZ3RoIC0gMV1gO1xuICAgKiBNb3ZlcyB0aGUgY3Vyc29yIHRvIGBsZW5ndGhgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7VCB8IHVuZGVmaW5lZH1cbiAgICogICBJdGVtLCBvcHRpb25hbC5cbiAgICovXG4gIHBvcCgpIHtcbiAgICB0aGlzLnNldEN1cnNvcihOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIHJldHVybiB0aGlzLmxlZnQucG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBhIHNpbmdsZSBpdGVtIHRvIHRoZSBoaWdoLW51bWJlcmVkIHNpZGUgb2YgdGhlIGFycmF5O1xuICAgKiBtb3ZlcyB0aGUgY3Vyc29yIHRvIGBsZW5ndGhgLlxuICAgKlxuICAgKiBAcGFyYW0ge1R9IGl0ZW1cbiAgICogICBJdGVtLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBwdXNoKGl0ZW0pIHtcbiAgICB0aGlzLnNldEN1cnNvcihOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIHRoaXMubGVmdC5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbWFueSBpdGVtcyB0byB0aGUgaGlnaC1udW1iZXJlZCBzaWRlIG9mIHRoZSBhcnJheS5cbiAgICogTW92ZXMgdGhlIGN1cnNvciB0byBgbGVuZ3RoYC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gaXRlbXNcbiAgICogICBJdGVtcy5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcHVzaE1hbnkoaXRlbXMpIHtcbiAgICB0aGlzLnNldEN1cnNvcihOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIGNodW5rZWRQdXNoKHRoaXMubGVmdCwgaXRlbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYSBzaW5nbGUgaXRlbSB0byB0aGUgbG93LW51bWJlcmVkIHNpZGUgb2YgdGhlIGFycmF5O1xuICAgKiBNb3ZlcyB0aGUgY3Vyc29yIHRvIGAwYC5cbiAgICpcbiAgICogQHBhcmFtIHtUfSBpdGVtXG4gICAqICAgSXRlbS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgdW5zaGlmdChpdGVtKSB7XG4gICAgdGhpcy5zZXRDdXJzb3IoMCk7XG4gICAgdGhpcy5yaWdodC5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbWFueSBpdGVtcyB0byB0aGUgbG93LW51bWJlcmVkIHNpZGUgb2YgdGhlIGFycmF5O1xuICAgKiBtb3ZlcyB0aGUgY3Vyc29yIHRvIGAwYC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gaXRlbXNcbiAgICogICBJdGVtcy5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgdW5zaGlmdE1hbnkoaXRlbXMpIHtcbiAgICB0aGlzLnNldEN1cnNvcigwKTtcbiAgICBjaHVua2VkUHVzaCh0aGlzLnJpZ2h0LCBpdGVtcy5yZXZlcnNlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGN1cnNvciB0byBhIHNwZWNpZmljIHBvc2l0aW9uIGluIHRoZSBhcnJheS4gUmVxdWlyZXNcbiAgICogdGltZSBwcm9wb3J0aW9uYWwgdG8gdGhlIGRpc3RhbmNlIG1vdmVkLlxuICAgKlxuICAgKiBJZiBgbiA8IDBgLCB0aGUgY3Vyc29yIHdpbGwgZW5kIHVwIGF0IHRoZSBiZWdpbm5pbmcuXG4gICAqIElmIGBuID4gbGVuZ3RoYCwgdGhlIGN1cnNvciB3aWxsIGVuZCB1cCBhdCB0aGUgZW5kLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gblxuICAgKiAgIFBvc2l0aW9uLlxuICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHNldEN1cnNvcihuKSB7XG4gICAgaWYgKG4gPT09IHRoaXMubGVmdC5sZW5ndGggfHwgbiA+IHRoaXMubGVmdC5sZW5ndGggJiYgdGhpcy5yaWdodC5sZW5ndGggPT09IDAgfHwgbiA8IDAgJiYgdGhpcy5sZWZ0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChuIDwgdGhpcy5sZWZ0Lmxlbmd0aCkge1xuICAgICAgLy8gTW92ZSBjdXJzb3IgdG8gdGhlIHRoaXMubGVmdFxuICAgICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMubGVmdC5zcGxpY2UobiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgIGNodW5rZWRQdXNoKHRoaXMucmlnaHQsIHJlbW92ZWQucmV2ZXJzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTW92ZSBjdXJzb3IgdG8gdGhlIHRoaXMucmlnaHRcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSB0aGlzLnJpZ2h0LnNwbGljZSh0aGlzLmxlZnQubGVuZ3RoICsgdGhpcy5yaWdodC5sZW5ndGggLSBuLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgY2h1bmtlZFB1c2godGhpcy5sZWZ0LCByZW1vdmVkLnJldmVyc2UoKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXZvaWQgc3RhY2sgb3ZlcmZsb3cgYnkgcHVzaGluZyBpdGVtcyBvbnRvIHRoZSBzdGFjayBpbiBzZWdtZW50c1xuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiAgIEl0ZW0gdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxpc3RcbiAqICAgTGlzdCB0byBpbmplY3QgaW50by5cbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxUPn0gcmlnaHRcbiAqICAgSXRlbXMgdG8gaW5qZWN0LlxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBjaHVua2VkUHVzaChsaXN0LCByaWdodCkge1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGNodW5rU3RhcnQgPSAwO1xuICBpZiAocmlnaHQubGVuZ3RoIDwgMTAwMDApIHtcbiAgICBsaXN0LnB1c2goLi4ucmlnaHQpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChjaHVua1N0YXJ0IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICBsaXN0LnB1c2goLi4ucmlnaHQuc2xpY2UoY2h1bmtTdGFydCwgY2h1bmtTdGFydCArIDEwMDAwKSk7XG4gICAgICBjaHVua1N0YXJ0ICs9IDEwMDAwO1xuICAgIH1cbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge0NodW5rLCBFdmVudCwgVG9rZW59IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IHNwbGljZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnO1xuaW1wb3J0IHsgU3BsaWNlQnVmZmVyIH0gZnJvbSAnLi9saWIvc3BsaWNlLWJ1ZmZlci5qcyc7XG5cbi8vIEhpZGRlbiBBUEkgZXhwb3NlZCBmb3IgdGVzdGluZy5cbmV4cG9ydCB7IFNwbGljZUJ1ZmZlciB9IGZyb20gJy4vbGliL3NwbGljZS1idWZmZXIuanMnO1xuXG4vKipcbiAqIFRva2VuaXplIHN1YmNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxFdmVudD59IGV2ZW50c0FycmF5XG4gKiAgIExpc3Qgb2YgZXZlbnRzLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgc3VidG9rZW5zIHdlcmUgZm91bmQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5leHBvcnQgZnVuY3Rpb24gc3VidG9rZW5pemUoZXZlbnRzQXJyYXkpIHtcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuICBjb25zdCBqdW1wcyA9IHt9O1xuICBsZXQgaW5kZXggPSAtMTtcbiAgLyoqIEB0eXBlIHtFdmVudH0gKi9cbiAgbGV0IGV2ZW50O1xuICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGxpbmVJbmRleDtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCBvdGhlckluZGV4O1xuICAvKiogQHR5cGUge0V2ZW50fSAqL1xuICBsZXQgb3RoZXJFdmVudDtcbiAgLyoqIEB0eXBlIHtBcnJheTxFdmVudD59ICovXG4gIGxldCBwYXJhbWV0ZXJzO1xuICAvKiogQHR5cGUge0FycmF5PEV2ZW50Pn0gKi9cbiAgbGV0IHN1YmV2ZW50cztcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbW9yZTtcbiAgY29uc3QgZXZlbnRzID0gbmV3IFNwbGljZUJ1ZmZlcihldmVudHNBcnJheSk7XG4gIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgIHdoaWxlIChpbmRleCBpbiBqdW1wcykge1xuICAgICAgaW5kZXggPSBqdW1wc1tpbmRleF07XG4gICAgfVxuICAgIGV2ZW50ID0gZXZlbnRzLmdldChpbmRleCk7XG5cbiAgICAvLyBBZGQgYSBob29rIGZvciB0aGUgR0ZNIHRhc2tsaXN0IGV4dGVuc2lvbiwgd2hpY2ggbmVlZHMgdG8ga25vdyBpZiB0ZXh0XG4gICAgLy8gaXMgaW4gdGhlIGZpcnN0IGNvbnRlbnQgb2YgYSBsaXN0IGl0ZW0uXG4gICAgaWYgKGluZGV4ICYmIGV2ZW50WzFdLnR5cGUgPT09IFwiY2h1bmtGbG93XCIgJiYgZXZlbnRzLmdldChpbmRleCAtIDEpWzFdLnR5cGUgPT09IFwibGlzdEl0ZW1QcmVmaXhcIikge1xuICAgICAgc3ViZXZlbnRzID0gZXZlbnRbMV0uX3Rva2VuaXplci5ldmVudHM7XG4gICAgICBvdGhlckluZGV4ID0gMDtcbiAgICAgIGlmIChvdGhlckluZGV4IDwgc3ViZXZlbnRzLmxlbmd0aCAmJiBzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gXCJsaW5lRW5kaW5nQmxhbmtcIikge1xuICAgICAgICBvdGhlckluZGV4ICs9IDI7XG4gICAgICB9XG4gICAgICBpZiAob3RoZXJJbmRleCA8IHN1YmV2ZW50cy5sZW5ndGggJiYgc3ViZXZlbnRzW290aGVySW5kZXhdWzFdLnR5cGUgPT09IFwiY29udGVudFwiKSB7XG4gICAgICAgIHdoaWxlICgrK290aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSBcImNvbnRlbnRcIikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gXCJjaHVua1RleHRcIikge1xuICAgICAgICAgICAgc3ViZXZlbnRzW290aGVySW5kZXhdWzFdLl9pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWU7XG4gICAgICAgICAgICBvdGhlckluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW50ZXIuXG4gICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoZXZlbnRbMV0uY29udGVudFR5cGUpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihqdW1wcywgc3ViY29udGVudChldmVudHMsIGluZGV4KSk7XG4gICAgICAgIGluZGV4ID0ganVtcHNbaW5kZXhdO1xuICAgICAgICBtb3JlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRXhpdC5cbiAgICBlbHNlIGlmIChldmVudFsxXS5fY29udGFpbmVyKSB7XG4gICAgICBvdGhlckluZGV4ID0gaW5kZXg7XG4gICAgICBsaW5lSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICB3aGlsZSAob3RoZXJJbmRleC0tKSB7XG4gICAgICAgIG90aGVyRXZlbnQgPSBldmVudHMuZ2V0KG90aGVySW5kZXgpO1xuICAgICAgICBpZiAob3RoZXJFdmVudFsxXS50eXBlID09PSBcImxpbmVFbmRpbmdcIiB8fCBvdGhlckV2ZW50WzFdLnR5cGUgPT09IFwibGluZUVuZGluZ0JsYW5rXCIpIHtcbiAgICAgICAgICBpZiAob3RoZXJFdmVudFswXSA9PT0gJ2VudGVyJykge1xuICAgICAgICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAgICAgICBldmVudHMuZ2V0KGxpbmVJbmRleClbMV0udHlwZSA9IFwibGluZUVuZGluZ0JsYW5rXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdGhlckV2ZW50WzFdLnR5cGUgPSBcImxpbmVFbmRpbmdcIjtcbiAgICAgICAgICAgIGxpbmVJbmRleCA9IG90aGVySW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG90aGVyRXZlbnRbMV0udHlwZSA9PT0gXCJsaW5lUHJlZml4XCIpIHtcbiAgICAgICAgICAvLyBNb3ZlIHBhc3QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsaW5lSW5kZXgpIHtcbiAgICAgICAgLy8gRml4IHBvc2l0aW9uLlxuICAgICAgICBldmVudFsxXS5lbmQgPSB7XG4gICAgICAgICAgLi4uZXZlbnRzLmdldChsaW5lSW5kZXgpWzFdLnN0YXJ0XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU3dpdGNoIGNvbnRhaW5lciBleGl0IHcvIGxpbmUgZW5kaW5ncy5cbiAgICAgICAgcGFyYW1ldGVycyA9IGV2ZW50cy5zbGljZShsaW5lSW5kZXgsIGluZGV4KTtcbiAgICAgICAgcGFyYW1ldGVycy51bnNoaWZ0KGV2ZW50KTtcbiAgICAgICAgZXZlbnRzLnNwbGljZShsaW5lSW5kZXgsIGluZGV4IC0gbGluZUluZGV4ICsgMSwgcGFyYW1ldGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gVGhlIGNoYW5nZXMgdG8gdGhlIGBldmVudHNgIGJ1ZmZlciBtdXN0IGJlIGNvcGllZCBiYWNrIGludG8gdGhlIGV2ZW50c0FycmF5XG4gIHNwbGljZShldmVudHNBcnJheSwgMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBldmVudHMuc2xpY2UoMCkpO1xuICByZXR1cm4gIW1vcmU7XG59XG5cbi8qKlxuICogVG9rZW5pemUgZW1iZWRkZWQgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSB7U3BsaWNlQnVmZmVyPEV2ZW50Pn0gZXZlbnRzXG4gKiAgIEV2ZW50cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBldmVudEluZGV4XG4gKiAgIEluZGV4LlxuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIG51bWJlcj59XG4gKiAgIEdhcHMuXG4gKi9cbmZ1bmN0aW9uIHN1YmNvbnRlbnQoZXZlbnRzLCBldmVudEluZGV4KSB7XG4gIGNvbnN0IHRva2VuID0gZXZlbnRzLmdldChldmVudEluZGV4KVsxXTtcbiAgY29uc3QgY29udGV4dCA9IGV2ZW50cy5nZXQoZXZlbnRJbmRleClbMl07XG4gIGxldCBzdGFydFBvc2l0aW9uID0gZXZlbnRJbmRleCAtIDE7XG4gIC8qKiBAdHlwZSB7QXJyYXk8bnVtYmVyPn0gKi9cbiAgY29uc3Qgc3RhcnRQb3NpdGlvbnMgPSBbXTtcbiAgY29uc3QgdG9rZW5pemVyID0gdG9rZW4uX3Rva2VuaXplciB8fCBjb250ZXh0LnBhcnNlclt0b2tlbi5jb250ZW50VHlwZV0odG9rZW4uc3RhcnQpO1xuICBjb25zdCBjaGlsZEV2ZW50cyA9IHRva2VuaXplci5ldmVudHM7XG4gIC8qKiBAdHlwZSB7QXJyYXk8W251bWJlciwgbnVtYmVyXT59ICovXG4gIGNvbnN0IGp1bXBzID0gW107XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cbiAgY29uc3QgZ2FwcyA9IHt9O1xuICAvKiogQHR5cGUge0FycmF5PENodW5rPn0gKi9cbiAgbGV0IHN0cmVhbTtcbiAgLyoqIEB0eXBlIHtUb2tlbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHByZXZpb3VzO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgLyoqIEB0eXBlIHtUb2tlbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGN1cnJlbnQgPSB0b2tlbjtcbiAgbGV0IGFkanVzdCA9IDA7XG4gIGxldCBzdGFydCA9IDA7XG4gIGNvbnN0IGJyZWFrcyA9IFtzdGFydF07XG5cbiAgLy8gTG9vcCBmb3J3YXJkIHRocm91Z2ggdGhlIGxpbmtlZCB0b2tlbnMgdG8gcGFzcyB0aGVtIGluIG9yZGVyIHRvIHRoZVxuICAvLyBzdWJ0b2tlbml6ZXIuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgLy8gRmluZCB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGZvciB0aGlzIHRva2VuLlxuICAgIHdoaWxlIChldmVudHMuZ2V0KCsrc3RhcnRQb3NpdGlvbilbMV0gIT09IGN1cnJlbnQpIHtcbiAgICAgIC8vIEVtcHR5LlxuICAgIH1cbiAgICBzdGFydFBvc2l0aW9ucy5wdXNoKHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmICghY3VycmVudC5fdG9rZW5pemVyKSB7XG4gICAgICBzdHJlYW0gPSBjb250ZXh0LnNsaWNlU3RyZWFtKGN1cnJlbnQpO1xuICAgICAgaWYgKCFjdXJyZW50Lm5leHQpIHtcbiAgICAgICAgc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgdG9rZW5pemVyLmRlZmluZVNraXAoY3VycmVudC5zdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudC5faXNJbkZpcnN0Q29udGVudE9mTGlzdEl0ZW0pIHtcbiAgICAgICAgdG9rZW5pemVyLl9nZm1UYXNrbGlzdEZpcnN0Q29udGVudE9mTGlzdEl0ZW0gPSB0cnVlO1xuICAgICAgfVxuICAgICAgdG9rZW5pemVyLndyaXRlKHN0cmVhbSk7XG4gICAgICBpZiAoY3VycmVudC5faXNJbkZpcnN0Q29udGVudE9mTGlzdEl0ZW0pIHtcbiAgICAgICAgdG9rZW5pemVyLl9nZm1UYXNrbGlzdEZpcnN0Q29udGVudE9mTGlzdEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5yYXZlbCB0aGUgbmV4dCB0b2tlbi5cbiAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuXG4gIC8vIE5vdywgbG9vcCBiYWNrIHRocm91Z2ggYWxsIGV2ZW50cyAoYW5kIGxpbmtlZCB0b2tlbnMpLCB0byBmaWd1cmUgb3V0IHdoaWNoXG4gIC8vIHBhcnRzIGJlbG9uZyB3aGVyZS5cbiAgY3VycmVudCA9IHRva2VuO1xuICB3aGlsZSAoKytpbmRleCA8IGNoaWxkRXZlbnRzLmxlbmd0aCkge1xuICAgIGlmIChcbiAgICAvLyBGaW5kIGEgdm9pZCB0b2tlbiB0aGF0IGluY2x1ZGVzIGEgYnJlYWsuXG4gICAgY2hpbGRFdmVudHNbaW5kZXhdWzBdID09PSAnZXhpdCcgJiYgY2hpbGRFdmVudHNbaW5kZXggLSAxXVswXSA9PT0gJ2VudGVyJyAmJiBjaGlsZEV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gY2hpbGRFdmVudHNbaW5kZXggLSAxXVsxXS50eXBlICYmIGNoaWxkRXZlbnRzW2luZGV4XVsxXS5zdGFydC5saW5lICE9PSBjaGlsZEV2ZW50c1tpbmRleF1bMV0uZW5kLmxpbmUpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXggKyAxO1xuICAgICAgYnJlYWtzLnB1c2goc3RhcnQpO1xuICAgICAgLy8gSGVscCBHQy5cbiAgICAgIGN1cnJlbnQuX3Rva2VuaXplciA9IHVuZGVmaW5lZDtcbiAgICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH1cbiAgfVxuXG4gIC8vIEhlbHAgR0MuXG4gIHRva2VuaXplci5ldmVudHMgPSBbXTtcblxuICAvLyBJZiB0aGVyZVx1MjAxOXMgb25lIG1vcmUgdG9rZW4gKHdoaWNoIGlzIHRoZSBjYXNlcyBmb3IgbGluZXMgdGhhdCBlbmQgaW4gYW5cbiAgLy8gRU9GKSwgdGhhdFx1MjAxOXMgcGVyZmVjdDogdGhlIGxhc3QgcG9pbnQgd2UgZm91bmQgc3RhcnRzIGl0LlxuICAvLyBJZiB0aGVyZSBpc25cdTIwMTl0IHRoZW4gbWFrZSBzdXJlIGFueSByZW1haW5pbmcgY29udGVudCBpcyBhZGRlZCB0byBpdC5cbiAgaWYgKGN1cnJlbnQpIHtcbiAgICAvLyBIZWxwIEdDLlxuICAgIGN1cnJlbnQuX3Rva2VuaXplciA9IHVuZGVmaW5lZDtcbiAgICBjdXJyZW50LnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGJyZWFrcy5wb3AoKTtcbiAgfVxuXG4gIC8vIE5vdyBzcGxpY2UgdGhlIGV2ZW50cyBmcm9tIHRoZSBzdWJ0b2tlbml6ZXIgaW50byB0aGUgY3VycmVudCBldmVudHMsXG4gIC8vIG1vdmluZyBiYWNrIHRvIGZyb250IHNvIHRoYXQgc3BsaWNlIGluZGljZXMgYXJlblx1MjAxOXQgYWZmZWN0ZWQuXG4gIGluZGV4ID0gYnJlYWtzLmxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBjb25zdCBzbGljZSA9IGNoaWxkRXZlbnRzLnNsaWNlKGJyZWFrc1tpbmRleF0sIGJyZWFrc1tpbmRleCArIDFdKTtcbiAgICBjb25zdCBzdGFydCA9IHN0YXJ0UG9zaXRpb25zLnBvcCgpO1xuICAgIGp1bXBzLnB1c2goW3N0YXJ0LCBzdGFydCArIHNsaWNlLmxlbmd0aCAtIDFdKTtcbiAgICBldmVudHMuc3BsaWNlKHN0YXJ0LCAyLCBzbGljZSk7XG4gIH1cbiAganVtcHMucmV2ZXJzZSgpO1xuICBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGp1bXBzLmxlbmd0aCkge1xuICAgIGdhcHNbYWRqdXN0ICsganVtcHNbaW5kZXhdWzBdXSA9IGFkanVzdCArIGp1bXBzW2luZGV4XVsxXTtcbiAgICBhZGp1c3QgKz0ganVtcHNbaW5kZXhdWzFdIC0ganVtcHNbaW5kZXhdWzBdIC0gMTtcbiAgfVxuICByZXR1cm4gZ2Fwcztcbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBSZXNvbHZlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyLFxuICogICBUb2tlblxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuaW1wb3J0IHsgc3VidG9rZW5pemUgfSBmcm9tICdtaWNyb21hcmstdXRpbC1zdWJ0b2tlbml6ZSc7XG4vKipcbiAqIE5vIG5hbWUgYmVjYXVzZSBpdCBtdXN0IG5vdCBiZSB0dXJuZWQgb2ZmLlxuICogQHR5cGUge0NvbnN0cnVjdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnQgPSB7XG4gIHJlc29sdmU6IHJlc29sdmVDb250ZW50LFxuICB0b2tlbml6ZTogdG9rZW5pemVDb250ZW50XG59O1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IGNvbnRpbnVhdGlvbkNvbnN0cnVjdCA9IHtcbiAgcGFydGlhbDogdHJ1ZSxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29udGludWF0aW9uXG59O1xuXG4vKipcbiAqIENvbnRlbnQgaXMgdHJhbnNwYXJlbnQ6IGl0XHUyMDE5cyBwYXJzZWQgcmlnaHQgbm93LiBUaGF0IHdheSwgZGVmaW5pdGlvbnMgYXJlIGFsc29cbiAqIHBhcnNlZCByaWdodCBub3c6IGJlZm9yZSB0ZXh0IGluIHBhcmFncmFwaHMgKHNwZWNpZmljYWxseSwgbWVkaWEpIGFyZSBwYXJzZWQuXG4gKlxuICogQHR5cGUge1Jlc29sdmVyfVxuICovXG5mdW5jdGlvbiByZXNvbHZlQ29udGVudChldmVudHMpIHtcbiAgc3VidG9rZW5pemUoZXZlbnRzKTtcbiAgcmV0dXJuIGV2ZW50cztcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVDb250ZW50KGVmZmVjdHMsIG9rKSB7XG4gIC8qKiBAdHlwZSB7VG9rZW4gfCB1bmRlZmluZWR9ICovXG4gIGxldCBwcmV2aW91cztcbiAgcmV0dXJuIGNodW5rU3RhcnQ7XG5cbiAgLyoqXG4gICAqIEJlZm9yZSBhIGNvbnRlbnQgY2h1bmsuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhYmNcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNodW5rU3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJjb250ZW50XCIpO1xuICAgIHByZXZpb3VzID0gZWZmZWN0cy5lbnRlcihcImNodW5rQ29udGVudFwiLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJjb250ZW50XCJcbiAgICB9KTtcbiAgICByZXR1cm4gY2h1bmtJbnNpZGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gYSBjb250ZW50IGNodW5rLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYWJjXG4gICAqICAgICBeXl5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNodW5rSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbnRlbnRFbmQoY29kZSk7XG4gICAgfVxuXG4gICAgLy8gVG8gZG86IGluIGBtYXJrZG93bi1yc2AsIGVhY2ggbGluZSBpcyBwYXJzZWQgb24gaXRzIG93biwgYW5kIGV2ZXJ5dGhpbmdcbiAgICAvLyBpcyBzdGl0Y2hlZCB0b2dldGhlciByZXNvbHZpbmcuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soY29udGludWF0aW9uQ29uc3RydWN0LCBjb250ZW50Q29udGludWUsIGNvbnRlbnRFbmQpKGNvZGUpO1xuICAgIH1cblxuICAgIC8vIERhdGEuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjaHVua0luc2lkZTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb250ZW50RW5kKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoXCJjaHVua0NvbnRlbnRcIik7XG4gICAgZWZmZWN0cy5leGl0KFwiY29udGVudFwiKTtcbiAgICByZXR1cm4gb2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29udGVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwiY2h1bmtDb250ZW50XCIpO1xuICAgIHByZXZpb3VzLm5leHQgPSBlZmZlY3RzLmVudGVyKFwiY2h1bmtDb250ZW50XCIsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImNvbnRlbnRcIixcbiAgICAgIHByZXZpb3VzXG4gICAgfSk7XG4gICAgcHJldmlvdXMgPSBwcmV2aW91cy5uZXh0O1xuICAgIHJldHVybiBjaHVua0luc2lkZTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvbnRpbnVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gc3RhcnRMb29rYWhlYWQ7XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0TG9va2FoZWFkKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoXCJjaHVua0NvbnRlbnRcIik7XG4gICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBwcmVmaXhlZCwgXCJsaW5lUHJlZml4XCIpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHByZWZpeGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cblxuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXTtcbiAgICBpZiAoIXNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKSAmJiB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gXCJsaW5lUHJlZml4XCIgJiYgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gNCkge1xuICAgICAgcmV0dXJuIG9rKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZWZmZWN0cy5pbnRlcnJ1cHQoc2VsZi5wYXJzZXIuY29uc3RydWN0cy5mbG93LCBub2ssIG9rKShjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge0VmZmVjdHMsIFN0YXRlLCBUb2tlblR5cGV9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGFzY2lpQ29udHJvbCwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSwgbWFya2Rvd25MaW5lRW5kaW5nIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKlxuICogUGFyc2UgZGVzdGluYXRpb25zLlxuICpcbiAqICMjIyMjIyBFeGFtcGxlc1xuICpcbiAqIGBgYG1hcmtkb3duXG4gKiA8YT5cbiAqIDxhXFw+Yj5cbiAqIDxhIGI+XG4gKiA8YSk+XG4gKiBhXG4gKiBhXFwpYlxuICogYShiKWNcbiAqIGEoYilcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogICBDb250ZXh0LlxuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqICAgU3RhdGUgc3dpdGNoZWQgdG8gd2hlbiBzdWNjZXNzZnVsLlxuICogQHBhcmFtIHtTdGF0ZX0gbm9rXG4gKiAgIFN0YXRlIHN3aXRjaGVkIHRvIHdoZW4gdW5zdWNjZXNzZnVsLlxuICogQHBhcmFtIHtUb2tlblR5cGV9IHR5cGVcbiAqICAgVHlwZSBmb3Igd2hvbGUgKGA8YT5gIG9yIGBiYCkuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gbGl0ZXJhbFR5cGVcbiAqICAgVHlwZSB3aGVuIGVuY2xvc2VkIChgPGE+YCkuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gbGl0ZXJhbE1hcmtlclR5cGVcbiAqICAgVHlwZSBmb3IgZW5jbG9zaW5nIChgPGAgYW5kIGA+YCkuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gcmF3VHlwZVxuICogICBUeXBlIHdoZW4gbm90IGVuY2xvc2VkIChgYmApLlxuICogQHBhcmFtIHtUb2tlblR5cGV9IHN0cmluZ1R5cGVcbiAqICAgVHlwZSBmb3IgdGhlIHZhbHVlIChgYWAgb3IgYGJgKS5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBbbWF4PUluZmluaXR5XVxuICogICBEZXB0aCBvZiBuZXN0ZWQgcGFyZW5zIChpbmNsdXNpdmUpLlxuICogQHJldHVybnMge1N0YXRlfVxuICogICBTdGFydCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlEZXN0aW5hdGlvbihlZmZlY3RzLCBvaywgbm9rLCB0eXBlLCBsaXRlcmFsVHlwZSwgbGl0ZXJhbE1hcmtlclR5cGUsIHJhd1R5cGUsIHN0cmluZ1R5cGUsIG1heCkge1xuICBjb25zdCBsaW1pdCA9IG1heCB8fCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGxldCBiYWxhbmNlID0gMDtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBkZXN0aW5hdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhYT5cbiAgICogICAgIF5cbiAgICogPiB8IGFhXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYwKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpO1xuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsVHlwZSk7XG4gICAgICBlZmZlY3RzLmVudGVyKGxpdGVyYWxNYXJrZXJUeXBlKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChsaXRlcmFsTWFya2VyVHlwZSk7XG4gICAgICByZXR1cm4gZW5jbG9zZWRCZWZvcmU7XG4gICAgfVxuXG4gICAgLy8gQVNDSUkgY29udHJvbCwgc3BhY2UsIGNsb3NpbmcgcGFyZW4uXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gMzIgfHwgY29kZSA9PT0gNDEgfHwgYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpO1xuICAgIGVmZmVjdHMuZW50ZXIocmF3VHlwZSk7XG4gICAgZWZmZWN0cy5lbnRlcihzdHJpbmdUeXBlKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY2h1bmtTdHJpbmdcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwic3RyaW5nXCJcbiAgICB9KTtcbiAgICByZXR1cm4gcmF3KGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8YCwgYXQgYW4gZW5jbG9zZWQgZGVzdGluYXRpb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8YWE+XG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZW5jbG9zZWRCZWZvcmUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsTWFya2VyVHlwZSk7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQobGl0ZXJhbE1hcmtlclR5cGUpO1xuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxUeXBlKTtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKTtcbiAgICAgIHJldHVybiBvaztcbiAgICB9XG4gICAgZWZmZWN0cy5lbnRlcihzdHJpbmdUeXBlKTtcbiAgICBlZmZlY3RzLmVudGVyKFwiY2h1bmtTdHJpbmdcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwic3RyaW5nXCJcbiAgICB9KTtcbiAgICByZXR1cm4gZW5jbG9zZWQoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gZW5jbG9zZWQgZGVzdGluYXRpb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8YWE+XG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gZW5jbG9zZWQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2h1bmtTdHJpbmdcIik7XG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSk7XG4gICAgICByZXR1cm4gZW5jbG9zZWRCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDYwIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjb2RlID09PSA5MiA/IGVuY2xvc2VkRXNjYXBlIDogZW5jbG9zZWQ7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYFxcYCwgYXQgYSBzcGVjaWFsIGNoYXJhY3Rlci5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhXFwqYT5cbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGVuY2xvc2VkRXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjAgfHwgY29kZSA9PT0gNjIgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBlbmNsb3NlZDtcbiAgICB9XG4gICAgcmV0dXJuIGVuY2xvc2VkKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJhdyBkZXN0aW5hdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGFhXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByYXcoY29kZSkge1xuICAgIGlmICghYmFsYW5jZSAmJiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA0MSB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2h1bmtTdHJpbmdcIik7XG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSk7XG4gICAgICBlZmZlY3RzLmV4aXQocmF3VHlwZSk7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSk7XG4gICAgICByZXR1cm4gb2soY29kZSk7XG4gICAgfVxuICAgIGlmIChiYWxhbmNlIDwgbGltaXQgJiYgY29kZSA9PT0gNDApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGJhbGFuY2UrKztcbiAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgYmFsYW5jZS0tO1xuICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG5cbiAgICAvLyBBU0NJSSBjb250cm9sIChidXQgKm5vdCogYFxcMGApIGFuZCBzcGFjZSBhbmQgYChgLlxuICAgIC8vIE5vdGU6IGluIGBtYXJrZG93bi1yc2AsIGBcXDBgIGV4aXN0cyBpbiBjb2RlcywgaW4gYG1pY3JvbWFyay1qc2AgaXRcbiAgICAvLyBkb2Vzblx1MjAxOXQuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gMzIgfHwgY29kZSA9PT0gNDAgfHwgYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gcmF3RXNjYXBlIDogcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGBcXGAsIGF0IHNwZWNpYWwgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYVxcKmFcbiAgICogICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gcmF3RXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDAgfHwgY29kZSA9PT0gNDEgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIHJldHVybiByYXcoY29kZSk7XG4gIH1cbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgRWZmZWN0cyxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5UeXBlXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IG1hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG4vKipcbiAqIFBhcnNlIGxhYmVscy5cbiAqXG4gKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogbGFiZWxzIGluIG1hcmtkb3duIGFyZSBjYXBwZWQgYXQgOTk5IGNoYXJhY3RlcnMgaW4gdGhlIHN0cmluZy5cbiAqXG4gKiAjIyMjIyMgRXhhbXBsZXNcbiAqXG4gKiBgYGBtYXJrZG93blxuICogW2FdXG4gKiBbYVxuICogYl1cbiAqIFthXFxdYl1cbiAqIGBgYFxuICpcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIFRva2VuaXplIGNvbnRleHQuXG4gKiBAcGFyYW0ge0VmZmVjdHN9IGVmZmVjdHNcbiAqICAgQ29udGV4dC5cbiAqIEBwYXJhbSB7U3RhdGV9IG9rXG4gKiAgIFN0YXRlIHN3aXRjaGVkIHRvIHdoZW4gc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHVuc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0eXBlXG4gKiAgIFR5cGUgb2YgdGhlIHdob2xlIGxhYmVsIChgW2FdYCkuXG4gKiBAcGFyYW0ge1Rva2VuVHlwZX0gbWFya2VyVHlwZVxuICogICBUeXBlIGZvciB0aGUgbWFya2VycyAoYFtgIGFuZCBgXWApLlxuICogQHBhcmFtIHtUb2tlblR5cGV9IHN0cmluZ1R5cGVcbiAqICAgVHlwZSBmb3IgdGhlIGlkZW50aWZpZXIgKGBhYCkuXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKiAgIFN0YXJ0IHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yeUxhYmVsKGVmZmVjdHMsIG9rLCBub2ssIHR5cGUsIG1hcmtlclR5cGUsIHN0cmluZ1R5cGUpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGxldCBzaXplID0gMDtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgc2VlbjtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBsYWJlbC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIodHlwZSk7XG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpO1xuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSk7XG4gICAgcmV0dXJuIGF0QnJlYWs7XG4gIH1cblxuICAvKipcbiAgICogSW4gbGFiZWwsIGF0IHNvbWV0aGluZywgYmVmb3JlIHNvbWV0aGluZyBlbHNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKHNpemUgPiA5OTkgfHwgY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA5MSB8fCBjb2RlID09PSA5MyAmJiAhc2VlbiB8fFxuICAgIC8vIFRvIGRvOiByZW1vdmUgaW4gdGhlIGZ1dHVyZSBvbmNlIHdlXHUyMDE5dmUgc3dpdGNoZWQgZnJvbVxuICAgIC8vIGBtaWNyb21hcmstZXh0ZW5zaW9uLWZvb3Rub3RlYCB0byBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLFxuICAgIC8vIHdoaWNoIGRvZXNuXHUyMDE5dCBuZWVkIHRoaXMuXG4gICAgLy8gSGlkZGVuIGZvb3Rub3RlcyBob29rLlxuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICBjb2RlID09PSA5NCAmJiAhc2l6ZSAmJiAnX2hpZGRlbkZvb3Rub3RlU3VwcG9ydCcgaW4gc2VsZi5wYXJzZXIuY29uc3RydWN0cykge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSk7XG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpO1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpO1xuICAgICAgcmV0dXJuIG9rO1xuICAgIH1cblxuICAgIC8vIFRvIGRvOiBpbmRlbnQ/IExpbmsgY2h1bmtzIGFuZCBFT0xzIHRvZ2V0aGVyP1xuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwibGluZUVuZGluZ1wiKTtcbiAgICAgIHJldHVybiBhdEJyZWFrO1xuICAgIH1cbiAgICBlZmZlY3RzLmVudGVyKFwiY2h1bmtTdHJpbmdcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwic3RyaW5nXCJcbiAgICB9KTtcbiAgICByZXR1cm4gbGFiZWxJbnNpZGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gbGFiZWwsIGluIHRleHQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV1cbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBsYWJlbEluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gOTEgfHwgY29kZSA9PT0gOTMgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpIHx8IHNpemUrKyA+IDk5OSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwiY2h1bmtTdHJpbmdcIik7XG4gICAgICByZXR1cm4gYXRCcmVhayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGlmICghc2Vlbikgc2VlbiA9ICFtYXJrZG93blNwYWNlKGNvZGUpO1xuICAgIHJldHVybiBjb2RlID09PSA5MiA/IGxhYmVsRXNjYXBlIDogbGFiZWxJbnNpZGU7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYFxcYCwgYXQgYSBzcGVjaWFsIGNoYXJhY3Rlci5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXFwqYV1cbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGxhYmVsRXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTEgfHwgY29kZSA9PT0gOTIgfHwgY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHNpemUrKztcbiAgICAgIHJldHVybiBsYWJlbEluc2lkZTtcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsSW5zaWRlKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIEVmZmVjdHMsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlblR5cGVcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKlxuICogUGFyc2UgdGl0bGVzLlxuICpcbiAqICMjIyMjIyBFeGFtcGxlc1xuICpcbiAqIGBgYG1hcmtkb3duXG4gKiBcImFcIlxuICogJ2InXG4gKiAoYylcbiAqIFwiYVxuICogYlwiXG4gKiAnYVxuICogICAgIGInXG4gKiAoYVxcKWIpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0VmZmVjdHN9IGVmZmVjdHNcbiAqICAgQ29udGV4dC5cbiAqIEBwYXJhbSB7U3RhdGV9IG9rXG4gKiAgIFN0YXRlIHN3aXRjaGVkIHRvIHdoZW4gc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHVuc3VjY2Vzc2Z1bC5cbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSB0eXBlXG4gKiAgIFR5cGUgb2YgdGhlIHdob2xlIHRpdGxlIChgXCJhXCJgLCBgJ2InYCwgYChjKWApLlxuICogQHBhcmFtIHtUb2tlblR5cGV9IG1hcmtlclR5cGVcbiAqICAgVHlwZSBmb3IgdGhlIG1hcmtlcnMgKGBcImAsIGAnYCwgYChgLCBhbmQgYClgKS5cbiAqIEBwYXJhbSB7VG9rZW5UeXBlfSBzdHJpbmdUeXBlXG4gKiAgIFR5cGUgZm9yIHRoZSB2YWx1ZSAoYGFgKS5cbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqICAgU3RhcnQgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5VGl0bGUoZWZmZWN0cywgb2ssIG5vaywgdHlwZSwgbWFya2VyVHlwZSwgc3RyaW5nVHlwZSkge1xuICAvKiogQHR5cGUge05vbk51bGxhYmxlPENvZGU+fSAqL1xuICBsZXQgbWFya2VyO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG9mIHRpdGxlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgXCJhXCJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzQgfHwgY29kZSA9PT0gMzkgfHwgY29kZSA9PT0gNDApIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZSk7XG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpO1xuICAgICAgbWFya2VyID0gY29kZSA9PT0gNDAgPyA0MSA6IGNvZGU7XG4gICAgICByZXR1cm4gYmVnaW47XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgb3BlbmluZyBtYXJrZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgYWxzbyB1c2VkIGF0IHRoZSBjbG9zaW5nIG1hcmtlci5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFwiYVwiXG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYmVnaW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIobWFya2VyVHlwZSk7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQobWFya2VyVHlwZSk7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSk7XG4gICAgICByZXR1cm4gb2s7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSk7XG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQXQgc29tZXRoaW5nLCBiZWZvcmUgc29tZXRoaW5nIGVsc2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBcImFcIlxuICAgKiAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChzdHJpbmdUeXBlKTtcbiAgICAgIHJldHVybiBiZWdpbihtYXJrZXIpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG5cbiAgICAvLyBOb3RlOiBibGFuayBsaW5lcyBjYW5cdTIwMTl0IGV4aXN0IGluIGNvbnRlbnQuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgLy8gVG8gZG86IHVzZSBgc3BhY2Vfb3JfdGFiX2VvbF93aXRoX29wdGlvbnNgLCBjb25uZWN0LlxuICAgICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdEJyZWFrLCBcImxpbmVQcmVmaXhcIik7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJjaHVua1N0cmluZ1wiLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJzdHJpbmdcIlxuICAgIH0pO1xuICAgIHJldHVybiBpbnNpZGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyIHx8IGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJjaHVua1N0cmluZ1wiKTtcbiAgICAgIHJldHVybiBhdEJyZWFrKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gZXNjYXBlIDogaW5zaWRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGBcXGAsIGF0IGEgc3BlY2lhbCBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBcImFcXCpiXCJcbiAgICogICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBpbnNpZGU7XG4gICAgfVxuICAgIHJldHVybiBpbnNpZGUoY29kZSk7XG4gIH1cbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtFZmZlY3RzLCBTdGF0ZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKlxuICogUGFyc2Ugc3BhY2VzIGFuZCB0YWJzLlxuICpcbiAqIFRoZXJlIGlzIG5vIGBub2tgIHBhcmFtZXRlcjpcbiAqXG4gKiAqICAgbGluZSBlbmRpbmdzIG9yIHNwYWNlcyBpbiBtYXJrZG93biBhcmUgb2Z0ZW4gb3B0aW9uYWwsIGluIHdoaWNoIGNhc2UgdGhpc1xuICogICAgIGZhY3RvcnkgY2FuIGJlIHVzZWQgYW5kIGBva2Agd2lsbCBiZSBzd2l0Y2hlZCB0byB3aGV0aGVyIHNwYWNlcyB3ZXJlIGZvdW5kXG4gKiAgICAgb3Igbm90XG4gKiAqICAgb25lIGxpbmUgZW5kaW5nIG9yIHNwYWNlIGNhbiBiZSBkZXRlY3RlZCB3aXRoXG4gKiAgICAgYG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSlgIHJpZ2h0IGJlZm9yZSB1c2luZyBgZmFjdG9yeVdoaXRlc3BhY2VgXG4gKlxuICogQHBhcmFtIHtFZmZlY3RzfSBlZmZlY3RzXG4gKiAgIENvbnRleHQuXG4gKiBAcGFyYW0ge1N0YXRlfSBva1xuICogICBTdGF0ZSBzd2l0Y2hlZCB0byB3aGVuIHN1Y2Nlc3NmdWwuXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKiAgIFN0YXJ0IHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yeVdoaXRlc3BhY2UoZWZmZWN0cywgb2spIHtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgc2VlbjtcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwibGluZUVuZGluZ1wiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgICBzZWVuID0gdHJ1ZTtcbiAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgc3RhcnQsIHNlZW4gPyBcImxpbmVQcmVmaXhcIiA6IFwibGluZVN1ZmZpeFwiKShjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGZhY3RvcnlEZXN0aW5hdGlvbiB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWRlc3RpbmF0aW9uJztcbmltcG9ydCB7IGZhY3RvcnlMYWJlbCB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWxhYmVsJztcbmltcG9ydCB7IGZhY3RvcnlTcGFjZSB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJztcbmltcG9ydCB7IGZhY3RvcnlUaXRsZSB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXRpdGxlJztcbmltcG9ydCB7IGZhY3RvcnlXaGl0ZXNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLCBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuaW1wb3J0IHsgbm9ybWFsaXplSWRlbnRpZmllciB9IGZyb20gJ21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyJztcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGRlZmluaXRpb24gPSB7XG4gIG5hbWU6ICdkZWZpbml0aW9uJyxcbiAgdG9rZW5pemU6IHRva2VuaXplRGVmaW5pdGlvblxufTtcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCB0aXRsZUJlZm9yZSA9IHtcbiAgcGFydGlhbDogdHJ1ZSxcbiAgdG9rZW5pemU6IHRva2VuaXplVGl0bGVCZWZvcmVcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplRGVmaW5pdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IGlkZW50aWZpZXI7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogQXQgc3RhcnQgb2YgYSBkZWZpbml0aW9uLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdOiBiIFwiY1wiXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLy8gRG8gbm90IGludGVycnVwdCBwYXJhZ3JhcGhzIChidXQgZG8gZm9sbG93IGRlZmluaXRpb25zKS5cbiAgICAvLyBUbyBkbzogZG8gYGludGVycnVwdGAgdGhlIHdheSBgbWFya2Rvd24tcnNgIGRvZXMuXG4gICAgLy8gVG8gZG86IHBhcnNlIHdoaXRlc3BhY2UgdGhlIHdheSBgbWFya2Rvd24tcnNgIGRvZXMuXG4gICAgZWZmZWN0cy5lbnRlcihcImRlZmluaXRpb25cIik7XG4gICAgcmV0dXJuIGJlZm9yZShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLCBhdCBgW2AuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV06IGIgXCJjXCJcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgLy8gVG8gZG86IHBhcnNlIHdoaXRlc3BhY2UgdGhlIHdheSBgbWFya2Rvd24tcnNgIGRvZXMuXG5cbiAgICByZXR1cm4gZmFjdG9yeUxhYmVsLmNhbGwoc2VsZiwgZWZmZWN0cywgbGFiZWxBZnRlcixcbiAgICAvLyBOb3RlOiB3ZSBkb25cdTIwMTl0IG5lZWQgdG8gcmVzZXQgdGhlIHdheSBgbWFya2Rvd24tcnNgIGRvZXMuXG4gICAgbm9rLCBcImRlZmluaXRpb25MYWJlbFwiLCBcImRlZmluaXRpb25MYWJlbE1hcmtlclwiLCBcImRlZmluaXRpb25MYWJlbFN0cmluZ1wiKShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBsYWJlbC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXTogYiBcImNcIlxuICAgKiAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbGFiZWxBZnRlcihjb2RlKSB7XG4gICAgaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoc2VsZi5zbGljZVNlcmlhbGl6ZShzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVsxXSkuc2xpY2UoMSwgLTEpKTtcbiAgICBpZiAoY29kZSA9PT0gNTgpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJkZWZpbml0aW9uTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiZGVmaW5pdGlvbk1hcmtlclwiKTtcbiAgICAgIHJldHVybiBtYXJrZXJBZnRlcjtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBtYXJrZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV06IGIgXCJjXCJcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBtYXJrZXJBZnRlcihjb2RlKSB7XG4gICAgLy8gTm90ZTogd2hpdGVzcGFjZSBpcyBvcHRpb25hbC5cbiAgICByZXR1cm4gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSA/IGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIGRlc3RpbmF0aW9uQmVmb3JlKShjb2RlKSA6IGRlc3RpbmF0aW9uQmVmb3JlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZm9yZSBkZXN0aW5hdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXTogYiBcImNcIlxuICAgKiAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBkZXN0aW5hdGlvbkJlZm9yZShjb2RlKSB7XG4gICAgcmV0dXJuIGZhY3RvcnlEZXN0aW5hdGlvbihlZmZlY3RzLCBkZXN0aW5hdGlvbkFmdGVyLFxuICAgIC8vIE5vdGU6IHdlIGRvblx1MjAxOXQgbmVlZCB0byByZXNldCB0aGUgd2F5IGBtYXJrZG93bi1yc2AgZG9lcy5cbiAgICBub2ssIFwiZGVmaW5pdGlvbkRlc3RpbmF0aW9uXCIsIFwiZGVmaW5pdGlvbkRlc3RpbmF0aW9uTGl0ZXJhbFwiLCBcImRlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXJcIiwgXCJkZWZpbml0aW9uRGVzdGluYXRpb25SYXdcIiwgXCJkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmdcIikoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgZGVzdGluYXRpb24uXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV06IGIgXCJjXCJcbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uQWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQodGl0bGVCZWZvcmUsIGFmdGVyLCBhZnRlcikoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgZGVmaW5pdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXTogYlxuICAgKiAgICAgICAgICAgXlxuICAgKiA+IHwgW2FdOiBiIFwiY1wiXG4gICAqICAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpID8gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyV2hpdGVzcGFjZSwgXCJ3aGl0ZXNwYWNlXCIpKGNvZGUpIDogYWZ0ZXJXaGl0ZXNwYWNlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGRlZmluaXRpb24sIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV06IGJcbiAgICogICAgICAgICAgIF5cbiAgICogPiB8IFthXTogYiBcImNcIlxuICAgKiAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyV2hpdGVzcGFjZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJkZWZpbml0aW9uXCIpO1xuXG4gICAgICAvLyBOb3RlOiB3ZSBkb25cdTIwMTl0IGNhcmUgYWJvdXQgdW5pcXVlbmVzcy5cbiAgICAgIC8vIEl0XHUyMDE5cyBsaWtlbHkgdGhhdCB0aGF0IGRvZXNuXHUyMDE5dCBoYXBwZW4gdmVyeSBmcmVxdWVudGx5LlxuICAgICAgLy8gSXQgaXMgbW9yZSBsaWtlbHkgdGhhdCBpdCB3YXN0ZXMgcHJlY2lvdXMgdGltZS5cbiAgICAgIHNlbGYucGFyc2VyLmRlZmluZWQucHVzaChpZGVudGlmaWVyKTtcblxuICAgICAgLy8gVG8gZG86IGBtYXJrZG93bi1yc2AgaW50ZXJydXB0LlxuICAgICAgLy8gLy8gWW91XHUyMDE5ZCBiZSBpbnRlcnJ1cHRpbmcuXG4gICAgICAvLyB0b2tlbml6ZXIuaW50ZXJydXB0ID0gdHJ1ZVxuICAgICAgcmV0dXJuIG9rKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplVGl0bGVCZWZvcmUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gdGl0bGVCZWZvcmU7XG5cbiAgLyoqXG4gICAqIEFmdGVyIGRlc3RpbmF0aW9uLCBhdCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdOiBiXG4gICAqICAgICAgICAgICBeXG4gICAqID4gfCBbYV06IGIgXCJjXCJcbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRpdGxlQmVmb3JlKGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSA/IGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIGJlZm9yZU1hcmtlcikoY29kZSkgOiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQXQgdGl0bGUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCBbYV06IGJcbiAgICogPiB8IFwiY1wiXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiZWZvcmVNYXJrZXIoY29kZSkge1xuICAgIHJldHVybiBmYWN0b3J5VGl0bGUoZWZmZWN0cywgdGl0bGVBZnRlciwgbm9rLCBcImRlZmluaXRpb25UaXRsZVwiLCBcImRlZmluaXRpb25UaXRsZU1hcmtlclwiLCBcImRlZmluaXRpb25UaXRsZVN0cmluZ1wiKShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciB0aXRsZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXTogYiBcImNcIlxuICAgKiAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRpdGxlQWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpID8gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIHRpdGxlQWZ0ZXJPcHRpb25hbFdoaXRlc3BhY2UsIFwid2hpdGVzcGFjZVwiKShjb2RlKSA6IHRpdGxlQWZ0ZXJPcHRpb25hbFdoaXRlc3BhY2UoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgdGl0bGUsIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV06IGIgXCJjXCJcbiAgICogICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB0aXRsZUFmdGVyT3B0aW9uYWxXaGl0ZXNwYWNlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgaGFyZEJyZWFrRXNjYXBlID0ge1xuICBuYW1lOiAnaGFyZEJyZWFrRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplSGFyZEJyZWFrRXNjYXBlXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUhhcmRCcmVha0VzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgYSBoYXJkIGJyZWFrIChlc2NhcGUpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYVxcXG4gICAqICAgICAgXlxuICAgKiAgIHwgYlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJoYXJkQnJlYWtFc2NhcGVcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBhZnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgXFxgLCBhdCBlb2wuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhXFxcbiAgICogICAgICAgXlxuICAgKiAgIHwgYlxuICAgKiBgYGBcbiAgICpcbiAgICogIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJoYXJkQnJlYWtFc2NhcGVcIik7XG4gICAgICByZXR1cm4gb2soY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBSZXNvbHZlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyLFxuICogICBUb2tlblxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLCBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuaW1wb3J0IHsgc3BsaWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCc7XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBoZWFkaW5nQXR4ID0ge1xuICBuYW1lOiAnaGVhZGluZ0F0eCcsXG4gIHJlc29sdmU6IHJlc29sdmVIZWFkaW5nQXR4LFxuICB0b2tlbml6ZTogdG9rZW5pemVIZWFkaW5nQXR4XG59O1xuXG4vKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuZnVuY3Rpb24gcmVzb2x2ZUhlYWRpbmdBdHgoZXZlbnRzLCBjb250ZXh0KSB7XG4gIGxldCBjb250ZW50RW5kID0gZXZlbnRzLmxlbmd0aCAtIDI7XG4gIGxldCBjb250ZW50U3RhcnQgPSAzO1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgY29udGVudDtcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IHRleHQ7XG5cbiAgLy8gUHJlZml4IHdoaXRlc3BhY2UsIHBhcnQgb2YgdGhlIG9wZW5pbmcuXG4gIGlmIChldmVudHNbY29udGVudFN0YXJ0XVsxXS50eXBlID09PSBcIndoaXRlc3BhY2VcIikge1xuICAgIGNvbnRlbnRTdGFydCArPSAyO1xuICB9XG5cbiAgLy8gU3VmZml4IHdoaXRlc3BhY2UsIHBhcnQgb2YgdGhlIGNsb3NpbmcuXG4gIGlmIChjb250ZW50RW5kIC0gMiA+IGNvbnRlbnRTdGFydCAmJiBldmVudHNbY29udGVudEVuZF1bMV0udHlwZSA9PT0gXCJ3aGl0ZXNwYWNlXCIpIHtcbiAgICBjb250ZW50RW5kIC09IDI7XG4gIH1cbiAgaWYgKGV2ZW50c1tjb250ZW50RW5kXVsxXS50eXBlID09PSBcImF0eEhlYWRpbmdTZXF1ZW5jZVwiICYmIChjb250ZW50U3RhcnQgPT09IGNvbnRlbnRFbmQgLSAxIHx8IGNvbnRlbnRFbmQgLSA0ID4gY29udGVudFN0YXJ0ICYmIGV2ZW50c1tjb250ZW50RW5kIC0gMl1bMV0udHlwZSA9PT0gXCJ3aGl0ZXNwYWNlXCIpKSB7XG4gICAgY29udGVudEVuZCAtPSBjb250ZW50U3RhcnQgKyAxID09PSBjb250ZW50RW5kID8gMiA6IDQ7XG4gIH1cbiAgaWYgKGNvbnRlbnRFbmQgPiBjb250ZW50U3RhcnQpIHtcbiAgICBjb250ZW50ID0ge1xuICAgICAgdHlwZTogXCJhdHhIZWFkaW5nVGV4dFwiLFxuICAgICAgc3RhcnQ6IGV2ZW50c1tjb250ZW50U3RhcnRdWzFdLnN0YXJ0LFxuICAgICAgZW5kOiBldmVudHNbY29udGVudEVuZF1bMV0uZW5kXG4gICAgfTtcbiAgICB0ZXh0ID0ge1xuICAgICAgdHlwZTogXCJjaHVua1RleHRcIixcbiAgICAgIHN0YXJ0OiBldmVudHNbY29udGVudFN0YXJ0XVsxXS5zdGFydCxcbiAgICAgIGVuZDogZXZlbnRzW2NvbnRlbnRFbmRdWzFdLmVuZCxcbiAgICAgIGNvbnRlbnRUeXBlOiBcInRleHRcIlxuICAgIH07XG4gICAgc3BsaWNlKGV2ZW50cywgY29udGVudFN0YXJ0LCBjb250ZW50RW5kIC0gY29udGVudFN0YXJ0ICsgMSwgW1snZW50ZXInLCBjb250ZW50LCBjb250ZXh0XSwgWydlbnRlcicsIHRleHQsIGNvbnRleHRdLCBbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSwgWydleGl0JywgY29udGVudCwgY29udGV4dF1dKTtcbiAgfVxuICByZXR1cm4gZXZlbnRzO1xufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUhlYWRpbmdBdHgoZWZmZWN0cywgb2ssIG5vaykge1xuICBsZXQgc2l6ZSA9IDA7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgYSBoZWFkaW5nIChhdHgpLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgIyMgYWFcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBUbyBkbzogcGFyc2UgaW5kZW50IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICBlZmZlY3RzLmVudGVyKFwiYXR4SGVhZGluZ1wiKTtcbiAgICByZXR1cm4gYmVmb3JlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UsIGF0IGAjYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICMjIGFhXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiZWZvcmUoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJhdHhIZWFkaW5nU2VxdWVuY2VcIik7XG4gICAgcmV0dXJuIHNlcXVlbmNlT3Blbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBvcGVuaW5nIHNlcXVlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgIyMgYWFcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM1ICYmIHNpemUrKyA8IDYpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBzZXF1ZW5jZU9wZW47XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIGF0IGxlYXN0IG9uZSBgI2AuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwiYXR4SGVhZGluZ1NlcXVlbmNlXCIpO1xuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgc29tZXRoaW5nLCBiZWZvcmUgc29tZXRoaW5nIGVsc2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAjIyBhYVxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzUpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJhdHhIZWFkaW5nU2VxdWVuY2VcIik7XG4gICAgICByZXR1cm4gc2VxdWVuY2VGdXJ0aGVyKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImF0eEhlYWRpbmdcIik7XG4gICAgICAvLyBUbyBkbzogaW50ZXJydXB0IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICAgIC8vIC8vIEZlZWwgZnJlZSB0byBpbnRlcnJ1cHQuXG4gICAgICAvLyB0b2tlbml6ZXIuaW50ZXJydXB0ID0gZmFsc2VcbiAgICAgIHJldHVybiBvayhjb2RlKTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYXRCcmVhaywgXCJ3aGl0ZXNwYWNlXCIpKGNvZGUpO1xuICAgIH1cblxuICAgIC8vIFRvIGRvOiBnZW5lcmF0ZSBgZGF0YWAgdG9rZW5zLCBhZGQgdGhlIGB0ZXh0YCB0b2tlbiBsYXRlci5cbiAgICAvLyBOZWVkcyBlZGl0IG1hcCwgc2VlOiBgbWFya2Rvd24ucnNgLlxuICAgIGVmZmVjdHMuZW50ZXIoXCJhdHhIZWFkaW5nVGV4dFwiKTtcbiAgICByZXR1cm4gZGF0YShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBmdXJ0aGVyIHNlcXVlbmNlIChhZnRlciB3aGl0ZXNwYWNlKS5cbiAgICpcbiAgICogQ291bGQgYmUgbm9ybWFsIFx1MjAxQ3Zpc2libGVcdTIwMUQgaGFzaGVzIGluIHRoZSBoZWFkaW5nIG9yIGEgZmluYWwgc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAjIyBhYSAjI1xuICAgKiAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc2VxdWVuY2VGdXJ0aGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBzZXF1ZW5jZUZ1cnRoZXI7XG4gICAgfVxuICAgIGVmZmVjdHMuZXhpdChcImF0eEhlYWRpbmdTZXF1ZW5jZVwiKTtcbiAgICByZXR1cm4gYXRCcmVhayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiB0ZXh0LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgIyMgYWFcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDM1IHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImF0eEhlYWRpbmdUZXh0XCIpO1xuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufSIsICIvKipcbiAqIExpc3Qgb2YgbG93ZXJjYXNlIEhUTUwgXHUyMDFDYmxvY2tcdTIwMUQgdGFnIG5hbWVzLlxuICpcbiAqIFRoZSBsaXN0LCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdHMgaW4gbW9yZSByZWxheGVkIHJ1bGVzIChjb25kaXRpb25cbiAqIDYpLlxuICogQmVjYXVzZSB0aGV5IGFyZSBrbm93biBibG9ja3MsIHRoZSBIVE1MLWxpa2Ugc3ludGF4IGRvZXNuXHUyMDE5dCBoYXZlIHRvIGJlXG4gKiBzdHJpY3RseSBwYXJzZWQuXG4gKiBGb3IgdGFnIG5hbWVzIG5vdCBpbiB0aGlzIGxpc3QsIGEgbW9yZSBzdHJpY3QgYWxnb3JpdGhtIChjb25kaXRpb24gNykgaXMgdXNlZFxuICogdG8gZGV0ZWN0IHdoZXRoZXIgdGhlIEhUTUwtbGlrZSBzeW50YXggaXMgc2VlbiBhcyBIVE1MIChmbG93KSBvciBub3QuXG4gKlxuICogVGhpcyBpcyBjb3BpZWQgZnJvbTpcbiAqIDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jaHRtbC1ibG9ja3M+LlxuICpcbiAqID4gXHVEODNEXHVEQzQ5ICoqTm90ZSoqOiBgc2VhcmNoYCB3YXMgYWRkZWQgaW4gYENvbW1vbk1hcmtAMC4zMWAuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sQmxvY2tOYW1lcyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbmF2JyxcbiAgJ25vZnJhbWVzJyxcbiAgJ29sJyxcbiAgJ29wdGdyb3VwJyxcbiAgJ29wdGlvbicsXG4gICdwJyxcbiAgJ3BhcmFtJyxcbiAgJ3NlYXJjaCcsXG4gICdzZWN0aW9uJyxcbiAgJ3N1bW1hcnknLFxuICAndGFibGUnLFxuICAndGJvZHknLFxuICAndGQnLFxuICAndGZvb3QnLFxuICAndGgnLFxuICAndGhlYWQnLFxuICAndGl0bGUnLFxuICAndHInLFxuICAndHJhY2snLFxuICAndWwnXG5dXG5cbi8qKlxuICogTGlzdCBvZiBsb3dlcmNhc2UgSFRNTCBcdTIwMUNyYXdcdTIwMUQgdGFnIG5hbWVzLlxuICpcbiAqIFRoZSBsaXN0LCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdHMgaW4gSFRNTCB0aGF0IGNhbiBpbmNsdWRlIGxpbmVzXG4gKiB3aXRob3V0IGV4aXRpbmcsIHVudGlsIGEgY2xvc2luZyB0YWcgYWxzbyBpbiB0aGlzIGxpc3QgaXMgZm91bmQgKGNvbmRpdGlvblxuICogMSkuXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgY29waWVkIGZyb206XG4gKiA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMzAvI2h0bWwtYmxvY2tzPi5cbiAqXG4gKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogYHRleHRhcmVhYCB3YXMgYWRkZWQgaW4gYENvbW1vbk1hcmtAMC4zMGAuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sUmF3TmFtZXMgPSBbJ3ByZScsICdzY3JpcHQnLCAnc3R5bGUnLCAndGV4dGFyZWEnXVxuIiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIENvbnN0cnVjdCxcbiAqICAgUmVzb2x2ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBhc2NpaUFscGhhbnVtZXJpYywgYXNjaWlBbHBoYSwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSwgbWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbmltcG9ydCB7IGh0bWxCbG9ja05hbWVzLCBodG1sUmF3TmFtZXMgfSBmcm9tICdtaWNyb21hcmstdXRpbC1odG1sLXRhZy1uYW1lJztcbmltcG9ydCB7IGJsYW5rTGluZSB9IGZyb20gJy4vYmxhbmstbGluZS5qcyc7XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGh0bWxGbG93ID0ge1xuICBjb25jcmV0ZTogdHJ1ZSxcbiAgbmFtZTogJ2h0bWxGbG93JyxcbiAgcmVzb2x2ZVRvOiByZXNvbHZlVG9IdG1sRmxvdyxcbiAgdG9rZW5pemU6IHRva2VuaXplSHRtbEZsb3dcbn07XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgYmxhbmtMaW5lQmVmb3JlID0ge1xuICBwYXJ0aWFsOiB0cnVlLFxuICB0b2tlbml6ZTogdG9rZW5pemVCbGFua0xpbmVCZWZvcmVcbn07XG5jb25zdCBub25MYXp5Q29udGludWF0aW9uU3RhcnQgPSB7XG4gIHBhcnRpYWw6IHRydWUsXG4gIHRva2VuaXplOiB0b2tlbml6ZU5vbkxhenlDb250aW51YXRpb25TdGFydFxufTtcblxuLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbmZ1bmN0aW9uIHJlc29sdmVUb0h0bWxGbG93KGV2ZW50cykge1xuICBsZXQgaW5kZXggPSBldmVudHMubGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gXCJodG1sRmxvd1wiKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGluZGV4ID4gMSAmJiBldmVudHNbaW5kZXggLSAyXVsxXS50eXBlID09PSBcImxpbmVQcmVmaXhcIikge1xuICAgIC8vIEFkZCB0aGUgcHJlZml4IHN0YXJ0IHRvIHRoZSBIVE1MIHRva2VuLlxuICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQgPSBldmVudHNbaW5kZXggLSAyXVsxXS5zdGFydDtcbiAgICAvLyBBZGQgdGhlIHByZWZpeCBzdGFydCB0byB0aGUgSFRNTCBsaW5lIHRva2VuLlxuICAgIGV2ZW50c1tpbmRleCArIDFdWzFdLnN0YXJ0ID0gZXZlbnRzW2luZGV4IC0gMl1bMV0uc3RhcnQ7XG4gICAgLy8gUmVtb3ZlIHRoZSBsaW5lIHByZWZpeC5cbiAgICBldmVudHMuc3BsaWNlKGluZGV4IC0gMiwgMik7XG4gIH1cbiAgcmV0dXJuIGV2ZW50cztcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVIdG1sRmxvdyhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IG1hcmtlcjtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgY2xvc2luZ1RhZztcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBidWZmZXI7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgaW5kZXg7XG4gIC8qKiBAdHlwZSB7Q29kZX0gKi9cbiAgbGV0IG1hcmtlckI7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgSFRNTCAoZmxvdykuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8eCAvPlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIFRvIGRvOiBwYXJzZSBpbmRlbnQgbGlrZSBgbWFya2Rvd24tcnNgLlxuICAgIHJldHVybiBiZWZvcmUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQXQgYDxgLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPHggLz5cbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcihcImh0bWxGbG93XCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJodG1sRmxvd0RhdGFcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBvcGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8YCwgYXQgdGFnIG5hbWUgb3Igb3RoZXIgc3R1ZmYuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8eCAvPlxuICAgKiAgICAgIF5cbiAgICogPiB8IDwhZG9jdHlwZT5cbiAgICogICAgICBeXG4gICAqID4gfCA8IS0teHh4LS0+XG4gICAqICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDMzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gZGVjbGFyYXRpb25PcGVuO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNDcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGNsb3NpbmdUYWcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRhZ0Nsb3NlU3RhcnQ7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA2Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgbWFya2VyID0gMztcbiAgICAgIC8vIFRvIGRvOlxuICAgICAgLy8gdG9rZW5pemVyLmNvbmNyZXRlID0gdHJ1ZVxuICAgICAgLy8gVG8gZG86IHVzZSBgbWFya2Rvd24tcnNgIHN0eWxlIGludGVycnVwdC5cbiAgICAgIC8vIFdoaWxlIHdlXHUyMDE5cmUgaW4gYW4gaW5zdHJ1Y3Rpb24gaW5zdGVhZCBvZiBhIGRlY2xhcmF0aW9uLCB3ZVx1MjAxOXJlIG9uIGEgYD9gXG4gICAgICAvLyByaWdodCBub3csIHNvIHdlIGRvIG5lZWQgdG8gc2VhcmNoIGZvciBgPmAsIHNpbWlsYXIgdG8gZGVjbGFyYXRpb25zLlxuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2sgOiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZTtcbiAgICB9XG5cbiAgICAvLyBBU0NJSSBhbHBoYWJldGljYWwuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIC8vIEFsd2F5cyB0aGUgY2FzZS5cbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGJ1ZmZlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgPCFgLCBhdCBkZWNsYXJhdGlvbiwgY29tbWVudCwgb3IgQ0RBVEEuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8IWRvY3R5cGU+XG4gICAqICAgICAgIF5cbiAgICogPiB8IDwhLS14eHgtLT5cbiAgICogICAgICAgXlxuICAgKiA+IHwgPCFbQ0RBVEFbPiY8XV0+XG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBtYXJrZXIgPSAyO1xuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuSW5zaWRlO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gOTEpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIG1hcmtlciA9IDU7XG4gICAgICBpbmRleCA9IDA7XG4gICAgICByZXR1cm4gY2RhdGFPcGVuSW5zaWRlO1xuICAgIH1cblxuICAgIC8vIEFTQ0lJIGFscGhhYmV0aWNhbC5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgbWFya2VyID0gNDtcbiAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAvLyB0b2tlbml6ZXIuY29uY3JldGUgPSB0cnVlXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8IS1gLCBpbnNpZGUgYSBjb21tZW50LCBhdCBhbm90aGVyIGAtYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDwhLS14eHgtLT5cbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbW1lbnRPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAvLyB0b2tlbml6ZXIuY29uY3JldGUgPSB0cnVlXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8IVtgLCBpbnNpZGUgQ0RBVEEsIGV4cGVjdGluZyBgQ0RBVEFbYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDwhW0NEQVRBWz4mPF1dPlxuICAgKiAgICAgICAgXl5eXl5eXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjZGF0YU9wZW5JbnNpZGUoY29kZSkge1xuICAgIGNvbnN0IHZhbHVlID0gXCJDREFUQVtcIjtcbiAgICBpZiAoY29kZSA9PT0gdmFsdWUuY2hhckNvZGVBdChpbmRleCsrKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgaWYgKGluZGV4ID09PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgLy8gLy8gRG8gbm90IGZvcm0gY29udGFpbmVycy5cbiAgICAgICAgLy8gdG9rZW5pemVyLmNvbmNyZXRlID0gdHJ1ZVxuICAgICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjZGF0YU9wZW5JbnNpZGU7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYDwvYCwgaW4gY2xvc2luZyB0YWcsIGF0IHRhZyBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPC94PlxuICAgKiAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB0YWdDbG9zZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgLy8gQWx3YXlzIHRoZSBjYXNlLlxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgYnVmZmVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgIHJldHVybiB0YWdOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHRhZyBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPGFiPlxuICAgKiAgICAgIF5eXG4gICAqID4gfCA8L2FiPlxuICAgKiAgICAgICBeXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnTmFtZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gNDcgfHwgY29kZSA9PT0gNjIgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgY29uc3Qgc2xhc2ggPSBjb2RlID09PSA0NztcbiAgICAgIGNvbnN0IG5hbWUgPSBidWZmZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghc2xhc2ggJiYgIWNsb3NpbmdUYWcgJiYgaHRtbFJhd05hbWVzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgIG1hcmtlciA9IDE7XG4gICAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAgIC8vIHRva2VuaXplci5jb25jcmV0ZSA9IHRydWVcbiAgICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBjb250aW51YXRpb24oY29kZSk7XG4gICAgICB9XG4gICAgICBpZiAoaHRtbEJsb2NrTmFtZXMuaW5jbHVkZXMoYnVmZmVyLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIG1hcmtlciA9IDY7XG4gICAgICAgIGlmIChzbGFzaCkge1xuICAgICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgICAgICByZXR1cm4gYmFzaWNTZWxmQ2xvc2luZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAgIC8vIHRva2VuaXplci5jb25jcmV0ZSA9IHRydWVcbiAgICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBjb250aW51YXRpb24oY29kZSk7XG4gICAgICB9XG4gICAgICBtYXJrZXIgPSA3O1xuICAgICAgLy8gRG8gbm90IHN1cHBvcnQgY29tcGxldGUgSFRNTCB3aGVuIGludGVycnVwdGluZy5cbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCAmJiAhc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdID8gbm9rKGNvZGUpIDogY2xvc2luZ1RhZyA/IGNvbXBsZXRlQ2xvc2luZ1RhZ0FmdGVyKGNvZGUpIDogY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpO1xuICAgIH1cblxuICAgIC8vIEFTQ0lJIGFscGhhbnVtZXJpY2FsIGFuZCBgLWAuXG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBidWZmZXIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgIHJldHVybiB0YWdOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGNsb3Npbmcgc2xhc2ggb2YgYSBiYXNpYyB0YWcgbmFtZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxkaXYvPlxuICAgKiAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBiYXNpY1NlbGZDbG9zaW5nKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAvLyB0b2tlbml6ZXIuY29uY3JldGUgPSB0cnVlXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBjbG9zaW5nIHNsYXNoIG9mIGEgY29tcGxldGUgdGFnIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8eC8+XG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUNsb3NpbmdUYWdBZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZUNsb3NpbmdUYWdBZnRlcjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBsZXRlRW5kKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0IGFuIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBBdCBmaXJzdCwgdGhpcyBzdGF0ZSBpcyB1c2VkIGFmdGVyIGEgY29tcGxldGUgdGFnIG5hbWUsIGFmdGVyIHdoaXRlc3BhY2UsXG4gICAqIHdoZXJlIGl0IGV4cGVjdHMgb3B0aW9uYWwgYXR0cmlidXRlcyBvciB0aGUgZW5kIG9mIHRoZSB0YWcuXG4gICAqIEl0IGlzIGFsc28gcmV1c2VkIGFmdGVyIGF0dHJpYnV0ZXMsIHdoZW4gZXhwZWN0aW5nIG1vcmUgb3B0aW9uYWxcbiAgICogYXR0cmlidXRlcy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhIC8+XG4gICAqICAgICAgICBeXG4gICAqID4gfCA8YSA6Yj5cbiAgICogICAgICAgIF5cbiAgICogPiB8IDxhIF9iPlxuICAgKiAgICAgICAgXlxuICAgKiA+IHwgPGEgYj5cbiAgICogICAgICAgIF5cbiAgICogPiB8IDxhID5cbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gY29tcGxldGVFbmQ7XG4gICAgfVxuXG4gICAgLy8gQVNDSUkgYWxwaGFudW1lcmljYWwgYW5kIGA6YCBhbmQgYF9gLlxuICAgIGlmIChjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBsZXRlRW5kKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPGEgOmI+XG4gICAqICAgICAgICAgXlxuICAgKiA+IHwgPGEgX2I+XG4gICAqICAgICAgICAgXlxuICAgKiA+IHwgPGEgYj5cbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWUoY29kZSkge1xuICAgIC8vIEFTQ0lJIGFscGhhbnVtZXJpY2FsIGFuZCBgLWAsIGAuYCwgYDpgLCBhbmQgYF9gLlxuICAgIGlmIChjb2RlID09PSA0NSB8fCBjb2RlID09PSA0NiB8fCBjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGF0dHJpYnV0ZSBuYW1lLCBhdCBhbiBvcHRpb25hbCBpbml0aWFsaXplciwgdGhlIGVuZCBvZiB0aGUgdGFnLCBvclxuICAgKiB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPGEgYj5cbiAgICogICAgICAgICBeXG4gICAqID4gfCA8YSBiPWM+XG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVCZWZvcmU7XG4gICAgfVxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXI7XG4gICAgfVxuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVCZWZvcmUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQmVmb3JlIHVucXVvdGVkLCBkb3VibGUgcXVvdGVkLCBvciBzaW5nbGUgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSwgYWxsb3dpbmdcbiAgICogd2hpdGVzcGFjZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhIGI9Yz5cbiAgICogICAgICAgICAgXlxuICAgKiA+IHwgPGEgYj1cImNcIj5cbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gNjAgfHwgY29kZSA9PT0gNjEgfHwgY29kZSA9PT0gNjIgfHwgY29kZSA9PT0gOTYpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSAzNCB8fCBjb2RlID09PSAzOSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgbWFya2VyQiA9IGNvZGU7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVF1b3RlZDtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlQmVmb3JlO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGRvdWJsZSBvciBzaW5nbGUgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhIGI9XCJjXCI+XG4gICAqICAgICAgICAgICBeXG4gICAqID4gfCA8YSBiPSdjJz5cbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXJCKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBtYXJrZXJCID0gbnVsbDtcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXI7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxhIGI9Yz5cbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAzNCB8fCBjb2RlID09PSAzOSB8fCBjb2RlID09PSA0NyB8fCBjb2RlID09PSA2MCB8fCBjb2RlID09PSA2MSB8fCBjb2RlID09PSA2MiB8fCBjb2RlID09PSA5NiB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGRvdWJsZSBvciBzaW5nbGUgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSwgYmVmb3JlIHdoaXRlc3BhY2Ugb3IgdGhlXG4gICAqIGVuZCBvZiB0aGUgdGFnLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPGEgYj1cImNcIj5cbiAgICogICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NyB8fCBjb2RlID09PSA2MiB8fCBtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyBvZiBhIGNvbXBsZXRlIHRhZyB3aGVyZSBvbmx5IGFuIGA+YCBpcyBhbGxvd2VkLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPGEgYj1cImNcIj5cbiAgICogICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlQWZ0ZXI7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYD5gIGluIGEgY29tcGxldGUgdGFnLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPHg+XG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUFmdGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIC8vIC8vIERvIG5vdCBmb3JtIGNvbnRhaW5lcnMuXG4gICAgICAvLyB0b2tlbml6ZXIuY29uY3JldGUgPSB0cnVlXG4gICAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbXBsZXRlQWZ0ZXI7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY29udGludWF0aW9uIG9mIGFueSBIVE1MIGtpbmQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8IS0teHh4LS0+XG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1ICYmIG1hcmtlciA9PT0gMikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGU7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA2MCAmJiBtYXJrZXIgPT09IDEpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25SYXdUYWdPcGVuO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNjIgJiYgbWFya2VyID09PSA0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2U7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA2MyAmJiBtYXJrZXIgPT09IDMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDkzICYmIG1hcmtlciA9PT0gNSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNkYXRhSW5zaWRlO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpICYmIChtYXJrZXIgPT09IDYgfHwgbWFya2VyID09PSA3KSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwiaHRtbEZsb3dEYXRhXCIpO1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soYmxhbmtMaW5lQmVmb3JlLCBjb250aW51YXRpb25BZnRlciwgY29udGludWF0aW9uU3RhcnQpKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImh0bWxGbG93RGF0YVwiKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25TdGFydChjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjb250aW51YXRpb247XG4gIH1cblxuICAvKipcbiAgICogSW4gY29udGludWF0aW9uLCBhdCBlb2wuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8eD5cbiAgICogICAgICAgIF5cbiAgICogICB8IGFzZFxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uU3RhcnQoY29kZSkge1xuICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKG5vbkxhenlDb250aW51YXRpb25TdGFydCwgY29udGludWF0aW9uU3RhcnROb25MYXp5LCBjb250aW51YXRpb25BZnRlcikoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY29udGludWF0aW9uLCBhdCBlb2wsIGJlZm9yZSBub24tbGF6eSBjb250ZW50LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPHg+XG4gICAqICAgICAgICBeXG4gICAqICAgfCBhc2RcbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvblN0YXJ0Tm9uTGF6eShjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbkJlZm9yZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb250aW51YXRpb24sIGJlZm9yZSBub24tbGF6eSBjb250ZW50LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgPHg+XG4gICAqID4gfCBhc2RcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29udGludWF0aW9uU3RhcnQoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJodG1sRmxvd0RhdGFcIik7XG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb21tZW50IGNvbnRpbnVhdGlvbiwgYWZ0ZXIgb25lIGAtYCwgZXhwZWN0aW5nIGFub3RoZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8IS0teHh4LS0+XG4gICAqICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlO1xuICAgIH1cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJhdyBjb250aW51YXRpb24sIGFmdGVyIGA8YCwgYXQgYC9gLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPHNjcmlwdD5jb25zb2xlLmxvZygxKTwvc2NyaXB0PlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb250aW51YXRpb25SYXdUYWdPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvblJhd0VuZFRhZztcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiByYXcgY29udGludWF0aW9uLCBhZnRlciBgPC9gLCBpbiBhIHJhdyB0YWcgbmFtZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDxzY3JpcHQ+Y29uc29sZS5sb2coMSk8L3NjcmlwdD5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uUmF3RW5kVGFnKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBidWZmZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChodG1sUmF3TmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSAmJiBidWZmZXIubGVuZ3RoIDwgOCkge1xuICAgICAgLy8gQWx3YXlzIHRoZSBjYXNlLlxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgYnVmZmVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICByZXR1cm4gY29udGludWF0aW9uUmF3RW5kVGFnO1xuICAgIH1cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGNkYXRhIGNvbnRpbnVhdGlvbiwgYWZ0ZXIgYF1gLCBleHBlY3RpbmcgYF0+YC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDwhW0NEQVRBWz4mPF1dPlxuICAgKiAgICAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkNkYXRhSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBkZWNsYXJhdGlvbiBvciBpbnN0cnVjdGlvbiBjb250aW51YXRpb24sIGF0IGA+YC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IDwhLS0+XG4gICAqICAgICAgICAgXlxuICAgKiA+IHwgPD8+XG4gICAqICAgICAgIF5cbiAgICogPiB8IDwhcT5cbiAgICogICAgICAgIF5cbiAgICogPiB8IDwhLS1hYi0tPlxuICAgKiAgICAgICAgICAgICBeXG4gICAqID4gfCA8IVtDREFUQVs+JjxdXT5cbiAgICogICAgICAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNsb3NlO1xuICAgIH1cblxuICAgIC8vIE1vcmUgZGFzaGVzLlxuICAgIGlmIChjb2RlID09PSA0NSAmJiBtYXJrZXIgPT09IDIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjbG9zZWQgY29udGludWF0aW9uOiBldmVyeXRoaW5nIHdlIGdldCB1bnRpbCB0aGUgZW9sL2VvZiBpcyBwYXJ0IG9mIGl0LlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPCFkb2N0eXBlPlxuICAgKiAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkNsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcImh0bWxGbG93RGF0YVwiKTtcbiAgICAgIHJldHVybiBjb250aW51YXRpb25BZnRlcihjb2RlKTtcbiAgICB9XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb25lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgPCFkb2N0eXBlPlxuICAgKiAgICAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoXCJodG1sRmxvd1wiKTtcbiAgICAvLyAvLyBGZWVsIGZyZWUgdG8gaW50ZXJydXB0LlxuICAgIC8vIHRva2VuaXplci5pbnRlcnJ1cHQgPSBmYWxzZVxuICAgIC8vIC8vIE5vIGxvbmdlciBjb25jcmV0ZS5cbiAgICAvLyB0b2tlbml6ZXIuY29uY3JldGUgPSBmYWxzZVxuICAgIHJldHVybiBvayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZU5vbkxhenlDb250aW51YXRpb25TdGFydChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqXG4gICAqIEF0IGVvbCwgYmVmb3JlIGNvbnRpbnVhdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICogYGBganNcbiAgICogICAgICAgICAgICBeXG4gICAqICAgfCBiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgICAgcmV0dXJuIGFmdGVyO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgY29udGludWF0aW9uLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgKiBgYGBqc1xuICAgKiA+IHwgYlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0gPyBub2soY29kZSkgOiBvayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUJsYW5rTGluZUJlZm9yZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogQmVmb3JlIGVvbCwgZXhwZWN0aW5nIGJsYW5rIGxpbmUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCA8ZGl2PlxuICAgKiAgICAgICAgICBeXG4gICAqICAgfFxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nXCIpO1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoYmxhbmtMaW5lLCBvaywgbm9rKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBhc2NpaUFscGhhbnVtZXJpYywgYXNjaWlBbHBoYSwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSwgbWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGh0bWxUZXh0ID0ge1xuICBuYW1lOiAnaHRtbFRleHQnLFxuICB0b2tlbml6ZTogdG9rZW5pemVIdG1sVGV4dFxufTtcblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVIdG1sVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAvKiogQHR5cGUge05vbk51bGxhYmxlPENvZGU+IHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbWFya2VyO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGluZGV4O1xuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBsZXQgcmV0dXJuU3RhdGU7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgSFRNTCAodGV4dCkuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiPiBjXG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwiaHRtbFRleHRcIik7XG4gICAgZWZmZWN0cy5lbnRlcihcImh0bWxUZXh0RGF0YVwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIG9wZW47XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYDxgLCBhdCB0YWcgbmFtZSBvciBvdGhlciBzdHVmZi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGI+IGNcbiAgICogICAgICAgIF5cbiAgICogPiB8IGEgPCFkb2N0eXBlPiBjXG4gICAqICAgICAgICBeXG4gICAqID4gfCBhIDwhLS1iLS0+IGNcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzMykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uT3BlbjtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnQ2xvc2VTdGFydDtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gICAgfVxuXG4gICAgLy8gQVNDSUkgYWxwaGFiZXRpY2FsLlxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnT3BlbjtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgPCFgLCBhdCBkZWNsYXJhdGlvbiwgY29tbWVudCwgb3IgQ0RBVEEuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhZG9jdHlwZT4gY1xuICAgKiAgICAgICAgIF5cbiAgICogPiB8IGEgPCEtLWItLT4gY1xuICAgKiAgICAgICAgIF5cbiAgICogPiB8IGEgPCFbQ0RBVEFbPiY8XV0+IGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBkZWNsYXJhdGlvbk9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuSW5zaWRlO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gOTEpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGluZGV4ID0gMDtcbiAgICAgIHJldHVybiBjZGF0YU9wZW5JbnNpZGU7XG4gICAgfVxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gZGVjbGFyYXRpb247XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gYSBjb21tZW50LCBhZnRlciBgPCEtYCwgYXQgYW5vdGhlciBgLWAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhLS1iLS0+IGNcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tbWVudE9wZW5JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbW1lbnRFbmQ7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY29tbWVudC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPCEtLWItLT4gY1xuICAgKiAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tbWVudChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGNvbW1lbnRDbG9zZTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBjb21tZW50O1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gY29tbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb21tZW50LCBhZnRlciBgLWAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhLS1iLS0+IGNcbiAgICogICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tbWVudENsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjb21tZW50RW5kO1xuICAgIH1cbiAgICByZXR1cm4gY29tbWVudChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjb21tZW50LCBhZnRlciBgLS1gLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8IS0tYi0tPiBjXG4gICAqICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjb21tZW50RW5kKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gNjIgPyBlbmQoY29kZSkgOiBjb2RlID09PSA0NSA/IGNvbW1lbnRDbG9zZShjb2RlKSA6IGNvbW1lbnQoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgYDwhW2AsIGluIENEQVRBLCBleHBlY3RpbmcgYENEQVRBW2AuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhW0NEQVRBWz4mPF1dPiBiXG4gICAqICAgICAgICAgIF5eXl5eXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY2RhdGFPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IFwiQ0RBVEFbXCI7XG4gICAgaWYgKGNvZGUgPT09IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgrKykpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBpbmRleCA9PT0gdmFsdWUubGVuZ3RoID8gY2RhdGEgOiBjZGF0YU9wZW5JbnNpZGU7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gQ0RBVEEuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhW0NEQVRBWz4mPF1dPiBiXG4gICAqICAgICAgICAgICAgICAgIF5eXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY2RhdGEoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjZGF0YUNsb3NlO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IGNkYXRhO1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gY2RhdGE7XG4gIH1cblxuICAvKipcbiAgICogSW4gQ0RBVEEsIGFmdGVyIGBdYCwgYXQgYW5vdGhlciBgXWAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhW0NEQVRBWz4mPF1dPiBiXG4gICAqICAgICAgICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBjZGF0YUNsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBjZGF0YUVuZDtcbiAgICB9XG4gICAgcmV0dXJuIGNkYXRhKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIENEQVRBLCBhZnRlciBgXV1gLCBhdCBgPmAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhW0NEQVRBWz4mPF1dPiBiXG4gICAqICAgICAgICAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gY2RhdGFFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gY2RhdGFFbmQ7XG4gICAgfVxuICAgIHJldHVybiBjZGF0YShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBkZWNsYXJhdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPCFiPiBjXG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBkZWNsYXJhdGlvbjtcbiAgICAgIHJldHVybiBsaW5lRW5kaW5nQmVmb3JlKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIGRlY2xhcmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGluc3RydWN0aW9uLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8P2I/PiBjXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zdHJ1Y3Rpb24oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNjMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBpbnN0cnVjdGlvbkNsb3NlO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IGluc3RydWN0aW9uO1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XG4gIH1cblxuICAvKipcbiAgICogSW4gaW5zdHJ1Y3Rpb24sIGFmdGVyIGA/YCwgYXQgYD5gLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8P2I/PiBjXG4gICAqICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnN0cnVjdGlvbkNsb3NlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gNjIgPyBlbmQoY29kZSkgOiBpbnN0cnVjdGlvbihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgPC9gLCBpbiBjbG9zaW5nIHRhZywgYXQgdGFnIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwvYj4gY1xuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRhZ0Nsb3NlU3RhcnQoY29kZSkge1xuICAgIC8vIEFTQ0lJIGFscGhhYmV0aWNhbC5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHRhZ0Nsb3NlO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGA8L3hgLCBpbiBhIHRhZyBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8L2I+IGNcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnQ2xvc2UoY29kZSkge1xuICAgIC8vIEFTQ0lJIGFscGhhbnVtZXJpY2FsIGFuZCBgLWAuXG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnQ2xvc2U7XG4gICAgfVxuICAgIHJldHVybiB0YWdDbG9zZUJldHdlZW4oY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY2xvc2luZyB0YWcsIGFmdGVyIHRhZyBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8L2I+IGNcbiAgICogICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnQ2xvc2VCZXR3ZWVuKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ0Nsb3NlQmV0d2VlbjtcbiAgICAgIHJldHVybiBsaW5lRW5kaW5nQmVmb3JlKGNvZGUpO1xuICAgIH1cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHRhZ0Nsb3NlQmV0d2VlbjtcbiAgICB9XG4gICAgcmV0dXJuIGVuZChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgPHhgLCBpbiBvcGVuaW5nIHRhZyBuYW1lLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8Yj4gY1xuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRhZ09wZW4oY29kZSkge1xuICAgIC8vIEFTQ0lJIGFscGhhbnVtZXJpY2FsIGFuZCBgLWAuXG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnT3BlbjtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQ3IHx8IGNvZGUgPT09IDYyIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2Vlbihjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBvcGVuaW5nIHRhZywgYWZ0ZXIgdGFnIG5hbWUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiPiBjXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnT3BlbkJldHdlZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIGVuZDtcbiAgICB9XG5cbiAgICAvLyBBU0NJSSBhbHBoYWJldGljYWwgYW5kIGA6YCBhbmQgYF9gLlxuICAgIGlmIChjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZU5hbWU7XG4gICAgfVxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkJldHdlZW47XG4gICAgICByZXR1cm4gbGluZUVuZGluZ0JlZm9yZShjb2RlKTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2VlbjtcbiAgICB9XG4gICAgcmV0dXJuIGVuZChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBhdHRyaWJ1dGUgbmFtZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgYz4gZFxuICAgKiAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlTmFtZShjb2RlKSB7XG4gICAgLy8gQVNDSUkgYWxwaGFiZXRpY2FsIGFuZCBgLWAsIGAuYCwgYDpgLCBhbmQgYF9gLlxuICAgIGlmIChjb2RlID09PSA0NSB8fCBjb2RlID09PSA0NiB8fCBjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZU5hbWVBZnRlcihjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBhdHRyaWJ1dGUgbmFtZSwgYmVmb3JlIGluaXRpYWxpemVyLCB0aGUgZW5kIG9mIHRoZSB0YWcsIG9yXG4gICAqIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM+IGRcbiAgICogICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZTtcbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyO1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZU5hbWVBZnRlcjtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZm9yZSB1bnF1b3RlZCwgZG91YmxlIHF1b3RlZCwgb3Igc2luZ2xlIHF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUsIGFsbG93aW5nXG4gICAqIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM9ZD4gZVxuICAgKiAgICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gNjAgfHwgY29kZSA9PT0gNjEgfHwgY29kZSA9PT0gNjIgfHwgY29kZSA9PT0gOTYpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSAzNCB8fCBjb2RlID09PSAzOSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgbWFya2VyID0gY29kZTtcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWQ7XG4gICAgfVxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlQmVmb3JlO1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlQmVmb3JlO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVVucXVvdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIGRvdWJsZSBvciBzaW5nbGUgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgYz1cImRcIj4gZVxuICAgKiAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIG1hcmtlciA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlcjtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgfVxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkO1xuICAgICAgcmV0dXJuIGxpbmVFbmRpbmdCZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgYz1kPiBlXG4gICAqICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlVW5xdW90ZWQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5IHx8IGNvZGUgPT09IDYwIHx8IGNvZGUgPT09IDYxIHx8IGNvZGUgPT09IDk2KSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNDcgfHwgY29kZSA9PT0gNjIgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpO1xuICAgIH1cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVVucXVvdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGRvdWJsZSBvciBzaW5nbGUgcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSwgYmVmb3JlIHdoaXRlc3BhY2Ugb3IgdGhlIGVuZFxuICAgKiBvZiB0aGUgdGFnLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSA8YiBjPVwiZFwiPiBlXG4gICAqICAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NyB8fCBjb2RlID09PSA2MiB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gdGFnT3BlbkJldHdlZW4oY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY2VydGFpbiBjaXJjdW1zdGFuY2VzIG9mIGEgdGFnIHdoZXJlIG9ubHkgYW4gYD5gIGlzIGFsbG93ZWQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDxiIGM9XCJkXCI+IGVcbiAgICogICAgICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBlbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiaHRtbFRleHREYXRhXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwiaHRtbFRleHRcIik7XG4gICAgICByZXR1cm4gb2s7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQXQgZW9sLlxuICAgKlxuICAgKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogd2UgY2FuXHUyMDE5dCBoYXZlIGJsYW5rIGxpbmVzIGluIHRleHQsIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXRcbiAgICogPiBlbXB0eSB0b2tlbnMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIDwhLS1hXG4gICAqICAgICAgICAgICAgXlxuICAgKiAgIHwgYi0tPlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbGluZUVuZGluZ0JlZm9yZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KFwiaHRtbFRleHREYXRhXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nXCIpO1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgIHJldHVybiBsaW5lRW5kaW5nQWZ0ZXI7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgZW9sLCBhdCBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogd2UgY2FuXHUyMDE5dCBoYXZlIGJsYW5rIGxpbmVzIGluIHRleHQsIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXRcbiAgICogPiBlbXB0eSB0b2tlbnMuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCBhIDwhLS1hXG4gICAqID4gfCBiLS0+XG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBsaW5lRW5kaW5nQWZ0ZXIoY29kZSkge1xuICAgIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKSA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBsaW5lRW5kaW5nQWZ0ZXJQcmVmaXgsIFwibGluZVByZWZpeFwiLCBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJykgPyB1bmRlZmluZWQgOiA0KShjb2RlKSA6IGxpbmVFbmRpbmdBZnRlclByZWZpeChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBlb2wsIGFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqID4gXHVEODNEXHVEQzQ5ICoqTm90ZSoqOiB3ZSBjYW5cdTIwMTl0IGhhdmUgYmxhbmsgbGluZXMgaW4gdGV4dCwgc28gbm8gbmVlZCB0byB3b3JyeSBhYm91dFxuICAgKiA+IGVtcHR5IHRva2Vucy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGEgPCEtLWFcbiAgICogPiB8IGItLT5cbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGxpbmVFbmRpbmdBZnRlclByZWZpeChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcihcImh0bWxUZXh0RGF0YVwiKTtcbiAgICByZXR1cm4gcmV0dXJuU3RhdGUoY29kZSk7XG4gIH1cbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ29uc3RydWN0LFxuICogICBFdmVudCxcbiAqICAgUmVzb2x2ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplcixcbiAqICAgVG9rZW5cbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeURlc3RpbmF0aW9uIH0gZnJvbSAnbWljcm9tYXJrLWZhY3RvcnktZGVzdGluYXRpb24nO1xuaW1wb3J0IHsgZmFjdG9yeUxhYmVsIH0gZnJvbSAnbWljcm9tYXJrLWZhY3RvcnktbGFiZWwnO1xuaW1wb3J0IHsgZmFjdG9yeVRpdGxlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3RvcnktdGl0bGUnO1xuaW1wb3J0IHsgZmFjdG9yeVdoaXRlc3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS13aGl0ZXNwYWNlJztcbmltcG9ydCB7IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuaW1wb3J0IHsgcHVzaCwgc3BsaWNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCc7XG5pbXBvcnQgeyBub3JtYWxpemVJZGVudGlmaWVyIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXInO1xuaW1wb3J0IHsgcmVzb2x2ZUFsbCB9IGZyb20gJ21pY3JvbWFyay11dGlsLXJlc29sdmUtYWxsJztcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxhYmVsRW5kID0ge1xuICBuYW1lOiAnbGFiZWxFbmQnLFxuICByZXNvbHZlQWxsOiByZXNvbHZlQWxsTGFiZWxFbmQsXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvTGFiZWxFbmQsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsRW5kXG59O1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IHJlc291cmNlQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVSZXNvdXJjZVxufTtcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgcmVmZXJlbmNlRnVsbENvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplUmVmZXJlbmNlRnVsbFxufTtcbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgcmVmZXJlbmNlQ29sbGFwc2VkQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVSZWZlcmVuY2VDb2xsYXBzZWRcbn07XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlQWxsTGFiZWxFbmQoZXZlbnRzKSB7XG4gIGxldCBpbmRleCA9IC0xO1xuICAvKiogQHR5cGUge0FycmF5PEV2ZW50Pn0gKi9cbiAgY29uc3QgbmV3RXZlbnRzID0gW107XG4gIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgIGNvbnN0IHRva2VuID0gZXZlbnRzW2luZGV4XVsxXTtcbiAgICBuZXdFdmVudHMucHVzaChldmVudHNbaW5kZXhdKTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gXCJsYWJlbEltYWdlXCIgfHwgdG9rZW4udHlwZSA9PT0gXCJsYWJlbExpbmtcIiB8fCB0b2tlbi50eXBlID09PSBcImxhYmVsRW5kXCIpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgbWFya2VyLlxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdG9rZW4udHlwZSA9PT0gXCJsYWJlbEltYWdlXCIgPyA0IDogMjtcbiAgICAgIHRva2VuLnR5cGUgPSBcImRhdGFcIjtcbiAgICAgIGluZGV4ICs9IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgZXZlbnRzIGFyZSBlcXVhbCwgd2UgZG9uJ3QgaGF2ZSB0byBjb3B5IG5ld0V2ZW50cyB0byBldmVudHNcbiAgaWYgKGV2ZW50cy5sZW5ndGggIT09IG5ld0V2ZW50cy5sZW5ndGgpIHtcbiAgICBzcGxpY2UoZXZlbnRzLCAwLCBldmVudHMubGVuZ3RoLCBuZXdFdmVudHMpO1xuICB9XG4gIHJldHVybiBldmVudHM7XG59XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlVG9MYWJlbEVuZChldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGluZGV4ID0gZXZlbnRzLmxlbmd0aDtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCB0b2tlbjtcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBvcGVuO1xuICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGNsb3NlO1xuICAvKiogQHR5cGUge0FycmF5PEV2ZW50Pn0gKi9cbiAgbGV0IG1lZGlhO1xuXG4gIC8vIEZpbmQgYW4gb3BlbmluZy5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB0b2tlbiA9IGV2ZW50c1tpbmRleF1bMV07XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIC8vIElmIHdlIHNlZSBhbm90aGVyIGxpbmssIG9yIGluYWN0aXZlIGxpbmsgbGFiZWwsIHdlXHUyMDE5dmUgYmVlbiBoZXJlIGJlZm9yZS5cbiAgICAgIGlmICh0b2tlbi50eXBlID09PSBcImxpbmtcIiB8fCB0b2tlbi50eXBlID09PSBcImxhYmVsTGlua1wiICYmIHRva2VuLl9pbmFjdGl2ZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gTWFyayBvdGhlciBsaW5rIG9wZW5pbmdzIGFzIGluYWN0aXZlLCBhcyB3ZSBjYW5cdTIwMTl0IGhhdmUgbGlua3MgaW5cbiAgICAgIC8vIGxpbmtzLlxuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiYgdG9rZW4udHlwZSA9PT0gXCJsYWJlbExpbmtcIikge1xuICAgICAgICB0b2tlbi5faW5hY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2xvc2UpIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmICh0b2tlbi50eXBlID09PSBcImxhYmVsSW1hZ2VcIiB8fCB0b2tlbi50eXBlID09PSBcImxhYmVsTGlua1wiKSAmJiAhdG9rZW4uX2JhbGFuY2VkKSB7XG4gICAgICAgIG9wZW4gPSBpbmRleDtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IFwibGFiZWxMaW5rXCIpIHtcbiAgICAgICAgICBvZmZzZXQgPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSBcImxhYmVsRW5kXCIpIHtcbiAgICAgIGNsb3NlID0gaW5kZXg7XG4gICAgfVxuICB9XG4gIGNvbnN0IGdyb3VwID0ge1xuICAgIHR5cGU6IGV2ZW50c1tvcGVuXVsxXS50eXBlID09PSBcImxhYmVsTGlua1wiID8gXCJsaW5rXCIgOiBcImltYWdlXCIsXG4gICAgc3RhcnQ6IHtcbiAgICAgIC4uLmV2ZW50c1tvcGVuXVsxXS5zdGFydFxuICAgIH0sXG4gICAgZW5kOiB7XG4gICAgICAuLi5ldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdWzFdLmVuZFxuICAgIH1cbiAgfTtcbiAgY29uc3QgbGFiZWwgPSB7XG4gICAgdHlwZTogXCJsYWJlbFwiLFxuICAgIHN0YXJ0OiB7XG4gICAgICAuLi5ldmVudHNbb3Blbl1bMV0uc3RhcnRcbiAgICB9LFxuICAgIGVuZDoge1xuICAgICAgLi4uZXZlbnRzW2Nsb3NlXVsxXS5lbmRcbiAgICB9XG4gIH07XG4gIGNvbnN0IHRleHQgPSB7XG4gICAgdHlwZTogXCJsYWJlbFRleHRcIixcbiAgICBzdGFydDoge1xuICAgICAgLi4uZXZlbnRzW29wZW4gKyBvZmZzZXQgKyAyXVsxXS5lbmRcbiAgICB9LFxuICAgIGVuZDoge1xuICAgICAgLi4uZXZlbnRzW2Nsb3NlIC0gMl1bMV0uc3RhcnRcbiAgICB9XG4gIH07XG4gIG1lZGlhID0gW1snZW50ZXInLCBncm91cCwgY29udGV4dF0sIFsnZW50ZXInLCBsYWJlbCwgY29udGV4dF1dO1xuXG4gIC8vIE9wZW5pbmcgbWFya2VyLlxuICBtZWRpYSA9IHB1c2gobWVkaWEsIGV2ZW50cy5zbGljZShvcGVuICsgMSwgb3BlbiArIG9mZnNldCArIDMpKTtcblxuICAvLyBUZXh0IG9wZW4uXG4gIG1lZGlhID0gcHVzaChtZWRpYSwgW1snZW50ZXInLCB0ZXh0LCBjb250ZXh0XV0pO1xuXG4gIC8vIEFsd2F5cyBwb3B1bGF0ZWQgYnkgZGVmYXVsdHMuXG5cbiAgLy8gQmV0d2Vlbi5cbiAgbWVkaWEgPSBwdXNoKG1lZGlhLCByZXNvbHZlQWxsKGNvbnRleHQucGFyc2VyLmNvbnN0cnVjdHMuaW5zaWRlU3Bhbi5udWxsLCBldmVudHMuc2xpY2Uob3BlbiArIG9mZnNldCArIDQsIGNsb3NlIC0gMyksIGNvbnRleHQpKTtcblxuICAvLyBUZXh0IGNsb3NlLCBtYXJrZXIgY2xvc2UsIGxhYmVsIGNsb3NlLlxuICBtZWRpYSA9IHB1c2gobWVkaWEsIFtbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSwgZXZlbnRzW2Nsb3NlIC0gMl0sIGV2ZW50c1tjbG9zZSAtIDFdLCBbJ2V4aXQnLCBsYWJlbCwgY29udGV4dF1dKTtcblxuICAvLyBSZWZlcmVuY2UsIHJlc291cmNlLCBvciBzby5cbiAgbWVkaWEgPSBwdXNoKG1lZGlhLCBldmVudHMuc2xpY2UoY2xvc2UgKyAxKSk7XG5cbiAgLy8gTWVkaWEgY2xvc2UuXG4gIG1lZGlhID0gcHVzaChtZWRpYSwgW1snZXhpdCcsIGdyb3VwLCBjb250ZXh0XV0pO1xuICBzcGxpY2UoZXZlbnRzLCBvcGVuLCBldmVudHMubGVuZ3RoLCBtZWRpYSk7XG4gIHJldHVybiBldmVudHM7XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxFbmQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgbGV0IGluZGV4ID0gc2VsZi5ldmVudHMubGVuZ3RoO1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgbGFiZWxTdGFydDtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgZGVmaW5lZDtcblxuICAvLyBGaW5kIGFuIG9wZW5pbmcuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKChzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gXCJsYWJlbEltYWdlXCIgfHwgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwibGFiZWxMaW5rXCIpICYmICFzZWxmLmV2ZW50c1tpbmRleF1bMV0uX2JhbGFuY2VkKSB7XG4gICAgICBsYWJlbFN0YXJ0ID0gc2VsZi5ldmVudHNbaW5kZXhdWzFdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgbGFiZWwgZW5kLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdKGIpIGNcbiAgICogICAgICAgXlxuICAgKiA+IHwgW2FdW2JdIGNcbiAgICogICAgICAgXlxuICAgKiA+IHwgW2FdW10gYlxuICAgKiAgICAgICBeXG4gICAqID4gfCBbYV0gYlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIElmIHRoZXJlIGlzIG5vdCBhbiBva2F5IG9wZW5pbmcuXG4gICAgaWYgKCFsYWJlbFN0YXJ0KSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBjb3JyZXNwb25kaW5nIGxhYmVsIChsaW5rKSBzdGFydCBpcyBtYXJrZWQgYXMgaW5hY3RpdmUsXG4gICAgLy8gaXQgbWVhbnMgd2VcdTIwMTlkIGJlIHdyYXBwaW5nIGEgbGluaywgbGlrZSB0aGlzOlxuICAgIC8vXG4gICAgLy8gYGBgbWFya2Rvd25cbiAgICAvLyA+IHwgYSBbYiBbY10oZCkgZV0oZikgZy5cbiAgICAvLyAgICAgICAgICAgICAgICAgIF5cbiAgICAvLyBgYGBcbiAgICAvL1xuICAgIC8vIFdlIGNhblx1MjAxOXQgaGF2ZSB0aGF0LCBzbyBpdFx1MjAxOXMganVzdCBiYWxhbmNlZCBicmFja2V0cy5cbiAgICBpZiAobGFiZWxTdGFydC5faW5hY3RpdmUpIHtcbiAgICAgIHJldHVybiBsYWJlbEVuZE5vayhjb2RlKTtcbiAgICB9XG4gICAgZGVmaW5lZCA9IHNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMobm9ybWFsaXplSWRlbnRpZmllcihzZWxmLnNsaWNlU2VyaWFsaXplKHtcbiAgICAgIHN0YXJ0OiBsYWJlbFN0YXJ0LmVuZCxcbiAgICAgIGVuZDogc2VsZi5ub3coKVxuICAgIH0pKSk7XG4gICAgZWZmZWN0cy5lbnRlcihcImxhYmVsRW5kXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsYWJlbE1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwibGFiZWxNYXJrZXJcIik7XG4gICAgZWZmZWN0cy5leGl0KFwibGFiZWxFbmRcIik7XG4gICAgcmV0dXJuIGFmdGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGBdYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXShiKSBjXG4gICAqICAgICAgIF5cbiAgICogPiB8IFthXVtiXSBjXG4gICAqICAgICAgIF5cbiAgICogPiB8IFthXVtdIGJcbiAgICogICAgICAgXlxuICAgKiA+IHwgW2FdIGJcbiAgICogICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIC8vIE5vdGU6IGBtYXJrZG93bi1yc2AgYWxzbyBwYXJzZXMgR0ZNIGZvb3Rub3RlcyBoZXJlLCB3aGljaCBmb3IgdXMgaXMgaW5cbiAgICAvLyBhbiBleHRlbnNpb24uXG5cbiAgICAvLyBSZXNvdXJjZSAoYFthc2RdKGZnaClgKT9cbiAgICBpZiAoY29kZSA9PT0gNDApIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQocmVzb3VyY2VDb25zdHJ1Y3QsIGxhYmVsRW5kT2ssIGRlZmluZWQgPyBsYWJlbEVuZE9rIDogbGFiZWxFbmROb2spKGNvZGUpO1xuICAgIH1cblxuICAgIC8vIEZ1bGwgKGBbYXNkXVtmZ2hdYCkgb3IgY29sbGFwc2VkIChgW2FzZF1bXWApIHJlZmVyZW5jZT9cbiAgICBpZiAoY29kZSA9PT0gOTEpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQocmVmZXJlbmNlRnVsbENvbnN0cnVjdCwgbGFiZWxFbmRPaywgZGVmaW5lZCA/IHJlZmVyZW5jZU5vdEZ1bGwgOiBsYWJlbEVuZE5vaykoY29kZSk7XG4gICAgfVxuXG4gICAgLy8gU2hvcnRjdXQgKGBbYXNkXWApIHJlZmVyZW5jZT9cbiAgICByZXR1cm4gZGVmaW5lZCA/IGxhYmVsRW5kT2soY29kZSkgOiBsYWJlbEVuZE5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgXWAsIGF0IGBbYCwgYnV0IG5vdCBhdCBhIGZ1bGwgcmVmZXJlbmNlLlxuICAgKlxuICAgKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogd2Ugb25seSBnZXQgaGVyZSBpZiB0aGUgbGFiZWwgaXMgZGVmaW5lZC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXVtdIGJcbiAgICogICAgICAgIF5cbiAgICogPiB8IFthXSBiXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByZWZlcmVuY2VOb3RGdWxsKGNvZGUpIHtcbiAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KHJlZmVyZW5jZUNvbGxhcHNlZENvbnN0cnVjdCwgbGFiZWxFbmRPaywgbGFiZWxFbmROb2spKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIERvbmUsIHdlIGZvdW5kIHNvbWV0aGluZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXShiKSBjXG4gICAqICAgICAgICAgICBeXG4gICAqID4gfCBbYV1bYl0gY1xuICAgKiAgICAgICAgICAgXlxuICAgKiA+IHwgW2FdW10gYlxuICAgKiAgICAgICAgICBeXG4gICAqID4gfCBbYV0gYlxuICAgKiAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gbGFiZWxFbmRPayhjb2RlKSB7XG4gICAgLy8gTm90ZTogYG1hcmtkb3duLXJzYCBkb2VzIGEgYnVuY2ggb2Ygc3R1ZmYgaGVyZS5cbiAgICByZXR1cm4gb2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogRG9uZSwgaXRcdTIwMTlzIG5vdGhpbmcuXG4gICAqXG4gICAqIFRoZXJlIHdhcyBhbiBva2F5IG9wZW5pbmcsIGJ1dCB3ZSBkaWRuXHUyMDE5dCBtYXRjaCBhbnl0aGluZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXShiIGNcbiAgICogICAgICAgIF5cbiAgICogPiB8IFthXVtiIGNcbiAgICogICAgICAgIF5cbiAgICogPiB8IFthXSBiXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBsYWJlbEVuZE5vayhjb2RlKSB7XG4gICAgbGFiZWxTdGFydC5fYmFsYW5jZWQgPSB0cnVlO1xuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVSZXNvdXJjZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiByZXNvdXJjZVN0YXJ0O1xuXG4gIC8qKlxuICAgKiBBdCBhIHJlc291cmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdKGIpIGNcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlc291cmNlU3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJyZXNvdXJjZVwiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwicmVzb3VyY2VNYXJrZXJcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcInJlc291cmNlTWFya2VyXCIpO1xuICAgIHJldHVybiByZXNvdXJjZUJlZm9yZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiByZXNvdXJjZSwgYWZ0ZXIgYChgLCBhdCBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdKGIpIGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByZXNvdXJjZUJlZm9yZShjb2RlKSB7XG4gICAgcmV0dXJuIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkgPyBmYWN0b3J5V2hpdGVzcGFjZShlZmZlY3RzLCByZXNvdXJjZU9wZW4pKGNvZGUpIDogcmVzb3VyY2VPcGVuKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlc291cmNlLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLCBhdCBgKWAgb3IgYSBkZXN0aW5hdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXShiKSBjXG4gICAqICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb3VyY2VPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDEpIHtcbiAgICAgIHJldHVybiByZXNvdXJjZUVuZChjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhY3RvcnlEZXN0aW5hdGlvbihlZmZlY3RzLCByZXNvdXJjZURlc3RpbmF0aW9uQWZ0ZXIsIHJlc291cmNlRGVzdGluYXRpb25NaXNzaW5nLCBcInJlc291cmNlRGVzdGluYXRpb25cIiwgXCJyZXNvdXJjZURlc3RpbmF0aW9uTGl0ZXJhbFwiLCBcInJlc291cmNlRGVzdGluYXRpb25MaXRlcmFsTWFya2VyXCIsIFwicmVzb3VyY2VEZXN0aW5hdGlvblJhd1wiLCBcInJlc291cmNlRGVzdGluYXRpb25TdHJpbmdcIiwgMzIpKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlc291cmNlLCBhZnRlciBkZXN0aW5hdGlvbiwgYXQgb3B0aW9uYWwgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXShiKSBjXG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlc291cmNlRGVzdGluYXRpb25BZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkgPyBmYWN0b3J5V2hpdGVzcGFjZShlZmZlY3RzLCByZXNvdXJjZUJldHdlZW4pKGNvZGUpIDogcmVzb3VyY2VFbmQoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQXQgaW52YWxpZCBkZXN0aW5hdGlvbi5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXSg8PCkgYlxuICAgKiAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlc291cmNlRGVzdGluYXRpb25NaXNzaW5nKGNvZGUpIHtcbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlc291cmNlLCBhZnRlciBkZXN0aW5hdGlvbiBhbmQgd2hpdGVzcGFjZSwgYXQgYChgIG9yIHRpdGxlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdKGIgKSBjXG4gICAqICAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByZXNvdXJjZUJldHdlZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNCB8fCBjb2RlID09PSAzOSB8fCBjb2RlID09PSA0MCkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlUaXRsZShlZmZlY3RzLCByZXNvdXJjZVRpdGxlQWZ0ZXIsIG5vaywgXCJyZXNvdXJjZVRpdGxlXCIsIFwicmVzb3VyY2VUaXRsZU1hcmtlclwiLCBcInJlc291cmNlVGl0bGVTdHJpbmdcIikoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZUVuZChjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiByZXNvdXJjZSwgYWZ0ZXIgdGl0bGUsIGF0IG9wdGlvbmFsIHdoaXRlc3BhY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV0oYiBcImNcIikgZFxuICAgKiAgICAgICAgICAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb3VyY2VUaXRsZUFmdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSA/IGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIHJlc291cmNlRW5kKShjb2RlKSA6IHJlc291cmNlRW5kKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlc291cmNlLCBhdCBgKWAuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV0oYikgZFxuICAgKiAgICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByZXNvdXJjZUVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQxKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwicmVzb3VyY2VNYXJrZXJcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBlZmZlY3RzLmV4aXQoXCJyZXNvdXJjZU1hcmtlclwiKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcInJlc291cmNlXCIpO1xuICAgICAgcmV0dXJuIG9rO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplUmVmZXJlbmNlRnVsbChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICByZXR1cm4gcmVmZXJlbmNlRnVsbDtcblxuICAvKipcbiAgICogSW4gYSByZWZlcmVuY2UgKGZ1bGwpLCBhdCB0aGUgYFtgLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgW2FdW2JdIGRcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlZmVyZW5jZUZ1bGwoY29kZSkge1xuICAgIHJldHVybiBmYWN0b3J5TGFiZWwuY2FsbChzZWxmLCBlZmZlY3RzLCByZWZlcmVuY2VGdWxsQWZ0ZXIsIHJlZmVyZW5jZUZ1bGxNaXNzaW5nLCBcInJlZmVyZW5jZVwiLCBcInJlZmVyZW5jZU1hcmtlclwiLCBcInJlZmVyZW5jZVN0cmluZ1wiKShjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBhIHJlZmVyZW5jZSAoZnVsbCksIGFmdGVyIGBdYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXVtiXSBkXG4gICAqICAgICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlZmVyZW5jZUZ1bGxBZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIHNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMobm9ybWFsaXplSWRlbnRpZmllcihzZWxmLnNsaWNlU2VyaWFsaXplKHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdWzFdKS5zbGljZSgxLCAtMSkpKSA/IG9rKGNvZGUpIDogbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlZmVyZW5jZSAoZnVsbCkgdGhhdCB3YXMgbWlzc2luZy5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXVtiIGRcbiAgICogICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlZmVyZW5jZUZ1bGxNaXNzaW5nKGNvZGUpIHtcbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplUmVmZXJlbmNlQ29sbGFwc2VkKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHJlZmVyZW5jZUNvbGxhcHNlZFN0YXJ0O1xuXG4gIC8qKlxuICAgKiBJbiByZWZlcmVuY2UgKGNvbGxhcHNlZCksIGF0IGBbYC5cbiAgICpcbiAgICogPiBcdUQ4M0RcdURDNDkgKipOb3RlKio6IHdlIG9ubHkgZ2V0IGhlcmUgaWYgdGhlIGxhYmVsIGlzIGRlZmluZWQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBbYV1bXSBkXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiByZWZlcmVuY2VDb2xsYXBzZWRTdGFydChjb2RlKSB7XG4gICAgLy8gV2Ugb25seSBhdHRlbXB0IGEgY29sbGFwc2VkIGxhYmVsIGlmIHRoZXJlXHUyMDE5cyBhIGBbYC5cblxuICAgIGVmZmVjdHMuZW50ZXIoXCJyZWZlcmVuY2VcIik7XG4gICAgZWZmZWN0cy5lbnRlcihcInJlZmVyZW5jZU1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwicmVmZXJlbmNlTWFya2VyXCIpO1xuICAgIHJldHVybiByZWZlcmVuY2VDb2xsYXBzZWRPcGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHJlZmVyZW5jZSAoY29sbGFwc2VkKSwgYXQgYF1gLlxuICAgKlxuICAgKiA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogd2Ugb25seSBnZXQgaGVyZSBpZiB0aGUgbGFiZWwgaXMgZGVmaW5lZC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IFthXVtdIGRcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiAgQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVmZXJlbmNlQ29sbGFwc2VkT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwicmVmZXJlbmNlTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwicmVmZXJlbmNlTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwicmVmZXJlbmNlXCIpO1xuICAgICAgcmV0dXJuIG9rO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGxhYmVsRW5kIH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnO1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbFN0YXJ0SW1hZ2UgPSB7XG4gIG5hbWU6ICdsYWJlbFN0YXJ0SW1hZ2UnLFxuICByZXNvbHZlQWxsOiBsYWJlbEVuZC5yZXNvbHZlQWxsLFxuICB0b2tlbml6ZTogdG9rZW5pemVMYWJlbFN0YXJ0SW1hZ2Vcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydEltYWdlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgbGFiZWwgKGltYWdlKSBzdGFydC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgIVtiXSBjXG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwibGFiZWxJbWFnZVwiKTtcbiAgICBlZmZlY3RzLmVudGVyKFwibGFiZWxJbWFnZU1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwibGFiZWxJbWFnZU1hcmtlclwiKTtcbiAgICByZXR1cm4gb3BlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgIWAsIGF0IGBbYC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgIVtiXSBjXG4gICAqICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTEpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoXCJsYWJlbE1hcmtlclwiKTtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGVmZmVjdHMuZXhpdChcImxhYmVsTWFya2VyXCIpO1xuICAgICAgZWZmZWN0cy5leGl0KFwibGFiZWxJbWFnZVwiKTtcbiAgICAgIHJldHVybiBhZnRlcjtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBgIVtgLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgYSAhW2JdIGNcbiAgICogICAgICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGlzIGlzIG5lZWRlZCBpbiBiZWNhdXNlLCB3aGVuIEdGTSBmb290bm90ZXMgYXJlIGVuYWJsZWQsIGltYWdlcyBuZXZlclxuICAgKiBmb3JtIHdoZW4gc3RhcnRlZCB3aXRoIGEgYF5gLlxuICAgKiBJbnN0ZWFkLCBsaW5rcyBmb3JtOlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAhW15hXShiKVxuICAgKlxuICAgKiAhW15hXVtiXVxuICAgKlxuICAgKiBbYl06IGNcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYGh0bWxcbiAgICogPHA+ITxhIGhyZWY9XFxcImJcXFwiPl5hPC9hPjwvcD5cbiAgICogPHA+ITxhIGhyZWY9XFxcImNcXFwiPl5hPC9hPjwvcD5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvLyBUbyBkbzogdXNlIGEgbmV3IGZpZWxkIHRvIGRvIHRoaXMsIHRoaXMgaXMgc3RpbGwgbmVlZGVkIGZvclxuICAgIC8vIGBtaWNyb21hcmstZXh0ZW5zaW9uLWdmbS1mb290bm90ZWAsIGJ1dCB0aGUgYGxhYmVsLXN0YXJ0LWxpbmtgXG4gICAgLy8gYmVoYXZpb3IgaXNuXHUyMDE5dC5cbiAgICAvLyBIaWRkZW4gZm9vdG5vdGVzIGhvb2suXG4gICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgIHJldHVybiBjb2RlID09PSA5NCAmJiAnX2hpZGRlbkZvb3Rub3RlU3VwcG9ydCcgaW4gc2VsZi5wYXJzZXIuY29uc3RydWN0cyA/IG5vayhjb2RlKSA6IG9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGxhYmVsRW5kIH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnO1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbFN0YXJ0TGluayA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRMaW5rJyxcbiAgcmVzb2x2ZUFsbDogbGFiZWxFbmQucmVzb2x2ZUFsbCxcbiAgdG9rZW5pemU6IHRva2VuaXplTGFiZWxTdGFydExpbmtcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydExpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHN0YXJ0O1xuXG4gIC8qKlxuICAgKiBTdGFydCBvZiBsYWJlbCAobGluaykgc3RhcnQuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCBhIFtiXSBjXG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwibGFiZWxMaW5rXCIpO1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsYWJlbE1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwibGFiZWxNYXJrZXJcIik7XG4gICAgZWZmZWN0cy5leGl0KFwibGFiZWxMaW5rXCIpO1xuICAgIHJldHVybiBhZnRlcjtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvLyBUbyBkbzogdGhpcyBpc25cdTIwMTl0IG5lZWRlZCBpbiBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLFxuICAgIC8vIHJlbW92ZS5cbiAgICAvLyBIaWRkZW4gZm9vdG5vdGVzIGhvb2suXG4gICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgIHJldHVybiBjb2RlID09PSA5NCAmJiAnX2hpZGRlbkZvb3Rub3RlU3VwcG9ydCcgaW4gc2VsZi5wYXJzZXIuY29uc3RydWN0cyA/IG5vayhjb2RlKSA6IG9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvbnN0cnVjdCxcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dCxcbiAqICAgVG9rZW5pemVyXG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGZhY3RvcnlTcGFjZSB9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJztcbmltcG9ydCB7IG1hcmtkb3duTGluZUVuZGluZyB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsaW5lRW5kaW5nID0ge1xuICBuYW1lOiAnbGluZUVuZGluZycsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxpbmVFbmRpbmdcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGluZUVuZGluZyhlZmZlY3RzLCBvaykge1xuICByZXR1cm4gc3RhcnQ7XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nXCIpO1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICBlZmZlY3RzLmV4aXQoXCJsaW5lRW5kaW5nXCIpO1xuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgb2ssIFwibGluZVByZWZpeFwiKTtcbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDb2RlLFxuICogICBDb25zdHJ1Y3QsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgdGhlbWF0aWNCcmVhayA9IHtcbiAgbmFtZTogJ3RoZW1hdGljQnJlYWsnLFxuICB0b2tlbml6ZTogdG9rZW5pemVUaGVtYXRpY0JyZWFrXG59O1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZVRoZW1hdGljQnJlYWsoZWZmZWN0cywgb2ssIG5vaykge1xuICBsZXQgc2l6ZSA9IDA7XG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXI7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogU3RhcnQgb2YgdGhlbWF0aWMgYnJlYWsuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAqKipcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwidGhlbWF0aWNCcmVha1wiKTtcbiAgICAvLyBUbyBkbzogcGFyc2UgaW5kZW50IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICByZXR1cm4gYmVmb3JlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIG9wdGlvbmFsIHdoaXRlc3BhY2UsIGF0IG1hcmtlci5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8ICoqKlxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYmVmb3JlKGNvZGUpIHtcbiAgICBtYXJrZXIgPSBjb2RlO1xuICAgIHJldHVybiBhdEJyZWFrKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHNvbWV0aGluZywgYmVmb3JlIHNvbWV0aGluZyBlbHNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwgKioqXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwidGhlbWF0aWNCcmVha1NlcXVlbmNlXCIpO1xuICAgICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpO1xuICAgIH1cbiAgICBpZiAoc2l6ZSA+PSAzICYmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcInRoZW1hdGljQnJlYWtcIik7XG4gICAgICByZXR1cm4gb2soY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gc2VxdWVuY2UuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCAqKipcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBzaXplKys7XG4gICAgICByZXR1cm4gc2VxdWVuY2U7XG4gICAgfVxuICAgIGVmZmVjdHMuZXhpdChcInRoZW1hdGljQnJlYWtTZXF1ZW5jZVwiKTtcbiAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKSA/IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdEJyZWFrLCBcIndoaXRlc3BhY2VcIikoY29kZSkgOiBhdEJyZWFrKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIENvbnN0cnVjdCxcbiAqICAgRXhpdGVyLFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlbml6ZXJcbiAqIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgYXNjaWlEaWdpdCwgbWFya2Rvd25TcGFjZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG5pbXBvcnQgeyBibGFua0xpbmUgfSBmcm9tICcuL2JsYW5rLWxpbmUuanMnO1xuaW1wb3J0IHsgdGhlbWF0aWNCcmVhayB9IGZyb20gJy4vdGhlbWF0aWMtYnJlYWsuanMnO1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsaXN0ID0ge1xuICBjb250aW51YXRpb246IHtcbiAgICB0b2tlbml6ZTogdG9rZW5pemVMaXN0Q29udGludWF0aW9uXG4gIH0sXG4gIGV4aXQ6IHRva2VuaXplTGlzdEVuZCxcbiAgbmFtZTogJ2xpc3QnLFxuICB0b2tlbml6ZTogdG9rZW5pemVMaXN0U3RhcnRcbn07XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlQ29uc3RydWN0ID0ge1xuICBwYXJ0aWFsOiB0cnVlLFxuICB0b2tlbml6ZTogdG9rZW5pemVMaXN0SXRlbVByZWZpeFdoaXRlc3BhY2Vcbn07XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgaW5kZW50Q29uc3RydWN0ID0ge1xuICBwYXJ0aWFsOiB0cnVlLFxuICB0b2tlbml6ZTogdG9rZW5pemVJbmRlbnRcbn07XG5cbi8vIFRvIGRvOiBgbWFya2Rvd24tcnNgIHBhcnNlcyBsaXN0IGl0ZW1zIG9uIHRoZWlyIG93biBhbmQgbGF0ZXIgc3RpdGNoZXMgdGhlbVxuLy8gdG9nZXRoZXIuXG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGlzdFN0YXJ0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXTtcbiAgbGV0IGluaXRpYWxTaXplID0gdGFpbCAmJiB0YWlsWzFdLnR5cGUgPT09IFwibGluZVByZWZpeFwiID8gdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggOiAwO1xuICBsZXQgc2l6ZSA9IDA7XG4gIHJldHVybiBzdGFydDtcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgY29uc3Qga2luZCA9IHNlbGYuY29udGFpbmVyU3RhdGUudHlwZSB8fCAoY29kZSA9PT0gNDIgfHwgY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUgPyBcImxpc3RVbm9yZGVyZWRcIiA6IFwibGlzdE9yZGVyZWRcIik7XG4gICAgaWYgKGtpbmQgPT09IFwibGlzdFVub3JkZXJlZFwiID8gIXNlbGYuY29udGFpbmVyU3RhdGUubWFya2VyIHx8IGNvZGUgPT09IHNlbGYuY29udGFpbmVyU3RhdGUubWFya2VyIDogYXNjaWlEaWdpdChjb2RlKSkge1xuICAgICAgaWYgKCFzZWxmLmNvbnRhaW5lclN0YXRlLnR5cGUpIHtcbiAgICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS50eXBlID0ga2luZDtcbiAgICAgICAgZWZmZWN0cy5lbnRlcihraW5kLCB7XG4gICAgICAgICAgX2NvbnRhaW5lcjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChraW5kID09PSBcImxpc3RVbm9yZGVyZWRcIikge1xuICAgICAgICBlZmZlY3RzLmVudGVyKFwibGlzdEl0ZW1QcmVmaXhcIik7XG4gICAgICAgIHJldHVybiBjb2RlID09PSA0MiB8fCBjb2RlID09PSA0NSA/IGVmZmVjdHMuY2hlY2sodGhlbWF0aWNCcmVhaywgbm9rLCBhdE1hcmtlcikoY29kZSkgOiBhdE1hcmtlcihjb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2VsZi5pbnRlcnJ1cHQgfHwgY29kZSA9PT0gNDkpIHtcbiAgICAgICAgZWZmZWN0cy5lbnRlcihcImxpc3RJdGVtUHJlZml4XCIpO1xuICAgICAgICBlZmZlY3RzLmVudGVyKFwibGlzdEl0ZW1WYWx1ZVwiKTtcbiAgICAgICAgcmV0dXJuIGluc2lkZShjb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGluc2lkZShjb2RlKSB7XG4gICAgaWYgKGFzY2lpRGlnaXQoY29kZSkgJiYgKytzaXplIDwgMTApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBpbnNpZGU7XG4gICAgfVxuICAgIGlmICgoIXNlbGYuaW50ZXJydXB0IHx8IHNpemUgPCAyKSAmJiAoc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgPyBjb2RlID09PSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciA6IGNvZGUgPT09IDQxIHx8IGNvZGUgPT09IDQ2KSkge1xuICAgICAgZWZmZWN0cy5leGl0KFwibGlzdEl0ZW1WYWx1ZVwiKTtcbiAgICAgIHJldHVybiBhdE1hcmtlcihjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqKi9cbiAgZnVuY3Rpb24gYXRNYXJrZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoXCJsaXN0SXRlbU1hcmtlclwiKTtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgZWZmZWN0cy5leGl0KFwibGlzdEl0ZW1NYXJrZXJcIik7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgPSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciB8fCBjb2RlO1xuICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKGJsYW5rTGluZSxcbiAgICAvLyBDYW5cdTIwMTl0IGJlIGVtcHR5IHdoZW4gaW50ZXJydXB0aW5nLlxuICAgIHNlbGYuaW50ZXJydXB0ID8gbm9rIDogb25CbGFuaywgZWZmZWN0cy5hdHRlbXB0KGxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZUNvbnN0cnVjdCwgZW5kT2ZQcmVmaXgsIG90aGVyUHJlZml4KSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvbkJsYW5rKGNvZGUpIHtcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmUgPSB0cnVlO1xuICAgIGluaXRpYWxTaXplKys7XG4gICAgcmV0dXJuIGVuZE9mUHJlZml4KGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gb3RoZXJQcmVmaXgoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKFwibGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlXCIpO1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZWZmZWN0cy5leGl0KFwibGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlXCIpO1xuICAgICAgcmV0dXJuIGVuZE9mUHJlZml4O1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZW5kT2ZQcmVmaXgoY29kZSkge1xuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZSA9IGluaXRpYWxTaXplICsgc2VsZi5zbGljZVNlcmlhbGl6ZShlZmZlY3RzLmV4aXQoXCJsaXN0SXRlbVByZWZpeFwiKSwgdHJ1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBvayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUxpc3RDb250aW51YXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkO1xuICByZXR1cm4gZWZmZWN0cy5jaGVjayhibGFua0xpbmUsIG9uQmxhbmssIG5vdEJsYW5rKTtcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvbkJsYW5rKGNvZGUpIHtcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzID0gc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyB8fCBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmU7XG5cbiAgICAvLyBXZSBoYXZlIGEgYmxhbmsgbGluZS5cbiAgICAvLyBTdGlsbCwgdHJ5IHRvIGNvbnN1bWUgYXQgbW9zdCB0aGUgaXRlbXMgc2l6ZS5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIG9rLCBcImxpc3RJdGVtSW5kZW50XCIsIHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZSArIDEpKGNvZGUpO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gbm90QmxhbmsoY29kZSkge1xuICAgIGlmIChzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzIHx8ICFtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzID0gdW5kZWZpbmVkO1xuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG5vdEluQ3VycmVudEl0ZW0oY29kZSk7XG4gICAgfVxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgPSB1bmRlZmluZWQ7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoaW5kZW50Q29uc3RydWN0LCBvaywgbm90SW5DdXJyZW50SXRlbSkoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBub3RJbkN1cnJlbnRJdGVtKGNvZGUpIHtcbiAgICAvLyBXaGlsZSB3ZSBkbyBjb250aW51ZSwgd2Ugc2lnbmFsIHRoYXQgdGhlIGZsb3cgc2hvdWxkIGJlIGNsb3NlZC5cbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLl9jbG9zZUZsb3cgPSB0cnVlO1xuICAgIC8vIEFzIHdlXHUyMDE5cmUgY2xvc2luZyBmbG93LCB3ZVx1MjAxOXJlIG5vIGxvbmdlciBpbnRlcnJ1cHRpbmcuXG4gICAgc2VsZi5pbnRlcnJ1cHQgPSB1bmRlZmluZWQ7XG4gICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cblxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgZWZmZWN0cy5hdHRlbXB0KGxpc3QsIG9rLCBub2spLCBcImxpbmVQcmVmaXhcIiwgc2VsZi5wYXJzZXIuY29uc3RydWN0cy5kaXNhYmxlLm51bGwuaW5jbHVkZXMoJ2NvZGVJbmRlbnRlZCcpID8gdW5kZWZpbmVkIDogNCkoY29kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVJbmRlbnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlclByZWZpeCwgXCJsaXN0SXRlbUluZGVudFwiLCBzZWxmLmNvbnRhaW5lclN0YXRlLnNpemUgKyAxKTtcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gXCJsaXN0SXRlbUluZGVudFwiICYmIHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoID09PSBzZWxmLmNvbnRhaW5lclN0YXRlLnNpemUgPyBvayhjb2RlKSA6IG5vayhjb2RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiAgIENvbnRleHQuXG4gKiBAdHlwZSB7RXhpdGVyfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUxpc3RFbmQoZWZmZWN0cykge1xuICBlZmZlY3RzLmV4aXQodGhpcy5jb250YWluZXJTdGF0ZS50eXBlKTtcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogICBDb250ZXh0LlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVMaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcblxuICAvLyBBbHdheXMgcG9wdWxhdGVkIGJ5IGRlZmF1bHRzLlxuXG4gIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXJQcmVmaXgsIFwibGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlXCIsIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKSA/IHVuZGVmaW5lZCA6IDQgKyAxKTtcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiAhbWFya2Rvd25TcGFjZShjb2RlKSAmJiB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gXCJsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2VcIiA/IG9rKGNvZGUpIDogbm9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIENvbnN0cnVjdCxcbiAqICAgUmVzb2x2ZXIsXG4gKiAgIFN0YXRlLFxuICogICBUb2tlbml6ZUNvbnRleHQsXG4gKiAgIFRva2VuaXplclxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBmYWN0b3J5U3BhY2UgfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSc7XG5pbXBvcnQgeyBtYXJrZG93bkxpbmVFbmRpbmcsIG1hcmtkb3duU3BhY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInO1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3Qgc2V0ZXh0VW5kZXJsaW5lID0ge1xuICBuYW1lOiAnc2V0ZXh0VW5kZXJsaW5lJyxcbiAgcmVzb2x2ZVRvOiByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUsXG4gIHRva2VuaXplOiB0b2tlbml6ZVNldGV4dFVuZGVybGluZVxufTtcblxuLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbmZ1bmN0aW9uIHJlc29sdmVUb1NldGV4dFVuZGVybGluZShldmVudHMsIGNvbnRleHQpIHtcbiAgLy8gVG8gZG86IHJlc29sdmUgbGlrZSBgbWFya2Rvd24tcnNgLlxuICBsZXQgaW5kZXggPSBldmVudHMubGVuZ3RoO1xuICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGNvbnRlbnQ7XG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgdGV4dDtcbiAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gIGxldCBkZWZpbml0aW9uO1xuXG4gIC8vIEZpbmQgdGhlIG9wZW5pbmcgb2YgdGhlIGNvbnRlbnQuXG4gIC8vIEl0XHUyMDE5bGwgYWx3YXlzIGV4aXN0OiB3ZSBkb25cdTIwMTl0IHRva2VuaXplIGlmIGl0IGlzblx1MjAxOXQgdGhlcmUuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicpIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwiY29udGVudFwiKSB7XG4gICAgICAgIGNvbnRlbnQgPSBpbmRleDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSBcInBhcmFncmFwaFwiKSB7XG4gICAgICAgIHRleHQgPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRXhpdFxuICAgIGVsc2Uge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gXCJjb250ZW50XCIpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZW50IGVuZCAoaWYgbmVlZGVkIHdlXHUyMDE5bGwgYWRkIGl0IGxhdGVyKVxuICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmaW5pdGlvbiAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwiZGVmaW5pdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgaGVhZGluZyA9IHtcbiAgICB0eXBlOiBcInNldGV4dEhlYWRpbmdcIixcbiAgICBzdGFydDoge1xuICAgICAgLi4uZXZlbnRzW3RleHRdWzFdLnN0YXJ0XG4gICAgfSxcbiAgICBlbmQ6IHtcbiAgICAgIC4uLmV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV1bMV0uZW5kXG4gICAgfVxuICB9O1xuXG4gIC8vIENoYW5nZSB0aGUgcGFyYWdyYXBoIHRvIHNldGV4dCBoZWFkaW5nIHRleHQuXG4gIGV2ZW50c1t0ZXh0XVsxXS50eXBlID0gXCJzZXRleHRIZWFkaW5nVGV4dFwiO1xuXG4gIC8vIElmIHdlIGhhdmUgZGVmaW5pdGlvbnMgaW4gdGhlIGNvbnRlbnQsIHdlXHUyMDE5bGwga2VlcCBvbiBoYXZpbmcgY29udGVudCxcbiAgLy8gYnV0IHdlIG5lZWQgbW92ZSBpdC5cbiAgaWYgKGRlZmluaXRpb24pIHtcbiAgICBldmVudHMuc3BsaWNlKHRleHQsIDAsIFsnZW50ZXInLCBoZWFkaW5nLCBjb250ZXh0XSk7XG4gICAgZXZlbnRzLnNwbGljZShkZWZpbml0aW9uICsgMSwgMCwgWydleGl0JywgZXZlbnRzW2NvbnRlbnRdWzFdLCBjb250ZXh0XSk7XG4gICAgZXZlbnRzW2NvbnRlbnRdWzFdLmVuZCA9IHtcbiAgICAgIC4uLmV2ZW50c1tkZWZpbml0aW9uXVsxXS5lbmRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tjb250ZW50XVsxXSA9IGhlYWRpbmc7XG4gIH1cblxuICAvLyBBZGQgdGhlIGhlYWRpbmcgZXhpdCBhdCB0aGUgZW5kLlxuICBldmVudHMucHVzaChbJ2V4aXQnLCBoZWFkaW5nLCBjb250ZXh0XSk7XG4gIHJldHVybiBldmVudHM7XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplU2V0ZXh0VW5kZXJsaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXI7XG4gIHJldHVybiBzdGFydDtcblxuICAvKipcbiAgICogQXQgc3RhcnQgb2YgaGVhZGluZyAoc2V0ZXh0KSB1bmRlcmxpbmUuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqICAgfCBhYVxuICAgKiA+IHwgPT1cbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBsZXQgaW5kZXggPSBzZWxmLmV2ZW50cy5sZW5ndGg7XG4gICAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBwYXJhZ3JhcGg7XG4gICAgLy8gRmluZCBhbiBvcGVuaW5nLlxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAvLyBTa2lwIGVudGVyL2V4aXQgb2YgbGluZSBlbmRpbmcsIGxpbmUgcHJlZml4LCBhbmQgY29udGVudC5cbiAgICAgIC8vIFdlIGNhbiBub3cgZWl0aGVyIGhhdmUgYSBkZWZpbml0aW9uIG9yIGEgcGFyYWdyYXBoLlxuICAgICAgaWYgKHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSBcImxpbmVFbmRpbmdcIiAmJiBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gXCJsaW5lUHJlZml4XCIgJiYgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IFwiY29udGVudFwiKSB7XG4gICAgICAgIHBhcmFncmFwaCA9IHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSBcInBhcmFncmFwaFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUbyBkbzogaGFuZGxlIGxhenkvcGllcmNlIGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICAvLyBUbyBkbzogcGFyc2UgaW5kZW50IGxpa2UgYG1hcmtkb3duLXJzYC5cbiAgICBpZiAoIXNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSAmJiAoc2VsZi5pbnRlcnJ1cHQgfHwgcGFyYWdyYXBoKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcihcInNldGV4dEhlYWRpbmdMaW5lXCIpO1xuICAgICAgbWFya2VyID0gY29kZTtcbiAgICAgIHJldHVybiBiZWZvcmUoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2soY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQWZ0ZXIgb3B0aW9uYWwgd2hpdGVzcGFjZSwgYXQgYC1gIG9yIGA9YC5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogICB8IGFhXG4gICAqID4gfCA9PVxuICAgKiAgICAgXlxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKi9cbiAgZnVuY3Rpb24gYmVmb3JlKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKFwic2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZVwiKTtcbiAgICByZXR1cm4gaW5zaWRlKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHNlcXVlbmNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgYWFcbiAgICogPiB8ID09XG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybiBpbnNpZGU7XG4gICAgfVxuICAgIGVmZmVjdHMuZXhpdChcInNldGV4dEhlYWRpbmdMaW5lU2VxdWVuY2VcIik7XG4gICAgcmV0dXJuIG1hcmtkb3duU3BhY2UoY29kZSkgPyBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsIFwibGluZVN1ZmZpeFwiKShjb2RlKSA6IGFmdGVyKGNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHNlcXVlbmNlLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiAgIHwgYWFcbiAgICogPiB8ID09XG4gICAqICAgICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdChcInNldGV4dEhlYWRpbmdMaW5lXCIpO1xuICAgICAgcmV0dXJuIG9rKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9rKGNvZGUpO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIEluaXRpYWxDb25zdHJ1Y3QsXG4gKiAgIEluaXRpYWxpemVyLFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0XG4gKiB9IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGJsYW5rTGluZSwgY29udGVudCB9IGZyb20gJ21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsnO1xuaW1wb3J0IHsgZmFjdG9yeVNwYWNlIH0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnO1xuaW1wb3J0IHsgbWFya2Rvd25MaW5lRW5kaW5nIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJztcbi8qKiBAdHlwZSB7SW5pdGlhbENvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBmbG93ID0ge1xuICB0b2tlbml6ZTogaW5pdGlhbGl6ZUZsb3dcbn07XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgU2VsZi5cbiAqIEB0eXBlIHtJbml0aWFsaXplcn1cbiAqICAgSW5pdGlhbGl6ZXIuXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVGbG93KGVmZmVjdHMpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IGluaXRpYWwgPSBlZmZlY3RzLmF0dGVtcHQoXG4gIC8vIFRyeSB0byBwYXJzZSBhIGJsYW5rIGxpbmUuXG4gIGJsYW5rTGluZSwgYXRCbGFua0VuZGluZyxcbiAgLy8gVHJ5IHRvIHBhcnNlIGluaXRpYWwgZmxvdyAoZXNzZW50aWFsbHksIG9ubHkgY29kZSkuXG4gIGVmZmVjdHMuYXR0ZW1wdCh0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3dJbml0aWFsLCBhZnRlckNvbnN0cnVjdCwgZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGVmZmVjdHMuYXR0ZW1wdCh0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3csIGFmdGVyQ29uc3RydWN0LCBlZmZlY3RzLmF0dGVtcHQoY29udGVudCwgYWZ0ZXJDb25zdHJ1Y3QpKSwgXCJsaW5lUHJlZml4XCIpKSk7XG4gIHJldHVybiBpbml0aWFsO1xuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGF0QmxhbmtFbmRpbmcoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoXCJsaW5lRW5kaW5nQmxhbmtcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdCbGFua1wiKTtcbiAgICBzZWxmLmN1cnJlbnRDb25zdHJ1Y3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlckNvbnN0cnVjdChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWZmZWN0cy5lbnRlcihcImxpbmVFbmRpbmdcIik7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgIGVmZmVjdHMuZXhpdChcImxpbmVFbmRpbmdcIik7XG4gICAgc2VsZi5jdXJyZW50Q29uc3RydWN0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBpbml0aWFsO1xuICB9XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIENvZGUsXG4gKiAgIEluaXRpYWxDb25zdHJ1Y3QsXG4gKiAgIEluaXRpYWxpemVyLFxuICogICBSZXNvbHZlcixcbiAqICAgU3RhdGUsXG4gKiAgIFRva2VuaXplQ29udGV4dFxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZXIgPSB7XG4gIHJlc29sdmVBbGw6IGNyZWF0ZVJlc29sdmVyKClcbn07XG5leHBvcnQgY29uc3Qgc3RyaW5nID0gaW5pdGlhbGl6ZUZhY3RvcnkoJ3N0cmluZycpO1xuZXhwb3J0IGNvbnN0IHRleHQgPSBpbml0aWFsaXplRmFjdG9yeSgndGV4dCcpO1xuXG4vKipcbiAqIEBwYXJhbSB7J3N0cmluZycgfCAndGV4dCd9IGZpZWxkXG4gKiAgIEZpZWxkLlxuICogQHJldHVybnMge0luaXRpYWxDb25zdHJ1Y3R9XG4gKiAgIENvbnN0cnVjdC5cbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUZhY3RvcnkoZmllbGQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlQWxsOiBjcmVhdGVSZXNvbHZlcihmaWVsZCA9PT0gJ3RleHQnID8gcmVzb2x2ZUFsbExpbmVTdWZmaXhlcyA6IHVuZGVmaW5lZCksXG4gICAgdG9rZW5pemU6IGluaXRpYWxpemVUZXh0XG4gIH07XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqICAgQ29udGV4dC5cbiAgICogQHR5cGUge0luaXRpYWxpemVyfVxuICAgKi9cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVRleHQoZWZmZWN0cykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGNvbnN0cnVjdHMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzW2ZpZWxkXTtcbiAgICBjb25zdCB0ZXh0ID0gZWZmZWN0cy5hdHRlbXB0KGNvbnN0cnVjdHMsIHN0YXJ0LCBub3RUZXh0KTtcbiAgICByZXR1cm4gc3RhcnQ7XG5cbiAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgIHJldHVybiBhdEJyZWFrKGNvZGUpID8gdGV4dChjb2RlKSA6IG5vdFRleHQoY29kZSk7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICBmdW5jdGlvbiBub3RUZXh0KGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWZmZWN0cy5lbnRlcihcImRhdGFcIik7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgICAgaWYgKGF0QnJlYWsoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KFwiZGF0YVwiKTtcbiAgICAgICAgcmV0dXJuIHRleHQoY29kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIERhdGEuXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICAgKiAgIENvZGUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogICBXaGV0aGVyIHRoZSBjb2RlIGlzIGEgYnJlYWsuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3QgPSBjb25zdHJ1Y3RzW2NvZGVdO1xuICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICBpZiAobGlzdCkge1xuICAgICAgICAvLyBBbHdheXMgcG9wdWxhdGVkIGJ5IGRlZmF1bHRzLlxuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpbmRleF07XG4gICAgICAgICAgaWYgKCFpdGVtLnByZXZpb3VzIHx8IGl0ZW0ucHJldmlvdXMuY2FsbChzZWxmLCBzZWxmLnByZXZpb3VzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZXNvbHZlciB8IHVuZGVmaW5lZH0gW2V4dHJhUmVzb2x2ZXJdXG4gKiAgIFJlc29sdmVyLlxuICogQHJldHVybnMge1Jlc29sdmVyfVxuICogICBSZXNvbHZlci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVzb2x2ZXIoZXh0cmFSZXNvbHZlcikge1xuICByZXR1cm4gcmVzb2x2ZUFsbFRleHQ7XG5cbiAgLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbiAgZnVuY3Rpb24gcmVzb2x2ZUFsbFRleHQoZXZlbnRzLCBjb250ZXh0KSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgLyoqIEB0eXBlIHtudW1iZXIgfCB1bmRlZmluZWR9ICovXG4gICAgbGV0IGVudGVyO1xuXG4gICAgLy8gQSByYXRoZXIgYm9yaW5nIGNvbXB1dGF0aW9uICh0byBtZXJnZSBhZGphY2VudCBgZGF0YWAgZXZlbnRzKSB3aGljaFxuICAgIC8vIGltcHJvdmVzIG1tIHBlcmZvcm1hbmNlIGJ5IDI5JS5cbiAgICB3aGlsZSAoKytpbmRleCA8PSBldmVudHMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZXZlbnRzW2luZGV4XSAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICAgICAgZW50ZXIgPSBpbmRleDtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFldmVudHNbaW5kZXhdIHx8IGV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gXCJkYXRhXCIpIHtcbiAgICAgICAgLy8gRG9uXHUyMDE5dCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBvbmUgZGF0YSB0b2tlbi5cbiAgICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgICBldmVudHNbZW50ZXJdWzFdLmVuZCA9IGV2ZW50c1tpbmRleCAtIDFdWzFdLmVuZDtcbiAgICAgICAgICBldmVudHMuc3BsaWNlKGVudGVyICsgMiwgaW5kZXggLSBlbnRlciAtIDIpO1xuICAgICAgICAgIGluZGV4ID0gZW50ZXIgKyAyO1xuICAgICAgICB9XG4gICAgICAgIGVudGVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXh0cmFSZXNvbHZlciA/IGV4dHJhUmVzb2x2ZXIoZXZlbnRzLCBjb250ZXh0KSA6IGV2ZW50cztcbiAgfVxufVxuXG4vKipcbiAqIEEgcmF0aGVyIHVnbHkgc2V0IG9mIGluc3RydWN0aW9ucyB3aGljaCBhZ2FpbiBsb29rcyBhdCBjaHVua3MgaW4gdGhlIGlucHV0XG4gKiBzdHJlYW0uXG4gKiBUaGUgcmVhc29uIHRvIGRvIHRoaXMgaGVyZSBpcyB0aGF0IGl0IGlzICptdWNoKiBmYXN0ZXIgdG8gcGFyc2UgaW4gcmV2ZXJzZS5cbiAqIEFuZCB0aGF0IHdlIGNhblx1MjAxOXQgaG9vayBpbnRvIGBudWxsYCB0byBzcGxpdCB0aGUgbGluZSBzdWZmaXggYmVmb3JlIGFuIEVPRi5cbiAqIFRvIGRvOiBmaWd1cmUgb3V0IGlmIHdlIGNhbiBtYWtlIHRoaXMgaW50byBhIGNsZWFuIHV0aWxpdHksIG9yIGV2ZW4gaW4gY29yZS5cbiAqIEFzIGl0IHdpbGwgYmUgdXNlZnVsIGZvciBHRk1zIGxpdGVyYWwgYXV0b2xpbmsgZXh0ZW5zaW9uIChhbmQgbWF5YmUgZXZlblxuICogdGFibGVzPylcbiAqXG4gKiBAdHlwZSB7UmVzb2x2ZXJ9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBbGxMaW5lU3VmZml4ZXMoZXZlbnRzLCBjb250ZXh0KSB7XG4gIGxldCBldmVudEluZGV4ID0gMDsgLy8gU2tpcCBmaXJzdC5cblxuICB3aGlsZSAoKytldmVudEluZGV4IDw9IGV2ZW50cy5sZW5ndGgpIHtcbiAgICBpZiAoKGV2ZW50SW5kZXggPT09IGV2ZW50cy5sZW5ndGggfHwgZXZlbnRzW2V2ZW50SW5kZXhdWzFdLnR5cGUgPT09IFwibGluZUVuZGluZ1wiKSAmJiBldmVudHNbZXZlbnRJbmRleCAtIDFdWzFdLnR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICBjb25zdCBkYXRhID0gZXZlbnRzW2V2ZW50SW5kZXggLSAxXVsxXTtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGNvbnRleHQuc2xpY2VTdHJlYW0oZGF0YSk7XG4gICAgICBsZXQgaW5kZXggPSBjaHVua3MubGVuZ3RoO1xuICAgICAgbGV0IGJ1ZmZlckluZGV4ID0gLTE7XG4gICAgICBsZXQgc2l6ZSA9IDA7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gICAgICBsZXQgdGFicztcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gY2h1bmtzW2luZGV4XTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBidWZmZXJJbmRleCA9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoY2h1bmsuY2hhckNvZGVBdChidWZmZXJJbmRleCAtIDEpID09PSAzMikge1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgICAgYnVmZmVySW5kZXgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJ1ZmZlckluZGV4KSBicmVhaztcbiAgICAgICAgICBidWZmZXJJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIE51bWJlclxuICAgICAgICBlbHNlIGlmIChjaHVuayA9PT0gLTIpIHtcbiAgICAgICAgICB0YWJzID0gdHJ1ZTtcbiAgICAgICAgICBzaXplKys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2h1bmsgPT09IC0xKSB7XG4gICAgICAgICAgLy8gRW1wdHlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXBsYWNlbWVudCBjaGFyYWN0ZXIsIGV4aXQuXG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgICAgdHlwZTogZXZlbnRJbmRleCA9PT0gZXZlbnRzLmxlbmd0aCB8fCB0YWJzIHx8IHNpemUgPCAyID8gXCJsaW5lU3VmZml4XCIgOiBcImhhcmRCcmVha1RyYWlsaW5nXCIsXG4gICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIF9idWZmZXJJbmRleDogaW5kZXggPyBidWZmZXJJbmRleCA6IGRhdGEuc3RhcnQuX2J1ZmZlckluZGV4ICsgYnVmZmVySW5kZXgsXG4gICAgICAgICAgICBfaW5kZXg6IGRhdGEuc3RhcnQuX2luZGV4ICsgaW5kZXgsXG4gICAgICAgICAgICBsaW5lOiBkYXRhLmVuZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBkYXRhLmVuZC5jb2x1bW4gLSBzaXplLFxuICAgICAgICAgICAgb2Zmc2V0OiBkYXRhLmVuZC5vZmZzZXQgLSBzaXplXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgIC4uLmRhdGEuZW5kXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBkYXRhLmVuZCA9IHtcbiAgICAgICAgICAuLi50b2tlbi5zdGFydFxuICAgICAgICB9O1xuICAgICAgICBpZiAoZGF0YS5zdGFydC5vZmZzZXQgPT09IGRhdGEuZW5kLm9mZnNldCkge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgdG9rZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoZXZlbnRJbmRleCwgMCwgWydlbnRlcicsIHRva2VuLCBjb250ZXh0XSwgWydleGl0JywgdG9rZW4sIGNvbnRleHRdKTtcbiAgICAgICAgICBldmVudEluZGV4ICs9IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGV2ZW50SW5kZXgrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV2ZW50cztcbn0iLCAiLyoqXG4gKiBAaW1wb3J0IHtFeHRlbnNpb259IGZyb20gJ21pY3JvbWFyay11dGlsLXR5cGVzJ1xuICovXG5cbmltcG9ydCB7IGF0dGVudGlvbiwgYXV0b2xpbmssIGJsb2NrUXVvdGUsIGNoYXJhY3RlckVzY2FwZSwgY2hhcmFjdGVyUmVmZXJlbmNlLCBjb2RlRmVuY2VkLCBjb2RlSW5kZW50ZWQsIGNvZGVUZXh0LCBkZWZpbml0aW9uLCBoYXJkQnJlYWtFc2NhcGUsIGhlYWRpbmdBdHgsIGh0bWxGbG93LCBodG1sVGV4dCwgbGFiZWxFbmQsIGxhYmVsU3RhcnRJbWFnZSwgbGFiZWxTdGFydExpbmssIGxpbmVFbmRpbmcsIGxpc3QsIHNldGV4dFVuZGVybGluZSwgdGhlbWF0aWNCcmVhayB9IGZyb20gJ21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsnO1xuaW1wb3J0IHsgcmVzb2x2ZXIgYXMgcmVzb2x2ZVRleHQgfSBmcm9tICcuL2luaXRpYWxpemUvdGV4dC5qcyc7XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2RvY3VtZW50J119ICovXG5leHBvcnQgY29uc3QgZG9jdW1lbnQgPSB7XG4gIFs0Ml06IGxpc3QsXG4gIFs0M106IGxpc3QsXG4gIFs0NV06IGxpc3QsXG4gIFs0OF06IGxpc3QsXG4gIFs0OV06IGxpc3QsXG4gIFs1MF06IGxpc3QsXG4gIFs1MV06IGxpc3QsXG4gIFs1Ml06IGxpc3QsXG4gIFs1M106IGxpc3QsXG4gIFs1NF06IGxpc3QsXG4gIFs1NV06IGxpc3QsXG4gIFs1Nl06IGxpc3QsXG4gIFs1N106IGxpc3QsXG4gIFs2Ml06IGJsb2NrUXVvdGVcbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2NvbnRlbnRJbml0aWFsJ119ICovXG5leHBvcnQgY29uc3QgY29udGVudEluaXRpYWwgPSB7XG4gIFs5MV06IGRlZmluaXRpb25cbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2Zsb3dJbml0aWFsJ119ICovXG5leHBvcnQgY29uc3QgZmxvd0luaXRpYWwgPSB7XG4gIFstMl06IGNvZGVJbmRlbnRlZCxcbiAgWy0xXTogY29kZUluZGVudGVkLFxuICBbMzJdOiBjb2RlSW5kZW50ZWRcbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2Zsb3cnXX0gKi9cbmV4cG9ydCBjb25zdCBmbG93ID0ge1xuICBbMzVdOiBoZWFkaW5nQXR4LFxuICBbNDJdOiB0aGVtYXRpY0JyZWFrLFxuICBbNDVdOiBbc2V0ZXh0VW5kZXJsaW5lLCB0aGVtYXRpY0JyZWFrXSxcbiAgWzYwXTogaHRtbEZsb3csXG4gIFs2MV06IHNldGV4dFVuZGVybGluZSxcbiAgWzk1XTogdGhlbWF0aWNCcmVhayxcbiAgWzk2XTogY29kZUZlbmNlZCxcbiAgWzEyNl06IGNvZGVGZW5jZWRcbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ3N0cmluZyddfSAqL1xuZXhwb3J0IGNvbnN0IHN0cmluZyA9IHtcbiAgWzM4XTogY2hhcmFjdGVyUmVmZXJlbmNlLFxuICBbOTJdOiBjaGFyYWN0ZXJFc2NhcGVcbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ3RleHQnXX0gKi9cbmV4cG9ydCBjb25zdCB0ZXh0ID0ge1xuICBbLTVdOiBsaW5lRW5kaW5nLFxuICBbLTRdOiBsaW5lRW5kaW5nLFxuICBbLTNdOiBsaW5lRW5kaW5nLFxuICBbMzNdOiBsYWJlbFN0YXJ0SW1hZ2UsXG4gIFszOF06IGNoYXJhY3RlclJlZmVyZW5jZSxcbiAgWzQyXTogYXR0ZW50aW9uLFxuICBbNjBdOiBbYXV0b2xpbmssIGh0bWxUZXh0XSxcbiAgWzkxXTogbGFiZWxTdGFydExpbmssXG4gIFs5Ml06IFtoYXJkQnJlYWtFc2NhcGUsIGNoYXJhY3RlckVzY2FwZV0sXG4gIFs5M106IGxhYmVsRW5kLFxuICBbOTVdOiBhdHRlbnRpb24sXG4gIFs5Nl06IGNvZGVUZXh0XG59O1xuXG4vKiogQHNhdGlzZmllcyB7RXh0ZW5zaW9uWydpbnNpZGVTcGFuJ119ICovXG5leHBvcnQgY29uc3QgaW5zaWRlU3BhbiA9IHtcbiAgbnVsbDogW2F0dGVudGlvbiwgcmVzb2x2ZVRleHRdXG59O1xuXG4vKiogQHNhdGlzZmllcyB7RXh0ZW5zaW9uWydhdHRlbnRpb25NYXJrZXJzJ119ICovXG5leHBvcnQgY29uc3QgYXR0ZW50aW9uTWFya2VycyA9IHtcbiAgbnVsbDogWzQyLCA5NV1cbn07XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2Rpc2FibGUnXX0gKi9cbmV4cG9ydCBjb25zdCBkaXNhYmxlID0ge1xuICBudWxsOiBbXVxufTsiLCAiLyoqXG4gKiBAaW1wb3J0IHtcbiAqICAgQ2h1bmssXG4gKiAgIENvZGUsXG4gKiAgIENvbnN0cnVjdFJlY29yZCxcbiAqICAgQ29uc3RydWN0LFxuICogICBFZmZlY3RzLFxuICogICBJbml0aWFsQ29uc3RydWN0LFxuICogICBQYXJzZUNvbnRleHQsXG4gKiAgIFBvaW50LFxuICogICBTdGF0ZSxcbiAqICAgVG9rZW5pemVDb250ZXh0LFxuICogICBUb2tlblxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBSZXN0b3JlXG4gKiAgIFJlc3RvcmUgdGhlIHN0YXRlLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqXG4gKiBAdHlwZWRlZiBJbmZvXG4gKiAgIEluZm8uXG4gKiBAcHJvcGVydHkge1Jlc3RvcmV9IHJlc3RvcmVcbiAqICAgUmVzdG9yZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmcm9tXG4gKiAgIEZyb20uXG4gKlxuICogQGNhbGxiYWNrIFJldHVybkhhbmRsZVxuICogICBIYW5kbGUgYSBzdWNjZXNzZnVsIHJ1bi5cbiAqIEBwYXJhbSB7Q29uc3RydWN0fSBjb25zdHJ1Y3RcbiAqICAgQ29uc3RydWN0LlxuICogQHBhcmFtIHtJbmZvfSBpbmZvXG4gKiAgIEluZm8uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5cbmltcG9ydCB7IG1hcmtkb3duTGluZUVuZGluZyB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3Rlcic7XG5pbXBvcnQgeyBwdXNoLCBzcGxpY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaHVua2VkJztcbmltcG9ydCB7IHJlc29sdmVBbGwgfSBmcm9tICdtaWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbCc7XG4vKipcbiAqIENyZWF0ZSBhIHRva2VuaXplci5cbiAqIFRva2VuaXplcnMgZGVhbCB3aXRoIG9uZSB0eXBlIG9mIGRhdGEgKGUuZy4sIGNvbnRhaW5lcnMsIGZsb3csIHRleHQpLlxuICogVGhlIHBhcnNlciBpcyB0aGUgb2JqZWN0IGRlYWxpbmcgd2l0aCBpdCBhbGwuXG4gKiBgaW5pdGlhbGl6ZWAgd29ya3MgbGlrZSBvdGhlciBjb25zdHJ1Y3RzLCBleGNlcHQgdGhhdCBvbmx5IGl0cyBgdG9rZW5pemVgXG4gKiBmdW5jdGlvbiBpcyB1c2VkLCBpbiB3aGljaCBjYXNlIGl0IGRvZXNuXHUyMDE5dCByZWNlaXZlIGFuIGBva2Agb3IgYG5va2AuXG4gKiBgZnJvbWAgY2FuIGJlIGdpdmVuIHRvIHNldCB0aGUgcG9pbnQgYmVmb3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXIsIGFsdGhvdWdoXG4gKiB3aGVuIGZ1cnRoZXIgbGluZXMgYXJlIGluZGVudGVkLCB0aGV5IG11c3QgYmUgc2V0IHdpdGggYGRlZmluZVNraXBgLlxuICpcbiAqIEBwYXJhbSB7UGFyc2VDb250ZXh0fSBwYXJzZXJcbiAqICAgUGFyc2VyLlxuICogQHBhcmFtIHtJbml0aWFsQ29uc3RydWN0fSBpbml0aWFsaXplXG4gKiAgIENvbnN0cnVjdC5cbiAqIEBwYXJhbSB7T21pdDxQb2ludCwgJ19idWZmZXJJbmRleCcgfCAnX2luZGV4Jz4gfCB1bmRlZmluZWR9IFtmcm9tXVxuICogICBQb2ludCAob3B0aW9uYWwpLlxuICogQHJldHVybnMge1Rva2VuaXplQ29udGV4dH1cbiAqICAgQ29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRva2VuaXplcihwYXJzZXIsIGluaXRpYWxpemUsIGZyb20pIHtcbiAgLyoqIEB0eXBlIHtQb2ludH0gKi9cbiAgbGV0IHBvaW50ID0ge1xuICAgIF9idWZmZXJJbmRleDogLTEsXG4gICAgX2luZGV4OiAwLFxuICAgIGxpbmU6IGZyb20gJiYgZnJvbS5saW5lIHx8IDEsXG4gICAgY29sdW1uOiBmcm9tICYmIGZyb20uY29sdW1uIHx8IDEsXG4gICAgb2Zmc2V0OiBmcm9tICYmIGZyb20ub2Zmc2V0IHx8IDBcbiAgfTtcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuICBjb25zdCBjb2x1bW5TdGFydCA9IHt9O1xuICAvKiogQHR5cGUge0FycmF5PENvbnN0cnVjdD59ICovXG4gIGNvbnN0IHJlc29sdmVBbGxDb25zdHJ1Y3RzID0gW107XG4gIC8qKiBAdHlwZSB7QXJyYXk8Q2h1bms+fSAqL1xuICBsZXQgY2h1bmtzID0gW107XG4gIC8qKiBAdHlwZSB7QXJyYXk8VG9rZW4+fSAqL1xuICBsZXQgc3RhY2sgPSBbXTtcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgY29uc3VtZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUb29scyB1c2VkIGZvciB0b2tlbml6aW5nLlxuICAgKlxuICAgKiBAdHlwZSB7RWZmZWN0c31cbiAgICovXG4gIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgYXR0ZW1wdDogY29uc3RydWN0RmFjdG9yeShvbnN1Y2Nlc3NmdWxjb25zdHJ1Y3QpLFxuICAgIGNoZWNrOiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrKSxcbiAgICBjb25zdW1lLFxuICAgIGVudGVyLFxuICAgIGV4aXQsXG4gICAgaW50ZXJydXB0OiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrLCB7XG4gICAgICBpbnRlcnJ1cHQ6IHRydWVcbiAgICB9KVxuICB9O1xuXG4gIC8qKlxuICAgKiBTdGF0ZSBhbmQgdG9vbHMgZm9yIHJlc29sdmluZyBhbmQgc2VyaWFsaXppbmcuXG4gICAqXG4gICAqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqL1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGNvZGU6IG51bGwsXG4gICAgY29udGFpbmVyU3RhdGU6IHt9LFxuICAgIGRlZmluZVNraXAsXG4gICAgZXZlbnRzOiBbXSxcbiAgICBub3csXG4gICAgcGFyc2VyLFxuICAgIHByZXZpb3VzOiBudWxsLFxuICAgIHNsaWNlU2VyaWFsaXplLFxuICAgIHNsaWNlU3RyZWFtLFxuICAgIHdyaXRlXG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0ZSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHR5cGUge1N0YXRlIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgbGV0IHN0YXRlID0gaW5pdGlhbGl6ZS50b2tlbml6ZS5jYWxsKGNvbnRleHQsIGVmZmVjdHMpO1xuXG4gIC8qKlxuICAgKiBUcmFjayB3aGljaCBjaGFyYWN0ZXIgd2UgZXhwZWN0IHRvIGJlIGNvbnN1bWVkLCB0byBjYXRjaCBidWdzLlxuICAgKlxuICAgKiBAdHlwZSB7Q29kZX1cbiAgICovXG4gIGxldCBleHBlY3RlZENvZGU7XG4gIGlmIChpbml0aWFsaXplLnJlc29sdmVBbGwpIHtcbiAgICByZXNvbHZlQWxsQ29uc3RydWN0cy5wdXNoKGluaXRpYWxpemUpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0Wyd3cml0ZSddfSAqL1xuICBmdW5jdGlvbiB3cml0ZShzbGljZSkge1xuICAgIGNodW5rcyA9IHB1c2goY2h1bmtzLCBzbGljZSk7XG4gICAgbWFpbigpO1xuXG4gICAgLy8gRXhpdCBpZiB3ZVx1MjAxOXJlIG5vdCBkb25lLCByZXNvbHZlIG1pZ2h0IGNoYW5nZSBzdHVmZi5cbiAgICBpZiAoY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhZGRSZXN1bHQoaW5pdGlhbGl6ZSwgMCk7XG5cbiAgICAvLyBPdGhlcndpc2UsIHJlc29sdmUsIGFuZCBleGl0LlxuICAgIGNvbnRleHQuZXZlbnRzID0gcmVzb2x2ZUFsbChyZXNvbHZlQWxsQ29uc3RydWN0cywgY29udGV4dC5ldmVudHMsIGNvbnRleHQpO1xuICAgIHJldHVybiBjb250ZXh0LmV2ZW50cztcbiAgfVxuXG4gIC8vXG4gIC8vIFRvb2xzLlxuICAvL1xuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0WydzbGljZVNlcmlhbGl6ZSddfSAqL1xuICBmdW5jdGlvbiBzbGljZVNlcmlhbGl6ZSh0b2tlbiwgZXhwYW5kVGFicykge1xuICAgIHJldHVybiBzZXJpYWxpemVDaHVua3Moc2xpY2VTdHJlYW0odG9rZW4pLCBleHBhbmRUYWJzKTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0WydzbGljZVN0cmVhbSddfSAqL1xuICBmdW5jdGlvbiBzbGljZVN0cmVhbSh0b2tlbikge1xuICAgIHJldHVybiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0Wydub3cnXX0gKi9cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIC8vIFRoaXMgaXMgYSBob3QgcGF0aCwgc28gd2UgY2xvbmUgbWFudWFsbHkgaW5zdGVhZCBvZiBgT2JqZWN0LmFzc2lnbih7fSwgcG9pbnQpYFxuICAgIGNvbnN0IHtcbiAgICAgIF9idWZmZXJJbmRleCxcbiAgICAgIF9pbmRleCxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW4sXG4gICAgICBvZmZzZXRcbiAgICB9ID0gcG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9idWZmZXJJbmRleCxcbiAgICAgIF9pbmRleCxcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW4sXG4gICAgICBvZmZzZXRcbiAgICB9O1xuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ2RlZmluZVNraXAnXX0gKi9cbiAgZnVuY3Rpb24gZGVmaW5lU2tpcCh2YWx1ZSkge1xuICAgIGNvbHVtblN0YXJ0W3ZhbHVlLmxpbmVdID0gdmFsdWUuY29sdW1uO1xuICAgIGFjY291bnRGb3JQb3RlbnRpYWxTa2lwKCk7XG4gIH1cblxuICAvL1xuICAvLyBTdGF0ZSBtYW5hZ2VtZW50LlxuICAvL1xuXG4gIC8qKlxuICAgKiBNYWluIGxvb3AgKG5vdGUgdGhhdCBgX2luZGV4YCBhbmQgYF9idWZmZXJJbmRleGAgaW4gYHBvaW50YCBhcmUgbW9kaWZpZWQgYnlcbiAgICogYGNvbnN1bWVgKS5cbiAgICogSGVyZSBpcyB3aGVyZSB3ZSB3YWxrIHRocm91Z2ggdGhlIGNodW5rcywgd2hpY2ggZWl0aGVyIGluY2x1ZGUgc3RyaW5ncyBvZlxuICAgKiBzZXZlcmFsIGNoYXJhY3RlcnMsIG9yIG51bWVyaWNhbCBjaGFyYWN0ZXIgY29kZXMuXG4gICAqIFRoZSByZWFzb24gdG8gZG8gdGhpcyBpbiBhIGxvb3AgaW5zdGVhZCBvZiBhIGNhbGwgaXMgc28gdGhlIHN0YWNrIGNhblxuICAgKiBkcmFpbi5cbiAgICpcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFpbigpIHtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgY2h1bmtJbmRleDtcbiAgICB3aGlsZSAocG9pbnQuX2luZGV4IDwgY2h1bmtzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbcG9pbnQuX2luZGV4XTtcblxuICAgICAgLy8gSWYgd2VcdTIwMTlyZSBpbiBhIGJ1ZmZlciBjaHVuaywgbG9vcCB0aHJvdWdoIGl0LlxuICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2h1bmtJbmRleCA9IHBvaW50Ll9pbmRleDtcbiAgICAgICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA8IDApIHtcbiAgICAgICAgICBwb2ludC5fYnVmZmVySW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChwb2ludC5faW5kZXggPT09IGNodW5rSW5kZXggJiYgcG9pbnQuX2J1ZmZlckluZGV4IDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgZ28oY2h1bmsuY2hhckNvZGVBdChwb2ludC5fYnVmZmVySW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ28oY2h1bmspO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWFsIHdpdGggb25lIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICAgKiAgIENvZGUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGdvKGNvZGUpIHtcbiAgICBjb25zdW1lZCA9IHVuZGVmaW5lZDtcbiAgICBleHBlY3RlZENvZGUgPSBjb2RlO1xuICAgIHN0YXRlID0gc3RhdGUoY29kZSk7XG4gIH1cblxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2NvbnN1bWUnXX0gKi9cbiAgZnVuY3Rpb24gY29uc3VtZShjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcG9pbnQubGluZSsrO1xuICAgICAgcG9pbnQuY29sdW1uID0gMTtcbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2RlID09PSAtMyA/IDIgOiAxO1xuICAgICAgYWNjb3VudEZvclBvdGVudGlhbFNraXAoKTtcbiAgICB9IGVsc2UgaWYgKGNvZGUgIT09IC0xKSB7XG4gICAgICBwb2ludC5jb2x1bW4rKztcbiAgICAgIHBvaW50Lm9mZnNldCsrO1xuICAgIH1cblxuICAgIC8vIE5vdCBpbiBhIHN0cmluZyBjaHVuay5cbiAgICBpZiAocG9pbnQuX2J1ZmZlckluZGV4IDwgMCkge1xuICAgICAgcG9pbnQuX2luZGV4Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50Ll9idWZmZXJJbmRleCsrO1xuXG4gICAgICAvLyBBdCBlbmQgb2Ygc3RyaW5nIGNodW5rLlxuICAgICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA9PT1cbiAgICAgIC8vIFBvaW50cyB3LyBub24tbmVnYXRpdmUgYF9idWZmZXJJbmRleGAgcmVmZXJlbmNlXG4gICAgICAvLyBzdHJpbmdzLlxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICBjaHVua3NbcG9pbnQuX2luZGV4XS5sZW5ndGgpIHtcbiAgICAgICAgcG9pbnQuX2J1ZmZlckluZGV4ID0gLTE7XG4gICAgICAgIHBvaW50Ll9pbmRleCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEV4cG9zZSB0aGUgcHJldmlvdXMgY2hhcmFjdGVyLlxuICAgIGNvbnRleHQucHJldmlvdXMgPSBjb2RlO1xuXG4gICAgLy8gTWFyayBhcyBjb25zdW1lZC5cbiAgICBjb25zdW1lZCA9IHRydWU7XG4gIH1cblxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2VudGVyJ119ICovXG4gIGZ1bmN0aW9uIGVudGVyKHR5cGUsIGZpZWxkcykge1xuICAgIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaCBpbnN0ZWFkIG9mIGFzc2lnbiByZXF1aXJlZCBmaWVsZHMgdG8gaGVscCBHQy5cbiAgICBjb25zdCB0b2tlbiA9IGZpZWxkcyB8fCB7fTtcbiAgICB0b2tlbi50eXBlID0gdHlwZTtcbiAgICB0b2tlbi5zdGFydCA9IG5vdygpO1xuICAgIGNvbnRleHQuZXZlbnRzLnB1c2goWydlbnRlcicsIHRva2VuLCBjb250ZXh0XSk7XG4gICAgc3RhY2sucHVzaCh0b2tlbik7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtFZmZlY3RzWydleGl0J119ICovXG4gIGZ1bmN0aW9uIGV4aXQodHlwZSkge1xuICAgIGNvbnN0IHRva2VuID0gc3RhY2sucG9wKCk7XG4gICAgdG9rZW4uZW5kID0gbm93KCk7XG4gICAgY29udGV4dC5ldmVudHMucHVzaChbJ2V4aXQnLCB0b2tlbiwgY29udGV4dF0pO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgcmVzdWx0cy5cbiAgICpcbiAgICogQHR5cGUge1JldHVybkhhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uc3VjY2Vzc2Z1bGNvbnN0cnVjdChjb25zdHJ1Y3QsIGluZm8pIHtcbiAgICBhZGRSZXN1bHQoY29uc3RydWN0LCBpbmZvLmZyb20pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2NhcmQgcmVzdWx0cy5cbiAgICpcbiAgICogQHR5cGUge1JldHVybkhhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uc3VjY2Vzc2Z1bGNoZWNrKF8sIGluZm8pIHtcbiAgICBpbmZvLnJlc3RvcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWN0b3J5IHRvIGF0dGVtcHQvY2hlY2svaW50ZXJydXB0LlxuICAgKlxuICAgKiBAcGFyYW0ge1JldHVybkhhbmRsZX0gb25yZXR1cm5cbiAgICogICBDYWxsYmFjay5cbiAgICogQHBhcmFtIHt7aW50ZXJydXB0PzogYm9vbGVhbiB8IHVuZGVmaW5lZH0gfCB1bmRlZmluZWR9IFtmaWVsZHNdXG4gICAqICAgRmllbGRzLlxuICAgKi9cbiAgZnVuY3Rpb24gY29uc3RydWN0RmFjdG9yeShvbnJldHVybiwgZmllbGRzKSB7XG4gICAgcmV0dXJuIGhvb2s7XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgZWl0aGVyIGFuIG9iamVjdCBtYXBwaW5nIGNvZGVzIHRvIGNvbnN0cnVjdHMsIGEgbGlzdCBvZlxuICAgICAqIGNvbnN0cnVjdHMsIG9yIGEgc2luZ2xlIGNvbnN0cnVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXk8Q29uc3RydWN0PiB8IENvbnN0cnVjdFJlY29yZCB8IENvbnN0cnVjdH0gY29uc3RydWN0c1xuICAgICAqICAgQ29uc3RydWN0cy5cbiAgICAgKiBAcGFyYW0ge1N0YXRlfSByZXR1cm5TdGF0ZVxuICAgICAqICAgU3RhdGUuXG4gICAgICogQHBhcmFtIHtTdGF0ZSB8IHVuZGVmaW5lZH0gW2JvZ3VzU3RhdGVdXG4gICAgICogICBTdGF0ZS5cbiAgICAgKiBAcmV0dXJucyB7U3RhdGV9XG4gICAgICogICBTdGF0ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBob29rKGNvbnN0cnVjdHMsIHJldHVyblN0YXRlLCBib2d1c1N0YXRlKSB7XG4gICAgICAvKiogQHR5cGUge1JlYWRvbmx5QXJyYXk8Q29uc3RydWN0Pn0gKi9cbiAgICAgIGxldCBsaXN0T2ZDb25zdHJ1Y3RzO1xuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICBsZXQgY29uc3RydWN0SW5kZXg7XG4gICAgICAvKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbiAgICAgIGxldCBjdXJyZW50Q29uc3RydWN0O1xuICAgICAgLyoqIEB0eXBlIHtJbmZvfSAqL1xuICAgICAgbGV0IGluZm87XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjb25zdHJ1Y3RzKSA/IC8qIGM4IGlnbm9yZSBuZXh0IDEgKi9cbiAgICAgIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMoY29uc3RydWN0cykgOiAndG9rZW5pemUnIGluIGNvbnN0cnVjdHMgP1xuICAgICAgLy8gTG9va3MgbGlrZSBhIGNvbnN0cnVjdC5cbiAgICAgIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMoWygvKiogQHR5cGUge0NvbnN0cnVjdH0gKi9jb25zdHJ1Y3RzKV0pIDogaGFuZGxlTWFwT2ZDb25zdHJ1Y3RzKGNvbnN0cnVjdHMpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIGxpc3Qgb2YgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Q29uc3RydWN0UmVjb3JkfSBtYXBcbiAgICAgICAqICAgQ29uc3RydWN0cy5cbiAgICAgICAqIEByZXR1cm5zIHtTdGF0ZX1cbiAgICAgICAqICAgU3RhdGUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hcE9mQ29uc3RydWN0cyhtYXApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0O1xuXG4gICAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgICAgICBjb25zdCBsZWZ0ID0gY29kZSAhPT0gbnVsbCAmJiBtYXBbY29kZV07XG4gICAgICAgICAgY29uc3QgYWxsID0gY29kZSAhPT0gbnVsbCAmJiBtYXAubnVsbDtcbiAgICAgICAgICBjb25zdCBsaXN0ID0gW1xuICAgICAgICAgIC8vIFRvIGRvOiBhZGQgbW9yZSBleHRlbnNpb24gdGVzdHMuXG4gICAgICAgICAgLyogYzggaWdub3JlIG5leHQgMiAqL1xuICAgICAgICAgIC4uLihBcnJheS5pc0FycmF5KGxlZnQpID8gbGVmdCA6IGxlZnQgPyBbbGVmdF0gOiBbXSksIC4uLihBcnJheS5pc0FycmF5KGFsbCkgPyBhbGwgOiBhbGwgPyBbYWxsXSA6IFtdKV07XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMobGlzdCkoY29kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgYSBsaXN0IG9mIGNvbnN0cnVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8Q29uc3RydWN0Pn0gbGlzdFxuICAgICAgICogICBDb25zdHJ1Y3RzLlxuICAgICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAgICogICBTdGF0ZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhsaXN0KSB7XG4gICAgICAgIGxpc3RPZkNvbnN0cnVjdHMgPSBsaXN0O1xuICAgICAgICBjb25zdHJ1Y3RJbmRleCA9IDA7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBib2d1c1N0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYW5kbGVDb25zdHJ1Y3QobGlzdFtjb25zdHJ1Y3RJbmRleF0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIHNpbmdsZSBjb25zdHJ1Y3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICAgICAgICogICBDb25zdHJ1Y3QuXG4gICAgICAgKiBAcmV0dXJucyB7U3RhdGV9XG4gICAgICAgKiAgIFN0YXRlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBoYW5kbGVDb25zdHJ1Y3QoY29uc3RydWN0KSB7XG4gICAgICAgIHJldHVybiBzdGFydDtcblxuICAgICAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgICAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICAgICAgLy8gVG8gZG86IG5vdCBuZWVkZWQgdG8gc3RvcmUgaWYgdGhlcmUgaXMgbm8gYm9ndXMgc3RhdGUsIHByb2JhYmx5P1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBkb2Vzblx1MjAxOXQgd29yayBiZWNhdXNlIGBpbnNwZWN0YCBpbiBkb2N1bWVudCBkb2VzIGEgY2hlY2tcbiAgICAgICAgICAvLyB3L28gYSBib2d1cywgd2hpY2ggZG9lc25cdTIwMTl0IG1ha2Ugc2Vuc2UuIEJ1dCBpdCBkb2VzIHNlZW0gdG8gaGVscCBwZXJmXG4gICAgICAgICAgLy8gYnkgbm90IHN0b3JpbmcuXG4gICAgICAgICAgaW5mbyA9IHN0b3JlKCk7XG4gICAgICAgICAgY3VycmVudENvbnN0cnVjdCA9IGNvbnN0cnVjdDtcbiAgICAgICAgICBpZiAoIWNvbnN0cnVjdC5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRDb25zdHJ1Y3QgPSBjb25zdHJ1Y3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cblxuICAgICAgICAgIGlmIChjb25zdHJ1Y3QubmFtZSAmJiBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcyhjb25zdHJ1Y3QubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3QudG9rZW5pemUuY2FsbChcbiAgICAgICAgICAvLyBJZiB3ZSBkbyBoYXZlIGZpZWxkcywgY3JlYXRlIGFuIG9iamVjdCB3LyBgY29udGV4dGAgYXMgaXRzXG4gICAgICAgICAgLy8gcHJvdG90eXBlLlxuICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIGEgXHUyMDFDbGl2ZSBiaW5kaW5nXHUyMDFELCB3aGljaCBpcyBuZWVkZWQgZm9yIGBpbnRlcnJ1cHRgLlxuICAgICAgICAgIGZpZWxkcyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShjb250ZXh0KSwgZmllbGRzKSA6IGNvbnRleHQsIGVmZmVjdHMsIG9rLCBub2spKGNvZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgICBmdW5jdGlvbiBvayhjb2RlKSB7XG4gICAgICAgIGNvbnN1bWVkID0gdHJ1ZTtcbiAgICAgICAgb25yZXR1cm4oY3VycmVudENvbnN0cnVjdCwgaW5mbyk7XG4gICAgICAgIHJldHVybiByZXR1cm5TdGF0ZTtcbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICAgIGZ1bmN0aW9uIG5vayhjb2RlKSB7XG4gICAgICAgIGNvbnN1bWVkID0gdHJ1ZTtcbiAgICAgICAgaW5mby5yZXN0b3JlKCk7XG4gICAgICAgIGlmICgrK2NvbnN0cnVjdEluZGV4IDwgbGlzdE9mQ29uc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlQ29uc3RydWN0KGxpc3RPZkNvbnN0cnVjdHNbY29uc3RydWN0SW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm9ndXNTdGF0ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICAgKiAgIENvbnN0cnVjdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21cbiAgICogICBGcm9tLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBhZGRSZXN1bHQoY29uc3RydWN0LCBmcm9tKSB7XG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlQWxsICYmICFyZXNvbHZlQWxsQ29uc3RydWN0cy5pbmNsdWRlcyhjb25zdHJ1Y3QpKSB7XG4gICAgICByZXNvbHZlQWxsQ29uc3RydWN0cy5wdXNoKGNvbnN0cnVjdCk7XG4gICAgfVxuICAgIGlmIChjb25zdHJ1Y3QucmVzb2x2ZSkge1xuICAgICAgc3BsaWNlKGNvbnRleHQuZXZlbnRzLCBmcm9tLCBjb250ZXh0LmV2ZW50cy5sZW5ndGggLSBmcm9tLCBjb25zdHJ1Y3QucmVzb2x2ZShjb250ZXh0LmV2ZW50cy5zbGljZShmcm9tKSwgY29udGV4dCkpO1xuICAgIH1cbiAgICBpZiAoY29uc3RydWN0LnJlc29sdmVUbykge1xuICAgICAgY29udGV4dC5ldmVudHMgPSBjb25zdHJ1Y3QucmVzb2x2ZVRvKGNvbnRleHQuZXZlbnRzLCBjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcmUgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmZvfVxuICAgKiAgIEluZm8uXG4gICAqL1xuICBmdW5jdGlvbiBzdG9yZSgpIHtcbiAgICBjb25zdCBzdGFydFBvaW50ID0gbm93KCk7XG4gICAgY29uc3Qgc3RhcnRQcmV2aW91cyA9IGNvbnRleHQucHJldmlvdXM7XG4gICAgY29uc3Qgc3RhcnRDdXJyZW50Q29uc3RydWN0ID0gY29udGV4dC5jdXJyZW50Q29uc3RydWN0O1xuICAgIGNvbnN0IHN0YXJ0RXZlbnRzSW5kZXggPSBjb250ZXh0LmV2ZW50cy5sZW5ndGg7XG4gICAgY29uc3Qgc3RhcnRTdGFjayA9IEFycmF5LmZyb20oc3RhY2spO1xuICAgIHJldHVybiB7XG4gICAgICBmcm9tOiBzdGFydEV2ZW50c0luZGV4LFxuICAgICAgcmVzdG9yZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKiAgIE5vdGhpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIHBvaW50ID0gc3RhcnRQb2ludDtcbiAgICAgIGNvbnRleHQucHJldmlvdXMgPSBzdGFydFByZXZpb3VzO1xuICAgICAgY29udGV4dC5jdXJyZW50Q29uc3RydWN0ID0gc3RhcnRDdXJyZW50Q29uc3RydWN0O1xuICAgICAgY29udGV4dC5ldmVudHMubGVuZ3RoID0gc3RhcnRFdmVudHNJbmRleDtcbiAgICAgIHN0YWNrID0gc3RhcnRTdGFjaztcbiAgICAgIGFjY291bnRGb3JQb3RlbnRpYWxTa2lwKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGN1cnJlbnQgcG9pbnQgYSBiaXQgZm9yd2FyZCBpbiB0aGUgbGluZSB3aGVuIGl0XHUyMDE5cyBvbiBhIGNvbHVtblxuICAgKiBza2lwLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpIHtcbiAgICBpZiAocG9pbnQubGluZSBpbiBjb2x1bW5TdGFydCAmJiBwb2ludC5jb2x1bW4gPCAyKSB7XG4gICAgICBwb2ludC5jb2x1bW4gPSBjb2x1bW5TdGFydFtwb2ludC5saW5lXTtcbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2x1bW5TdGFydFtwb2ludC5saW5lXSAtIDE7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBjaHVua3MgZnJvbSBhIHNsaWNlIG9mIGNodW5rcyBpbiB0aGUgcmFuZ2Ugb2YgYSB0b2tlbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8Q2h1bms+fSBjaHVua3NcbiAqICAgQ2h1bmtzLlxuICogQHBhcmFtIHtQaWNrPFRva2VuLCAnZW5kJyB8ICdzdGFydCc+fSB0b2tlblxuICogICBUb2tlbi5cbiAqIEByZXR1cm5zIHtBcnJheTxDaHVuaz59XG4gKiAgIENodW5rcy5cbiAqL1xuZnVuY3Rpb24gc2xpY2VDaHVua3MoY2h1bmtzLCB0b2tlbikge1xuICBjb25zdCBzdGFydEluZGV4ID0gdG9rZW4uc3RhcnQuX2luZGV4O1xuICBjb25zdCBzdGFydEJ1ZmZlckluZGV4ID0gdG9rZW4uc3RhcnQuX2J1ZmZlckluZGV4O1xuICBjb25zdCBlbmRJbmRleCA9IHRva2VuLmVuZC5faW5kZXg7XG4gIGNvbnN0IGVuZEJ1ZmZlckluZGV4ID0gdG9rZW4uZW5kLl9idWZmZXJJbmRleDtcbiAgLyoqIEB0eXBlIHtBcnJheTxDaHVuaz59ICovXG4gIGxldCB2aWV3O1xuICBpZiAoc3RhcnRJbmRleCA9PT0gZW5kSW5kZXgpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBfYnVmZmVySW5kZXhgIGlzIHVzZWQgb24gc3RyaW5nIGNodW5rcy5cbiAgICB2aWV3ID0gW2NodW5rc1tzdGFydEluZGV4XS5zbGljZShzdGFydEJ1ZmZlckluZGV4LCBlbmRCdWZmZXJJbmRleCldO1xuICB9IGVsc2Uge1xuICAgIHZpZXcgPSBjaHVua3Muc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgIGlmIChzdGFydEJ1ZmZlckluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGhlYWQgPSB2aWV3WzBdO1xuICAgICAgaWYgKHR5cGVvZiBoZWFkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2aWV3WzBdID0gaGVhZC5zbGljZShzdGFydEJ1ZmZlckluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXcuc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuZEJ1ZmZlckluZGV4ID4gMCkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgX2J1ZmZlckluZGV4YCBpcyB1c2VkIG9uIHN0cmluZyBjaHVua3MuXG4gICAgICB2aWV3LnB1c2goY2h1bmtzW2VuZEluZGV4XS5zbGljZSgwLCBlbmRCdWZmZXJJbmRleCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmlldztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIHNsaWNlIG9mIGNodW5rcy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8Q2h1bms+fSBjaHVua3NcbiAqICAgQ2h1bmtzLlxuICogQHBhcmFtIHtib29sZWFuIHwgdW5kZWZpbmVkfSBbZXhwYW5kVGFicz1mYWxzZV1cbiAqICAgV2hldGhlciB0byBleHBhbmQgdGFicyAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBSZXN1bHQuXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZUNodW5rcyhjaHVua3MsIGV4cGFuZFRhYnMpIHtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGF0VGFiO1xuICB3aGlsZSAoKytpbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjaHVuayA9IGNodW5rc1tpbmRleF07XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IGNodW5rO1xuICAgIH0gZWxzZSBzd2l0Y2ggKGNodW5rKSB7XG4gICAgICBjYXNlIC01OlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWUgPSBcIlxcclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIC00OlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWUgPSBcIlxcblwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIC0zOlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWUgPSBcIlxcclwiICsgXCJcXG5cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAtMjpcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlID0gZXhwYW5kVGFicyA/IFwiIFwiIDogXCJcXHRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAtMTpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghZXhwYW5kVGFicyAmJiBhdFRhYikgY29udGludWU7XG4gICAgICAgICAgdmFsdWUgPSBcIiBcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBvbmx5IHJlcGxhY2VtZW50IGNoYXJhY3Rlci5cbiAgICAgICAgICB2YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2h1bmspO1xuICAgICAgICB9XG4gICAgfVxuICAgIGF0VGFiID0gY2h1bmsgPT09IC0yO1xuICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xufSIsICIvKipcbiAqIEBpbXBvcnQge1xuICogICBDcmVhdGUsXG4gKiAgIEZ1bGxOb3JtYWxpemVkRXh0ZW5zaW9uLFxuICogICBJbml0aWFsQ29uc3RydWN0LFxuICogICBQYXJzZUNvbnRleHQsXG4gKiAgIFBhcnNlT3B0aW9uc1xuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBjb21iaW5lRXh0ZW5zaW9ucyB9IGZyb20gJ21pY3JvbWFyay11dGlsLWNvbWJpbmUtZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBjb250ZW50IH0gZnJvbSAnLi9pbml0aWFsaXplL2NvbnRlbnQuanMnO1xuaW1wb3J0IHsgZG9jdW1lbnQgfSBmcm9tICcuL2luaXRpYWxpemUvZG9jdW1lbnQuanMnO1xuaW1wb3J0IHsgZmxvdyB9IGZyb20gJy4vaW5pdGlhbGl6ZS9mbG93LmpzJztcbmltcG9ydCB7IHN0cmluZywgdGV4dCB9IGZyb20gJy4vaW5pdGlhbGl6ZS90ZXh0LmpzJztcbmltcG9ydCAqIGFzIGRlZmF1bHRDb25zdHJ1Y3RzIGZyb20gJy4vY29uc3RydWN0cy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVUb2tlbml6ZXIgfSBmcm9tICcuL2NyZWF0ZS10b2tlbml6ZXIuanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7UGFyc2VPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtQYXJzZUNvbnRleHR9XG4gKiAgIFBhcnNlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjb25zdHJ1Y3RzID0gLyoqIEB0eXBlIHtGdWxsTm9ybWFsaXplZEV4dGVuc2lvbn0gKi9cbiAgY29tYmluZUV4dGVuc2lvbnMoW2RlZmF1bHRDb25zdHJ1Y3RzLCAuLi4oc2V0dGluZ3MuZXh0ZW5zaW9ucyB8fCBbXSldKTtcblxuICAvKiogQHR5cGUge1BhcnNlQ29udGV4dH0gKi9cbiAgY29uc3QgcGFyc2VyID0ge1xuICAgIGNvbnN0cnVjdHMsXG4gICAgY29udGVudDogY3JlYXRlKGNvbnRlbnQpLFxuICAgIGRlZmluZWQ6IFtdLFxuICAgIGRvY3VtZW50OiBjcmVhdGUoZG9jdW1lbnQpLFxuICAgIGZsb3c6IGNyZWF0ZShmbG93KSxcbiAgICBsYXp5OiB7fSxcbiAgICBzdHJpbmc6IGNyZWF0ZShzdHJpbmcpLFxuICAgIHRleHQ6IGNyZWF0ZSh0ZXh0KVxuICB9O1xuICByZXR1cm4gcGFyc2VyO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0luaXRpYWxDb25zdHJ1Y3R9IGluaXRpYWxcbiAgICogICBDb25zdHJ1Y3QgdG8gc3RhcnQgd2l0aC5cbiAgICogQHJldHVybnMge0NyZWF0ZX1cbiAgICogICBDcmVhdGUgYSB0b2tlbml6ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGUoaW5pdGlhbCkge1xuICAgIHJldHVybiBjcmVhdG9yO1xuICAgIC8qKiBAdHlwZSB7Q3JlYXRlfSAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0b3IoZnJvbSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVRva2VuaXplcihwYXJzZXIsIGluaXRpYWwsIGZyb20pO1xuICAgIH1cbiAgfVxufSIsICIvKipcbiAqIEBpbXBvcnQge0V2ZW50fSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQgeyBzdWJ0b2tlbml6ZSB9IGZyb20gJ21pY3JvbWFyay11dGlsLXN1YnRva2VuaXplJztcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PEV2ZW50Pn0gZXZlbnRzXG4gKiAgIEV2ZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheTxFdmVudD59XG4gKiAgIEV2ZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGV2ZW50cykge1xuICB3aGlsZSAoIXN1YnRva2VuaXplKGV2ZW50cykpIHtcbiAgICAvLyBFbXB0eVxuICB9XG4gIHJldHVybiBldmVudHM7XG59IiwgIi8qKlxuICogQGltcG9ydCB7Q2h1bmssIENvZGUsIEVuY29kaW5nLCBWYWx1ZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUHJlcHJvY2Vzc29yXG4gKiAgIFByZXByb2Nlc3MgYSB2YWx1ZS5cbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiAgIFZhbHVlLlxuICogQHBhcmFtIHtFbmNvZGluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmNvZGluZ11cbiAqICAgRW5jb2Rpbmcgd2hlbiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXkgKG9wdGlvbmFsKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmQ9ZmFsc2VdXG4gKiAgIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBjaHVuayAoZGVmYXVsdDogYGZhbHNlYCkuXG4gKiBAcmV0dXJucyB7QXJyYXk8Q2h1bms+fVxuICogICBDaHVua3MuXG4gKi9cblxuY29uc3Qgc2VhcmNoID0gL1tcXDBcXHRcXG5cXHJdL2c7XG5cbi8qKlxuICogQHJldHVybnMge1ByZXByb2Nlc3Nvcn1cbiAqICAgUHJlcHJvY2VzcyBhIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcHJvY2VzcygpIHtcbiAgbGV0IGNvbHVtbiA9IDE7XG4gIGxldCBidWZmZXIgPSAnJztcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgc3RhcnQgPSB0cnVlO1xuICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gIGxldCBhdENhcnJpYWdlUmV0dXJuO1xuICByZXR1cm4gcHJlcHJvY2Vzc29yO1xuXG4gIC8qKiBAdHlwZSB7UHJlcHJvY2Vzc29yfSAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICBmdW5jdGlvbiBwcmVwcm9jZXNzb3IodmFsdWUsIGVuY29kaW5nLCBlbmQpIHtcbiAgICAvKiogQHR5cGUge0FycmF5PENodW5rPn0gKi9cbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAvKiogQHR5cGUge1JlZ0V4cE1hdGNoQXJyYXkgfCBudWxsfSAqL1xuICAgIGxldCBtYXRjaDtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgbmV4dDtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgc3RhcnRQb3NpdGlvbjtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgZW5kUG9zaXRpb247XG4gICAgLyoqIEB0eXBlIHtDb2RlfSAqL1xuICAgIGxldCBjb2RlO1xuICAgIHZhbHVlID0gYnVmZmVyICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZS50b1N0cmluZygpIDogbmV3IFRleHREZWNvZGVyKGVuY29kaW5nIHx8IHVuZGVmaW5lZCkuZGVjb2RlKHZhbHVlKSk7XG4gICAgc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgYnVmZmVyID0gJyc7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICAvLyBUbyBkbzogYG1hcmtkb3duLXJzYCBhY3R1YWxseSBwYXJzZXMgQk9NcyAoYnl0ZSBvcmRlciBtYXJrKS5cbiAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KDApID09PSA2NTI3OSkge1xuICAgICAgICBzdGFydFBvc2l0aW9uKys7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgd2hpbGUgKHN0YXJ0UG9zaXRpb24gPCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHNlYXJjaC5sYXN0SW5kZXggPSBzdGFydFBvc2l0aW9uO1xuICAgICAgbWF0Y2ggPSBzZWFyY2guZXhlYyh2YWx1ZSk7XG4gICAgICBlbmRQb3NpdGlvbiA9IG1hdGNoICYmIG1hdGNoLmluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRjaC5pbmRleCA6IHZhbHVlLmxlbmd0aDtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGVuZFBvc2l0aW9uKTtcbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgYnVmZmVyID0gdmFsdWUuc2xpY2Uoc3RhcnRQb3NpdGlvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDEwICYmIHN0YXJ0UG9zaXRpb24gPT09IGVuZFBvc2l0aW9uICYmIGF0Q2FycmlhZ2VSZXR1cm4pIHtcbiAgICAgICAgY2h1bmtzLnB1c2goLTMpO1xuICAgICAgICBhdENhcnJpYWdlUmV0dXJuID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGF0Q2FycmlhZ2VSZXR1cm4pIHtcbiAgICAgICAgICBjaHVua3MucHVzaCgtNSk7XG4gICAgICAgICAgYXRDYXJyaWFnZVJldHVybiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRQb3NpdGlvbiA8IGVuZFBvc2l0aW9uKSB7XG4gICAgICAgICAgY2h1bmtzLnB1c2godmFsdWUuc2xpY2Uoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24pKTtcbiAgICAgICAgICBjb2x1bW4gKz0gZW5kUG9zaXRpb24gLSBzdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2h1bmtzLnB1c2goNjU1MzMpO1xuICAgICAgICAgICAgICBjb2x1bW4rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuZXh0ID0gTWF0aC5jZWlsKGNvbHVtbiAvIDQpICogNDtcbiAgICAgICAgICAgICAgY2h1bmtzLnB1c2goLTIpO1xuICAgICAgICAgICAgICB3aGlsZSAoY29sdW1uKysgPCBuZXh0KSBjaHVua3MucHVzaCgtMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNodW5rcy5wdXNoKC00KTtcbiAgICAgICAgICAgICAgY29sdW1uID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYXRDYXJyaWFnZVJldHVybiA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbHVtbiA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YXJ0UG9zaXRpb24gPSBlbmRQb3NpdGlvbiArIDE7XG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgIGlmIChhdENhcnJpYWdlUmV0dXJuKSBjaHVua3MucHVzaCgtNSk7XG4gICAgICBpZiAoYnVmZmVyKSBjaHVua3MucHVzaChidWZmZXIpO1xuICAgICAgY2h1bmtzLnB1c2gobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBjaHVua3M7XG4gIH1cbn0iLCAiaW1wb3J0IHsgZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UgfSBmcm9tICdkZWNvZGUtbmFtZWQtY2hhcmFjdGVyLXJlZmVyZW5jZSc7XG5pbXBvcnQgeyBkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlIH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtZGVjb2RlLW51bWVyaWMtY2hhcmFjdGVyLXJlZmVyZW5jZSc7XG5jb25zdCBjaGFyYWN0ZXJFc2NhcGVPclJlZmVyZW5jZSA9IC9cXFxcKFshLS86LUBbLWB7LX5dKXwmKCMoPzpcXGR7MSw3fXx4W1xcZGEtZl17MSw2fSl8W1xcZGEtel17MSwzMX0pOy9naTtcblxuLyoqXG4gKiBEZWNvZGUgbWFya2Rvd24gc3RyaW5ncyAod2hpY2ggb2NjdXIgaW4gcGxhY2VzIHN1Y2ggYXMgZmVuY2VkIGNvZGUgaW5mb1xuICogc3RyaW5ncywgZGVzdGluYXRpb25zLCBsYWJlbHMsIGFuZCB0aXRsZXMpLlxuICpcbiAqIFRoZSBcdTIwMUNzdHJpbmdcdTIwMUQgY29udGVudCB0eXBlIGFsbG93cyBjaGFyYWN0ZXIgZXNjYXBlcyBhbmQgLXJlZmVyZW5jZXMuXG4gKiBUaGlzIGRlY29kZXMgdGhvc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIERlY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UsIGRlY29kZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiAgIE1hdGNoLlxuICogQHBhcmFtIHtzdHJpbmd9ICQxXG4gKiAgIENoYXJhY3RlciBlc2NhcGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gJDJcbiAqICAgQ2hhcmFjdGVyIHJlZmVyZW5jZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIERlY29kZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKCQwLCAkMSwgJDIpIHtcbiAgaWYgKCQxKSB7XG4gICAgLy8gRXNjYXBlLlxuICAgIHJldHVybiAkMTtcbiAgfVxuXG4gIC8vIFJlZmVyZW5jZS5cbiAgY29uc3QgaGVhZCA9ICQyLmNoYXJDb2RlQXQoMCk7XG4gIGlmIChoZWFkID09PSAzNSkge1xuICAgIGNvbnN0IGhlYWQgPSAkMi5jaGFyQ29kZUF0KDEpO1xuICAgIGNvbnN0IGhleCA9IGhlYWQgPT09IDEyMCB8fCBoZWFkID09PSA4ODtcbiAgICByZXR1cm4gZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSgkMi5zbGljZShoZXggPyAyIDogMSksIGhleCA/IDE2IDogMTApO1xuICB9XG4gIHJldHVybiBkZWNvZGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZSgkMikgfHwgJDA7XG59IiwgIi8qKlxuICogQGltcG9ydCB7XG4gKiAgIEJyZWFrLFxuICogICBCbG9ja3F1b3RlLFxuICogICBDb2RlLFxuICogICBEZWZpbml0aW9uLFxuICogICBFbXBoYXNpcyxcbiAqICAgSGVhZGluZyxcbiAqICAgSHRtbCxcbiAqICAgSW1hZ2UsXG4gKiAgIElubGluZUNvZGUsXG4gKiAgIExpbmssXG4gKiAgIExpc3RJdGVtLFxuICogICBMaXN0LFxuICogICBOb2RlcyxcbiAqICAgUGFyYWdyYXBoLFxuICogICBQaHJhc2luZ0NvbnRlbnQsXG4gKiAgIFJlZmVyZW5jZVR5cGUsXG4gKiAgIFJvb3QsXG4gKiAgIFN0cm9uZyxcbiAqICAgVGV4dCxcbiAqICAgVGhlbWF0aWNCcmVha1xuICogfSBmcm9tICdtZGFzdCdcbiAqIEBpbXBvcnQge1xuICogICBFbmNvZGluZyxcbiAqICAgRXZlbnQsXG4gKiAgIFRva2VuLFxuICogICBWYWx1ZVxuICogfSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqIEBpbXBvcnQge1BvaW50fSBmcm9tICd1bmlzdCdcbiAqIEBpbXBvcnQge1xuICogICBDb21waWxlQ29udGV4dCxcbiAqICAgQ29tcGlsZURhdGEsXG4gKiAgIENvbmZpZyxcbiAqICAgRXh0ZW5zaW9uLFxuICogICBIYW5kbGUsXG4gKiAgIE9uRW50ZXJFcnJvcixcbiAqICAgT3B0aW9uc1xuICogfSBmcm9tICcuL3R5cGVzLmpzJ1xuICovXG5cbmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnbWRhc3QtdXRpbC10by1zdHJpbmcnO1xuaW1wb3J0IHsgcGFyc2UsIHBvc3Rwcm9jZXNzLCBwcmVwcm9jZXNzIH0gZnJvbSAnbWljcm9tYXJrJztcbmltcG9ydCB7IGRlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UgfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlJztcbmltcG9ydCB7IGRlY29kZVN0cmluZyB9IGZyb20gJ21pY3JvbWFyay11dGlsLWRlY29kZS1zdHJpbmcnO1xuaW1wb3J0IHsgbm9ybWFsaXplSWRlbnRpZmllciB9IGZyb20gJ21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyJztcbmltcG9ydCB7IGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlIH0gZnJvbSAnZGVjb2RlLW5hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2UnO1xuaW1wb3J0IHsgc3RyaW5naWZ5UG9zaXRpb24gfSBmcm9tICd1bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbic7XG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUdXJuIG1hcmtkb3duIGludG8gYSBzeW50YXggdHJlZS5cbiAqXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiBAcGFyYW0ge0VuY29kaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuY29kaW5nXVxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7Um9vdH1cbiAqXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtSb290fVxuICpcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiAgIE1hcmtkb3duIHRvIHBhcnNlLlxuICogQHBhcmFtIHtFbmNvZGluZyB8IE9wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5jb2RpbmddXG4gKiAgIENoYXJhY3RlciBlbmNvZGluZyBmb3Igd2hlbiBgdmFsdWVgIGlzIGBCdWZmZXJgLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7Um9vdH1cbiAqICAgbWRhc3QgdHJlZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXJrZG93bih2YWx1ZSwgZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbXBpbGVyKG9wdGlvbnMpKHBvc3Rwcm9jZXNzKHBhcnNlKG9wdGlvbnMpLmRvY3VtZW50KCkud3JpdGUocHJlcHJvY2VzcygpKHZhbHVlLCBlbmNvZGluZywgdHJ1ZSkpKSk7XG59XG5cbi8qKlxuICogTm90ZSB0aGlzIGNvbXBpbGVyIG9ubHkgdW5kZXJzdGFuZCBjb21wbGV0ZSBidWZmZXJpbmcsIG5vdCBzdHJlYW1pbmcuXG4gKlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVyKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtDb25maWd9ICovXG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICB0cmFuc2Zvcm1zOiBbXSxcbiAgICBjYW5Db250YWluRW9sczogWydlbXBoYXNpcycsICdmcmFnbWVudCcsICdoZWFkaW5nJywgJ3BhcmFncmFwaCcsICdzdHJvbmcnXSxcbiAgICBlbnRlcjoge1xuICAgICAgYXV0b2xpbms6IG9wZW5lcihsaW5rKSxcbiAgICAgIGF1dG9saW5rUHJvdG9jb2w6IG9uZW50ZXJkYXRhLFxuICAgICAgYXV0b2xpbmtFbWFpbDogb25lbnRlcmRhdGEsXG4gICAgICBhdHhIZWFkaW5nOiBvcGVuZXIoaGVhZGluZyksXG4gICAgICBibG9ja1F1b3RlOiBvcGVuZXIoYmxvY2tRdW90ZSksXG4gICAgICBjaGFyYWN0ZXJFc2NhcGU6IG9uZW50ZXJkYXRhLFxuICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlOiBvbmVudGVyZGF0YSxcbiAgICAgIGNvZGVGZW5jZWQ6IG9wZW5lcihjb2RlRmxvdyksXG4gICAgICBjb2RlRmVuY2VkRmVuY2VJbmZvOiBidWZmZXIsXG4gICAgICBjb2RlRmVuY2VkRmVuY2VNZXRhOiBidWZmZXIsXG4gICAgICBjb2RlSW5kZW50ZWQ6IG9wZW5lcihjb2RlRmxvdywgYnVmZmVyKSxcbiAgICAgIGNvZGVUZXh0OiBvcGVuZXIoY29kZVRleHQsIGJ1ZmZlciksXG4gICAgICBjb2RlVGV4dERhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgZGF0YTogb25lbnRlcmRhdGEsXG4gICAgICBjb2RlRmxvd1ZhbHVlOiBvbmVudGVyZGF0YSxcbiAgICAgIGRlZmluaXRpb246IG9wZW5lcihkZWZpbml0aW9uKSxcbiAgICAgIGRlZmluaXRpb25EZXN0aW5hdGlvblN0cmluZzogYnVmZmVyLFxuICAgICAgZGVmaW5pdGlvbkxhYmVsU3RyaW5nOiBidWZmZXIsXG4gICAgICBkZWZpbml0aW9uVGl0bGVTdHJpbmc6IGJ1ZmZlcixcbiAgICAgIGVtcGhhc2lzOiBvcGVuZXIoZW1waGFzaXMpLFxuICAgICAgaGFyZEJyZWFrRXNjYXBlOiBvcGVuZXIoaGFyZEJyZWFrKSxcbiAgICAgIGhhcmRCcmVha1RyYWlsaW5nOiBvcGVuZXIoaGFyZEJyZWFrKSxcbiAgICAgIGh0bWxGbG93OiBvcGVuZXIoaHRtbCwgYnVmZmVyKSxcbiAgICAgIGh0bWxGbG93RGF0YTogb25lbnRlcmRhdGEsXG4gICAgICBodG1sVGV4dDogb3BlbmVyKGh0bWwsIGJ1ZmZlciksXG4gICAgICBodG1sVGV4dERhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgaW1hZ2U6IG9wZW5lcihpbWFnZSksXG4gICAgICBsYWJlbDogYnVmZmVyLFxuICAgICAgbGluazogb3BlbmVyKGxpbmspLFxuICAgICAgbGlzdEl0ZW06IG9wZW5lcihsaXN0SXRlbSksXG4gICAgICBsaXN0SXRlbVZhbHVlOiBvbmVudGVybGlzdGl0ZW12YWx1ZSxcbiAgICAgIGxpc3RPcmRlcmVkOiBvcGVuZXIobGlzdCwgb25lbnRlcmxpc3RvcmRlcmVkKSxcbiAgICAgIGxpc3RVbm9yZGVyZWQ6IG9wZW5lcihsaXN0KSxcbiAgICAgIHBhcmFncmFwaDogb3BlbmVyKHBhcmFncmFwaCksXG4gICAgICByZWZlcmVuY2U6IG9uZW50ZXJyZWZlcmVuY2UsXG4gICAgICByZWZlcmVuY2VTdHJpbmc6IGJ1ZmZlcixcbiAgICAgIHJlc291cmNlRGVzdGluYXRpb25TdHJpbmc6IGJ1ZmZlcixcbiAgICAgIHJlc291cmNlVGl0bGVTdHJpbmc6IGJ1ZmZlcixcbiAgICAgIHNldGV4dEhlYWRpbmc6IG9wZW5lcihoZWFkaW5nKSxcbiAgICAgIHN0cm9uZzogb3BlbmVyKHN0cm9uZyksXG4gICAgICB0aGVtYXRpY0JyZWFrOiBvcGVuZXIodGhlbWF0aWNCcmVhaylcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgIGF0eEhlYWRpbmc6IGNsb3NlcigpLFxuICAgICAgYXR4SGVhZGluZ1NlcXVlbmNlOiBvbmV4aXRhdHhoZWFkaW5nc2VxdWVuY2UsXG4gICAgICBhdXRvbGluazogY2xvc2VyKCksXG4gICAgICBhdXRvbGlua0VtYWlsOiBvbmV4aXRhdXRvbGlua2VtYWlsLFxuICAgICAgYXV0b2xpbmtQcm90b2NvbDogb25leGl0YXV0b2xpbmtwcm90b2NvbCxcbiAgICAgIGJsb2NrUXVvdGU6IGNsb3NlcigpLFxuICAgICAgY2hhcmFjdGVyRXNjYXBlVmFsdWU6IG9uZXhpdGRhdGEsXG4gICAgICBjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJIZXhhZGVjaW1hbDogb25leGl0Y2hhcmFjdGVycmVmZXJlbmNlbWFya2VyLFxuICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYzogb25leGl0Y2hhcmFjdGVycmVmZXJlbmNlbWFya2VyLFxuICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWU6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlLFxuICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlOiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2UsXG4gICAgICBjb2RlRmVuY2VkOiBjbG9zZXIob25leGl0Y29kZWZlbmNlZCksXG4gICAgICBjb2RlRmVuY2VkRmVuY2U6IG9uZXhpdGNvZGVmZW5jZWRmZW5jZSxcbiAgICAgIGNvZGVGZW5jZWRGZW5jZUluZm86IG9uZXhpdGNvZGVmZW5jZWRmZW5jZWluZm8sXG4gICAgICBjb2RlRmVuY2VkRmVuY2VNZXRhOiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VtZXRhLFxuICAgICAgY29kZUZsb3dWYWx1ZTogb25leGl0ZGF0YSxcbiAgICAgIGNvZGVJbmRlbnRlZDogY2xvc2VyKG9uZXhpdGNvZGVpbmRlbnRlZCksXG4gICAgICBjb2RlVGV4dDogY2xvc2VyKG9uZXhpdGNvZGV0ZXh0KSxcbiAgICAgIGNvZGVUZXh0RGF0YTogb25leGl0ZGF0YSxcbiAgICAgIGRhdGE6IG9uZXhpdGRhdGEsXG4gICAgICBkZWZpbml0aW9uOiBjbG9zZXIoKSxcbiAgICAgIGRlZmluaXRpb25EZXN0aW5hdGlvblN0cmluZzogb25leGl0ZGVmaW5pdGlvbmRlc3RpbmF0aW9uc3RyaW5nLFxuICAgICAgZGVmaW5pdGlvbkxhYmVsU3RyaW5nOiBvbmV4aXRkZWZpbml0aW9ubGFiZWxzdHJpbmcsXG4gICAgICBkZWZpbml0aW9uVGl0bGVTdHJpbmc6IG9uZXhpdGRlZmluaXRpb250aXRsZXN0cmluZyxcbiAgICAgIGVtcGhhc2lzOiBjbG9zZXIoKSxcbiAgICAgIGhhcmRCcmVha0VzY2FwZTogY2xvc2VyKG9uZXhpdGhhcmRicmVhayksXG4gICAgICBoYXJkQnJlYWtUcmFpbGluZzogY2xvc2VyKG9uZXhpdGhhcmRicmVhayksXG4gICAgICBodG1sRmxvdzogY2xvc2VyKG9uZXhpdGh0bWxmbG93KSxcbiAgICAgIGh0bWxGbG93RGF0YTogb25leGl0ZGF0YSxcbiAgICAgIGh0bWxUZXh0OiBjbG9zZXIob25leGl0aHRtbHRleHQpLFxuICAgICAgaHRtbFRleHREYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgaW1hZ2U6IGNsb3NlcihvbmV4aXRpbWFnZSksXG4gICAgICBsYWJlbDogb25leGl0bGFiZWwsXG4gICAgICBsYWJlbFRleHQ6IG9uZXhpdGxhYmVsdGV4dCxcbiAgICAgIGxpbmVFbmRpbmc6IG9uZXhpdGxpbmVlbmRpbmcsXG4gICAgICBsaW5rOiBjbG9zZXIob25leGl0bGluayksXG4gICAgICBsaXN0SXRlbTogY2xvc2VyKCksXG4gICAgICBsaXN0T3JkZXJlZDogY2xvc2VyKCksXG4gICAgICBsaXN0VW5vcmRlcmVkOiBjbG9zZXIoKSxcbiAgICAgIHBhcmFncmFwaDogY2xvc2VyKCksXG4gICAgICByZWZlcmVuY2VTdHJpbmc6IG9uZXhpdHJlZmVyZW5jZXN0cmluZyxcbiAgICAgIHJlc291cmNlRGVzdGluYXRpb25TdHJpbmc6IG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICByZXNvdXJjZVRpdGxlU3RyaW5nOiBvbmV4aXRyZXNvdXJjZXRpdGxlc3RyaW5nLFxuICAgICAgcmVzb3VyY2U6IG9uZXhpdHJlc291cmNlLFxuICAgICAgc2V0ZXh0SGVhZGluZzogY2xvc2VyKG9uZXhpdHNldGV4dGhlYWRpbmcpLFxuICAgICAgc2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZTogb25leGl0c2V0ZXh0aGVhZGluZ2xpbmVzZXF1ZW5jZSxcbiAgICAgIHNldGV4dEhlYWRpbmdUZXh0OiBvbmV4aXRzZXRleHRoZWFkaW5ndGV4dCxcbiAgICAgIHN0cm9uZzogY2xvc2VyKCksXG4gICAgICB0aGVtYXRpY0JyZWFrOiBjbG9zZXIoKVxuICAgIH1cbiAgfTtcbiAgY29uZmlndXJlKGNvbmZpZywgKG9wdGlvbnMgfHwge30pLm1kYXN0RXh0ZW5zaW9ucyB8fCBbXSk7XG5cbiAgLyoqIEB0eXBlIHtDb21waWxlRGF0YX0gKi9cbiAgY29uc3QgZGF0YSA9IHt9O1xuICByZXR1cm4gY29tcGlsZTtcblxuICAvKipcbiAgICogVHVybiBtaWNyb21hcmsgZXZlbnRzIGludG8gYW4gbWRhc3QgdHJlZS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxFdmVudD59IGV2ZW50c1xuICAgKiAgIEV2ZW50cy5cbiAgICogQHJldHVybnMge1Jvb3R9XG4gICAqICAgbWRhc3QgdHJlZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBpbGUoZXZlbnRzKSB7XG4gICAgLyoqIEB0eXBlIHtSb290fSAqL1xuICAgIGxldCB0cmVlID0ge1xuICAgICAgdHlwZTogJ3Jvb3QnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgICAvKiogQHR5cGUge09taXQ8Q29tcGlsZUNvbnRleHQsICdzbGljZVNlcmlhbGl6ZSc+fSAqL1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBzdGFjazogW3RyZWVdLFxuICAgICAgdG9rZW5TdGFjazogW10sXG4gICAgICBjb25maWcsXG4gICAgICBlbnRlcixcbiAgICAgIGV4aXQsXG4gICAgICBidWZmZXIsXG4gICAgICByZXN1bWUsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICAvKiogQHR5cGUge0FycmF5PG51bWJlcj59ICovXG4gICAgY29uc3QgbGlzdFN0YWNrID0gW107XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBXZSBwcmVwcm9jZXNzIGxpc3RzIHRvIGFkZCBgbGlzdEl0ZW1gIHRva2VucywgYW5kIHRvIGluZmVyIHdoZXRoZXJcbiAgICAgIC8vIGl0ZW1zIHRoZSBsaXN0IGl0c2VsZiBhcmUgc3ByZWFkIG91dC5cbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwibGlzdE9yZGVyZWRcIiB8fCBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IFwibGlzdFVub3JkZXJlZFwiKSB7XG4gICAgICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgbGlzdFN0YWNrLnB1c2goaW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHRhaWwgPSBsaXN0U3RhY2sucG9wKCk7XG4gICAgICAgICAgaW5kZXggPSBwcmVwYXJlTGlzdChldmVudHMsIHRhaWwsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGNvbmZpZ1tldmVudHNbaW5kZXhdWzBdXTtcbiAgICAgIGlmIChvd24uY2FsbChoYW5kbGVyLCBldmVudHNbaW5kZXhdWzFdLnR5cGUpKSB7XG4gICAgICAgIGhhbmRsZXJbZXZlbnRzW2luZGV4XVsxXS50eXBlXS5jYWxsKE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIHNsaWNlU2VyaWFsaXplOiBldmVudHNbaW5kZXhdWzJdLnNsaWNlU2VyaWFsaXplXG4gICAgICAgIH0sIGNvbnRleHQpLCBldmVudHNbaW5kZXhdWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdG9rZW5zIHN0aWxsIGJlaW5nIG9wZW4uXG4gICAgaWYgKGNvbnRleHQudG9rZW5TdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCB0YWlsID0gY29udGV4dC50b2tlblN0YWNrW2NvbnRleHQudG9rZW5TdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB0YWlsWzFdIHx8IGRlZmF1bHRPbkVycm9yO1xuICAgICAgaGFuZGxlci5jYWxsKGNvbnRleHQsIHVuZGVmaW5lZCwgdGFpbFswXSk7XG4gICAgfVxuXG4gICAgLy8gRmlndXJlIG91dCBgcm9vdGAgcG9zaXRpb24uXG4gICAgdHJlZS5wb3NpdGlvbiA9IHtcbiAgICAgIHN0YXJ0OiBwb2ludChldmVudHMubGVuZ3RoID4gMCA/IGV2ZW50c1swXVsxXS5zdGFydCA6IHtcbiAgICAgICAgbGluZTogMSxcbiAgICAgICAgY29sdW1uOiAxLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0pLFxuICAgICAgZW5kOiBwb2ludChldmVudHMubGVuZ3RoID4gMCA/IGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMl1bMV0uZW5kIDoge1xuICAgICAgICBsaW5lOiAxLFxuICAgICAgICBjb2x1bW46IDEsXG4gICAgICAgIG9mZnNldDogMFxuICAgICAgfSlcbiAgICB9O1xuXG4gICAgLy8gQ2FsbCB0cmFuc2Zvcm1zLlxuICAgIGluZGV4ID0gLTE7XG4gICAgd2hpbGUgKCsraW5kZXggPCBjb25maWcudHJhbnNmb3Jtcy5sZW5ndGgpIHtcbiAgICAgIHRyZWUgPSBjb25maWcudHJhbnNmb3Jtc1tpbmRleF0odHJlZSkgfHwgdHJlZTtcbiAgICB9XG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxFdmVudD59IGV2ZW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJlcGFyZUxpc3QoZXZlbnRzLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgbGV0IGluZGV4ID0gc3RhcnQgLSAxO1xuICAgIGxldCBjb250YWluZXJCYWxhbmNlID0gLTE7XG4gICAgbGV0IGxpc3RTcHJlYWQgPSBmYWxzZTtcbiAgICAvKiogQHR5cGUge1Rva2VuIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBsaXN0SXRlbTtcbiAgICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgbGluZUluZGV4O1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBmaXJzdEJsYW5rTGluZUluZGV4O1xuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgYXRNYXJrZXI7XG4gICAgd2hpbGUgKCsraW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpbmRleF07XG4gICAgICBzd2l0Y2ggKGV2ZW50WzFdLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImxpc3RVbm9yZGVyZWRcIjpcbiAgICAgICAgY2FzZSBcImxpc3RPcmRlcmVkXCI6XG4gICAgICAgIGNhc2UgXCJibG9ja1F1b3RlXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0TWFya2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFwibGluZUVuZGluZ0JsYW5rXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgICAgIGlmIChsaXN0SXRlbSAmJiAhYXRNYXJrZXIgJiYgIWNvbnRhaW5lckJhbGFuY2UgJiYgIWZpcnN0QmxhbmtMaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJsaW5lUHJlZml4XCI6XG4gICAgICAgIGNhc2UgXCJsaXN0SXRlbVZhbHVlXCI6XG4gICAgICAgIGNhc2UgXCJsaXN0SXRlbU1hcmtlclwiOlxuICAgICAgICBjYXNlIFwibGlzdEl0ZW1QcmVmaXhcIjpcbiAgICAgICAgY2FzZSBcImxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZVwiOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIEVtcHR5LlxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjb250YWluZXJCYWxhbmNlICYmIGV2ZW50WzBdID09PSAnZW50ZXInICYmIGV2ZW50WzFdLnR5cGUgPT09IFwibGlzdEl0ZW1QcmVmaXhcIiB8fCBjb250YWluZXJCYWxhbmNlID09PSAtMSAmJiBldmVudFswXSA9PT0gJ2V4aXQnICYmIChldmVudFsxXS50eXBlID09PSBcImxpc3RVbm9yZGVyZWRcIiB8fCBldmVudFsxXS50eXBlID09PSBcImxpc3RPcmRlcmVkXCIpKSB7XG4gICAgICAgIGlmIChsaXN0SXRlbSkge1xuICAgICAgICAgIGxldCB0YWlsSW5kZXggPSBpbmRleDtcbiAgICAgICAgICBsaW5lSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgd2hpbGUgKHRhaWxJbmRleC0tKSB7XG4gICAgICAgICAgICBjb25zdCB0YWlsRXZlbnQgPSBldmVudHNbdGFpbEluZGV4XTtcbiAgICAgICAgICAgIGlmICh0YWlsRXZlbnRbMV0udHlwZSA9PT0gXCJsaW5lRW5kaW5nXCIgfHwgdGFpbEV2ZW50WzFdLnR5cGUgPT09IFwibGluZUVuZGluZ0JsYW5rXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHRhaWxFdmVudFswXSA9PT0gJ2V4aXQnKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAgICAgICAgIGV2ZW50c1tsaW5lSW5kZXhdWzFdLnR5cGUgPSBcImxpbmVFbmRpbmdCbGFua1wiO1xuICAgICAgICAgICAgICAgIGxpc3RTcHJlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID0gXCJsaW5lRW5kaW5nXCI7XG4gICAgICAgICAgICAgIGxpbmVJbmRleCA9IHRhaWxJbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFpbEV2ZW50WzFdLnR5cGUgPT09IFwibGluZVByZWZpeFwiIHx8IHRhaWxFdmVudFsxXS50eXBlID09PSBcImJsb2NrUXVvdGVQcmVmaXhcIiB8fCB0YWlsRXZlbnRbMV0udHlwZSA9PT0gXCJibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZVwiIHx8IHRhaWxFdmVudFsxXS50eXBlID09PSBcImJsb2NrUXVvdGVNYXJrZXJcIiB8fCB0YWlsRXZlbnRbMV0udHlwZSA9PT0gXCJsaXN0SXRlbUluZGVudFwiKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpcnN0QmxhbmtMaW5lSW5kZXggJiYgKCFsaW5lSW5kZXggfHwgZmlyc3RCbGFua0xpbmVJbmRleCA8IGxpbmVJbmRleCkpIHtcbiAgICAgICAgICAgIGxpc3RJdGVtLl9zcHJlYWQgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEZpeCBwb3NpdGlvbi5cbiAgICAgICAgICBsaXN0SXRlbS5lbmQgPSBPYmplY3QuYXNzaWduKHt9LCBsaW5lSW5kZXggPyBldmVudHNbbGluZUluZGV4XVsxXS5zdGFydCA6IGV2ZW50WzFdLmVuZCk7XG4gICAgICAgICAgZXZlbnRzLnNwbGljZShsaW5lSW5kZXggfHwgaW5kZXgsIDAsIFsnZXhpdCcsIGxpc3RJdGVtLCBldmVudFsyXV0pO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbGlzdCBpdGVtLlxuICAgICAgICBpZiAoZXZlbnRbMV0udHlwZSA9PT0gXCJsaXN0SXRlbVByZWZpeFwiKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgdHlwZTogJ2xpc3RJdGVtJyxcbiAgICAgICAgICAgIF9zcHJlYWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50WzFdLnN0YXJ0KSxcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHdlXHUyMDE5bGwgYWRkIGBlbmRgIGluIGEgc2Vjb25kLlxuICAgICAgICAgICAgZW5kOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxpc3RJdGVtID0gaXRlbTtcbiAgICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAwLCBbJ2VudGVyJywgaXRlbSwgZXZlbnRbMl1dKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIGxlbmd0aCsrO1xuICAgICAgICAgIGZpcnN0QmxhbmtMaW5lSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgYXRNYXJrZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGV2ZW50c1tzdGFydF1bMV0uX3NwcmVhZCA9IGxpc3RTcHJlYWQ7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gb3BlbmVyIGhhbmRsZS5cbiAgICpcbiAgICogQHBhcmFtIHsodG9rZW46IFRva2VuKSA9PiBOb2Rlc30gY3JlYXRlXG4gICAqICAgQ3JlYXRlIGEgbm9kZS5cbiAgICogQHBhcmFtIHtIYW5kbGUgfCB1bmRlZmluZWR9IFthbmRdXG4gICAqICAgT3B0aW9uYWwgZnVuY3Rpb24gdG8gYWxzbyBydW4uXG4gICAqIEByZXR1cm5zIHtIYW5kbGV9XG4gICAqICAgSGFuZGxlLlxuICAgKi9cbiAgZnVuY3Rpb24gb3BlbmVyKGNyZWF0ZSwgYW5kKSB7XG4gICAgcmV0dXJuIG9wZW47XG5cbiAgICAvKipcbiAgICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAgICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9wZW4odG9rZW4pIHtcbiAgICAgIGVudGVyLmNhbGwodGhpcywgY3JlYXRlKHRva2VuKSwgdG9rZW4pO1xuICAgICAgaWYgKGFuZCkgYW5kLmNhbGwodGhpcywgdG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Q29tcGlsZUNvbnRleHRbJ2J1ZmZlciddfVxuICAgKi9cbiAgZnVuY3Rpb24gYnVmZmVyKCkge1xuICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICB0eXBlOiAnZnJhZ21lbnQnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0NvbXBpbGVDb250ZXh0WydlbnRlciddfVxuICAgKi9cbiAgZnVuY3Rpb24gZW50ZXIobm9kZSwgdG9rZW4sIGVycm9ySGFuZGxlcikge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAvKiogQHR5cGUge0FycmF5PE5vZGVzPn0gKi9cbiAgICBjb25zdCBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICBzaWJsaW5ncy5wdXNoKG5vZGUpO1xuICAgIHRoaXMuc3RhY2sucHVzaChub2RlKTtcbiAgICB0aGlzLnRva2VuU3RhY2sucHVzaChbdG9rZW4sIGVycm9ySGFuZGxlciB8fCB1bmRlZmluZWRdKTtcbiAgICBub2RlLnBvc2l0aW9uID0ge1xuICAgICAgc3RhcnQ6IHBvaW50KHRva2VuLnN0YXJ0KSxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBlbmRgIHdpbGwgYmUgcGF0Y2hlZCBsYXRlci5cbiAgICAgIGVuZDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjbG9zZXIgaGFuZGxlLlxuICAgKlxuICAgKiBAcGFyYW0ge0hhbmRsZSB8IHVuZGVmaW5lZH0gW2FuZF1cbiAgICogICBPcHRpb25hbCBmdW5jdGlvbiB0byBhbHNvIHJ1bi5cbiAgICogQHJldHVybnMge0hhbmRsZX1cbiAgICogICBIYW5kbGUuXG4gICAqL1xuICBmdW5jdGlvbiBjbG9zZXIoYW5kKSB7XG4gICAgcmV0dXJuIGNsb3NlO1xuXG4gICAgLyoqXG4gICAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9zZSh0b2tlbikge1xuICAgICAgaWYgKGFuZCkgYW5kLmNhbGwodGhpcywgdG9rZW4pO1xuICAgICAgZXhpdC5jYWxsKHRoaXMsIHRva2VuKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0NvbXBpbGVDb250ZXh0WydleGl0J119XG4gICAqL1xuICBmdW5jdGlvbiBleGl0KHRva2VuLCBvbkV4aXRFcnJvcikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGNvbnN0IG9wZW4gPSB0aGlzLnRva2VuU3RhY2sucG9wKCk7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjbG9zZSBgJyArIHRva2VuLnR5cGUgKyAnYCAoJyArIHN0cmluZ2lmeVBvc2l0aW9uKHtcbiAgICAgICAgc3RhcnQ6IHRva2VuLnN0YXJ0LFxuICAgICAgICBlbmQ6IHRva2VuLmVuZFxuICAgICAgfSkgKyAnKTogaXRcdTIwMTlzIG5vdCBvcGVuJyk7XG4gICAgfSBlbHNlIGlmIChvcGVuWzBdLnR5cGUgIT09IHRva2VuLnR5cGUpIHtcbiAgICAgIGlmIChvbkV4aXRFcnJvcikge1xuICAgICAgICBvbkV4aXRFcnJvci5jYWxsKHRoaXMsIHRva2VuLCBvcGVuWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBvcGVuWzFdIHx8IGRlZmF1bHRPbkVycm9yO1xuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgdG9rZW4sIG9wZW5bMF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0NvbXBpbGVDb250ZXh0WydyZXN1bWUnXX1cbiAgICovXG4gIGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcodGhpcy5zdGFjay5wb3AoKSk7XG4gIH1cblxuICAvL1xuICAvLyBIYW5kbGVycy5cbiAgLy9cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25lbnRlcmxpc3RvcmRlcmVkKCkge1xuICAgIHRoaXMuZGF0YS5leHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZW50ZXJsaXN0aXRlbXZhbHVlKHRva2VuKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5leHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUpIHtcbiAgICAgIGNvbnN0IGFuY2VzdG9yID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDJdO1xuICAgICAgYW5jZXN0b3Iuc3RhcnQgPSBOdW1iZXIucGFyc2VJbnQodGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbiksIDEwKTtcbiAgICAgIHRoaXMuZGF0YS5leHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWRmZW5jZWluZm8oKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLmxhbmcgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWRmZW5jZW1ldGEoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLm1ldGEgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWRmZW5jZSgpIHtcbiAgICAvLyBFeGl0IGlmIHRoaXMgaXMgdGhlIGNsb3NpbmcgZmVuY2UuXG4gICAgaWYgKHRoaXMuZGF0YS5mbG93Q29kZUluc2lkZSkgcmV0dXJuO1xuICAgIHRoaXMuYnVmZmVyKCk7XG4gICAgdGhpcy5kYXRhLmZsb3dDb2RlSW5zaWRlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS52YWx1ZSA9IGRhdGEucmVwbGFjZSgvXihcXHI/XFxufFxccil8KFxccj9cXG58XFxyKSQvZywgJycpO1xuICAgIHRoaXMuZGF0YS5mbG93Q29kZUluc2lkZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjb2RlaW5kZW50ZWQoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLnZhbHVlID0gZGF0YS5yZXBsYWNlKC8oXFxyP1xcbnxcXHIpJC9nLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0ZGVmaW5pdGlvbmxhYmVsc3RyaW5nKHRva2VuKSB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS5sYWJlbCA9IGxhYmVsO1xuICAgIG5vZGUuaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIodGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbikpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0ZGVmaW5pdGlvbnRpdGxlc3RyaW5nKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS50aXRsZSA9IGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0ZGVmaW5pdGlvbmRlc3RpbmF0aW9uc3RyaW5nKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS51cmwgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGF0eGhlYWRpbmdzZXF1ZW5jZSh0b2tlbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgaWYgKCFub2RlLmRlcHRoKSB7XG4gICAgICBjb25zdCBkZXB0aCA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pLmxlbmd0aDtcbiAgICAgIG5vZGUuZGVwdGggPSBkZXB0aDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0c2V0ZXh0aGVhZGluZ3RleHQoKSB7XG4gICAgdGhpcy5kYXRhLnNldGV4dEhlYWRpbmdTbHVycExpbmVFbmRpbmcgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmdsaW5lc2VxdWVuY2UodG9rZW4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIG5vZGUuZGVwdGggPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKS5jb2RlUG9pbnRBdCgwKSA9PT0gNjEgPyAxIDogMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRzZXRleHRoZWFkaW5nKCkge1xuICAgIHRoaXMuZGF0YS5zZXRleHRIZWFkaW5nU2x1cnBMaW5lRW5kaW5nID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25lbnRlcmRhdGEodG9rZW4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIC8qKiBAdHlwZSB7QXJyYXk8Tm9kZXM+fSAqL1xuICAgIGNvbnN0IHNpYmxpbmdzID0gbm9kZS5jaGlsZHJlbjtcbiAgICBsZXQgdGFpbCA9IHNpYmxpbmdzW3NpYmxpbmdzLmxlbmd0aCAtIDFdO1xuICAgIGlmICghdGFpbCB8fCB0YWlsLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgLy8gQWRkIGEgbmV3IHRleHQgbm9kZS5cbiAgICAgIHRhaWwgPSB0ZXh0KCk7XG4gICAgICB0YWlsLnBvc2l0aW9uID0ge1xuICAgICAgICBzdGFydDogcG9pbnQodG9rZW4uc3RhcnQpLFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB3ZVx1MjAxOWxsIGFkZCBgZW5kYCBsYXRlci5cbiAgICAgICAgZW5kOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBzaWJsaW5ncy5wdXNoKHRhaWwpO1xuICAgIH1cbiAgICB0aGlzLnN0YWNrLnB1c2godGFpbCk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRkYXRhKHRva2VuKSB7XG4gICAgY29uc3QgdGFpbCA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgdGFpbC52YWx1ZSArPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKTtcbiAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZCk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRsaW5lZW5kaW5nKHRva2VuKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAvLyBJZiB3ZVx1MjAxOXJlIGF0IGEgaGFyZCBicmVhaywgaW5jbHVkZSB0aGUgbGluZSBlbmRpbmcgaW4gdGhlcmUuXG4gICAgaWYgKHRoaXMuZGF0YS5hdEhhcmRCcmVhaykge1xuICAgICAgY29uc3QgdGFpbCA9IGNvbnRleHQuY2hpbGRyZW5bY29udGV4dC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgIHRhaWwucG9zaXRpb24uZW5kID0gcG9pbnQodG9rZW4uZW5kKTtcbiAgICAgIHRoaXMuZGF0YS5hdEhhcmRCcmVhayA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRhdGEuc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZyAmJiBjb25maWcuY2FuQ29udGFpbkVvbHMuaW5jbHVkZXMoY29udGV4dC50eXBlKSkge1xuICAgICAgb25lbnRlcmRhdGEuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgICBvbmV4aXRkYXRhLmNhbGwodGhpcywgdG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGhhcmRicmVhaygpIHtcbiAgICB0aGlzLmRhdGEuYXRIYXJkQnJlYWsgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0aHRtbGZsb3coKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLnZhbHVlID0gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGh0bWx0ZXh0KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS52YWx1ZSA9IGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RldGV4dCgpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIG5vZGUudmFsdWUgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0bGluaygpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIC8vIE5vdGU6IHRoZXJlIGFyZSBhbHNvIGBpZGVudGlmaWVyYCBhbmQgYGxhYmVsYCBmaWVsZHMgb24gdGhpcyBsaW5rIG5vZGUhXG4gICAgLy8gVGhlc2UgYXJlIHVzZWQgLyBjbGVhbmVkIGhlcmUuXG5cbiAgICAvLyBUbyBkbzogY2xlYW4uXG4gICAgaWYgKHRoaXMuZGF0YS5pblJlZmVyZW5jZSkge1xuICAgICAgLyoqIEB0eXBlIHtSZWZlcmVuY2VUeXBlfSAqL1xuICAgICAgY29uc3QgcmVmZXJlbmNlVHlwZSA9IHRoaXMuZGF0YS5yZWZlcmVuY2VUeXBlIHx8ICdzaG9ydGN1dCc7XG4gICAgICBub2RlLnR5cGUgKz0gJ1JlZmVyZW5jZSc7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBub2RlLnJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VUeXBlO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuICAgICAgZGVsZXRlIG5vZGUudXJsO1xuICAgICAgZGVsZXRlIG5vZGUudGl0bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cbiAgICAgIGRlbGV0ZSBub2RlLmlkZW50aWZpZXI7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgbm9kZS5sYWJlbDtcbiAgICB9XG4gICAgdGhpcy5kYXRhLnJlZmVyZW5jZVR5cGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRpbWFnZSgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIC8vIE5vdGU6IHRoZXJlIGFyZSBhbHNvIGBpZGVudGlmaWVyYCBhbmQgYGxhYmVsYCBmaWVsZHMgb24gdGhpcyBsaW5rIG5vZGUhXG4gICAgLy8gVGhlc2UgYXJlIHVzZWQgLyBjbGVhbmVkIGhlcmUuXG5cbiAgICAvLyBUbyBkbzogY2xlYW4uXG4gICAgaWYgKHRoaXMuZGF0YS5pblJlZmVyZW5jZSkge1xuICAgICAgLyoqIEB0eXBlIHtSZWZlcmVuY2VUeXBlfSAqL1xuICAgICAgY29uc3QgcmVmZXJlbmNlVHlwZSA9IHRoaXMuZGF0YS5yZWZlcmVuY2VUeXBlIHx8ICdzaG9ydGN1dCc7XG4gICAgICBub2RlLnR5cGUgKz0gJ1JlZmVyZW5jZSc7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBub2RlLnJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VUeXBlO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuICAgICAgZGVsZXRlIG5vZGUudXJsO1xuICAgICAgZGVsZXRlIG5vZGUudGl0bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cbiAgICAgIGRlbGV0ZSBub2RlLmlkZW50aWZpZXI7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgbm9kZS5sYWJlbDtcbiAgICB9XG4gICAgdGhpcy5kYXRhLnJlZmVyZW5jZVR5cGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRsYWJlbHRleHQodG9rZW4pIHtcbiAgICBjb25zdCBzdHJpbmcgPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKTtcbiAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAyXTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBzdGFzaCB0aGlzIG9uIHRoZSBub2RlLCBhcyBpdCBtaWdodCBiZWNvbWUgYSByZWZlcmVuY2VcbiAgICAvLyBsYXRlci5cbiAgICBhbmNlc3Rvci5sYWJlbCA9IGRlY29kZVN0cmluZyhzdHJpbmcpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHNhbWUgYXMgYWJvdmUuXG4gICAgYW5jZXN0b3IuaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0bGFiZWwoKSB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgLy8gQXNzdW1lIGEgcmVmZXJlbmNlLlxuICAgIHRoaXMuZGF0YS5pblJlZmVyZW5jZSA9IHRydWU7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PFBocmFzaW5nQ29udGVudD59ICovXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGZyYWdtZW50LmNoaWxkcmVuO1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmFsdCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLnVybCA9IGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRyZXNvdXJjZXRpdGxlc3RyaW5nKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS50aXRsZSA9IGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRyZXNvdXJjZSgpIHtcbiAgICB0aGlzLmRhdGEuaW5SZWZlcmVuY2UgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmVudGVycmVmZXJlbmNlKCkge1xuICAgIHRoaXMuZGF0YS5yZWZlcmVuY2VUeXBlID0gJ2NvbGxhcHNlZCc7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRyZWZlcmVuY2VzdHJpbmcodG9rZW4pIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMucmVzdW1lKCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBzdGFzaCB0aGlzIG9uIHRoZSBub2RlLCBhcyBpdCBtaWdodCBiZWNvbWUgYSByZWZlcmVuY2VcbiAgICAvLyBsYXRlci5cbiAgICBub2RlLmxhYmVsID0gbGFiZWw7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogc2FtZSBhcyBhYm92ZS5cbiAgICBub2RlLmlkZW50aWZpZXIgPSBub3JtYWxpemVJZGVudGlmaWVyKHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pKS50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuZGF0YS5yZWZlcmVuY2VUeXBlID0gJ2Z1bGwnO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0Y2hhcmFjdGVycmVmZXJlbmNlbWFya2VyKHRva2VuKSB7XG4gICAgdGhpcy5kYXRhLmNoYXJhY3RlclJlZmVyZW5jZVR5cGUgPSB0b2tlbi50eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlKHRva2VuKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmRhdGEuY2hhcmFjdGVyUmVmZXJlbmNlVHlwZTtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHZhbHVlID0gZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZShkYXRhLCB0eXBlID09PSBcImNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWNcIiA/IDEwIDogMTYpO1xuICAgICAgdGhpcy5kYXRhLmNoYXJhY3RlclJlZmVyZW5jZVR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKGRhdGEpO1xuICAgICAgdmFsdWUgPSByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHRhaWwgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgdGFpbC52YWx1ZSArPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2UodG9rZW4pIHtcbiAgICBjb25zdCB0YWlsID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZCk7XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0YXV0b2xpbmtwcm90b2NvbCh0b2tlbikge1xuICAgIG9uZXhpdGRhdGEuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICBub2RlLnVybCA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGF1dG9saW5rZW1haWwodG9rZW4pIHtcbiAgICBvbmV4aXRkYXRhLmNhbGwodGhpcywgdG9rZW4pO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgbm9kZS51cmwgPSAnbWFpbHRvOicgKyB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKTtcbiAgfVxuXG4gIC8vXG4gIC8vIENyZWF0ZXJzLlxuICAvL1xuXG4gIC8qKiBAcmV0dXJucyB7QmxvY2txdW90ZX0gKi9cbiAgZnVuY3Rpb24gYmxvY2tRdW90ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2Jsb2NrcXVvdGUnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7Q29kZX0gKi9cbiAgZnVuY3Rpb24gY29kZUZsb3coKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgIGxhbmc6IG51bGwsXG4gICAgICBtZXRhOiBudWxsLFxuICAgICAgdmFsdWU6ICcnXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7SW5saW5lQ29kZX0gKi9cbiAgZnVuY3Rpb24gY29kZVRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbmxpbmVDb2RlJyxcbiAgICAgIHZhbHVlOiAnJ1xuICAgIH07XG4gIH1cblxuICAvKiogQHJldHVybnMge0RlZmluaXRpb259ICovXG4gIGZ1bmN0aW9uIGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkZWZpbml0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6ICcnLFxuICAgICAgbGFiZWw6IG51bGwsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHVybDogJydcbiAgICB9O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtFbXBoYXNpc30gKi9cbiAgZnVuY3Rpb24gZW1waGFzaXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdlbXBoYXNpcycsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtIZWFkaW5nfSAqL1xuICBmdW5jdGlvbiBoZWFkaW5nKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBkZXB0aGAgd2lsbCBiZSBzZXQgbGF0ZXIuXG4gICAgICBkZXB0aDogMCxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH07XG4gIH1cblxuICAvKiogQHJldHVybnMge0JyZWFrfSAqL1xuICBmdW5jdGlvbiBoYXJkQnJlYWsoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdicmVhaydcbiAgICB9O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtIdG1sfSAqL1xuICBmdW5jdGlvbiBodG1sKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICB2YWx1ZTogJydcbiAgICB9O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtJbWFnZX0gKi9cbiAgZnVuY3Rpb24gaW1hZ2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHVybDogJycsXG4gICAgICBhbHQ6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtMaW5rfSAqL1xuICBmdW5jdGlvbiBsaW5rKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnbGluaycsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHVybDogJycsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAqIEByZXR1cm5zIHtMaXN0fVxuICAgKi9cbiAgZnVuY3Rpb24gbGlzdCh0b2tlbikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICBvcmRlcmVkOiB0b2tlbi50eXBlID09PSAnbGlzdE9yZGVyZWQnLFxuICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICBzcHJlYWQ6IHRva2VuLl9zcHJlYWQsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAqIEByZXR1cm5zIHtMaXN0SXRlbX1cbiAgICovXG4gIGZ1bmN0aW9uIGxpc3RJdGVtKHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgICBzcHJlYWQ6IHRva2VuLl9zcHJlYWQsXG4gICAgICBjaGVja2VkOiBudWxsLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7UGFyYWdyYXBofSAqL1xuICBmdW5jdGlvbiBwYXJhZ3JhcGgoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7U3Ryb25nfSAqL1xuICBmdW5jdGlvbiBzdHJvbmcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzdHJvbmcnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7VGV4dH0gKi9cbiAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsdWU6ICcnXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7VGhlbWF0aWNCcmVha30gKi9cbiAgZnVuY3Rpb24gdGhlbWF0aWNCcmVhaygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RoZW1hdGljQnJlYWsnXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIENvcHkgYSBwb2ludC1saWtlIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7UG9pbnR9IGRcbiAqICAgUG9pbnQtbGlrZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtQb2ludH1cbiAqICAgdW5pc3QgcG9pbnQuXG4gKi9cbmZ1bmN0aW9uIHBvaW50KGQpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5lOiBkLmxpbmUsXG4gICAgY29sdW1uOiBkLmNvbHVtbixcbiAgICBvZmZzZXQ6IGQub2Zmc2V0XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb25maWd9IGNvbWJpbmVkXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PEV4dGVuc2lvbj4gfCBFeHRlbnNpb24+fSBleHRlbnNpb25zXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBjb25maWd1cmUoY29tYmluZWQsIGV4dGVuc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIHdoaWxlICgrK2luZGV4IDwgZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGV4dGVuc2lvbnNbaW5kZXhdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uZmlndXJlKGNvbWJpbmVkLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4dGVuc2lvbihjb21iaW5lZCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29uZmlnfSBjb21iaW5lZFxuICogQHBhcmFtIHtFeHRlbnNpb259IGV4dGVuc2lvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gZXh0ZW5zaW9uKGNvbWJpbmVkLCBleHRlbnNpb24pIHtcbiAgLyoqIEB0eXBlIHtrZXlvZiBFeHRlbnNpb259ICovXG4gIGxldCBrZXk7XG4gIGZvciAoa2V5IGluIGV4dGVuc2lvbikge1xuICAgIGlmIChvd24uY2FsbChleHRlbnNpb24sIGtleSkpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2NhbkNvbnRhaW5Fb2xzJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltrZXldO1xuICAgICAgICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgICAgICAgIGNvbWJpbmVkW2tleV0ucHVzaCguLi5yaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RyYW5zZm9ybXMnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gZXh0ZW5zaW9uW2tleV07XG4gICAgICAgICAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgICAgICAgY29tYmluZWRba2V5XS5wdXNoKC4uLnJpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnZW50ZXInOlxuICAgICAgICBjYXNlICdleGl0JzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltrZXldO1xuICAgICAgICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29tYmluZWRba2V5XSwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAvLyBObyBkZWZhdWx0XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKiBAdHlwZSB7T25FbnRlckVycm9yfSAqL1xuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IobGVmdCwgcmlnaHQpIHtcbiAgaWYgKGxlZnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjbG9zZSBgJyArIGxlZnQudHlwZSArICdgICgnICsgc3RyaW5naWZ5UG9zaXRpb24oe1xuICAgICAgc3RhcnQ6IGxlZnQuc3RhcnQsXG4gICAgICBlbmQ6IGxlZnQuZW5kXG4gICAgfSkgKyAnKTogYSBkaWZmZXJlbnQgdG9rZW4gKGAnICsgcmlnaHQudHlwZSArICdgLCAnICsgc3RyaW5naWZ5UG9zaXRpb24oe1xuICAgICAgc3RhcnQ6IHJpZ2h0LnN0YXJ0LFxuICAgICAgZW5kOiByaWdodC5lbmRcbiAgICB9KSArICcpIGlzIG9wZW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjbG9zZSBkb2N1bWVudCwgYSB0b2tlbiAoYCcgKyByaWdodC50eXBlICsgJ2AsICcgKyBzdHJpbmdpZnlQb3NpdGlvbih7XG4gICAgICBzdGFydDogcmlnaHQuc3RhcnQsXG4gICAgICBlbmQ6IHJpZ2h0LmVuZFxuICAgIH0pICsgJykgaXMgc3RpbGwgb3BlbicpO1xuICB9XG59IiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5PcHRpb25zfSBGcm9tTWFya2Rvd25PcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlmaWVkJykuUGFyc2VyPFJvb3Q+fSBQYXJzZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5Qcm9jZXNzb3I8Um9vdD59IFByb2Nlc3NvclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09taXQ8RnJvbU1hcmtkb3duT3B0aW9ucywgJ2V4dGVuc2lvbnMnIHwgJ21kYXN0RXh0ZW5zaW9ucyc+fSBPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtmcm9tTWFya2Rvd259IGZyb20gJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bidcblxuLyoqXG4gKiBBYWRkIHN1cHBvcnQgZm9yIHBhcnNpbmcgZnJvbSBtYXJrZG93bi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbWFya1BhcnNlKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3J9ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGluIEpTRG9jIGdlbmVyYXRlcyB3cm9uZyB0eXBlcyBpZiBgdGhpc2AgaXMgdHlwZWQgcmVndWxhcmx5LlxuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHNlbGYucGFyc2VyID0gcGFyc2VyXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtQYXJzZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZXIoZG9jKSB7XG4gICAgcmV0dXJuIGZyb21NYXJrZG93bihkb2MsIHtcbiAgICAgIC4uLnNlbGYuZGF0YSgnc2V0dGluZ3MnKSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAvLyBOb3RlOiB0aGVzZSBvcHRpb25zIGFyZSBub3QgaW4gdGhlIHJlYWRtZS5cbiAgICAgIC8vIFRoZSBnb2FsIGlzIGZvciB0aGVtIHRvIGJlIHNldCBieSBwbHVnaW5zIG9uIGBkYXRhYCBpbnN0ZWFkIG9mIGJlaW5nXG4gICAgICAvLyBwYXNzZWQgYnkgdXNlcnMuXG4gICAgICBleHRlbnNpb25zOiBzZWxmLmRhdGEoJ21pY3JvbWFya0V4dGVuc2lvbnMnKSB8fCBbXSxcbiAgICAgIG1kYXN0RXh0ZW5zaW9uczogc2VsZi5kYXRhKCdmcm9tTWFya2Rvd25FeHRlbnNpb25zJykgfHwgW11cbiAgICB9KVxuICB9XG59XG4iLCAiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBQYXJlbnRcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBGblxuICogQHRlbXBsYXRlIEZhbGxiYWNrXG4gKiBAdHlwZWRlZiB7Rm4gZXh0ZW5kcyAodmFsdWU6IGFueSkgPT4gdmFsdWUgaXMgaW5mZXIgVGhpbmcgPyBUaGluZyA6IEZhbGxiYWNrfSBQcmVkaWNhdGVcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBDaGVja1xuICogICBDaGVjayB0aGF0IGFuIGFyYml0cmFyeSB2YWx1ZSBpcyBhIG5vZGUuXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaXNcbiAqICAgVGhlIGdpdmVuIGNvbnRleHQuXG4gKiBAcGFyYW0ge3Vua25vd259IFtub2RlXVxuICogICBBbnl0aGluZyAodHlwaWNhbGx5IGEgbm9kZSkuXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmRleF1cbiAqICAgVGhlIG5vZGVcdTIwMTlzIHBvc2l0aW9uIGluIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gKiAgIFRoZSBub2RlXHUyMDE5cyBwYXJlbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciB0aGlzIGlzIGEgbm9kZSBhbmQgcGFzc2VzIGEgdGVzdC5cbiAqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBOb2RlfSBQcm9wc1xuICogICBPYmplY3QgdG8gY2hlY2sgZm9yIGVxdWl2YWxlbmNlLlxuICpcbiAqICAgTm90ZTogYE5vZGVgIGlzIGluY2x1ZGVkIGFzIGl0IGlzIGNvbW1vbiBidXQgaXMgbm90IGluZGV4YWJsZS5cbiAqXG4gKiBAdHlwZWRlZiB7QXJyYXk8UHJvcHMgfCBUZXN0RnVuY3Rpb24gfCBzdHJpbmc+IHwgUHJvcHMgfCBUZXN0RnVuY3Rpb24gfCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBUZXN0XG4gKiAgIENoZWNrIGZvciBhbiBhcmJpdHJhcnkgbm9kZS5cbiAqXG4gKiBAY2FsbGJhY2sgVGVzdEZ1bmN0aW9uXG4gKiAgIENoZWNrIGlmIGEgbm9kZSBwYXNzZXMgYSB0ZXN0LlxuICogQHBhcmFtIHt1bmtub3dufSB0aGlzXG4gKiAgIFRoZSBnaXZlbiBjb250ZXh0LlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiAgIEEgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2RlXHUyMDE5cyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gKiAgIFRoZSBub2RlXHUyMDE5cyBwYXJlbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbiB8IHVuZGVmaW5lZCB8IHZvaWR9XG4gKiAgIFdoZXRoZXIgdGhpcyBub2RlIHBhc3NlcyB0aGUgdGVzdC5cbiAqXG4gKiAgIE5vdGU6IGB2b2lkYCBpcyBpbmNsdWRlZCB1bnRpbCBUUyBzZWVzIG5vIHJldHVybiBhcyBgdW5kZWZpbmVkYC5cbiAqL1xuXG4vKipcbiAqIENoZWNrIGlmIGBub2RlYCBpcyBhIGBOb2RlYCBhbmQgd2hldGhlciBpdCBwYXNzZXMgdGhlIGdpdmVuIHRlc3QuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSBub2RlXG4gKiAgIFRoaW5nIHRvIGNoZWNrLCB0eXBpY2FsbHkgYE5vZGVgLlxuICogQHBhcmFtIHtUZXN0fSB0ZXN0XG4gKiAgIEEgY2hlY2sgZm9yIGEgc3BlY2lmaWMgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gaW5kZXhcbiAqICAgVGhlIG5vZGVcdTIwMTlzIHBvc2l0aW9uIGluIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBUaGUgbm9kZVx1MjAxOXMgcGFyZW50LlxuICogQHBhcmFtIHt1bmtub3dufSBjb250ZXh0XG4gKiAgIENvbnRleHQgb2JqZWN0IChgdGhpc2ApIHRvIHBhc3MgdG8gYHRlc3RgIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGBub2RlYCBpcyBhIG5vZGUgYW5kIHBhc3NlcyBhIHRlc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBpcyA9XG4gIC8vIE5vdGU6IG92ZXJsb2FkcyBpbiBKU0RvYyBjYW5cdTIwMTl0IHlldCB1c2UgZGlmZmVyZW50IGBAdGVtcGxhdGVgcy5cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKDxDb25kaXRpb24gZXh0ZW5kcyBzdHJpbmc+KG5vZGU6IHVua25vd24sIHRlc3Q6IENvbmRpdGlvbiwgaW5kZXg/OiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkLCBwYXJlbnQ/OiBQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkLCBjb250ZXh0PzogdW5rbm93bikgPT4gbm9kZSBpcyBOb2RlICYge3R5cGU6IENvbmRpdGlvbn0pICZcbiAgICogICAoPENvbmRpdGlvbiBleHRlbmRzIFByb3BzPihub2RlOiB1bmtub3duLCB0ZXN0OiBDb25kaXRpb24sIGluZGV4PzogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGFyZW50PzogUGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZCwgY29udGV4dD86IHVua25vd24pID0+IG5vZGUgaXMgTm9kZSAmIENvbmRpdGlvbikgJlxuICAgKiAgICg8Q29uZGl0aW9uIGV4dGVuZHMgVGVzdEZ1bmN0aW9uPihub2RlOiB1bmtub3duLCB0ZXN0OiBDb25kaXRpb24sIGluZGV4PzogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGFyZW50PzogUGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZCwgY29udGV4dD86IHVua25vd24pID0+IG5vZGUgaXMgTm9kZSAmIFByZWRpY2F0ZTxDb25kaXRpb24sIE5vZGU+KSAmXG4gICAqICAgKChub2RlPzogbnVsbCB8IHVuZGVmaW5lZCkgPT4gZmFsc2UpICZcbiAgICogICAoKG5vZGU6IHVua25vd24sIHRlc3Q/OiBudWxsIHwgdW5kZWZpbmVkLCBpbmRleD86IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHBhcmVudD86IFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBub2RlIGlzIE5vZGUpICZcbiAgICogICAoKG5vZGU6IHVua25vd24sIHRlc3Q/OiBUZXN0LCBpbmRleD86IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHBhcmVudD86IFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBib29sZWFuKVxuICAgKiApfVxuICAgKi9cbiAgKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7dW5rbm93bn0gW25vZGVdXG4gICAgICogQHBhcmFtIHtUZXN0fSBbdGVzdF1cbiAgICAgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmRleF1cbiAgICAgKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gICAgICogQHBhcmFtIHt1bmtub3dufSBbY29udGV4dF1cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuICAgIGZ1bmN0aW9uIChub2RlLCB0ZXN0LCBpbmRleCwgcGFyZW50LCBjb250ZXh0KSB7XG4gICAgICBjb25zdCBjaGVjayA9IGNvbnZlcnQodGVzdClcblxuICAgICAgaWYgKFxuICAgICAgICBpbmRleCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGluZGV4ICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgaW5kZXggPCAwIHx8XG4gICAgICAgICAgaW5kZXggPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBvc2l0aXZlIGZpbml0ZSBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICghaXMocGFyZW50KSB8fCAhcGFyZW50LmNoaWxkcmVuKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcGFyZW50IG5vZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBwYXJlbnQgPT09IG51bGwpICE9PVxuICAgICAgICAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gbnVsbClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGJvdGggcGFyZW50IGFuZCBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsb29rc0xpa2VBTm9kZShub2RlKVxuICAgICAgICA/IGNoZWNrLmNhbGwoY29udGV4dCwgbm9kZSwgaW5kZXgsIHBhcmVudClcbiAgICAgICAgOiBmYWxzZVxuICAgIH1cbiAgKVxuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGFzc2VydGlvbiBmcm9tIGEgdGVzdC5cbiAqXG4gKiBVc2VmdWwgaWYgeW91XHUyMDE5cmUgZ29pbmcgdG8gdGVzdCBtYW55IG5vZGVzLCBmb3IgZXhhbXBsZSB3aGVuIGNyZWF0aW5nIGFcbiAqIHV0aWxpdHkgd2hlcmUgc29tZXRoaW5nIGVsc2UgcGFzc2VzIGEgY29tcGF0aWJsZSB0ZXN0LlxuICpcbiAqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGEgYml0IGZhc3RlciBiZWNhdXNlIGl0IGV4cGVjdHMgdmFsaWQgaW5wdXQgb25seTpcbiAqIGEgYG5vZGVgLCBgaW5kZXhgLCBhbmQgYHBhcmVudGAuXG4gKlxuICogQHBhcmFtIHtUZXN0fSB0ZXN0XG4gKiAgICogICB3aGVuIG51bGxpc2gsIGNoZWNrcyBpZiBgbm9kZWAgaXMgYSBgTm9kZWAuXG4gKiAgICogICB3aGVuIGBzdHJpbmdgLCB3b3JrcyBsaWtlIHBhc3NpbmcgYChub2RlKSA9PiBub2RlLnR5cGUgPT09IHRlc3RgLlxuICogICAqICAgd2hlbiBgZnVuY3Rpb25gIGNoZWNrcyBpZiBmdW5jdGlvbiBwYXNzZWQgdGhlIG5vZGUgaXMgdHJ1ZS5cbiAqICAgKiAgIHdoZW4gYG9iamVjdGAsIGNoZWNrcyB0aGF0IGFsbCBrZXlzIGluIHRlc3QgYXJlIGluIG5vZGUsIGFuZCB0aGF0IHRoZXkgaGF2ZSAoc3RyaWN0bHkpIGVxdWFsIHZhbHVlcy5cbiAqICAgKiAgIHdoZW4gYGFycmF5YCwgY2hlY2tzIGlmIGFueSBvbmUgb2YgdGhlIHN1YnRlc3RzIHBhc3MuXG4gKiBAcmV0dXJucyB7Q2hlY2t9XG4gKiAgIEFuIGFzc2VydGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnQgPVxuICAvLyBOb3RlOiBvdmVybG9hZHMgaW4gSlNEb2MgY2FuXHUyMDE5dCB5ZXQgdXNlIGRpZmZlcmVudCBgQHRlbXBsYXRlYHMuXG4gIC8qKlxuICAgKiBAdHlwZSB7KFxuICAgKiAgICg8Q29uZGl0aW9uIGV4dGVuZHMgc3RyaW5nPih0ZXN0OiBDb25kaXRpb24pID0+IChub2RlOiB1bmtub3duLCBpbmRleD86IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHBhcmVudD86IFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBub2RlIGlzIE5vZGUgJiB7dHlwZTogQ29uZGl0aW9ufSkgJlxuICAgKiAgICg8Q29uZGl0aW9uIGV4dGVuZHMgUHJvcHM+KHRlc3Q6IENvbmRpdGlvbikgPT4gKG5vZGU6IHVua25vd24sIGluZGV4PzogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGFyZW50PzogUGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZCwgY29udGV4dD86IHVua25vd24pID0+IG5vZGUgaXMgTm9kZSAmIENvbmRpdGlvbikgJlxuICAgKiAgICg8Q29uZGl0aW9uIGV4dGVuZHMgVGVzdEZ1bmN0aW9uPih0ZXN0OiBDb25kaXRpb24pID0+IChub2RlOiB1bmtub3duLCBpbmRleD86IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHBhcmVudD86IFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBub2RlIGlzIE5vZGUgJiBQcmVkaWNhdGU8Q29uZGl0aW9uLCBOb2RlPikgJlxuICAgKiAgICgodGVzdD86IG51bGwgfCB1bmRlZmluZWQpID0+IChub2RlPzogdW5rbm93biwgaW5kZXg/OiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkLCBwYXJlbnQ/OiBQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkLCBjb250ZXh0PzogdW5rbm93bikgPT4gbm9kZSBpcyBOb2RlKSAmXG4gICAqICAgKCh0ZXN0PzogVGVzdCkgPT4gQ2hlY2spXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZXN0fSBbdGVzdF1cbiAgICAgKiBAcmV0dXJucyB7Q2hlY2t9XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgIGlmICh0ZXN0ID09PSBudWxsIHx8IHRlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gb2tcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjYXN0RmFjdG9yeSh0ZXN0KVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRlc3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRlc3QpID8gYW55RmFjdG9yeSh0ZXN0KSA6IHByb3BzRmFjdG9yeSh0ZXN0KVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRlc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0eXBlRmFjdG9yeSh0ZXN0KVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLCBzdHJpbmcsIG9yIG9iamVjdCBhcyB0ZXN0JylcbiAgICB9XG4gIClcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFByb3BzIHwgVGVzdEZ1bmN0aW9uIHwgc3RyaW5nPn0gdGVzdHNcbiAqIEByZXR1cm5zIHtDaGVja31cbiAqL1xuZnVuY3Rpb24gYW55RmFjdG9yeSh0ZXN0cykge1xuICAvKiogQHR5cGUge0FycmF5PENoZWNrPn0gKi9cbiAgY29uc3QgY2hlY2tzID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHRlc3RzLmxlbmd0aCkge1xuICAgIGNoZWNrc1tpbmRleF0gPSBjb252ZXJ0KHRlc3RzW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiBjYXN0RmFjdG9yeShhbnkpXG5cbiAgLyoqXG4gICAqIEB0aGlzIHt1bmtub3dufVxuICAgKiBAdHlwZSB7VGVzdEZ1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gYW55KC4uLnBhcmFtZXRlcnMpIHtcbiAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBjaGVja3MubGVuZ3RoKSB7XG4gICAgICBpZiAoY2hlY2tzW2luZGV4XS5hcHBseSh0aGlzLCBwYXJhbWV0ZXJzKSkgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFR1cm4gYW4gb2JqZWN0IGludG8gYSB0ZXN0IGZvciBhIG5vZGUgd2l0aCBhIGNlcnRhaW4gZmllbGRzLlxuICpcbiAqIEBwYXJhbSB7UHJvcHN9IGNoZWNrXG4gKiBAcmV0dXJucyB7Q2hlY2t9XG4gKi9cbmZ1bmN0aW9uIHByb3BzRmFjdG9yeShjaGVjaykge1xuICBjb25zdCBjaGVja0FzUmVjb3JkID0gLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gKi8gKGNoZWNrKVxuXG4gIHJldHVybiBjYXN0RmFjdG9yeShhbGwpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGFsbChub2RlKSB7XG4gICAgY29uc3Qgbm9kZUFzUmVjb3JkID0gLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gKi8gKFxuICAgICAgLyoqIEB0eXBlIHt1bmtub3dufSAqLyAobm9kZSlcbiAgICApXG5cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQga2V5XG5cbiAgICBmb3IgKGtleSBpbiBjaGVjaykge1xuICAgICAgaWYgKG5vZGVBc1JlY29yZFtrZXldICE9PSBjaGVja0FzUmVjb3JkW2tleV0pIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuLyoqXG4gKiBUdXJuIGEgc3RyaW5nIGludG8gYSB0ZXN0IGZvciBhIG5vZGUgd2l0aCBhIGNlcnRhaW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hlY2tcbiAqIEByZXR1cm5zIHtDaGVja31cbiAqL1xuZnVuY3Rpb24gdHlwZUZhY3RvcnkoY2hlY2spIHtcbiAgcmV0dXJuIGNhc3RGYWN0b3J5KHR5cGUpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgZnVuY3Rpb24gdHlwZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS50eXBlID09PSBjaGVja1xuICB9XG59XG5cbi8qKlxuICogVHVybiBhIGN1c3RvbSB0ZXN0IGludG8gYSB0ZXN0IGZvciBhIG5vZGUgdGhhdCBwYXNzZXMgdGhhdCB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7VGVzdEZ1bmN0aW9ufSB0ZXN0RnVuY3Rpb25cbiAqIEByZXR1cm5zIHtDaGVja31cbiAqL1xuZnVuY3Rpb24gY2FzdEZhY3RvcnkodGVzdEZ1bmN0aW9uKSB7XG4gIHJldHVybiBjaGVja1xuXG4gIC8qKlxuICAgKiBAdGhpcyB7dW5rbm93bn1cbiAgICogQHR5cGUge0NoZWNrfVxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2sodmFsdWUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgIGxvb2tzTGlrZUFOb2RlKHZhbHVlKSAmJlxuICAgICAgICB0ZXN0RnVuY3Rpb24uY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgPyBpbmRleCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwYXJlbnQgfHwgdW5kZWZpbmVkXG4gICAgICAgIClcbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogQHJldHVybnMge3ZhbHVlIGlzIE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGxvb2tzTGlrZUFOb2RlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICd0eXBlJyBpbiB2YWx1ZVxufVxuIiwgIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2xvcihkKSB7XG4gIHJldHVybiBkXG59XG4iLCAiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IFVuaXN0Tm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5QYXJlbnR9IFVuaXN0UGFyZW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7RXhjbHVkZTxpbXBvcnQoJ3VuaXN0LXV0aWwtaXMnKS5UZXN0LCB1bmRlZmluZWQ+IHwgdW5kZWZpbmVkfSBUZXN0XG4gKiAgIFRlc3QgZnJvbSBgdW5pc3QtdXRpbC1pc2AuXG4gKlxuICogICBOb3RlOiB3ZSBoYXZlIHJlbW92ZSBhbmQgYWRkIGB1bmRlZmluZWRgLCBiZWNhdXNlIG90aGVyd2lzZSB3aGVuIGdlbmVyYXRpbmdcbiAqICAgYXV0b21hdGljIGAuZC50c2AgZmlsZXMsIFRTIHRyaWVzIHRvIGZsYXR0ZW4gcGF0aHMgZnJvbSBhIGxvY2FsIHBlcnNwZWN0aXZlLFxuICogICB3aGljaCBkb2Vzblx1MjAxOXQgd29yayB3aGVuIHB1Ymxpc2hpbmcgb24gbnBtLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhcbiAqICAgRm4gZXh0ZW5kcyAodmFsdWU6IGFueSkgPT4gdmFsdWUgaXMgaW5mZXIgVGhpbmdcbiAqICAgPyBUaGluZ1xuICogICA6IEZhbGxiYWNrXG4gKiApfSBQcmVkaWNhdGVcbiAqICAgR2V0IHRoZSB2YWx1ZSBvZiBhIHR5cGUgZ3VhcmQgYEZuYC5cbiAqIEB0ZW1wbGF0ZSBGblxuICogICBWYWx1ZTsgdHlwaWNhbGx5IGZ1bmN0aW9uIHRoYXQgaXMgYSB0eXBlIGd1YXJkIChzdWNoIGFzIGAoeCk6IHggaXMgWWApLlxuICogQHRlbXBsYXRlIEZhbGxiYWNrXG4gKiAgIFZhbHVlIHRvIHlpZWxkIGlmIGBGbmAgaXMgbm90IGEgdHlwZSBndWFyZC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIENoZWNrIGV4dGVuZHMgbnVsbCB8IHVuZGVmaW5lZCAvLyBObyB0ZXN0LlxuICogICA/IFZhbHVlXG4gKiAgIDogVmFsdWUgZXh0ZW5kcyB7dHlwZTogQ2hlY2t9IC8vIFN0cmluZyAodHlwZSkgdGVzdC5cbiAqICAgPyBWYWx1ZVxuICogICA6IFZhbHVlIGV4dGVuZHMgQ2hlY2sgLy8gUGFydGlhbCB0ZXN0LlxuICogICA/IFZhbHVlXG4gKiAgIDogQ2hlY2sgZXh0ZW5kcyBGdW5jdGlvbiAvLyBGdW5jdGlvbiB0ZXN0LlxuICogICA/IFByZWRpY2F0ZTxDaGVjaywgVmFsdWU+IGV4dGVuZHMgVmFsdWVcbiAqICAgICA/IFByZWRpY2F0ZTxDaGVjaywgVmFsdWU+XG4gKiAgICAgOiBuZXZlclxuICogICA6IG5ldmVyIC8vIFNvbWUgb3RoZXIgdGVzdD9cbiAqICl9IE1hdGNoZXNPbmVcbiAqICAgQ2hlY2sgd2hldGhlciBhIG5vZGUgbWF0Y2hlcyBhIHByaW1pdGl2ZSBjaGVjayBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gKiBAdGVtcGxhdGUgVmFsdWVcbiAqICAgVmFsdWU7IHR5cGljYWxseSB1bmlzdCBgTm9kZWAuXG4gKiBAdGVtcGxhdGUgQ2hlY2tcbiAqICAgVmFsdWU7IHR5cGljYWxseSBgdW5pc3QtdXRpbC1pc2AtY29tcGF0aWJsZSB0ZXN0LCBidXQgbm90IGFycmF5cy5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIENoZWNrIGV4dGVuZHMgQXJyYXk8YW55PlxuICogICA/IE1hdGNoZXNPbmU8VmFsdWUsIENoZWNrW2tleW9mIENoZWNrXT5cbiAqICAgOiBNYXRjaGVzT25lPFZhbHVlLCBDaGVjaz5cbiAqICl9IE1hdGNoZXNcbiAqICAgQ2hlY2sgd2hldGhlciBhIG5vZGUgbWF0Y2hlcyBhIGNoZWNrIGluIHRoZSB0eXBlIHN5c3RlbS5cbiAqIEB0ZW1wbGF0ZSBWYWx1ZVxuICogICBWYWx1ZTsgdHlwaWNhbGx5IHVuaXN0IGBOb2RlYC5cbiAqIEB0ZW1wbGF0ZSBDaGVja1xuICogICBWYWx1ZTsgdHlwaWNhbGx5IGB1bmlzdC11dGlsLWlzYC1jb21wYXRpYmxlIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7MCB8IDEgfCAyIHwgMyB8IDQgfCA1IHwgNiB8IDcgfCA4IHwgOSB8IDEwfSBVaW50XG4gKiAgIE51bWJlcjsgY2FwcGVkIHJlYXNvbmFibHkuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7SSBleHRlbmRzIDAgPyAxIDogSSBleHRlbmRzIDEgPyAyIDogSSBleHRlbmRzIDIgPyAzIDogSSBleHRlbmRzIDMgPyA0IDogSSBleHRlbmRzIDQgPyA1IDogSSBleHRlbmRzIDUgPyA2IDogSSBleHRlbmRzIDYgPyA3IDogSSBleHRlbmRzIDcgPyA4IDogSSBleHRlbmRzIDggPyA5IDogMTB9IEluY3JlbWVudFxuICogICBJbmNyZW1lbnQgYSBudW1iZXIgaW4gdGhlIHR5cGUgc3lzdGVtLlxuICogQHRlbXBsYXRlIHtVaW50fSBbST0wXVxuICogICBJbmRleC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIE5vZGUgZXh0ZW5kcyBVbmlzdFBhcmVudFxuICogICA/IE5vZGUgZXh0ZW5kcyB7Y2hpbGRyZW46IEFycmF5PGluZmVyIENoaWxkcmVuPn1cbiAqICAgICA/IENoaWxkIGV4dGVuZHMgQ2hpbGRyZW4gPyBOb2RlIDogbmV2ZXJcbiAqICAgICA6IG5ldmVyXG4gKiAgIDogbmV2ZXJcbiAqICl9IEludGVybmFsUGFyZW50XG4gKiAgIENvbGxlY3Qgbm9kZXMgdGhhdCBjYW4gYmUgcGFyZW50cyBvZiBgQ2hpbGRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IE5vZGVcbiAqICAgQWxsIG5vZGUgdHlwZXMgaW4gYSB0cmVlLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IENoaWxkXG4gKiAgIE5vZGUgdG8gc2VhcmNoIGZvci5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtJbnRlcm5hbFBhcmVudDxJbmNsdXNpdmVEZXNjZW5kYW50PFRyZWU+LCBDaGlsZD59IFBhcmVudFxuICogICBDb2xsZWN0IG5vZGVzIGluIGBUcmVlYCB0aGF0IGNhbiBiZSBwYXJlbnRzIG9mIGBDaGlsZGAuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gVHJlZVxuICogICBBbGwgbm9kZSB0eXBlcyBpbiBhIHRyZWUuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gQ2hpbGRcbiAqICAgTm9kZSB0byBzZWFyY2ggZm9yLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhcbiAqICAgRGVwdGggZXh0ZW5kcyBNYXhcbiAqICAgPyBuZXZlclxuICogICA6XG4gKiAgICAgfCBJbnRlcm5hbFBhcmVudDxOb2RlLCBDaGlsZD5cbiAqICAgICB8IEludGVybmFsQW5jZXN0b3I8Tm9kZSwgSW50ZXJuYWxQYXJlbnQ8Tm9kZSwgQ2hpbGQ+LCBNYXgsIEluY3JlbWVudDxEZXB0aD4+XG4gKiApfSBJbnRlcm5hbEFuY2VzdG9yXG4gKiAgIENvbGxlY3Qgbm9kZXMgaW4gYFRyZWVgIHRoYXQgY2FuIGJlIGFuY2VzdG9ycyBvZiBgQ2hpbGRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IE5vZGVcbiAqICAgQWxsIG5vZGUgdHlwZXMgaW4gYSB0cmVlLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IENoaWxkXG4gKiAgIE5vZGUgdG8gc2VhcmNoIGZvci5cbiAqIEB0ZW1wbGF0ZSB7VWludH0gW01heD0xMF1cbiAqICAgTWF4OyBzZWFyY2hlcyB1cCB0byB0aGlzIGRlcHRoLlxuICogQHRlbXBsYXRlIHtVaW50fSBbRGVwdGg9MF1cbiAqICAgQ3VycmVudCBkZXB0aC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtJbnRlcm5hbEFuY2VzdG9yPEluY2x1c2l2ZURlc2NlbmRhbnQ8VHJlZT4sIENoaWxkPn0gQW5jZXN0b3JcbiAqICAgQ29sbGVjdCBub2RlcyBpbiBgVHJlZWAgdGhhdCBjYW4gYmUgYW5jZXN0b3JzIG9mIGBDaGlsZGAuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gVHJlZVxuICogICBBbGwgbm9kZSB0eXBlcyBpbiBhIHRyZWUuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gQ2hpbGRcbiAqICAgTm9kZSB0byBzZWFyY2ggZm9yLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhcbiAqICAgVHJlZSBleHRlbmRzIFVuaXN0UGFyZW50XG4gKiAgICAgPyBEZXB0aCBleHRlbmRzIE1heFxuICogICAgICAgPyBUcmVlXG4gKiAgICAgICA6IFRyZWUgfCBJbmNsdXNpdmVEZXNjZW5kYW50PFRyZWVbJ2NoaWxkcmVuJ11bbnVtYmVyXSwgTWF4LCBJbmNyZW1lbnQ8RGVwdGg+PlxuICogICAgIDogVHJlZVxuICogKX0gSW5jbHVzaXZlRGVzY2VuZGFudFxuICogICBDb2xsZWN0IGFsbCAoaW5jbHVzaXZlKSBkZXNjZW5kYW50cyBvZiBgVHJlZWAuXG4gKlxuICogICA+IFx1RDgzRFx1REM0OSAqKk5vdGUqKjogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIGZhc3Rlc3Qgd2F5IHRvXG4gKiAgID4gcmVjdXJzZSB3aXRob3V0IGFjdHVhbGx5IHJ1bm5pbmcgaW50byBhbiBpbmZpbml0ZSBsb29wLCB3aGljaCB0aGVcbiAqICAgPiBwcmV2aW91cyB2ZXJzaW9uIGRpZC5cbiAqICAgPlxuICogICA+IFByYWN0aWNhbGx5LCBhIG1heCBvZiBgMmAgaXMgdHlwaWNhbGx5IGVub3VnaCBhc3N1bWluZyBhIGBSb290YCBpc1xuICogICA+IHBhc3NlZCwgYnV0IGl0IGRvZXNuXHUyMDE5dCBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICogICA+IEl0IGdldHMgaGlnaGVyIHdpdGggYExpc3QgPiBMaXN0SXRlbSA+IFRhYmxlID4gVGFibGVSb3cgPiBUYWJsZUNlbGxgLlxuICogICA+IFVzaW5nIHVwIHRvIGAxMGAgZG9lc25cdTIwMTl0IGh1cnQgb3IgaGVscCBlaXRoZXIuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gVHJlZVxuICogICBUcmVlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1VpbnR9IFtNYXg9MTBdXG4gKiAgIE1heDsgc2VhcmNoZXMgdXAgdG8gdGhpcyBkZXB0aC5cbiAqIEB0ZW1wbGF0ZSB7VWludH0gW0RlcHRoPTBdXG4gKiAgIEN1cnJlbnQgZGVwdGguXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7J3NraXAnIHwgYm9vbGVhbn0gQWN0aW9uXG4gKiAgIFVuaW9uIG9mIHRoZSBhY3Rpb24gdHlwZXMuXG4gKlxuICogQHR5cGVkZWYge251bWJlcn0gSW5kZXhcbiAqICAgTW92ZSB0byB0aGUgc2libGluZyBhdCBgaW5kZXhgIG5leHQgKGFmdGVyIG5vZGUgaXRzZWxmIGlzIGNvbXBsZXRlbHlcbiAqICAgdHJhdmVyc2VkKS5cbiAqXG4gKiAgIFVzZWZ1bCBpZiBtdXRhdGluZyB0aGUgdHJlZSwgc3VjaCBhcyByZW1vdmluZyB0aGUgbm9kZSB0aGUgdmlzaXRvciBpc1xuICogICBjdXJyZW50bHkgb24sIG9yIGFueSBvZiBpdHMgcHJldmlvdXMgc2libGluZ3MuXG4gKiAgIFJlc3VsdHMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBjaGlsZHJlbi5sZW5ndGhgIHN0b3BcbiAqICAgdHJhdmVyc2luZyB0aGUgcGFyZW50LlxuICpcbiAqIEB0eXBlZGVmIHtbKEFjdGlvbiB8IG51bGwgfCB1bmRlZmluZWQgfCB2b2lkKT8sIChJbmRleCB8IG51bGwgfCB1bmRlZmluZWQpP119IEFjdGlvblR1cGxlXG4gKiAgIExpc3Qgd2l0aCBvbmUgb3IgdHdvIHZhbHVlcywgdGhlIGZpcnN0IGFuIGFjdGlvbiwgdGhlIHNlY29uZCBhbiBpbmRleC5cbiAqXG4gKiBAdHlwZWRlZiB7QWN0aW9uIHwgQWN0aW9uVHVwbGUgfCBJbmRleCB8IG51bGwgfCB1bmRlZmluZWQgfCB2b2lkfSBWaXNpdG9yUmVzdWx0XG4gKiAgIEFueSB2YWx1ZSB0aGF0IGNhbiBiZSByZXR1cm5lZCBmcm9tIGEgdmlzaXRvci5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBWaXNpdG9yXG4gKiAgIEhhbmRsZSBhIG5vZGUgKG1hdGNoaW5nIGB0ZXN0YCwgaWYgZ2l2ZW4pLlxuICpcbiAqICAgVmlzaXRvcnMgYXJlIGZyZWUgdG8gdHJhbnNmb3JtIGBub2RlYC5cbiAqICAgVGhleSBjYW4gYWxzbyB0cmFuc2Zvcm0gdGhlIHBhcmVudCBvZiBub2RlICh0aGUgbGFzdCBvZiBgYW5jZXN0b3JzYCkuXG4gKlxuICogICBSZXBsYWNpbmcgYG5vZGVgIGl0c2VsZiwgaWYgYFNLSVBgIGlzIG5vdCByZXR1cm5lZCwgc3RpbGwgY2F1c2VzIGl0c1xuICogICBkZXNjZW5kYW50cyB0byBiZSB3YWxrZWQgKHdoaWNoIGlzIGEgYnVnKS5cbiAqXG4gKiAgIFdoZW4gYWRkaW5nIG9yIHJlbW92aW5nIHByZXZpb3VzIHNpYmxpbmdzIG9mIGBub2RlYCAob3IgbmV4dCBzaWJsaW5ncywgaW5cbiAqICAgY2FzZSBvZiByZXZlcnNlKSwgdGhlIGBWaXNpdG9yYCBzaG91bGQgcmV0dXJuIGEgbmV3IGBJbmRleGAgdG8gc3BlY2lmeSB0aGVcbiAqICAgc2libGluZyB0byB0cmF2ZXJzZSBhZnRlciBgbm9kZWAgaXMgdHJhdmVyc2VkLlxuICogICBBZGRpbmcgb3IgcmVtb3ZpbmcgbmV4dCBzaWJsaW5ncyBvZiBgbm9kZWAgKG9yIHByZXZpb3VzIHNpYmxpbmdzLCBpbiBjYXNlXG4gKiAgIG9mIHJldmVyc2UpIGlzIGhhbmRsZWQgYXMgZXhwZWN0ZWQgd2l0aG91dCBuZWVkaW5nIHRvIHJldHVybiBhIG5ldyBgSW5kZXhgLlxuICpcbiAqICAgUmVtb3ZpbmcgdGhlIGNoaWxkcmVuIHByb3BlcnR5IG9mIGFuIGFuY2VzdG9yIHN0aWxsIHJlc3VsdHMgaW4gdGhlbSBiZWluZ1xuICogICB0cmF2ZXJzZWQuXG4gKiBAcGFyYW0ge1Zpc2l0ZWR9IG5vZGVcbiAqICAgRm91bmQgbm9kZS5cbiAqIEBwYXJhbSB7QXJyYXk8VmlzaXRlZFBhcmVudHM+fSBhbmNlc3RvcnNcbiAqICAgQW5jZXN0b3JzIG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtWaXNpdG9yUmVzdWx0fVxuICogICBXaGF0IHRvIGRvIG5leHQuXG4gKlxuICogICBBbiBgSW5kZXhgIGlzIHRyZWF0ZWQgYXMgYSB0dXBsZSBvZiBgW0NPTlRJTlVFLCBJbmRleF1gLlxuICogICBBbiBgQWN0aW9uYCBpcyB0cmVhdGVkIGFzIGEgdHVwbGUgb2YgYFtBY3Rpb25dYC5cbiAqXG4gKiAgIFBhc3NpbmcgYSB0dXBsZSBiYWNrIG9ubHkgbWFrZXMgc2Vuc2UgaWYgdGhlIGBBY3Rpb25gIGlzIGBTS0lQYC5cbiAqICAgV2hlbiB0aGUgYEFjdGlvbmAgaXMgYEVYSVRgLCB0aGF0IGFjdGlvbiBjYW4gYmUgcmV0dXJuZWQuXG4gKiAgIFdoZW4gdGhlIGBBY3Rpb25gIGlzIGBDT05USU5VRWAsIGBJbmRleGAgY2FuIGJlIHJldHVybmVkLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFtWaXNpdGVkPVVuaXN0Tm9kZV1cbiAqICAgVmlzaXRlZCBub2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1VuaXN0UGFyZW50fSBbVmlzaXRlZFBhcmVudHM9VW5pc3RQYXJlbnRdXG4gKiAgIEFuY2VzdG9yIHR5cGUuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7VmlzaXRvcjxNYXRjaGVzPEluY2x1c2l2ZURlc2NlbmRhbnQ8VHJlZT4sIENoZWNrPiwgQW5jZXN0b3I8VHJlZSwgTWF0Y2hlczxJbmNsdXNpdmVEZXNjZW5kYW50PFRyZWU+LCBDaGVjaz4+Pn0gQnVpbGRWaXNpdG9yXG4gKiAgIEJ1aWxkIGEgdHlwZWQgYFZpc2l0b3JgIGZ1bmN0aW9uIGZyb20gYSB0cmVlIGFuZCBhIHRlc3QuXG4gKlxuICogICBJdCB3aWxsIGluZmVyIHdoaWNoIHZhbHVlcyBhcmUgcGFzc2VkIGFzIGBub2RlYCBhbmQgd2hpY2ggYXMgYHBhcmVudHNgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFtUcmVlPVVuaXN0Tm9kZV1cbiAqICAgVHJlZSB0eXBlLlxuICogQHRlbXBsYXRlIHtUZXN0fSBbQ2hlY2s9VGVzdF1cbiAqICAgVGVzdCB0eXBlLlxuICovXG5cbmltcG9ydCB7Y29udmVydH0gZnJvbSAndW5pc3QtdXRpbC1pcydcbmltcG9ydCB7Y29sb3J9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9kby1ub3QtdXNlLWNvbG9yJ1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PEFjdGlvblR1cGxlPn0gKi9cbmNvbnN0IGVtcHR5ID0gW11cblxuLyoqXG4gKiBDb250aW51ZSB0cmF2ZXJzaW5nIGFzIG5vcm1hbC5cbiAqL1xuZXhwb3J0IGNvbnN0IENPTlRJTlVFID0gdHJ1ZVxuXG4vKipcbiAqIFN0b3AgdHJhdmVyc2luZyBpbW1lZGlhdGVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVYSVQgPSBmYWxzZVxuXG4vKipcbiAqIERvIG5vdCB0cmF2ZXJzZSB0aGlzIG5vZGVcdTIwMTlzIGNoaWxkcmVuLlxuICovXG5leHBvcnQgY29uc3QgU0tJUCA9ICdza2lwJ1xuXG4vKipcbiAqIFZpc2l0IG5vZGVzLCB3aXRoIGFuY2VzdHJhbCBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBwZXJmb3JtcyAqZGVwdGgtZmlyc3QqICp0cmVlIHRyYXZlcnNhbCogaW4gKnByZW9yZGVyKlxuICogKCoqTkxSKiopIG9yIGlmIGByZXZlcnNlYCBpcyBnaXZlbiwgaW4gKnJldmVyc2UgcHJlb3JkZXIqICgqKk5STCoqKS5cbiAqXG4gKiBZb3UgY2FuIGNob29zZSBmb3Igd2hpY2ggbm9kZXMgYHZpc2l0b3JgIGlzIGNhbGxlZCBieSBwYXNzaW5nIGEgYHRlc3RgLlxuICogRm9yIGNvbXBsZXggdGVzdHMsIHlvdSBzaG91bGQgdGVzdCB5b3Vyc2VsZiBpbiBgdmlzaXRvcmAsIGFzIGl0IHdpbGwgYmVcbiAqIGZhc3RlciBhbmQgd2lsbCBoYXZlIGltcHJvdmVkIHR5cGUgaW5mb3JtYXRpb24uXG4gKlxuICogV2Fsa2luZyB0aGUgdHJlZSBpcyBhbiBpbnRlbnNpdmUgdGFzay5cbiAqIE1ha2UgdXNlIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIHRoZSB2aXNpdG9yIHdoZW4gcG9zc2libGUuXG4gKiBJbnN0ZWFkIG9mIHdhbGtpbmcgYSB0cmVlIG11bHRpcGxlIHRpbWVzLCB3YWxrIGl0IG9uY2UsIHVzZSBgdW5pc3QtdXRpbC1pc2BcbiAqIHRvIGNoZWNrIGlmIGEgbm9kZSBtYXRjaGVzLCBhbmQgdGhlbiBwZXJmb3JtIGRpZmZlcmVudCBvcGVyYXRpb25zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSB0cmVlLlxuICogU2VlIGBWaXNpdG9yYCBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBvdmVybG9hZFxuICogQHBhcmFtIHtUcmVlfSB0cmVlXG4gKiBAcGFyYW0ge0NoZWNrfSBjaGVja1xuICogQHBhcmFtIHtCdWlsZFZpc2l0b3I8VHJlZSwgQ2hlY2s+fSB2aXNpdG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbcmV2ZXJzZV1cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKlxuICogQG92ZXJsb2FkXG4gKiBAcGFyYW0ge1RyZWV9IHRyZWVcbiAqIEBwYXJhbSB7QnVpbGRWaXNpdG9yPFRyZWU+fSB2aXNpdG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbcmV2ZXJzZV1cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKlxuICogQHBhcmFtIHtVbmlzdE5vZGV9IHRyZWVcbiAqICAgVHJlZSB0byB0cmF2ZXJzZS5cbiAqIEBwYXJhbSB7VmlzaXRvciB8IFRlc3R9IHRlc3RcbiAqICAgYHVuaXN0LXV0aWwtaXNgLWNvbXBhdGlibGUgdGVzdFxuICogQHBhcmFtIHtWaXNpdG9yIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFt2aXNpdG9yXVxuICogICBIYW5kbGUgZWFjaCBub2RlLlxuICogQHBhcmFtIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3JldmVyc2VdXG4gKiAgIFRyYXZlcnNlIGluIHJldmVyc2UgcHJlb3JkZXIgKE5STCkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBwcmVvcmRlciAoTkxSKS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFRyZWVcbiAqICAgTm9kZSB0eXBlLlxuICogQHRlbXBsYXRlIHtUZXN0fSBDaGVja1xuICogICBgdW5pc3QtdXRpbC1pc2AtY29tcGF0aWJsZSB0ZXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgLyoqIEB0eXBlIHtUZXN0fSAqL1xuICBsZXQgY2hlY2tcblxuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZpc2l0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXZlcnNlID0gdmlzaXRvclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm8gdmlzaXRvciBnaXZlbiwgc28gYHZpc2l0b3JgIGlzIHRlc3QuXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgfSBlbHNlIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHZpc2l0b3IgZ2l2ZW4sIHNvIGB0ZXN0YCBpc25cdTIwMTl0IGEgdmlzaXRvci5cbiAgICBjaGVjayA9IHRlc3RcbiAgfVxuXG4gIGNvbnN0IGlzID0gY29udmVydChjaGVjaylcbiAgY29uc3Qgc3RlcCA9IHJldmVyc2UgPyAtMSA6IDFcblxuICBmYWN0b3J5KHRyZWUsIHVuZGVmaW5lZCwgW10pKClcblxuICAvKipcbiAgICogQHBhcmFtIHtVbmlzdE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gICAqIEBwYXJhbSB7QXJyYXk8VW5pc3RQYXJlbnQ+fSBwYXJlbnRzXG4gICAqL1xuICBmdW5jdGlvbiBmYWN0b3J5KG5vZGUsIGluZGV4LCBwYXJlbnRzKSB7XG4gICAgY29uc3QgdmFsdWUgPSAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqLyAoXG4gICAgICBub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyA/IG5vZGUgOiB7fVxuICAgIClcblxuICAgIGlmICh0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IG5hbWUgPVxuICAgICAgICAvLyBgaGFzdGBcbiAgICAgICAgdHlwZW9mIHZhbHVlLnRhZ05hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgPyB2YWx1ZS50YWdOYW1lXG4gICAgICAgICAgOiAvLyBgeGFzdGBcbiAgICAgICAgICB0eXBlb2YgdmFsdWUubmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICA/IHZhbHVlLm5hbWVcbiAgICAgICAgICA6IHVuZGVmaW5lZFxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmlzaXQsICduYW1lJywge1xuICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAnbm9kZSAoJyArIGNvbG9yKG5vZGUudHlwZSArIChuYW1lID8gJzwnICsgbmFtZSArICc+JyA6ICcnKSkgKyAnKSdcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpc2l0XG5cbiAgICBmdW5jdGlvbiB2aXNpdCgpIHtcbiAgICAgIC8qKiBAdHlwZSB7UmVhZG9ubHk8QWN0aW9uVHVwbGU+fSAqL1xuICAgICAgbGV0IHJlc3VsdCA9IGVtcHR5XG4gICAgICAvKiogQHR5cGUge1JlYWRvbmx5PEFjdGlvblR1cGxlPn0gKi9cbiAgICAgIGxldCBzdWJyZXN1bHRcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgICAgbGV0IG9mZnNldFxuICAgICAgLyoqIEB0eXBlIHtBcnJheTxVbmlzdFBhcmVudD59ICovXG4gICAgICBsZXQgZ3JhbmRwYXJlbnRzXG5cbiAgICAgIGlmICghdGVzdCB8fCBpcyhub2RlLCBpbmRleCwgcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdIHx8IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYHZpc2l0b3JgIGlzIG5vdyBhIHZpc2l0b3IuXG4gICAgICAgIHJlc3VsdCA9IHRvUmVzdWx0KHZpc2l0b3Iobm9kZSwgcGFyZW50cykpXG5cbiAgICAgICAgaWYgKHJlc3VsdFswXSA9PT0gRVhJVCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJ2NoaWxkcmVuJyBpbiBub2RlICYmIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3Qgbm9kZUFzUGFyZW50ID0gLyoqIEB0eXBlIHtVbmlzdFBhcmVudH0gKi8gKG5vZGUpXG5cbiAgICAgICAgaWYgKG5vZGVBc1BhcmVudC5jaGlsZHJlbiAmJiByZXN1bHRbMF0gIT09IFNLSVApIHtcbiAgICAgICAgICBvZmZzZXQgPSAocmV2ZXJzZSA/IG5vZGVBc1BhcmVudC5jaGlsZHJlbi5sZW5ndGggOiAtMSkgKyBzdGVwXG4gICAgICAgICAgZ3JhbmRwYXJlbnRzID0gcGFyZW50cy5jb25jYXQobm9kZUFzUGFyZW50KVxuXG4gICAgICAgICAgd2hpbGUgKG9mZnNldCA+IC0xICYmIG9mZnNldCA8IG5vZGVBc1BhcmVudC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZUFzUGFyZW50LmNoaWxkcmVuW29mZnNldF1cblxuICAgICAgICAgICAgc3VicmVzdWx0ID0gZmFjdG9yeShjaGlsZCwgb2Zmc2V0LCBncmFuZHBhcmVudHMpKClcblxuICAgICAgICAgICAgaWYgKHN1YnJlc3VsdFswXSA9PT0gRVhJVCkge1xuICAgICAgICAgICAgICByZXR1cm4gc3VicmVzdWx0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9mZnNldCA9XG4gICAgICAgICAgICAgIHR5cGVvZiBzdWJyZXN1bHRbMV0gPT09ICdudW1iZXInID8gc3VicmVzdWx0WzFdIDogb2Zmc2V0ICsgc3RlcFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVHVybiBhIHJldHVybiB2YWx1ZSBpbnRvIGEgY2xlYW4gcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7VmlzaXRvclJlc3VsdH0gdmFsdWVcbiAqICAgVmFsaWQgcmV0dXJuIHZhbHVlcyBmcm9tIHZpc2l0b3JzLlxuICogQHJldHVybnMge1JlYWRvbmx5PEFjdGlvblR1cGxlPn1cbiAqICAgQ2xlYW4gcmVzdWx0LlxuICovXG5mdW5jdGlvbiB0b1Jlc3VsdCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtDT05USU5VRSwgdmFsdWVdXG4gIH1cblxuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5IDogW3ZhbHVlXVxufVxuIiwgIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBVbmlzdE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBVbmlzdFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJykuVmlzaXRvclJlc3VsdH0gVmlzaXRvclJlc3VsdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0V4Y2x1ZGU8aW1wb3J0KCd1bmlzdC11dGlsLWlzJykuVGVzdCwgdW5kZWZpbmVkPiB8IHVuZGVmaW5lZH0gVGVzdFxuICogICBUZXN0IGZyb20gYHVuaXN0LXV0aWwtaXNgLlxuICpcbiAqICAgTm90ZTogd2UgaGF2ZSByZW1vdmUgYW5kIGFkZCBgdW5kZWZpbmVkYCwgYmVjYXVzZSBvdGhlcndpc2Ugd2hlbiBnZW5lcmF0aW5nXG4gKiAgIGF1dG9tYXRpYyBgLmQudHNgIGZpbGVzLCBUUyB0cmllcyB0byBmbGF0dGVuIHBhdGhzIGZyb20gYSBsb2NhbCBwZXJzcGVjdGl2ZSxcbiAqICAgd2hpY2ggZG9lc25cdTIwMTl0IHdvcmsgd2hlbiBwdWJsaXNoaW5nIG9uIG5wbS5cbiAqL1xuXG4vLyBUbyBkbzogdXNlIHR5cGVzIGZyb20gYHVuaXN0LXV0aWwtdmlzaXQtcGFyZW50c2Agd2hlbiBpdFx1MjAxOXMgcmVsZWFzZWQuXG5cbi8qKlxuICogQHR5cGVkZWYgeyhcbiAqICAgRm4gZXh0ZW5kcyAodmFsdWU6IGFueSkgPT4gdmFsdWUgaXMgaW5mZXIgVGhpbmdcbiAqICAgPyBUaGluZ1xuICogICA6IEZhbGxiYWNrXG4gKiApfSBQcmVkaWNhdGVcbiAqICAgR2V0IHRoZSB2YWx1ZSBvZiBhIHR5cGUgZ3VhcmQgYEZuYC5cbiAqIEB0ZW1wbGF0ZSBGblxuICogICBWYWx1ZTsgdHlwaWNhbGx5IGZ1bmN0aW9uIHRoYXQgaXMgYSB0eXBlIGd1YXJkIChzdWNoIGFzIGAoeCk6IHggaXMgWWApLlxuICogQHRlbXBsYXRlIEZhbGxiYWNrXG4gKiAgIFZhbHVlIHRvIHlpZWxkIGlmIGBGbmAgaXMgbm90IGEgdHlwZSBndWFyZC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIENoZWNrIGV4dGVuZHMgbnVsbCB8IHVuZGVmaW5lZCAvLyBObyB0ZXN0LlxuICogICA/IFZhbHVlXG4gKiAgIDogVmFsdWUgZXh0ZW5kcyB7dHlwZTogQ2hlY2t9IC8vIFN0cmluZyAodHlwZSkgdGVzdC5cbiAqICAgPyBWYWx1ZVxuICogICA6IFZhbHVlIGV4dGVuZHMgQ2hlY2sgLy8gUGFydGlhbCB0ZXN0LlxuICogICA/IFZhbHVlXG4gKiAgIDogQ2hlY2sgZXh0ZW5kcyBGdW5jdGlvbiAvLyBGdW5jdGlvbiB0ZXN0LlxuICogICA/IFByZWRpY2F0ZTxDaGVjaywgVmFsdWU+IGV4dGVuZHMgVmFsdWVcbiAqICAgICA/IFByZWRpY2F0ZTxDaGVjaywgVmFsdWU+XG4gKiAgICAgOiBuZXZlclxuICogICA6IG5ldmVyIC8vIFNvbWUgb3RoZXIgdGVzdD9cbiAqICl9IE1hdGNoZXNPbmVcbiAqICAgQ2hlY2sgd2hldGhlciBhIG5vZGUgbWF0Y2hlcyBhIHByaW1pdGl2ZSBjaGVjayBpbiB0aGUgdHlwZSBzeXN0ZW0uXG4gKiBAdGVtcGxhdGUgVmFsdWVcbiAqICAgVmFsdWU7IHR5cGljYWxseSB1bmlzdCBgTm9kZWAuXG4gKiBAdGVtcGxhdGUgQ2hlY2tcbiAqICAgVmFsdWU7IHR5cGljYWxseSBgdW5pc3QtdXRpbC1pc2AtY29tcGF0aWJsZSB0ZXN0LCBidXQgbm90IGFycmF5cy5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIENoZWNrIGV4dGVuZHMgQXJyYXk8YW55PlxuICogICA/IE1hdGNoZXNPbmU8VmFsdWUsIENoZWNrW2tleW9mIENoZWNrXT5cbiAqICAgOiBNYXRjaGVzT25lPFZhbHVlLCBDaGVjaz5cbiAqICl9IE1hdGNoZXNcbiAqICAgQ2hlY2sgd2hldGhlciBhIG5vZGUgbWF0Y2hlcyBhIGNoZWNrIGluIHRoZSB0eXBlIHN5c3RlbS5cbiAqIEB0ZW1wbGF0ZSBWYWx1ZVxuICogICBWYWx1ZTsgdHlwaWNhbGx5IHVuaXN0IGBOb2RlYC5cbiAqIEB0ZW1wbGF0ZSBDaGVja1xuICogICBWYWx1ZTsgdHlwaWNhbGx5IGB1bmlzdC11dGlsLWlzYC1jb21wYXRpYmxlIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7MCB8IDEgfCAyIHwgMyB8IDQgfCA1IHwgNiB8IDcgfCA4IHwgOSB8IDEwfSBVaW50XG4gKiAgIE51bWJlcjsgY2FwcGVkIHJlYXNvbmFibHkuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7SSBleHRlbmRzIDAgPyAxIDogSSBleHRlbmRzIDEgPyAyIDogSSBleHRlbmRzIDIgPyAzIDogSSBleHRlbmRzIDMgPyA0IDogSSBleHRlbmRzIDQgPyA1IDogSSBleHRlbmRzIDUgPyA2IDogSSBleHRlbmRzIDYgPyA3IDogSSBleHRlbmRzIDcgPyA4IDogSSBleHRlbmRzIDggPyA5IDogMTB9IEluY3JlbWVudFxuICogICBJbmNyZW1lbnQgYSBudW1iZXIgaW4gdGhlIHR5cGUgc3lzdGVtLlxuICogQHRlbXBsYXRlIHtVaW50fSBbST0wXVxuICogICBJbmRleC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIE5vZGUgZXh0ZW5kcyBVbmlzdFBhcmVudFxuICogICA/IE5vZGUgZXh0ZW5kcyB7Y2hpbGRyZW46IEFycmF5PGluZmVyIENoaWxkcmVuPn1cbiAqICAgICA/IENoaWxkIGV4dGVuZHMgQ2hpbGRyZW4gPyBOb2RlIDogbmV2ZXJcbiAqICAgICA6IG5ldmVyXG4gKiAgIDogbmV2ZXJcbiAqICl9IEludGVybmFsUGFyZW50XG4gKiAgIENvbGxlY3Qgbm9kZXMgdGhhdCBjYW4gYmUgcGFyZW50cyBvZiBgQ2hpbGRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IE5vZGVcbiAqICAgQWxsIG5vZGUgdHlwZXMgaW4gYSB0cmVlLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IENoaWxkXG4gKiAgIE5vZGUgdG8gc2VhcmNoIGZvci5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtJbnRlcm5hbFBhcmVudDxJbmNsdXNpdmVEZXNjZW5kYW50PFRyZWU+LCBDaGlsZD59IFBhcmVudFxuICogICBDb2xsZWN0IG5vZGVzIGluIGBUcmVlYCB0aGF0IGNhbiBiZSBwYXJlbnRzIG9mIGBDaGlsZGAuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gVHJlZVxuICogICBBbGwgbm9kZSB0eXBlcyBpbiBhIHRyZWUuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gQ2hpbGRcbiAqICAgTm9kZSB0byBzZWFyY2ggZm9yLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhcbiAqICAgRGVwdGggZXh0ZW5kcyBNYXhcbiAqICAgPyBuZXZlclxuICogICA6XG4gKiAgICAgfCBJbnRlcm5hbFBhcmVudDxOb2RlLCBDaGlsZD5cbiAqICAgICB8IEludGVybmFsQW5jZXN0b3I8Tm9kZSwgSW50ZXJuYWxQYXJlbnQ8Tm9kZSwgQ2hpbGQ+LCBNYXgsIEluY3JlbWVudDxEZXB0aD4+XG4gKiApfSBJbnRlcm5hbEFuY2VzdG9yXG4gKiAgIENvbGxlY3Qgbm9kZXMgaW4gYFRyZWVgIHRoYXQgY2FuIGJlIGFuY2VzdG9ycyBvZiBgQ2hpbGRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IE5vZGVcbiAqICAgQWxsIG5vZGUgdHlwZXMgaW4gYSB0cmVlLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IENoaWxkXG4gKiAgIE5vZGUgdG8gc2VhcmNoIGZvci5cbiAqIEB0ZW1wbGF0ZSB7VWludH0gW01heD0xMF1cbiAqICAgTWF4OyBzZWFyY2hlcyB1cCB0byB0aGlzIGRlcHRoLlxuICogQHRlbXBsYXRlIHtVaW50fSBbRGVwdGg9MF1cbiAqICAgQ3VycmVudCBkZXB0aC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIFRyZWUgZXh0ZW5kcyBVbmlzdFBhcmVudFxuICogICAgID8gRGVwdGggZXh0ZW5kcyBNYXhcbiAqICAgICAgID8gVHJlZVxuICogICAgICAgOiBUcmVlIHwgSW5jbHVzaXZlRGVzY2VuZGFudDxUcmVlWydjaGlsZHJlbiddW251bWJlcl0sIE1heCwgSW5jcmVtZW50PERlcHRoPj5cbiAqICAgICA6IFRyZWVcbiAqICl9IEluY2x1c2l2ZURlc2NlbmRhbnRcbiAqICAgQ29sbGVjdCBhbGwgKGluY2x1c2l2ZSkgZGVzY2VuZGFudHMgb2YgYFRyZWVgLlxuICpcbiAqICAgPiBcdUQ4M0RcdURDNDkgKipOb3RlKio6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBmYXN0ZXN0IHdheSB0b1xuICogICA+IHJlY3Vyc2Ugd2l0aG91dCBhY3R1YWxseSBydW5uaW5nIGludG8gYW4gaW5maW5pdGUgbG9vcCwgd2hpY2ggdGhlXG4gKiAgID4gcHJldmlvdXMgdmVyc2lvbiBkaWQuXG4gKiAgID5cbiAqICAgPiBQcmFjdGljYWxseSwgYSBtYXggb2YgYDJgIGlzIHR5cGljYWxseSBlbm91Z2ggYXNzdW1pbmcgYSBgUm9vdGAgaXNcbiAqICAgPiBwYXNzZWQsIGJ1dCBpdCBkb2Vzblx1MjAxOXQgaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAqICAgPiBJdCBnZXRzIGhpZ2hlciB3aXRoIGBMaXN0ID4gTGlzdEl0ZW0gPiBUYWJsZSA+IFRhYmxlUm93ID4gVGFibGVDZWxsYC5cbiAqICAgPiBVc2luZyB1cCB0byBgMTBgIGRvZXNuXHUyMDE5dCBodXJ0IG9yIGhlbHAgZWl0aGVyLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFRyZWVcbiAqICAgVHJlZSB0eXBlLlxuICogQHRlbXBsYXRlIHtVaW50fSBbTWF4PTEwXVxuICogICBNYXg7IHNlYXJjaGVzIHVwIHRvIHRoaXMgZGVwdGguXG4gKiBAdGVtcGxhdGUge1VpbnR9IFtEZXB0aD0wXVxuICogICBDdXJyZW50IGRlcHRoLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIFZpc2l0b3JcbiAqICAgSGFuZGxlIGEgbm9kZSAobWF0Y2hpbmcgYHRlc3RgLCBpZiBnaXZlbikuXG4gKlxuICogICBWaXNpdG9ycyBhcmUgZnJlZSB0byB0cmFuc2Zvcm0gYG5vZGVgLlxuICogICBUaGV5IGNhbiBhbHNvIHRyYW5zZm9ybSBgcGFyZW50YC5cbiAqXG4gKiAgIFJlcGxhY2luZyBgbm9kZWAgaXRzZWxmLCBpZiBgU0tJUGAgaXMgbm90IHJldHVybmVkLCBzdGlsbCBjYXVzZXMgaXRzXG4gKiAgIGRlc2NlbmRhbnRzIHRvIGJlIHdhbGtlZCAod2hpY2ggaXMgYSBidWcpLlxuICpcbiAqICAgV2hlbiBhZGRpbmcgb3IgcmVtb3ZpbmcgcHJldmlvdXMgc2libGluZ3Mgb2YgYG5vZGVgIChvciBuZXh0IHNpYmxpbmdzLCBpblxuICogICBjYXNlIG9mIHJldmVyc2UpLCB0aGUgYFZpc2l0b3JgIHNob3VsZCByZXR1cm4gYSBuZXcgYEluZGV4YCB0byBzcGVjaWZ5IHRoZVxuICogICBzaWJsaW5nIHRvIHRyYXZlcnNlIGFmdGVyIGBub2RlYCBpcyB0cmF2ZXJzZWQuXG4gKiAgIEFkZGluZyBvciByZW1vdmluZyBuZXh0IHNpYmxpbmdzIG9mIGBub2RlYCAob3IgcHJldmlvdXMgc2libGluZ3MsIGluIGNhc2VcbiAqICAgb2YgcmV2ZXJzZSkgaXMgaGFuZGxlZCBhcyBleHBlY3RlZCB3aXRob3V0IG5lZWRpbmcgdG8gcmV0dXJuIGEgbmV3IGBJbmRleGAuXG4gKlxuICogICBSZW1vdmluZyB0aGUgY2hpbGRyZW4gcHJvcGVydHkgb2YgYHBhcmVudGAgc3RpbGwgcmVzdWx0cyBpbiB0aGVtIGJlaW5nXG4gKiAgIHRyYXZlcnNlZC5cbiAqIEBwYXJhbSB7VmlzaXRlZH0gbm9kZVxuICogICBGb3VuZCBub2RlLlxuICogQHBhcmFtIHtWaXNpdGVkIGV4dGVuZHMgVW5pc3ROb2RlID8gbnVtYmVyIHwgdW5kZWZpbmVkIDogbmV2ZXJ9IGluZGV4XG4gKiAgIEluZGV4IG9mIGBub2RlYCBpbiBgcGFyZW50YC5cbiAqIEBwYXJhbSB7QW5jZXN0b3IgZXh0ZW5kcyBVbmlzdFBhcmVudCA/IEFuY2VzdG9yIHwgdW5kZWZpbmVkIDogbmV2ZXJ9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHJldHVybnMge1Zpc2l0b3JSZXN1bHR9XG4gKiAgIFdoYXQgdG8gZG8gbmV4dC5cbiAqXG4gKiAgIEFuIGBJbmRleGAgaXMgdHJlYXRlZCBhcyBhIHR1cGxlIG9mIGBbQ09OVElOVUUsIEluZGV4XWAuXG4gKiAgIEFuIGBBY3Rpb25gIGlzIHRyZWF0ZWQgYXMgYSB0dXBsZSBvZiBgW0FjdGlvbl1gLlxuICpcbiAqICAgUGFzc2luZyBhIHR1cGxlIGJhY2sgb25seSBtYWtlcyBzZW5zZSBpZiB0aGUgYEFjdGlvbmAgaXMgYFNLSVBgLlxuICogICBXaGVuIHRoZSBgQWN0aW9uYCBpcyBgRVhJVGAsIHRoYXQgYWN0aW9uIGNhbiBiZSByZXR1cm5lZC5cbiAqICAgV2hlbiB0aGUgYEFjdGlvbmAgaXMgYENPTlRJTlVFYCwgYEluZGV4YCBjYW4gYmUgcmV0dXJuZWQuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gW1Zpc2l0ZWQ9VW5pc3ROb2RlXVxuICogICBWaXNpdGVkIG5vZGUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7VW5pc3RQYXJlbnR9IFtBbmNlc3Rvcj1VbmlzdFBhcmVudF1cbiAqICAgQW5jZXN0b3IgdHlwZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtWaXNpdG9yPFZpc2l0ZWQsIFBhcmVudDxBbmNlc3RvciwgVmlzaXRlZD4+fSBCdWlsZFZpc2l0b3JGcm9tTWF0Y2hcbiAqICAgQnVpbGQgYSB0eXBlZCBgVmlzaXRvcmAgZnVuY3Rpb24gZnJvbSBhIG5vZGUgYW5kIGFsbCBwb3NzaWJsZSBwYXJlbnRzLlxuICpcbiAqICAgSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFZpc2l0ZWRcbiAqICAgTm9kZSB0eXBlLlxuICogQHRlbXBsYXRlIHtVbmlzdFBhcmVudH0gQW5jZXN0b3JcbiAqICAgUGFyZW50IHR5cGUuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KFxuICogICBCdWlsZFZpc2l0b3JGcm9tTWF0Y2g8XG4gKiAgICAgTWF0Y2hlczxEZXNjZW5kYW50LCBDaGVjaz4sXG4gKiAgICAgRXh0cmFjdDxEZXNjZW5kYW50LCBVbmlzdFBhcmVudD5cbiAqICAgPlxuICogKX0gQnVpbGRWaXNpdG9yRnJvbURlc2NlbmRhbnRzXG4gKiAgIEJ1aWxkIGEgdHlwZWQgYFZpc2l0b3JgIGZ1bmN0aW9uIGZyb20gYSBsaXN0IG9mIGRlc2NlbmRhbnRzIGFuZCBhIHRlc3QuXG4gKlxuICogICBJdCB3aWxsIGluZmVyIHdoaWNoIHZhbHVlcyBhcmUgcGFzc2VkIGFzIGBub2RlYCBhbmQgd2hpY2ggYXMgYHBhcmVudGAuXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gRGVzY2VuZGFudFxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1Rlc3R9IENoZWNrXG4gKiAgIFRlc3QgdHlwZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoXG4gKiAgIEJ1aWxkVmlzaXRvckZyb21EZXNjZW5kYW50czxcbiAqICAgICBJbmNsdXNpdmVEZXNjZW5kYW50PFRyZWU+LFxuICogICAgIENoZWNrXG4gKiAgID5cbiAqICl9IEJ1aWxkVmlzaXRvclxuICogICBCdWlsZCBhIHR5cGVkIGBWaXNpdG9yYCBmdW5jdGlvbiBmcm9tIGEgdHJlZSBhbmQgYSB0ZXN0LlxuICpcbiAqICAgSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRgLlxuICogQHRlbXBsYXRlIHtVbmlzdE5vZGV9IFtUcmVlPVVuaXN0Tm9kZV1cbiAqICAgTm9kZSB0eXBlLlxuICogQHRlbXBsYXRlIHtUZXN0fSBbQ2hlY2s9VGVzdF1cbiAqICAgVGVzdCB0eXBlLlxuICovXG5cbmltcG9ydCB7dmlzaXRQYXJlbnRzfSBmcm9tICd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnXG5cbmV4cG9ydCB7Q09OVElOVUUsIEVYSVQsIFNLSVB9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cydcblxuLyoqXG4gKiBWaXNpdCBub2Rlcy5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBwZXJmb3JtcyAqZGVwdGgtZmlyc3QqICp0cmVlIHRyYXZlcnNhbCogaW4gKnByZW9yZGVyKlxuICogKCoqTkxSKiopIG9yIGlmIGByZXZlcnNlYCBpcyBnaXZlbiwgaW4gKnJldmVyc2UgcHJlb3JkZXIqICgqKk5STCoqKS5cbiAqXG4gKiBZb3UgY2FuIGNob29zZSBmb3Igd2hpY2ggbm9kZXMgYHZpc2l0b3JgIGlzIGNhbGxlZCBieSBwYXNzaW5nIGEgYHRlc3RgLlxuICogRm9yIGNvbXBsZXggdGVzdHMsIHlvdSBzaG91bGQgdGVzdCB5b3Vyc2VsZiBpbiBgdmlzaXRvcmAsIGFzIGl0IHdpbGwgYmVcbiAqIGZhc3RlciBhbmQgd2lsbCBoYXZlIGltcHJvdmVkIHR5cGUgaW5mb3JtYXRpb24uXG4gKlxuICogV2Fsa2luZyB0aGUgdHJlZSBpcyBhbiBpbnRlbnNpdmUgdGFzay5cbiAqIE1ha2UgdXNlIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIHRoZSB2aXNpdG9yIHdoZW4gcG9zc2libGUuXG4gKiBJbnN0ZWFkIG9mIHdhbGtpbmcgYSB0cmVlIG11bHRpcGxlIHRpbWVzLCB3YWxrIGl0IG9uY2UsIHVzZSBgdW5pc3QtdXRpbC1pc2BcbiAqIHRvIGNoZWNrIGlmIGEgbm9kZSBtYXRjaGVzLCBhbmQgdGhlbiBwZXJmb3JtIGRpZmZlcmVudCBvcGVyYXRpb25zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSB0cmVlLlxuICogU2VlIGBWaXNpdG9yYCBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBvdmVybG9hZFxuICogQHBhcmFtIHtUcmVlfSB0cmVlXG4gKiBAcGFyYW0ge0NoZWNrfSBjaGVja1xuICogQHBhcmFtIHtCdWlsZFZpc2l0b3I8VHJlZSwgQ2hlY2s+fSB2aXNpdG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbcmV2ZXJzZV1cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKlxuICogQG92ZXJsb2FkXG4gKiBAcGFyYW0ge1RyZWV9IHRyZWVcbiAqIEBwYXJhbSB7QnVpbGRWaXNpdG9yPFRyZWU+fSB2aXNpdG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbcmV2ZXJzZV1cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKlxuICogQHBhcmFtIHtVbmlzdE5vZGV9IHRyZWVcbiAqICAgVHJlZSB0byB0cmF2ZXJzZS5cbiAqIEBwYXJhbSB7VmlzaXRvciB8IFRlc3R9IHRlc3RPclZpc2l0b3JcbiAqICAgYHVuaXN0LXV0aWwtaXNgLWNvbXBhdGlibGUgdGVzdCAob3B0aW9uYWwsIG9taXQgdG8gcGFzcyBhIHZpc2l0b3IpLlxuICogQHBhcmFtIHtWaXNpdG9yIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFt2aXNpdG9yT3JSZXZlcnNlXVxuICogICBIYW5kbGUgZWFjaCBub2RlICh3aGVuIHRlc3QgaXMgb21pdHRlZCwgcGFzcyBgcmV2ZXJzZWApLlxuICogQHBhcmFtIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW21heWJlUmV2ZXJzZT1mYWxzZV1cbiAqICAgVHJhdmVyc2UgaW4gcmV2ZXJzZSBwcmVvcmRlciAoTlJMKSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IHByZW9yZGVyIChOTFIpLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqXG4gKiBAdGVtcGxhdGUge1VuaXN0Tm9kZX0gVHJlZVxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1Rlc3R9IENoZWNrXG4gKiAgIGB1bmlzdC11dGlsLWlzYC1jb21wYXRpYmxlIHRlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdCh0cmVlLCB0ZXN0T3JWaXNpdG9yLCB2aXNpdG9yT3JSZXZlcnNlLCBtYXliZVJldmVyc2UpIHtcbiAgLyoqIEB0eXBlIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHJldmVyc2VcbiAgLyoqIEB0eXBlIHtUZXN0fSAqL1xuICBsZXQgdGVzdFxuICAvKiogQHR5cGUge1Zpc2l0b3J9ICovXG4gIGxldCB2aXNpdG9yXG5cbiAgaWYgKFxuICAgIHR5cGVvZiB0ZXN0T3JWaXNpdG9yID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZpc2l0b3JPclJldmVyc2UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgdGVzdCA9IHVuZGVmaW5lZFxuICAgIHZpc2l0b3IgPSB0ZXN0T3JWaXNpdG9yXG4gICAgcmV2ZXJzZSA9IHZpc2l0b3JPclJldmVyc2VcbiAgfSBlbHNlIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdGhlIG92ZXJsb2FkIHdpdGggdGVzdCB3YXMgZ2l2ZW4uXG4gICAgdGVzdCA9IHRlc3RPclZpc2l0b3JcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdGhlIG92ZXJsb2FkIHdpdGggdGVzdCB3YXMgZ2l2ZW4uXG4gICAgdmlzaXRvciA9IHZpc2l0b3JPclJldmVyc2VcbiAgICByZXZlcnNlID0gbWF5YmVSZXZlcnNlXG4gIH1cblxuICB2aXNpdFBhcmVudHModHJlZSwgdGVzdCwgb3ZlcmxvYWQsIHJldmVyc2UpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VW5pc3ROb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7QXJyYXk8VW5pc3RQYXJlbnQ+fSBwYXJlbnRzXG4gICAqL1xuICBmdW5jdGlvbiBvdmVybG9hZChub2RlLCBwYXJlbnRzKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdXG4gICAgY29uc3QgaW5kZXggPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSA6IHVuZGVmaW5lZFxuICAgIHJldHVybiB2aXNpdG9yKG5vZGUsIGluZGV4LCBwYXJlbnQpXG4gIH1cbn1cbiIsICJpbXBvcnQgeyBQUkVGSVggfSBmcm9tIFwiLi9nZW5lcmFsXCI7XG5cbmV4cG9ydCBjb25zdCBTRVRUSU5HU19UQUJfU09VUkNFUEFUSF9QUkVGSVggPSBgQCR7UFJFRklYfS1zZXR0aW5nczpgO1xuXG5leHBvcnQgY29uc3QgRVhBTVBMRV9DT0RFQkxPQ0tfUEFSQU1FVEVSUyA9IFwicHl0aG9uIHRpdGxlOmZvb1wiO1xuZXhwb3J0IGNvbnN0IEVYQU1QTEVfQ09ERUJMT0NLX0NPTlRFTlQgPSBcInByaW50KFxcXCJUaGlzIGxpbmUgaXMgdmVyeSBsb25nIGFuZCBzaG91bGQgYmUgdXNlZCBhcyBhbiBleGFtcGxlIGZvciBob3cgdGhlIHBsdWdpbiBkZWFscyB3aXRoIHdyYXBwaW5nIGFuZCB1bndyYXBwaW5nIHZlcnkgbG9uZyBsaW5lcyBnaXZlbiB0aGUgY2hvaWNlIG9mIGNvZGVibG9jayBwYXJhbWV0ZXJzIGFuZCBzZXR0aW5ncy5cXFwiKVxcbnByaW50KFxcXCJUaGlzIGxpbmUgaXMgaGlnaGxpZ2h0ZWQuXFxcIilcIjtcbmV4cG9ydCBjb25zdCBFWEFNUExFX0lOTElORV9DT0RFID0gXCJ7cHl0aG9uIGljb24gdGl0bGU6Zm9vfSBwcmludChcXFwiVGhpcyBpcyB0cnVlXFxcIiBpZiB4ID4gMSBlbHNlIGZhbHNlKVwiO1xuIiwgImltcG9ydCB7IENhY2hlZE1ldGFkYXRhLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBWaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQ29kZVN0eWxlclBsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvUG9zdFByb2Nlc3MoXG5cdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRjb250ZXh0OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuXHRwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4sXG4pOiBib29sZWFuIHtcblx0aWYgKCFlbGVtZW50IHx8ICFjb250ZXh0Py5zb3VyY2VQYXRoKVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHRjb25zdCB2aWV3ID0gcGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShWaWV3KTtcblx0aWYgKCF2aWV3KVxuXHRcdHJldHVybiBmYWxzZTtcblxuXHRjb25zdCBjYWNoZTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsID0gcGx1Z2luLmFwcC5tZXRhZGF0YUNhY2hlLmdldENhY2hlKGNvbnRleHQuc291cmNlUGF0aCk7XG5cdGlmICgoY29udGV4dC5mcm9udG1hdHRlciA/PyBjYWNoZT8uZnJvbnRtYXR0ZXIpPy5bXCJjb2RlLXN0eWxlci1pZ25vcmVcIl0gPT09IHRydWUpXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlO1xufVxuIiwgImltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSBcIi4uL3R5cGVzL2RlY29yYXRpb25cIjtcbmltcG9ydCB7IFBSRUZJWCB9IGZyb20gXCIuL2dlbmVyYWxcIjtcblxuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fTEVOR1RIID0gMjQwOyAvLyBJbiBtaWxsaXNlY29uZHNcblxuZXhwb3J0IGNvbnN0IEJPRFlfQ0xBU1MgPSBQUkVGSVggKyBcInBsdWdpblwiXG5leHBvcnQgY29uc3QgREVDT1JBVEVEX0FUVFJJQlVURSA9IFBSRUZJWCArIFwiZGVjb3JhdGVkXCJcbmV4cG9ydCBjb25zdCBGT0xEX1BMQUNFSE9MREVSID0gXCJGb2xkZWQgQ29kZVwiO1xuXG5leHBvcnQgY29uc3QgR0lUX0lDT05TOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuXHRcImJyYW5jaFwiOiBcIiYjeGUwYTA7XCIsXG5cdFwidHJlZVwiOiBcIiYjeGVhZmM7XCIsIC8vIGNvbW1pdFxufTtcbmV4cG9ydCBjb25zdCBTSVRFX0lDT05TOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuXHRcImdpdGh1YlwiOiBcIiYjeGYwOWI7XCIsXG5cdFwiZ2l0bGFiXCI6IFwiJiN4ZTY1YztcIixcblx0XCJiaXRidWNrZXRcIjogXCImI3hlNzAzO1wiLFxuXHRcInNvdXJjZWZvcmdlXCI6IFwiJiN4ZjAyMzg7XCIsXG5cdFwiZ2VuZXJpY1wiOiBcIiYjeGYwNTlmO1wiLFxufTtcblxuZXhwb3J0IGNvbnN0IFNUQU1QX0lDT04gPSBcIiYjeGYwMGYwO1wiO1xuZXhwb3J0IGNvbnN0IFVQREFURV9JQ09OID0gXCImI3hlMzQ4O1wiO1xuXG5leHBvcnQgY29uc3QgTEFOR1VBR0VTOiB7W2tleTogc3RyaW5nXTogTGFuZ3VhZ2V9ID0ge1xuXHRcIi5naXRpZ25vcmVcIjoge1xuXHRcdGNvbG91cjogXCIjZGQ0YzM1XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjkuNDcyLDE0Ljc1MywxNy4yNDcsMi41MjhhMS44LDEuOCwwLDAsMC0yLjU1LDBMMTIuMTU4LDUuMDY3bDMuMjIsMy4yMmEyLjE0MSwyLjE0MSwwLDAsMSwyLjcxMiwyLjczbDMuMSwzLjFhMi4xNDMsMi4xNDMsMCwxLDEtMS4yODUsMS4yMWwtMi44OTUtMi44OTV2Ny42MTdhMi4xNDEsMi4xNDEsMCwxLDEtMS43NjQtLjA2MlYxMi4zYTIuMTQ2LDIuMTQ2LDAsMCwxLTEuMTY1LTIuODE0TDEwLjkxMSw2LjMxNCwyLjUyOCwxNC43YTEuOCwxLjgsMCwwLDAsMCwyLjU1MUwxNC43NTMsMjkuNDcyYTEuOCwxLjgsMCwwLDAsMi41NSwwTDI5LjQ3MiwxNy4zYTEuOCwxLjgsMCwwLDAsMC0yLjU1MVxcXCIgc3R5bGU9XFxcImZpbGw6I2RkNGMzNVxcXCIvPjxwYXRoIGQ9XFxcIk0xMi4xNTgsNS4wNjdsMy4yMiwzLjIyYTIuMTQxLDIuMTQxLDAsMCwxLDIuNzEyLDIuNzNsMy4xLDMuMWEyLjE0MywyLjE0MywwLDEsMS0xLjI4NSwxLjIxbC0yLjg5NS0yLjg5NXY3LjYxN2EyLjE0MSwyLjE0MSwwLDEsMS0xLjc2NC0uMDYyVjEyLjNhMi4xNDYsMi4xNDYsMCwwLDEtMS4xNjUtMi44MTRMMTAuOTExLDYuMzE0XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIjXCIsXG5cdFx0XSxcblx0fSxcblx0XCIuaGdpZ25vcmVcIjoge1xuXHRcdGNvbG91cjogXCIjYmZiZmJmXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjguMDQyLDIzLjE3MmM0Ljk4OS04LjMtMS4wNTQtMjEuNzUxLTEyLjEtMjAuMzg0QzUuOTU1LDQuMDIyLDUuNzk0LDE0LjUzLDE0LjU5MywxNy4wMjZjNy42MTQsMi4xNjIsMS41NzMsNi45OTIsMS43NDksMTAuMjA4czYuNjIsNC4zODIsMTEuNy00LjA2M1xcXCIgc3R5bGU9XFxcImZpbGw6IzFiMWIxYlxcXCIvPjxjaXJjbGUgY3g9XFxcIjkuNzg0XFxcIiBjeT1cXFwiMjQuMjU3XFxcIiByPVxcXCI0LjMzMlxcXCIgc3R5bGU9XFxcImZpbGw6IzFiMWIxYlxcXCIvPjxjaXJjbGUgY3g9XFxcIjQuODM1XFxcIiBjeT1cXFwiMTUuMDk5XFxcIiByPVxcXCIyLjgzNVxcXCIgc3R5bGU9XFxcImZpbGw6IzFiMWIxYlxcXCIvPjxwYXRoIGQ9XFxcIk0yOC4yMzEsMjIuODM1YzQuOTg5LTguMy0xLjA1NC0yMS43NTEtMTIuMS0yMC4zODRDNi4xNDQsMy42ODYsNS45ODMsMTQuMTk0LDE0Ljc4MSwxNi42OWM3LjYxNCwyLjE2MiwxLjU3Myw2Ljk5MiwxLjc0OSwxMC4yMDhzNi42Miw0LjM4MiwxMS43LTQuMDYzXFxcIiBzdHlsZT1cXFwiZmlsbDojYmZiZmJmXFxcIi8+PGNpcmNsZSBjeD1cXFwiOS45NzJcXFwiIGN5PVxcXCIyMy45MjFcXFwiIHI9XFxcIjQuMzMyXFxcIiBzdHlsZT1cXFwiZmlsbDojYmZiZmJmXFxcIi8+PGNpcmNsZSBjeD1cXFwiNS4wMjNcXFwiIGN5PVxcXCIxNC43NjJcXFwiIHI9XFxcIjIuODM1XFxcIiBzdHlsZT1cXFwiZmlsbDojYmZiZmJmXFxcIi8+PHBhdGggZD1cXFwiTTE3LjgxMSwyOC4xNjhhLjY2OS42NjksMCwwLDEsLjYzNS0uOTk0LDcsNywwLDAsMCwzLjctLjc0NmMzLjI0Ny0xLjg0MSw4LjI0NC0xMC43LDUuNzMxLTE2LjI4NUExMi43NywxMi43NywwLDAsMCwyNS4wNDksNS43Yy0uMjM2LS4yNDktLjEtLjIzNi4wNTktLjE1MmExMC4wOCwxMC4wOCwwLDAsMSwyLjg1NywzLjY3NiwxNC41NzgsMTQuNTc4LDAsMCwxLDEuMSwxMC4yNzljLS40OTQsMS44MTctMi4yLDUuOTI4LTQuNjkxLDcuNzA2cy01LjQyNCwyLjgtNi41NjMuOTU1TTE1LjU0OCwxNi42NzNjLTEuNy0uNS0zLjg5NC0xLjIwOC01LjE2My0yLjg2N0E4LjA4OCw4LjA4OCwwLDAsMSw4Ljg1NCwxMC40OWMtLjA0My0uMjctLjA4LS41LDAtLjU1OGEyMS44ODIsMjEuODgyLDAsMCwwLDEuNjg4LDIuNzIzLDYuNDg3LDYuNDg3LDAsMCwwLDMuNTI2LDIuMjU2LDEyLjM4MywxMi4zODMsMCwwLDEsMy44NjcsMS4zN2MuNzM5LjYyOS44LDEuOTg5LjU1MiwyLjE0MnMtLjc1OS0xLjEtMi45MzgtMS43NDltLTguMTU1LDEwLjRjMy4zNjksMy4xMjEsOC40MzktMS4xNjYsNi4yMDctNC45NTQtLjI1MS0uNDI1LS41NzYtLjc0OS0uNDY5LS40MjMuNzE0LDIuMTc4LjA1NCwzLjktMS4xNzYsNC43ODhhNC4wNjMsNC4wNjMsMCwwLDEtNC4xOTIuMzI4Yy0uMzktLjItLjU1MS4wOTItLjM3LjI2MW0tMy45My0xMC4xNmMuMDE4LjIuMjkyLjQ1OC43MjIuNTc2YTIuOTY5LDIuOTY5LDAsMCwwLDIuNTUtLjQxMywyLjc1OSwyLjc1OSwwLDAsMCwuODEtMy40NTJjLS4xNzItLjMwOC0uNC0uNTMzLS4yMTgtLjA0MUEyLjY4LDIuNjgsMCwwLDEsNi4xNDgsMTYuNTNhMi40MzksMi40MzksMCwwLDEtMi4xLjE2NGMtLjM5MS0uMTE5LS42LjAxNi0uNTguMjIzXFxcIi8+PHBhdGggZD1cXFwiTTE5LjA1NiwyOC40MDdjLS4wMzMuMzg5LjQxNC40NjYsMS4wMTYuMzc2YTYuNzU1LDYuNzU1LDAsMCwwLDIuMzEzLS42NDgsOS41NCw5LjU0LDAsMCwwLDMuMzE0LTIuNjNjMi42NjItMy40NzMsMy42LTcuNTgyLDMuNDYtOC4xNzNBMTYuMTcyLDE2LjE3MiwwLDAsMSwyNywyMi42OTJjLTEuODg4LDIuOTY4LTMuMjU2LDQuNTQ4LTYuNDEzLDUuMzE0LS44NzkuMjEzLTEuNDg1LS4xMTItMS41MjkuNG0tNy0xMy41QTcuOTY3LDcuOTY3LDAsMCwwLDE0LjYsMTYuMDg5YTEyLjIsMTIuMiwwLDAsMSwyLjk2LDEuMzFjLjM3OC4yNTMuNjE4LjgxOS42NDIuMzE3cy0uMjg1LS45MzQtLjk3Ni0xLjE2NGExNS4yNzQsMTUuMjc0LDAsMCwwLTIuMDA5LS42NzRjLS40ODUtLjEtMS4yNzMtLjI4NS0xLjk0OS0uNDkzLS4zNzEtLjExNC0uNzQ4LS4zMTMtMS4yMTQtLjQ4M00xMC4wMzcsMjcuNzE4Yy40MjktLjA5LDIuOTI0LS43MzYsMy41MS0yLjc4OC4xODMtLjY0LjIxNS0uNTExLjE2NC0uMTY1YTMuOCwzLjgsMCwwLDEtMy4zNTgsMy4xMjNjLS4yODkuMDMtLjY2OC0uMS0uMzE1LS4xN001LjA0NiwxNy4yYTcuOTkxLDcuOTkxLDAsMCwwLDEuMTk1LS4zMzYsMi4zODMsMi4zODMsMCwwLDAsMS4yMzItMS43NDFjLjA2NC0uNTA1LjA4My0uMzc4LjEwOS0uMWEyLjYyNywyLjYyNywwLDAsMS0yLjE0NywyLjMyNGMtLjIuMDI4LS41Ni4wMTEtLjM4OS0uMTQzXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTI3LjU0LDE3LjQ0NmMyLjEyNC02LjEyMy0yLjMyMS0xNS4zNy0xMS4zMTUtMTQuMjU4LTguMTI2LDEtOC4yNTcsOS41NTctMS4xLDExLjU5LDguMTEyLDEuMjI4LDMuMjI3LDcuMzQ3LDIuNTM1LDEwLjQzMy0uNjIxLDIuNzY2LDYuNTU1LDMuMjIxLDkuODc2LTcuNzY1TTcuMjE5LDI2LjJhMi4wMjgsMi4wMjgsMCwwLDEsMS4zMzIuNDQyLDMuNTI1LDMuNTI1LDAsMCwwLDMuNzU1LS45ODNBNC4xNTQsNC4xNTQsMCwwLDAsMTIuODY5LDIyYy0uODA2LTIuMzE5LTQuMjI5LTIuMjc4LTUuNzU4LS4zNTMtMS42NTQsMi4xNS0uNCw0LjUzOS4xMDgsNC41NDhNMi42NzYsMTUuNDUxYTEuMTY2LDEuMTY2LDAsMCwwLC45MDguODYzYy43MzEuMS44OC40MzQsMS43NDMuMjYzQTIuNDY0LDIuNDY0LDAsMCwwLDcuMSwxNC45MTZhMS43NzEsMS43NzEsMCwwLDAtLjgyNC0yLjE0LDIuNjg5LDIuNjg5LDAsMCwwLTMuMDQ3LjM2MywyLjI2MywyLjI2MywwLDAsMC0uNTU4LDIuMzEyXFxcIiBzdHlsZT1cXFwiZmlsbDojOTk5XFxcIi8+PHBhdGggZD1cXFwiTTIxLjk4MSwyMi4yMjhjLTIuMi0uMjcyLTUuMzYsNC42OS0yLjM3OCw0LjEwOWgwYTUuNjQ1LDUuNjQ1LDAsMCwwLDMuNjgzLTEuOTMyLDIzLjEzNiwyMy4xMzYsMCwwLDAsNC4wNTUtNy4yYy41LTEuODYxLjI1MS00Ljc0NS0uMjY5LTIuMDM2LS41MzMsMi43ODEtMi44OTMsNy4zMzYtNS4wOTEsNy4wNjRNMTAuNTIzLDI2LjM2MkEyLjc3OCwyLjc3OCwwLDAsMCwxMi41LDIyLjk5Yy0uMTY1LTEuMjc2LS44NjEsMS41ODQtMi4xNSwyLjAxMi0xLjk1My42NDgtMS43MzMsMS44NjEuMTc2LDEuMzYxbS00Ljk3OC0xMC4yYy42NjMtLjE3MywxLjU0LTEuMDc3LDEuMS0xLjc2Ny0uNTM3LS44NS0yLjAzMy0uMTIyLTIuMDg0LjgyNHMuMjc3LDEuMTI3Ljk3OS45NDNcXFwiIHN0eWxlPVxcXCJmaWxsOiNmM2YzZjNcXFwiLz5cIixcblx0fSxcblx0XCIubnBtaWdub3JlXCI6IHtcblx0XHRjb2xvdXI6IFwiI2NiMzgzN1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIsMTAuNTU1SDMwdjkuMzM1SDE2djEuNTU2SDkuNzc4VjE5Ljg4OUgyWm0xLjU1Niw3Ljc3OUg2LjY2N1YxMy42NjZIOC4yMjJ2NC42NjdIOS43NzhWMTIuMTExSDMuNTU2Wm03Ljc3OC02LjIyM3Y3Ljc3OWgzLjExMVYxOC4zMzRoMy4xMTFWMTIuMTExWm0zLjExMSwxLjU1NkgxNnYzLjExMkgxNC40NDRabTQuNjY3LTEuNTU2djYuMjIzaDMuMTExVjEzLjY2NmgxLjU1NnY0LjY2N2gxLjU1NlYxMy42NjZoMS41NTZ2NC42NjdoMS41NTZWMTIuMTExWlxcXCIgc3R5bGU9XFxcImZpbGw6I2NiMzgzN1xcXCIvPlwiLFxuXHR9LFxuXHRcIi5wcm9wZXJ0aWVzXCI6IHtcblx0XHRjb2xvdXI6IFwiIzk5YjhjNFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIzLjI2NSwyNC4zODFsLjktLjg5NGM0LjE2NC4xMzYsNC4yMjgtLjAxLDQuNDExLS40MzhsMS4xNDQtMi43ODVMMjkuODA1LDIwbC0uMDkzLS4yMzFjLS4wNDktLjEyMi0uMi0uNDg2LTIuOC0yLjk2NVYxNS41YzMtMi44OSwyLjkzNi0zLjAzOCwyLjc2NS0zLjQ2MUwyOC41MzgsOS4yMjVjLS4xNzEtLjQyMi0uMjM2LS41ODctNC4zNy0uNDc0bC0uOS0uOTNhMjAuMTY2LDIwLjE2NiwwLDAsMC0uMTQxLTQuMTA2bC0uMTE2LS4yNjMtMi45NzQtMS4zYy0uNDM4LS4yLS41OTItLjI3Mi0zLjQsMi43ODZsLTEuMjYyLS4wMTljLTIuODkxLTMuMDg2LTMuMDI4LTMuMDMtMy40NjEtMi44NTVMOS4xNDksMy4xODJjLS40MzMuMTc1LS41ODYuMjM3LS40MTgsNC40MzdsLS44OTMuODljLTQuMTYyLS4xMzYtNC4yMjYuMDEyLTQuNDA3LjQzOEwyLjI4NSwxMS43MzMsMi4xOTUsMTJsLjA5NC4yMzJjLjA0OS4xMi4xOTQuNDgsMi44LDIuOTYybDAsMS4zYy0zLDIuODktMi45MzUsMy4wMzgtMi43NjMsMy40NjJsMS4xMzgsMi44MTdjLjE3NC40MzEuMjM2LjU4NCw0LjM2OS40NzZsLjkuOTM1YTIwLjI0MywyMC4yNDMsMCwwLDAsLjEzNyw0LjFsLjExNi4yNjUsMi45OTMsMS4zMDhjLjQzNS4xODIuNTg2LjI0NywzLjM4Ni0yLjhsMS4yNjIuMDE2YzIuODk1LDMuMDksMy4wNDMsMy4wMywzLjQ2NiwyLjg1OWwyLjc1OS0xLjExNUMyMy4yODgsMjguNjQ0LDIzLjQ0LDI4LjU4MywyMy4yNjUsMjQuMzgxWk0xMS40MDcsMTcuODU3YTQuOTU3LDQuOTU3LDAsMSwxLDYuNDg4LDIuODI0QTUuMDE0LDUuMDE0LDAsMCwxLDExLjQwNywxNy44NTdaXFxcIiBzdHlsZT1cXFwiZmlsbDojOTliOGM0XFxcIi8+XCIsXG5cdH0sXG5cdFwiNjUwMiBBc3NlbWJseVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDAwYmZcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjgzNi42M1xcXCIgeTE9XFxcIjM2LjIwNVxcXCIgeDI9XFxcIjg0My44MDJcXFwiIHkyPVxcXCIxNC40OFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSg1MjUuOTIyIDMwLjI0OSkgcm90YXRlKDE4MCkgc2NhbGUoMC42MDcgMC42MDcpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIiBzdG9wLW9wYWNpdHk9XFxcIjBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiIHN0b3Atb3BhY2l0eT1cXFwiMC4yNzVcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2Fzc2VtYmx5PC90aXRsZT48cGF0aCBkPVxcXCJNMTYsMmMtMS4yNDYsMy4wNTYtMiw1LjA1Ny0zLjM5MSw4LjAyMkEyMS44ODQsMjEuODg0LDAsMCwwLDE2LjIsMTMuMTU2YTE0Ljg1OCwxNC44NTgsMCwwLDEtNC0yLjI4M0MxMC40MywxNC41NzksNy42NDYsMTkuODU1LDIsMzBjNS4xODYtMi45OTQsOS4wMTItNC42NDgsMTIuNjkxLTQuOTY2VjI0LjJoLS44MzR2LS44MzdoLjgzNFYyNC4yaDEuNjc1VjIyLjUyMUgxNC42OTF2LS44MzRoLS44MzRWMjAuMDEzaC44MzR2LS44MzRoMS42NzV2LjgzNEgxNy4ydi44MzdoLS44Mzd2LS44MzdIMTQuNjkxdjEuNjc1aDEuNjc1di44MzRIMTcuMlYyNC4yaC0uODM3di43ODNjMy45OC4xLDguMDA2LDEuNzcyLDEzLjYzNCw1LjAyMS0uODYzLTEuNTg5LTEuNjM2LTMuMDIxLTIuMzcyLTQuMzg1YTI1LjUyNiwyNS41MjYsMCwwLDAtNC44MzMtMy4zMzNBMTQuNDM2LDE0LjQzNiwwLDAsMSwyNi42NSwyMy44QzE5LjE3LDkuODcyLDE4LjU2NSw4LjAyLDE2LDJaTTEwLjUxMSwxOS4xNzloMS42NzF2LjgzNGguODM3djUuMDIxaC0uODM3VjIyLjUyMUgxMC41MTF2Mi41MTJIOS42NzNWMjAuMDEzaC44MzdabTAsLjgzNHYxLjY3NWgxLjY3MVYyMC4wMTNabTcuNTI2LS44MzRoLjgzN3YuODM0aC44Mzd2LjgzN2guODM0di0uODM3aC44Mzd2LS44MzRoLjgzN3Y1Ljg1NWgtLjgzN1YyMC44NWgtLjgzN3YuODM3aC0uODM0VjIwLjg1aC0uODM3djQuMTg0aC0uODM3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwMDBiZlxcXCIvPjxwYXRoIGQ9XFxcIk0yMy44ODEsMTguNjQyYy02LjA2OS04LjIzNy03LjQ3Ni0xNC44NzYtNy44MzItMTYuNDYxQTE3NS4yMTcsMTc1LjIxNywwLDAsMCwyMy44ODEsMTguNjQyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZjtmaWxsLW9wYWNpdHk6MC4xNjU2ODA0NjgwODI0MjhcXFwiLz48cGF0aCBkPVxcXCJNMTYuMDUxLDIuMTIsMTUuNiwzLjIyN2MtLjE1OS4zOTEtLjMxMS43NjUtLjQ2MSwxLjEzMXMtLjMuNzI0LS40NDgsMS4wNzctLjMuNy0uNDQ4LDEuMDUzLS4zLjcwNi0uNDY1LDEuMDY2LS4zMjkuNzI5LS41MDYsMS4xMTEtLjM2Mi43NzgtLjU2MSwxLjE5M2MtLjAyOC4wNTctLjA2MS4xMjMtLjA4OS4xODFBMjEuODcyLDIxLjg3MiwwLDAsMCwxNi4yLDEzLjE1NmExNC44NzksMTQuODc5LDAsMCwxLTMuOTg5LTIuMjc2bC0uMTQuMjg3Yy0uMDY1LjEzMy0uMTQ0LjI4My0uMjEyLjQybC0uMTA2LjIxOWMtLjg3OCwxLjc5My0yLjAwNiwzLjk4NC0zLjUyNCw2LjgyMiwzLjU1MS0yLDcuMzgxLTQuODg3LDE0LjMzOC0yLjQtLjM0OS0uNjYxLS42Ny0xLjI4LS45NzEtMS44NjNzLS41ODEtMS4xMjgtLjg0MS0xLjY0NC0uNS0xLS43MjUtMS40NjMtLjQzMy0uOS0uNjI5LTEuMzEzLS4zOC0uODE4LS41NTQtMS4yLS4zMzktLjc1NC0uNS0xLjExOFMxOC4wNDcsNi45LDE3LjksNi41NDZzLS4yOTEtLjcwOS0uNDM0LTEuMDY2Yy0uMDM2LS4wOTEtLjA3My0uMTg2LS4xMDktLjI3N0MxNi45NDksNC4yNDcsMTYuNTM2LDMuMjU4LDE2LjA1MSwyLjEyWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPlwiLFxuXHR9LFxuXHRcIkFjdGlvblNjcmlwdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjNDE3MThcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDE1LjI4MWMxLjkxOCwwLDIuMTEtMS4wNTUsMi4xMS0xLjkxOGExNy4xMTksMTcuMTE5LDAsMCwwLS4xOTItMi4yMDUsMTguNzIzLDE4LjcyMywwLDAsMS0uMTkyLTIuMjA1YzAtMi40LDEuNjMtMy40NTIsMy44MzYtMy40NTJoLjU3NVY2LjkzOEg3LjY1OGMtMS41MzQsMC0yLjExLjc2Ny0yLjExLDIuMjA1YTE0LjQxMiwxNC40MTIsMCwwLDAsLjE5MiwxLjkxOCwxNC4zMDYsMTQuMzA2LDAsMCwxLC4xOTIsMi4wMTRjMCwxLjcyNi0uNjcxLDIuNDkzLTEuOTE4LDIuODc3di4xYzEuMTUxLjI4OCwxLjkxOCwxLjE1MSwxLjkxOCwyLjg3N2ExNC4zMDYsMTQuMzA2LDAsMCwxLS4xOTIsMi4wMTQsMTMsMTMsMCwwLDAtLjE5MiwxLjkxOGMwLDEuNDM4LjU3NSwyLjMsMi4xMSwyLjNoLjQ3OVYyNi42SDcuNTYyYy0yLjIwNSwwLTMuODM2LS45NTktMy44MzYtMy42NDRhMTguNzIzLDE4LjcyMywwLDAsMSwuMTkyLTIuMjA1LDE1LjY4LDE1LjY4LDAsMCwwLC4xOTItMi4xMWMwLS44NjMtLjI4OC0xLjkxOC0yLjExLTEuOTE4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2M0MTcxOFxcXCIvPjxwYXRoIGQ9XFxcIk05LjQ3OSwxOC4wNjIsOC4yMzMsMjEuOEg2LjZMMTAuNjMsOS45MTFoMS44MjJMMTYuNDc5LDIxLjhIMTQuOTQ1TDEzLjcsMTguMDYyWm0zLjkzMi0xLjE1MUwxMi4yNiwxMy40NTlhOS4zNjQsOS4zNjQsMCwwLDEtLjU3NS0yLjIwNWgwYy0uMTkyLjY3MS0uMzg0LDEuNDM4LS41NzUsMi4xMUw5Ljk1OSwxNi44MTVoMy40NTJaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzQxNzE4XFxcIi8+PHBhdGggZD1cXFwiTTE3LjkxOCwxOS45NzlhNS45NDEsNS45NDEsMCwwLDAsMi43ODEuNzY3YzEuNTM0LDAsMi40OTMtLjg2MywyLjQ5My0yLjAxNHMtLjY3MS0xLjcyNi0yLjIwNS0yLjRjLTEuOTE4LS42NzEtMy4xNjQtMS43MjYtMy4xNjQtMy4zNTYsMC0xLjgyMiwxLjUzNC0zLjI2LDMuODM2LTMuMjZhNS4xMzUsNS4xMzUsMCwwLDEsMi41ODkuNTc1bC0uMzg0LDEuMjQ3YTUuNTE5LDUuNTE5LDAsMCwwLTIuMy0uNDc5Yy0xLjYzLDAtMi4yMDUuOTU5LTIuMjA1LDEuODIyLDAsMS4xNTEuNzY3LDEuNjMsMi40LDIuMywyLjAxNC43NjcsMy4wNjgsMS43MjYsMy4wNjgsMy40NTIsMCwxLjgyMi0xLjM0MiwzLjQ1Mi00LjEyMywzLjQ1MmE1LjgwNyw1LjgwNywwLDAsMS0zLjA2OC0uNzY3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2M0MTcxOFxcXCIvPjxwYXRoIGQ9XFxcIk0zMCwxNi42MjNjLTEuOTE4LDAtMi4xMSwxLjE1MS0yLjExLDEuOTE4YTE1LjY4LDE1LjY4LDAsMCwwLC4xOTIsMi4xMSwxNS43MzgsMTUuNzM4LDAsMCwxLC4xOTIsMi4yMDVjMCwyLjY4NS0xLjYzLDMuNjQ0LTMuODM2LDMuNjQ0aC0uNTc1VjI1LjA2MmguNDc5YzEuNDM4LDAsMi4xMS0uODYzLDIuMTEtMi4zYTEzLDEzLDAsMCwwLS4xOTItMS45MTgsMTQuMzA2LDE0LjMwNiwwLDAsMS0uMTkyLTIuMDE0YzAtMS43MjYuNzY3LTIuNTg5LDEuOTE4LTIuODc3di0uMWMtMS4xNTEtLjI4OC0xLjkxOC0xLjE1MS0xLjkxOC0yLjg3N2ExNC4zMDYsMTQuMzA2LDAsMCwxLC4xOTItMi4wMTQsMTMsMTMsMCwwLDAsLjE5Mi0xLjkxOGMwLTEuNDM4LS41NzUtMi4yMDUtMi4xMS0yLjNoLS40NzlWNS40aC41NzVjMi4yMDUsMCwzLjgzNiwxLjA1NSwzLjgzNiwzLjQ1MmExNy4xMTksMTcuMTE5LDAsMCwxLS4xOTIsMi4yMDUsMTcuMTE5LDE3LjExOSwwLDAsMC0uMTkyLDIuMjA1YzAsLjk1OS4yODgsMS45MTgsMi4xMSwxLjkxOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjNDE3MThcXFwiLz5cIixcblx0fSxcblx0XCJBZGFcIjoge1xuXHRcdGNvbG91cjogXCIjMGYyM2MzXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjQuNTU0LDIwLjA3NWMuMjA5LjI3LDEuMzU2Ljk2MSwxLjM3LDEuMjQ2YTYuOTIxLDYuOTIxLDAsMCwwLTEuNC0uMzI0Yy0uNDY4LS4xNDItLjk1MS0uMjkzLTEuNDEyLS40OGE5LjIsOS4yLDAsMCwxLTIuMzc1LTEuM0EzLjE0NiwzLjE0NiwwLDAsMSwxOS4zLDE2Ljc1YTEuNzIyLDEuNzIyLDAsMCwxLDEuNzY3LTEuODIyLDMuNTg0LDMuNTg0LDAsMCwxLDEuNTkzLjMyMWMuMTQ2LjA2NiwxLjMxLjYwNiwxLjI1Ni44MDlhNS41LDUuNSwwLDAsMC0xLjQxLS4xMTJjLS42NDkuMjQ0LS40LjgyOC0uMTY4LDEuMzExYTcuODc3LDcuODc3LDAsMCwwLDEuMDc4LDEuNTU0QzIzLjU4LDE5LjAwNSwyNC4zLDIwLjA4MiwyNC41NTQsMjAuMDc1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzBmMjNjM1xcXCIvPjxwYXRoIGQ9XFxcIk0yNC4xNDEsMTYuMjc2Yy4xMjgtLjU5LjgxOS0xLjM4NCwxLjM0NC0uNzczYTQuMiw0LjIsMCwwLDEsLjU3OCwxLjkxOGMuMTIuNjU2LjIsMS4zMjcuMjYxLDEuOTgyLjAzOC4zNzkuMzQsMS43OTQuMTIzLDIuMDc1YTIzLjI0LDIzLjI0LDAsMCwxLTIuOTIyLTIuODM4LDMuNzYzLDMuNzYzLDAsMCwxLS45MjUtMS43QzIyLjUsMTUuODY3LDIzLjQ3OSwxNi4yMSwyNC4xNDEsMTYuMjc2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMTk3OFxcXCIvPjxwYXRoIGQ9XFxcIk0yNi4zLDE3Ljc4MWMuMTQxLS43MzItLjQwNi0yLjU5Mi0xLjA2Ny0yLjk0OWEuMDYuMDYsMCwwLDAsLjA0NC0uMDA3Yy0uMTU2LS40NDQtMS4zNTksMS4xMTYtMS4yMjgsMS4xNzQtLjMxNi0uMTM4Ljc3NC0xLjk4NC45ODgtMi4xNi43LS41NzgsMS4zNzItLjA4NiwxLjg0NS41NDNhNi4wMzYsNi4wMzYsMCwwLDEsLjczMyw0LjQzNCw0LjUsNC41LDAsMCwxLS40MjEsMS4zMTJjLS4xLjIyLS40NSwxLjEtLjY4MiwxLjE3NEExNC43NTQsMTQuNzU0LDAsMCwwLDI2LjMsMTcuNzgxWlxcXCIgc3R5bGU9XFxcImZpbGw6IzBmMjNjM1xcXCIvPjxwYXRoIGQ9XFxcIk0zLjY4Nyw4LjRjLjE3OS0uMTg4LS4wNDEtMS41MjcuMzI0LTEuNTQ4LjI2Mi0uMDE1LjU1MywxLjc0MS42MjcsMS45NjhhOS4yLDkuMiwwLDAsMCwxLjEyNywyLjMyOSw3LjUyOSw3LjUyOSwwLDAsMCw0LjAxNiwyLjk3OCw0LjU1LDQuNTUsMCwwLDAsMi4zNjYuMmMuOTMxLS4yMDgsMS44Mi0uNTc3LDIuNzU3LS43NjUsMS4zNS0uMjcsMy4zNDItLjM1Miw0LjQzOC42NDcuNy42NDEuMzc2Ljc2LjA0MywxLjQyMWEyLjQ0NSwyLjQ0NSwwLDAsMCwuMTc4LDIuNTYyYy4yMzUuMzQyLDEuMDMzLjgyNy42NzUsMS4wOTQtLjU2Ny40MjQtMS4yNzctLjQ1Mi0xLjYzNi0uNzc2LTEuNC0xLjI2NC0yLjcxMS0xLjMxMy00LjQ5Mi0xLjA3NGE4Ljk4Nyw4Ljk4NywwLDAsMS00Ljg4My0uNzA4QTkuNDY5LDkuNDY5LDAsMCwxLDMuNjg3LDguNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMTkuOTQxLDMwYTMuNjE1LDMuNjE1LDAsMCwxLTIuMzI1LS44MTdjLjQ2OS0uMDkyLDEuMDIxLjAyNSwxLjUwOC0uMDQ0YTkuNyw5LjcsMCwwLDAsMS43NTQtLjQzQTEwLjUzNywxMC41MzcsMCwwLDAsMjMuOSwyNy4xNTVhNi41NSw2LjU1LDAsMCwwLDIuNzU3LTUuMjE0Yy4xNDktLjA4OC4zMTYsMS4wMzQuMzE5LDEuMDkxYTUuNzg5LDUuNzg5LDAsMCwxLS4xOSwxLjcyNyw2Ljg2Nyw2Ljg2NywwLDAsMS0xLjQyMywyLjc3NEE3LjI4Niw3LjI4NiwwLDAsMSwxOS45NDEsMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDJkMmQyXFxcIi8+PHBhdGggZD1cXFwiTTE4Ljk2MiwxOS4xMDlhNS43Niw1Ljc2LDAsMCwxLTIuMDUuODU5LDEzLjM4LDEzLjM4LDAsMCwxLTIuMjI0LjU0OSw4Ljg2MSw4Ljg2MSwwLDAsMS00LjQzNS0uNTEsOS45MzksOS45MzksMCwwLDEtMy44NDktMi40QzYuMDUyLDE3LjI0LDQuMywxNS4xOSw0Ljg1NiwxNC41NTdjLjI0OC0uMjgyLjg3NS44NDYsMSwuOTkyYTUsNSwwLDAsMCwxLjM1NywxLjExLDEwLjkxNywxMC45MTcsMCwwLDAsNC4wMzUsMS40NTYsNi42OTMsNi42OTMsMCwwLDAsMi4zNC0uMDk0LDEyLjc0MywxMi43NDMsMCwwLDEsMS42OTQtLjQ4NSw0LDQsMCwwLDEsMi4xMTMuNDU3QzE3LjczOSwxOC4xNjMsMTguOTE4LDE4LjczNiwxOC45NjIsMTkuMTA5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0yOC4zMTMsMTUuMDc4YTE5LjI3NywxOS4yNzcsMCwwLDEtLjQ1MywzLjc3NGMtLjE3Ni0uMjQyLjAxNi0xLjQ3LDAtMS43OTJhNi4wMzIsNi4wMzIsMCwwLDAtLjM4NC0yLjA4N0E0LjkyNSw0LjkyNSwwLDAsMCwyNi4xLDEzLjMxMmExNC43MjgsMTQuNzI4LDAsMCwxLTEuMjctMS41MzZjLTEuODM3LTIuMzgyLTMuMjQ1LTUuMjExLTIuOS04LjMuMDM0LS4zMDguMDY5LTEuNDQ4LjQxMS0xLjQ0NS4xNTIsMCwuMjY2LDEuNTYxLjI5LDEuNzE4YTEyLjUyNywxMi41MjcsMCwwLDAsMS4yMjQsNC4xMTZjLjY3LDEuMjIyLDEuOTQ3LDIuMDIzLDIuODI1LDMuMUE2LjU3OSw2LjU3OSwwLDAsMSwyOC4zMTMsMTUuMDc4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0xNS43LDI2LjkzNWExMC44NDUsMTAuODQ1LDAsMCwwLDYuNDM2LS42ODcsNi45NDEsNi45NDEsMCwwLDAsNC4yNzgtNC40MThjLjMxOS4yLS4wNDgsMS41MjktLjEyOCwxLjc4MWE1LjcyNiw1LjcyNiwwLDAsMS0xLjAxLDEuODEzLDguOTMzLDguOTMzLDAsMCwxLTMuMjU3LDIuNTE0QzIwLjMxNiwyOC43MSwxNi4zNTcsMjkuNTksMTUuNywyNi45MzVaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDJkMmQyXFxcIi8+PHBhdGggZD1cXFwiTTE5LjE1MSwxOS4zNzZjLjM2NywyLjEwNy0yLjk1NywzLjEyNC00LjQ3OCwzLjIxMy0xLjg1OS4xMS00LjkyOS0uMjkyLTYuMDYtMi4wMzEtLjY3My0xLjAzNS43ODEtLjA5LDEuMTg4LjA1OGE4LjY2Myw4LjY2MywwLDAsMCwzLjA2LjUsMTEuNiwxMS42LDAsMCwwLDMuMzA1LS41LDEzLjcyNSwxMy43MjUsMCwwLDAsMS41MzMtLjU3NkMxOCwxOS45MDgsMTguODIzLDE5LjM0OSwxOS4xNTEsMTkuMzc2WlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0yNC4xNDIsMjMuNDZjLjQtLjk0NS0xLjg4My0xLjU3OC0yLjQ0NS0xLjg1OGE0Ljg1Nyw0Ljg1NywwLDAsMS0xLjMxNS0uODY3Yy0uMTgxLS4xODEtLjg3Mi0uOTItLjgwNy0xLjIxOWE0LjkxMiw0LjkxMiwwLDAsMSwxLjA4Ny0uMTc1LDUuOTMsNS45MywwLDAsMSwuODU1LjU4OCwxMC4zMjMsMTAuMzIzLDAsMCwwLC45NjQuNUExNS42MTUsMTUuNjE1LDAsMCwwLDI0LjYsMjEuMmMuMzA4LjA5LDEuNTQ5LjIwOCwxLjcyNy40MjhDMjYuMjg3LDIxLjkyNCwyNC4zNTcsMjMuNjQ5LDI0LjE0MiwyMy40NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMjYuMSwyMi4xNzJjLjI2NS40My0xLjA4LDEuODMxLTEuMzYzLDIuMTA1YTkuMzQsOS4zNCwwLDAsMS0yLjU2NiwxLjcyOCw3Ljc0OCw3Ljc0OCwwLDAsMS0yLjU2Ljc1M2MtLjY3OS4wNTgtMS45NjYtLjEyNC0yLjE0MS0uOTc5YTYuOTUxLDYuOTUxLDAsMCwxLDEuMTc3LS4wODZjLjQ2Mi0uMDU5LjkyMS0uMTQ5LDEuMzc2LS4yNDZhMTMuMDY1LDEzLjA2NSwwLDAsMCwyLjE4NC0uNjQ1LDExLjUwNiwxMS41MDYsMCwwLDAsMi4wODQtMS4xMSwxMC44NzIsMTAuODcyLDAsMCwwLDEuMDc4LS44MjJDMjUuNDc0LDIyLjc4MSwyNS45ODYsMjIuMTY4LDI2LjEsMjIuMTcyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0xOC43NTgsMTEuOTY1Yy0uMS0xLjMwOCwyLjYxMi0xLjMsMy4yNzEtMS4wOTJhNS45NzYsNS45NzYsMCwwLDEsMi45ODIsMi40NzVjLTEuMDgyLjgtMi40NDkuMDk0LTMuMy0uNjU0YTQuMzI0LDQuMzI0LDAsMCwwLTEuNDgxLTEuMDI5QzE5LjQyMSwxMS40LDE5LjQxMiwxMS43NTksMTguNzU4LDExLjk2NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMjUuNzgzLDEzLjM0MWMtLjQ0NC0uMDI5LS4zMTYuMDcxLS42NDctLjIxMi0uMzU4LS4zMDctLjYxNC0uNzk1LS45NDUtMS4xNDEtLjUzNC0uNTU4LTEuMjQyLS44OTUtMS43MjMtMS40ODVhNy4yNjksNy4yNjksMCwwLDEtMS42MjQtNC44NDhjLjAxOC0xLjQ4OS40MDcuMTg3LjU1MS42NzVhMTIuMjc2LDEyLjI3NiwwLDAsMCwxLjEyNiwyLjcwOCw0Ni4wNTUsNDYuMDU1LDAsMCwwLDMuNCw0LjMyMUMyNS44ODIsMTMuMzYxLDI1LjgyNCwxMy4zMzgsMjUuNzgzLDEzLjM0MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMjAuMDY4LDE0Ljc1NmMuMDMzLS42MjUtLjkxMS0uNzkyLTEuMjExLTEuNDItLjE2NC0uMzQzLS4yMTEtLjU2OS4wMjktLjcuMDgyLS4wNDUuMzgzLjAxMi41LS4wMi4yNzEtLjA3Ni4zMzUtLjI3My41ODEtLjRBMS4xOTMsMS4xOTMsMCwwLDEsMjEuNiwxMy4yMzcsMS44MjEsMS44MjEsMCwwLDEsMjAuMDY4LDE0Ljc1NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMjAuNSwxNC43NDVhMS45MzEsMS45MzEsMCwwLDAsMS4zMjMtMS43Yy41MjQuMTM5LjkyOC42NTgsMS41MjEuNzcxYTIuNTg0LDIuNTg0LDAsMCwwLDEuMDI5LS4wMTdjLjIwNy0uMDQ1LjU0LS4yNzQuNzIxLS4yNTktLjAzMy4xNjMtLjQ2NC41NDYtLjU2NS43MTdhNC4yNDIsNC4yNDIsMCwwLDAtLjM4OC45Yy0uMjI5Ljc0MS0uMDYxLjczOS0uNzA5LjMxMWE0LjI4NCw0LjI4NCwwLDAsMC0xLjk1Ny0uNzJDMjEuMjA5LDE0LjcyMiwyMC41OTQsMTQuNzY3LDIwLjUsMTQuNzQ1WlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0xOS45MDUsMjAuNzM0YTIuMDA4LDIuMDA4LDAsMCwxLTEuNCwxLjcxMmMtLjIwNS4wOTEtMi4wMTguNzMzLTIuMDMyLjM0OC0uMDA3LS4yLDEuNjI0LS45NTQsMS44MDktMS4xMWEzLjM1NSwzLjM1NSwwLDAsMCwuODY3LTEuMDcxYy4wNTUtLjExMi4yMzItLjkyNS4yNzEtLjk0M0MxOS42NDQsMTkuNTY0LDE5LjkwOCwyMC42LDE5LjkwNSwyMC43MzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDJkMmQyXFxcIi8+PHBhdGggZD1cXFwiTTExLjM3MywxMi41MzJhMTAuNjI1LDEwLjYyNSwwLDAsMSwzLjcxLS45MTQsMTAuMjgyLDEwLjI4MiwwLDAsMSwxLjg2NS4wMjRjLjM2Ni4wMzksMS40NjkuMDU0LDEuNzQuMzQzYS4yNTUuMjU1LDAsMCwxLS4yNzMuMTczYy0uMDM3LjA3Ny4yNTEuMzcxLjMuNDI1LS4wMzQuMDM0LTEuNDQ1LS40LTEuNTcyLS40MjRhMTAuNjMyLDEwLjYzMiwwLDAsMC0yLjI4Mi0uMTM0LDE2LDE2LDAsMCwwLTEuODQxLjE5NEE2LjIyNCw2LjIyNCwwLDAsMSwxMS4zNzMsMTIuNTMyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0yMi41MTIsMTAuNzMxYTEuODg4LDEuODg4LDAsMCwxLTEuNTE3LS42Yy0uMjQ3LS4zNDktLjczNy0xLjY5Mi0uMzg1LTIuMDIxLjIwOS0uMi4zODQuNjYyLjQ4NC44NDZBMTAuODIyLDEwLjgyMiwwLDAsMCwyMi41MTIsMTAuNzMxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2QyZDJkMlxcXCIvPjxwYXRoIGQ9XFxcIk0yNy43ODgsMTkuMmExOS4yMTIsMTkuMjEyLDAsMCwxLS43NDksMy4zMTNjLS4xNzMtLjA3Ny0uMjc1LS43NzgtLjU2Mi0uOTVhNC4wNyw0LjA3LDAsMCwwLC43Ni0xLjE1NEMyNy4zODksMjAuMTA3LDI3LjU0LDE5LjM2MywyNy43ODgsMTkuMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMTkuOTgxLDExLjg0M2MtLjEzMi4yNjgtLjkzMiwxLjEtMS4xMTguNDgxQzE4Ljc1NiwxMS45NjgsMTkuNzM5LDExLjQ4MywxOS45ODEsMTEuODQzWm0tLjc0Ny40NWMuMjI4LjAwNi4wMTItLjI0OC4wMTItLjI2NkMxOS4yNDUsMTEuOTg0LDE4Ljg3OCwxMi4yOTMsMTkuMjM0LDEyLjI5M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIi0tXCIsXG5cdFx0XSxcblx0fSxcblx0XCJBTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMyZWE5OGVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xMS42MTYsNy45ODZBMS41NTksMS41NTksMCwwLDAsMTAuMTYsN0gxMC4xYTEuNTU4LDEuNTU4LDAsMCwwLTEuNDU2Ljk4NkwyLDI1SDUuODA2bDEuMDE1LTIuODM0aDYuNjIxTDE0LjQ1NywyNWgzLjhaTTcuOTQ0LDE4Ljk1NmwyLjE4OC02LjExMSwyLjE4OCw2LjExNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyZWE5OGVcXFwiLz48cGF0aCBkPVxcXCJNMjMuODI5LDIxLjY3MVY3LjEyOUgyMC4zVjIyLjc0N0EyLjM0NiwyLjM0NiwwLDAsMCwyMi41NywyNUgzMFYyMS42NzJaXFxcIiBzdHlsZT1cXFwiZmlsbDojMmVhOThlXFxcIi8+XCIsXG5cdH0sXG5cdFwiQU5UTFI0XCI6IHtcblx0XHRjb2xvdXI6IFwiI2U0NGEzMlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE0LjE3Nyw3LjI3OGEyLjA4LDIuMDgsMCwwLDEsMy4wNDEtLjhBMy41NzEsMy41NzEsMCwwLDEsMTguMiw4LjAyMmMxLjM1NiwzLjEyMiwyLjksNi4xNjUsNC4xMTksOS4zNDUuNjQ1LDEuNSwxLjQyOSwyLjkzOCwxLjk5NCw0LjQ2OGExLjQ1NSwxLjQ1NSwwLDAsMS0yLjI1OCwxLjM3NmMtMi44LTEuNTcyLTUuNjI4LTMuMDk0LTguMzg1LTQuNzMxLDIuMDA5LjAwOCw0LjAxOC0uMDA4LDYuMDI1LjAxM2ExOS43MDcsMTkuNzA3LDAsMCwwLTEuMjg4LTIuOTE4Yy0uNzgxLTEuODU4LTEuNi0zLjctMi4zNTgtNS41NjVhOS43ODMsOS43ODMsMCwwLDAtMS4wMzIsMi4xMjVjLTEuMywzLjE4Mi0yLjg3LDYuMjQxLTQuMTM2LDkuNDM1LS4yODEuNTktLjQyNCwxLjM0NC0xLjAzNSwxLjY5YTEuNDQ3LDEuNDQ3LDAsMCwxLTIuMDk0LS43MzhjLS4yNDEtLjYxLjE1MS0xLjIuMzgyLTEuNzQzLjc3OS0xLjcyNSwxLjY0NS0zLjQxMywyLjI4My01LjJDMTEuNjUsMTIuOCwxMi45MTYsMTAuMDQxLDE0LjE3Nyw3LjI3OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZWZlZmVcXFwiLz48cGF0aCBkPVxcXCJNMTMuODE3LDIuMkExMy45MjMsMTMuOTIzLDAsMCwxLDI5LjUyNiwxMi41NDlhMTMuNzMzLDEzLjczMywwLDAsMS0yLjA4MiwxMS41MTlBMTQuMDc0LDE0LjA3NCwwLDAsMSw3LjczOCwyNy4yOTNhMTMuODUyLDEzLjg1MiwwLDAsMS01LjYxNS05LjQ4M0ExNC4xNTIsMTQuMTUyLDAsMCwxLDMuNDUxLDkuODUsMTMuOTYxLDEzLjk2MSwwLDAsMSwxMy44MTcsMi4ybS4zNTksNS4wOGMtMS4yNjEsMi43NjItMi41MjYsNS41MjUtMy43NjIsOC4zLS42MzgsMS43ODYtMS41LDMuNDczLTIuMjgzLDUuMi0uMjMxLjU0Mi0uNjIzLDEuMTMzLS4zODIsMS43NDNhMS40NDcsMS40NDcsMCwwLDAsMi4wOTQuNzM4Yy42MS0uMzQ3Ljc1My0xLjEsMS4wMzUtMS42OSwxLjI2Ni0zLjE5NCwyLjgzMy02LjI1Myw0LjEzNi05LjQzNWE5Ljc4Myw5Ljc4MywwLDAsMSwxLjAzMi0yLjEyNWMuNzU2LDEuODY4LDEuNTc3LDMuNzA3LDIuMzU4LDUuNTY1YTE5LjcwNywxOS43MDcsMCwwLDEsMS4yODgsMi45MThjLTIuMDA3LS4wMi00LjAxNi0uMDA1LTYuMDI1LS4wMTMsMi43NTcsMS42MzcsNS41ODgsMy4xNTksOC4zODUsNC43MzFhMS40NTUsMS40NTUsMCwwLDAsMi4yNTgtMS4zNzZjLS41NjUtMS41MjktMS4zNDktMi45NzEtMS45OTQtNC40NjgtMS4yMi0zLjE3OS0yLjc2Mi02LjIyMy00LjExOS05LjM0NWEzLjU3MSwzLjU3MSwwLDAsMC0uOTgyLTEuNTQ0QTIuMDgsMi4wOCwwLDAsMCwxNC4xNzcsNy4yNzhaXFxcIiBzdHlsZT1cXFwiZmlsbDojZTQ0YTMyXFxcIi8+XCIsXG5cdH0sXG5cdFwiQXBhY2hlIENvbmZpZ3VyYXRpb25cIjoge1xuXHRcdGNvbG91cjogXCIjYzkyMDM3XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItNTYwMi42ODJcXFwiIHkxPVxcXCI3NjguNTQxXFxcIiB4Mj1cXFwiLTU1OTguNzI3XFxcIiB5Mj1cXFwiNzYzLjkxN1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjQyMywgLTAuOTA2LCAtMC45MDYsIC0wLjQyMywgMzA4Mi44NTMsIC00NzQ4LjU1MSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmNjk5MjNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzEyXFxcIiBzdG9wLWNvbG9yPVxcXCIjZjc5YTIzXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjgzOFxcXCIgc3RvcC1jb2xvcj1cXFwiI2U5NzgyNlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiLTU2MzEuOTUyXFxcIiB5MT1cXFwiNzY5LjA1MlxcXCIgeDI9XFxcIi01NjAzLjczN1xcXCIgeTI9XFxcIjc2OS4wNTJcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMC40MjMsIC0wLjkwNiwgLTAuOTA2LCAtMC40MjMsIDMwODIuODUzLCAtNDc0OC41NTEpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjMyM1xcXCIgc3RvcC1jb2xvcj1cXFwiIzllMjA2NFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42M1xcXCIgc3RvcC1jb2xvcj1cXFwiI2M5MjAzN1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC43NTFcXFwiIHN0b3AtY29sb3I9XFxcIiNjZDIzMzVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNlOTc4MjZcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIi01NjI4LjU0NlxcXCIgeTE9XFxcIjc2Ni4yMjFcXFwiIHgyPVxcXCItNTYxMS43MzNcXFwiIHkyPVxcXCI3NjYuMjIxXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDAuNDIzLCAtMC45MDYsIC0wLjkwNiwgLTAuNDIzLCAzMDgyLjg1MywgLTQ3NDguNTUxKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzI4MjY2MlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4wOTVcXFwiIHN0b3AtY29sb3I9XFxcIiM2NjJlOGRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzg4XFxcIiBzdG9wLWNvbG9yPVxcXCIjOWYyMDY0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk0OVxcXCIgc3RvcC1jb2xvcj1cXFwiI2NkMjAzMlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJkXFxcIiB4MT1cXFwiLTU2MzAuMzY3XFxcIiB5MT1cXFwiNzY5LjMxNlxcXCIgeDI9XFxcIi01NjAyLjE1MlxcXCIgeTI9XFxcIjc2OS4zMTZcXFwiIHhsaW5rOmhyZWY9XFxcIiNiXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJlXFxcIiB4MT1cXFwiLTU2MjguMzFcXFwiIHkxPVxcXCI3NjguOTMzXFxcIiB4Mj1cXFwiLTU2MTMuNDgyXFxcIiB5Mj1cXFwiNzY4LjkzM1xcXCIgeGxpbms6aHJlZj1cXFwiI2NcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImZcXFwiIHgxPVxcXCItNTYzMC4zNjdcXFwiIHkxPVxcXCI3NjYuMzk0XFxcIiB4Mj1cXFwiLTU2MDIuMTUyXFxcIiB5Mj1cXFwiNzY2LjM5NFxcXCIgeGxpbms6aHJlZj1cXFwiI2JcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImdcXFwiIHgxPVxcXCItNTYzMi4xMThcXFwiIHkxPVxcXCI3NjYuNTM5XFxcIiB4Mj1cXFwiLTU2MDMuOTAyXFxcIiB5Mj1cXFwiNzY2LjUzOVxcXCIgeGxpbms6aHJlZj1cXFwiI2JcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImhcXFwiIHgxPVxcXCItNTYzMC4zNjdcXFwiIHkxPVxcXCI3NjUuNTI2XFxcIiB4Mj1cXFwiLTU2MDIuMTUyXFxcIiB5Mj1cXFwiNzY1LjUyNlxcXCIgeGxpbms6aHJlZj1cXFwiI2JcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImlcXFwiIHgxPVxcXCItNTYzMC4zNjdcXFwiIHkxPVxcXCI3NjUuNjI1XFxcIiB4Mj1cXFwiLTU2MDIuMTUyXFxcIiB5Mj1cXFwiNzY1LjYyNVxcXCIgeGxpbms6aHJlZj1cXFwiI2JcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImpcXFwiIHgxPVxcXCItNTYxNC41MTZcXFwiIHkxPVxcXCI3NjUuNjQ1XFxcIiB4Mj1cXFwiLTU2MDguMjhcXFwiIHkyPVxcXCI3NjUuNjQ1XFxcIiB4bGluazpocmVmPVxcXCIjYlxcXCIvPjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2FwYWNoZTwvdGl0bGU+PHBhdGggZD1cXFwiTTE5Ljk5MywyLjEzM2ExMC4yNjcsMTAuMjY3LDAsMCwwLTIuMDQsMi4wNTZsLjgsMS41MWExOS43MzMsMTkuNzMzLDAsMCwxLDEuNzA4LTIuMTQ0Yy4wNDQtLjA0OS4wNjgtLjA3Mi4wNjgtLjA3MmwtLjA2OC4wNzJhMTcuODY1LDE3Ljg2NSwwLDAsMC0xLjYsMi4xNzQsMzAuMSwzMC4xLDAsMCwwLDMuMTExLS4zODUsMy4yODgsMy4yODgsMCwwLDAtLjMtMi41UzIwLjksMS42LDE5Ljk5MywyLjEzM1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMTguNjM4LDEwLjc0OWwuMDE4LDAtLjExNS4wMTMtLjAyMS4wMDlaXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lXFxcIi8+PHBhdGggZD1cXFwiTTE3LjgyMSwxMy40NTVjLS4wNjYuMDE1LS4xMzIuMDI2LS4yLjAzNkMxNy42ODksMTMuNDgxLDE3Ljc1NiwxMy40NjksMTcuODIxLDEzLjQ1NVpcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmVcXFwiLz48cGF0aCBkPVxcXCJNMTIuMjcsMTkuNTI0Yy4wMDktLjAyMy4wMTctLjA0NS4wMjUtLjA2OHEuMjY0LS43LjUyMy0xLjM1Ny4yOTEtLjc0MS41NzUtMS40MzYuMy0uNzMzLjU5LTEuNDE4LjMwNS0uNzE4LjYtMS4zODQuMjQtLjU0Mi40NzQtMS4wNDkuMDc4LS4xNjkuMTU1LS4zMzUuMTUzLS4zMjkuMy0uNjQ1LjEzOC0uMjkxLjI3NC0uNTdjLjAzLS4wNjIuMDYtLjEyMy4wOS0uMTg1bC4wMTUtLjAzLS4xLjAxMS0uMDc4LS4xNTRjLS4wMDcuMDE1LS4wMTUuMDMtLjAyMy4wNDVxLS4yMTEuNDE4LS40MTcuODQ1LS4xMTkuMjQ2LS4yMzguNDk1LS4zMjguNjg5LS42NDUsMS4zODlUMTMuNzY2LDE1LjFxLS4zLjctLjU5NCwxLjR0LS41NjcsMS4zODdxLS4yODkuNzItLjU2MiwxLjQyNi0uMDYyLjE1OS0uMTIzLjMxOC0uMjE5LjU2OS0uNDI2LDEuMTI0bC4xMjMuMjQzLjExLS4wMTIuMDEyLS4wMzNRMTIuMDA4LDIwLjIxNiwxMi4yNywxOS41MjRaXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lXFxcIi8+PHBhdGggZD1cXFwiTTE3LjU3LDEzLjVaXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lXFxcIi8+PHBhdGggZD1cXFwiTTE3LjMwNSwxNC44MThsLS4zMTUuMDU1aDBsLjE2MS0uMDI1QzE3LjIsMTQuODM5LDE3LjI1MywxNC44MjksMTcuMzA1LDE0LjgxOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiZTIwMmVcXFwiLz48cGF0aCBkPVxcXCJNMTcuMzA1LDE0LjgxOGwtLjMxNS4wNTVoMGwuMTYxLS4wMjVDMTcuMiwxNC44MzksMTcuMjUzLDE0LjgyOSwxNy4zMDUsMTQuODE4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2JlMjAyZTtvcGFjaXR5OjAuMzQ5OTk5OTk0MDM5NTM1NTtpc29sYXRpb246aXNvbGF0ZVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy41NzMsMTMuNWgwbC4wNS0uMDA3Yy4wNjgtLjAxLjEzNS0uMDIyLjItLjAzNmwtLjI0OC4wNDJaXFxcIiBzdHlsZT1cXFwiZmlsbDojYmUyMDJlXFxcIi8+PHBhdGggZD1cXFwiTTE3LjU3MywxMy41aDBsLjA1LS4wMDdjLjA2OC0uMDEuMTM1LS4wMjIuMi0uMDM2bC0uMjQ4LjA0MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiZTIwMmU7b3BhY2l0eTowLjM0OTk5OTk5NDAzOTUzNTU7aXNvbGF0aW9uOmlzb2xhdGVcXFwiLz48cGF0aCBkPVxcXCJNMTYuMzk0LDkuNnEuMzY1LS42ODIuNzM5LTEuMzMyLjM4OC0uNjc0Ljc4NC0xLjMwNWwuMDQ2LS4wNzVxLjM5Mi0uNjIuNzktMS4xOTFsLS44LTEuNTEtLjE4Mi4yMjVjLS4yMzEuMjg4LS40Ny42LS43MTYuOTI1LS4yNzcuMzctLjU2Mi43NjQtLjg1MSwxLjE3OS0uMjY3LjM4My0uNTM4Ljc4NC0uODA5LDEuMi0uMjMxLjM1My0uNDYyLjcxNy0uNjkyLDEuMDlsLS4wMjYuMDQyTDE1LjcxOCwxMC45UTE2LjA1MiwxMC4yNDQsMTYuMzk0LDkuNlpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNMTEuNjUxLDIxLjE5MnEtLjIwNy41NjgtLjQxNSwxLjE1OWwtLjAwNi4wMTctLjA1OS4xNjdjLS4wOTMuMjY2LS4xNzUuNS0uMzYxLDEuMDQ5YTIuMTA3LDIuMTA3LDAsMCwxLC43ODYuOTI2LDEuNjgsMS42OCwwLDAsMC0uNTQ0LTEuMTU0LDMuNjIxLDMuNjIxLDAsMCwwLDMuNDg5LTEuNDIsMi43OTEsMi43OTEsMCwwLDAsLjE2NS0uMzEzLDEuNDUxLDEuNDUxLDAsMCwxLTEuNC41MTNsMCwwLDAsMGE0LjA1OSw0LjA1OSwwLDAsMCwyLjA0Ni0xLjY3MmMuMTExLS4xNzguMjE4LS4zNzIuMzI4LS41ODdhMy4zLDMuMywwLDAsMS0zLjEwOSwxLjAxbC0uODQyLjA5MkMxMS43LDIxLjA1LDExLjY3NywyMS4xMjEsMTEuNjUxLDIxLjE5MlpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYylcXFwiLz48cGF0aCBkPVxcXCJNMTIuMDQ0LDE5LjMwNnEuMjczLS43MDYuNTYyLTEuNDI2LjI3Ni0uNjkuNTY3LTEuMzg3dC41OTQtMS40cS4zMDgtLjcxMS42MjktMS40MTl0LjY0NS0xLjM4OXEuMTE4LS4yNDguMjM4LS40OTUuMjA3LS40MjYuNDE3LS44NDVjLjAwNy0uMDE1LjAxNS0uMDMuMDIzLS4wNDVMMTQuNjc3LDguODQ3bC0uMDUxLjA4M2MtLjI0Mi40LS40ODQuOC0uNzIxLDEuMjE2cy0uNDc1Ljg0NC0uNywxLjI3NnEtLjI5MS41NDctLjU2OCwxLjFsLS4xMS4yMjVjLS4yMjcuNDY3LS40MzIuOTE4LS42MTcsMS4zNTJxLS4zMTUuNzM3LS41NTYsMS40MDZjLS4xMDcuMjkzLS4yLjU3Ni0uMjkyLjg0Ny0uMDczLjIzMi0uMTQyLjQ2NC0uMjA4LjdxLS4yMzQuODE4LS40LDEuNjMxTDExLjUsMjAuNzQ4cS4yMDgtLjU1NC40MjYtMS4xMjRaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTEwLjQzNSwxOC43NTVhMTYuMDcsMTYuMDcsMCwwLDAtLjI3MiwxLjk3NGMwLC4wMjMsMCwuMDQ2LS4wMDUuMDY5YTQuMTUsNC4xNSwwLDAsMC0xLjItMS4wMjksNS44MjUsNS44MjUsMCwwLDEsMS4xNzIsMi42OTMsMi42NDIsMi42NDIsMCwwLDEtMS4zMjUtLjIyNiwyLjY2MiwyLjY2MiwwLDAsMCwxLjEzLjY4NiwzLjI0NywzLjI0NywwLDAsMC0xLjU3MS43ODMsMy4zNTksMy4zNTksMCwwLDEsMS44NjEtLjM0MkM5LjUxLDI1LjM4OSw4Ljc5MywyNy42MjYsOC4wNzYsMzBhLjYyNS42MjUsMCwwLDAsLjQyNS0uNDEzYy4xMjgtLjQzLjk3Ni0zLjI1MSwyLjMwNi02Ljk1OWwuMTE1LS4zMTguMDMyLS4wODlxLjIxMS0uNTgzLjQzNy0xLjE5bC4xLS4yNzcsMC0uMDA1TDEwLjQ1LDE4LjY4NEMxMC40NDUsMTguNzA3LDEwLjQzOSwxOC43MzEsMTAuNDM1LDE4Ljc1NVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZSlcXFwiLz48cGF0aCBkPVxcXCJNMTUuODgsMTEuMDc4bC0uMDkuMTg1cS0uMTM1LjI3OS0uMjc0LjU3LS4xNS4zMTUtLjMuNjQ1Yy0uMDUyLjExMS0uMS4yMjItLjE1NS4zMzVxLS4yMzQuNTA4LS40NzQsMS4wNDktLjMuNjY2LS42LDEuMzg0LS4yOTEuNjg1LS41OSwxLjQxOC0uMjg0LjctLjU3NSwxLjQzNi0uMjU5LjY2MS0uNTIzLDEuMzU3Yy0uMDA5LjAyMy0uMDE3LjA0NS0uMDI1LjA2OHEtLjI2Mi42OTMtLjUyOSwxLjQyMmwtLjAxMi4wMzMuODQyLS4wOTItLjA1LS4wMDlhNiw2LDAsMCwwLDMuMjEtMS44MDcsNy45ODQsNy45ODQsMCwwLDAsMS4xLTEuNTI0LDEzLjEzOSwxMy4xMzksMCwwLDAsLjcwNi0xLjQ2N2MuMTk1LS40NzIuMzgyLS45ODIuNTYyLTEuNTM2YTMuMDUzLDMuMDUzLDAsMCwxLS43ODguMjc0Yy0uMDUxLjAxMS0uMS4wMjEtLjE1Ni4wM3MtLjEwNy4wMTgtLjE2MS4wMjVoMGEzLjY2OCwzLjY2OCwwLDAsMCwxLjk2Mi0xLjkxMywzLjM0NCwzLjM0NCwwLDAsMS0xLjEzLjQ5NWMtLjA2Ni4wMTUtLjEzMi4wMjYtLjIuMDM2bC0uMDUuMDA3aDBhMy44MjEsMy44MjEsMCwwLDAsLjgzOS0uNDY5Yy4wNTEtLjAzOC4xLS4wNzguMTQ4LS4xMi4wNzMtLjA2My4xNDItLjEyOS4yMDgtLjIuMDQyLS4wNDQuMDgzLS4wOS4xMjMtLjEzOGEzLjI3LDMuMjcsMCwwLDAsLjI2My0uMzYyYy4wMjUtLjA0LjA1LS4wOC4wNzQtLjEyMi4wMzEtLjA2LjA2MS0uMTE5LjA5LS4xNzguMTMxLS4yNjQuMjM2LS41LjMxOS0uNzA2LjA0Mi0uMS4wNzgtLjIuMTA5LS4yODguMDEzLS4wMzUuMDI1LS4wNy4wMzYtLjEuMDMzLS4xLjA2LS4xODcuMDgxLS4yNjVhMi42MDUsMi42MDUsMCwwLDAsLjA2Mi0uMjc1aDBhMS4wMSwxLjAxLDAsMCwxLS4xMDkuMDc1LDMuOTY1LDMuOTY1LDAsMCwxLTEuMTYyLjRsLjc3My0uMDg1LS43NzMuMDg1LS4wMTgsMC0uMTE5LjAxOS4wMjEtLjAwOS0yLjY0NS4yOVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZilcXFwiLz48cGF0aCBkPVxcXCJNMTguODU4LDUuNzNjLS4yMzUuMzYxLS40OTIuNzcxLS43NjgsMS4yMzZsLS4wNDQuMDc0cS0uMzU4LjYtLjc1OSwxLjMyNy0uMzQ2LjYyNi0uNzE5LDEuMzQ3LS4zMjYuNjI5LS42NzIsMS4zMzZsMi42NDUtLjI5QTMuMjE2LDMuMjE2LDAsMCwwLDE5Ljk5LDkuNjJjLjA4OS0uMTI4LjE3OC0uMjYyLjI2Ny0uNC4yNzItLjQyNC41MzgtLjg5MS43NzYtMS4zNTVhMTQuMDc0LDE0LjA3NCwwLDAsMCwuNTg4LTEuMjk0LDYuOCw2LjgsMCwwLDAsLjIzMy0uN2MuMDQ4LS4xODQuMDg2LS4zNTguMTE1LS41MjRBMzAuMTUyLDMwLjE1MiwwLDAsMSwxOC44NTgsNS43M1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZylcXFwiLz48cGF0aCBkPVxcXCJNMTcuMTQ5LDE0Ljg0OGMtLjA1My4wMDktLjEwNy4wMTgtLjE2MS4wMjVoMEMxNy4wNDIsMTQuODY2LDE3LjEsMTQuODU3LDE3LjE0OSwxNC44NDhaXFxcIiBzdHlsZT1cXFwiZmlsbDojYmUyMDJlXFxcIi8+PHBhdGggZD1cXFwiTTE3LjE0OSwxNC44NDhjLS4wNTMuMDA5LS4xMDcuMDE4LS4xNjEuMDI1aDBDMTcuMDQyLDE0Ljg2NiwxNy4xLDE0Ljg1NywxNy4xNDksMTQuODQ4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2JlMjAyZTtvcGFjaXR5OjAuMzQ5OTk5OTk0MDM5NTM1NTtpc29sYXRpb246aXNvbGF0ZVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy4xNDksMTQuODQ4Yy0uMDUzLjAwOS0uMTA3LjAxOC0uMTYxLjAyNWgwQzE3LjA0MiwxNC44NjYsMTcuMSwxNC44NTcsMTcuMTQ5LDE0Ljg0OFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaClcXFwiLz48cGF0aCBkPVxcXCJNMTcuNTcsMTMuNWwuMDUtLjAwNy0uMDUuMDA3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2JlMjAyZVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy41NywxMy41bC4wNS0uMDA3LS4wNS4wMDdaXFxcIiBzdHlsZT1cXFwiZmlsbDojYmUyMDJlO29wYWNpdHk6MC4zNDk5OTk5OTQwMzk1MzU1O2lzb2xhdGlvbjppc29sYXRlXFxcIi8+PHBhdGggZD1cXFwiTTE3LjU3LDEzLjVsLjA1LS4wMDctLjA1LjAwN1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaSlcXFwiLz48cGF0aCBkPVxcXCJNMTcuNTcyLDEzLjVoMFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiZTIwMmVcXFwiLz48cGF0aCBkPVxcXCJNMTcuNTcyLDEzLjVoMFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiZTIwMmU7b3BhY2l0eTowLjM0OTk5OTk5NDAzOTUzNTU7aXNvbGF0aW9uOmlzb2xhdGVcXFwiLz48cGF0aCBkPVxcXCJNMTcuNTcyLDEzLjVoMFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjailcXFwiLz5cIixcblx0fSxcblx0XCJBcGV4XCI6IHtcblx0XHRjb2xvdXI6IFwiIzBmOWJkN1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTEzLjY1Miw4LjMzOEE0LjkwNiw0LjkwNiwwLDAsMSwxNy4yLDYuODE0YTQuOTU3LDQuOTU3LDAsMCwxLDQuMzIsMi41Niw1Ljk3Miw1Ljk3MiwwLDAsMSwyLjQ0Mi0uNTE5LDYuMDg5LDYuMDg5LDAsMSwxLTEuMTg5LDEyLjA2LDQuNDEyLDQuNDEyLDAsMCwxLTUuNzgyLDEuODE2QTUuMDM0LDUuMDM0LDAsMCwxLDcuNjM0LDIyLjVhNC42NDYsNC42NDYsMCwwLDEtLjk2LjEsNC43MzIsNC43MzIsMCwwLDEtMi4zMzctOC44MTIsNS40MzgsNS40MzgsMCwwLDEsOS4zMTUtNS40NTNcXFwiIHN0eWxlPVxcXCJmaWxsOiMwZjliZDdcXFwiLz48cGF0aCBkPVxcXCJNMjUuMzc2LDMwLjk2NmgtLjU2MWE0LjY1OCw0LjY1OCwwLDAsMS0xLjI4NC0uMTM3LDEuOSwxLjksMCwwLDEtLjgxOC0uNDgyLDEuNzI2LDEuNzI2LDAsMCwxLS40NTUtLjg0Myw2Ljc3LDYuNzcsMCwwLDEtLjEwNi0xLjQxMyw1Ljg4OSw1Ljg4OSwwLDAsMC0uMDg0LTEuMzMsMSwxLDAsMCwwLS4zLS41NDQsMS4yMjMsMS4yMjMsMCwwLDAtLjY2LS4xNzlsLS4yMzYtLjAxNFYyNC4xNDVsLjIzNi0uMDE0YTEuNDgyLDEuNDgyLDAsMCwwLC41NDktLjEuNzA2LjcwNiwwLDAsMCwuMjczLS4yNjQsMS4zOTQsMS4zOTQsMCwwLDAsLjE4MS0uNTI5LDYuNjgzLDYuNjgzLDAsMCwwLC4wNDQtLjkzOSw4LjEzMiw4LjEzMiwwLDAsMSwuMTEyLTEuNjQzLDEuNywxLjcsMCwwLDEsLjQ0OC0uODQxLDIuMTQ0LDIuMTQ0LDAsMCwxLC45MDYtLjQ5Miw0LjUxNCw0LjUxNCwwLDAsMSwxLjItLjExNmguNTYxdjEuOWgtLjI1YTIuNTg5LDIuNTg5LDAsMCwwLS43NDMuMDU2LjI4NC4yODQsMCwwLDAtLjE0OC4xMTcuODM5LjgzOSwwLDAsMC0uMDU0LjM4NnEwLC4zNzItLjA1MywxLjQxM2EzLjc0LDMuNzQsMCwwLDEtLjE2NiwxLjAwOSwxLjk0NSwxLjk0NSwwLDAsMS0uNjkzLDEsMi4wMSwyLjAxLDAsMCwxLC43LDEuMDQ0LDQuNjI3LDQuNjI3LDAsMCwxLC4xNjMsMS4wNzljLjAyNy42NTcuMDQxLDEuMDc0LjA0MSwxLjI1NmEuODcxLjg3MSwwLDAsMCwuMDU3LjQwOEEuMzQzLjM0MywwLDAsMCwyNC40LDI5YTIuMzgyLDIuMzgyLDAsMCwwLC43MjguMDZoLjI1WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0yMS4xMTgsMjUuNzg4VjI0LjM4MmExLjc1MiwxLjc1MiwwLDAsMCwuNjQ1LS4xMjkuOTM2LjkzNiwwLDAsMCwuMzc1LS4zNTQsMS42MjEsMS42MjEsMCwwLDAsLjIxNy0uNjI0QTYuODgsNi44OCwwLDAsMCwyMi40LDIyLjNhOCw4LDAsMCwxLC4xMDUtMS41ODUsMS40NTYsMS40NTYsMCwwLDEsLjM4MS0uNzIxLDEuOSwxLjksMCwwLDEsLjgtLjQzMSw0LjMzNiw0LjMzNiwwLDAsMSwxLjEyNS0uMTA1aC4zMTF2MS40YTIuODc2LDIuODc2LDAsMCwwLS44MzUuMDczLjUzLjUzLDAsMCwwLS4yNzIuMjIzLDEuMDc5LDEuMDc5LDAsMCwwLS4wODguNTEzcTAsLjM2OS0uMDUzLDEuNGEzLjUzMSwzLjUzMSwwLDAsMS0uMTUyLjk0LDEuOTE4LDEuOTE4LDAsMCwxLS4zMTMuNTk1LDIuNDcsMi40NywwLDAsMS0uNTgzLjQ4NiwyLjA0NSwyLjA0NSwwLDAsMSwuNTY1LjQ2NiwxLjg2OSwxLjg2OSwwLDAsMSwuMzM3LjY0Nyw0LjQxLDQuNDEsMCwwLDEsLjE1MiwxLjAycS4wNDEuOTczLjA0MSwxLjI0MmExLjEsMS4xLDAsMCwwLC4wOTQuNTM5LjU4NC41ODQsMCwwLDAsLjI4NC4yMzEsMi42NDksMi42NDksMCwwLDAsLjgyMy4wNzl2MS40MDZoLS4zMTFBNC40NzQsNC40NzQsMCwwLDEsMjMuNiwzMC41OWExLjY0NCwxLjY0NCwwLDAsMS0uNzEyLS40MTksMS40NzgsMS40NzgsMCwwLDEtLjM5LS43MjQsNi42MjEsNi42MjEsMCwwLDEtLjEtMS4zNTYsNi4zNzQsNi4zNzQsMCwwLDAtLjA5NC0xLjQsMS4yMzIsMS4yMzIsMCwwLDAtLjM5LS42NzFBMS40MzEsMS40MzEsMCwwLDAsMjEuMTE4LDI1Ljc4OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDcyYTBcXFwiLz48cGF0aCBkPVxcXCJNMjcuMDExLDMwLjk2NkgyNi40NVYyOS4wNTloLjI1QTIuMzI5LDIuMzI5LDAsMCwwLDI3LjQyNiwyOWEuMzIzLjMyMywwLDAsMCwuMTY1LS4xMjcuODEyLjgxMiwwLDAsMCwuMDU4LS4zNzlxMC0uMzYuMDUtMS4zNzVhMy43MjUsMy43MjUsMCwwLDEsLjE3My0xLjA0NywyLjIyMywyLjIyMywwLDAsMSwuMzg3LS43LDIuMTQ1LDIuMTQ1LDAsMCwxLC4zLS4yOTIsMi4xNDEsMi4xNDEsMCwwLDEtLjQtLjQsMi42MTIsMi42MTIsMCwwLDEtLjQyMS0xLjA5MiwxNy41MjUsMTcuNTI1LDAsMCwxLS4xLTEuODQxLDEuMzU3LDEuMzU3LDAsMCwwLS4wNTMtLjQ3OWMtLjAwOC0uMDE2LS4wMzEtLjA2Mi0uMTM2LS4xMDZhMi41MjQsMi41MjQsMCwwLDAtLjc1Ny0uMDZoLS4yNVYxOS4yaC41NjFhNC43OTMsNC43OTMsMCwwLDEsMS4yODMuMTMzLDEuODQxLDEuODQxLDAsMCwxLC44MTguNDg1LDEuNzgxLDEuNzgxLDAsMCwxLC40NTMuODQzLDYuNiw2LjYsMCwwLDEsLjEwOSwxLjQxNCw2LjM1OSw2LjM1OSwwLDAsMCwuMDc5LDEuMzM2Ljk5Mi45OTIsMCwwLDAsLjMuNTM3LDEuMjI2LDEuMjI2LDAsMCwwLC42NjQuMThsLjIzNi4wMTR2MS44NzlsLS4yMzYuMDE0YTEuNDgyLDEuNDgyLDAsMCwwLS41NDkuMS42ODYuNjg2LDAsMCwwLS4yNy4yNjIsMS40ODQsMS40ODQsMCwwLDAtLjE4Ni41MzQsNi43NDMsNi43NDMsMCwwLDAtLjA0My45MzEsOC4zODMsOC4zODMsMCwwLDEtLjEwOCwxLjY0NCwxLjY5NCwxLjY5NCwwLDAsMS0uNDQ2Ljg0NiwyLjE0MywyLjE0MywwLDAsMS0uOTEzLjQ5MkE0LjUsNC41LDAsMCwxLDI3LjAxMSwzMC45NjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTMwLjcwOCwyNS43ODhhMS43NTIsMS43NTIsMCwwLDAtLjY0NS4xMjkuOTE4LjkxOCwwLDAsMC0uMzcyLjM1NCwxLjcyNSwxLjcyNSwwLDAsMC0uMjIuNjI0LDYuODIsNi44MiwwLDAsMC0uMDQ3Ljk3Myw4LjI3LDguMjcsMCwwLDEtLjEsMS41ODgsMS40MzksMS40MzksMCwwLDEtLjM3OC43MjQsMS45LDEuOSwwLDAsMS0uODA5LjQzMSw0LjMzNiw0LjMzNiwwLDAsMS0xLjEyNS4xMDVIMjYuN1YyOS4zMWEyLjY1MiwyLjY1MiwwLDAsMCwuODItLjA3OUEuNTcyLjU3MiwwLDAsMCwyNy44LDI5LDEuMDUsMS4wNSwwLDAsMCwyNy45LDI4LjVxMC0uMzU3LjA1LTEuMzY1YTMuNTMsMy41MywwLDAsMSwuMTU4LS45NzYsMS45NzYsMS45NzYsMCwwLDEsLjM0My0uNjIxQTIuMDM4LDIuMDM4LDAsMCwxLDI5LDI1LjA4NWEyLjQxNiwyLjQxNiwwLDAsMS0uNjMzLS41NTEsMi4zMzksMi4zMzksMCwwLDEtLjM3NS0uOTg0LDE3LjU2NCwxNy41NjQsMCwwLDEtLjA5NC0xLjgsMS41NzEsMS41NzEsMCwwLDAtLjA3OS0uNTg2LjQ4Ny40ODcsMCwwLDAtLjI2NC0uMjI2LDIuOCwyLjgsMCwwLDAtLjg1My0uMDc5di0xLjRoLjMxMWE0LjU3Niw0LjU3NiwwLDAsMSwxLjIxMy4xMjMsMS41ODcsMS41ODcsMCwwLDEsLjcwOS40MTksMS41MjksMS41MjksMCwwLDEsLjM5LjcyNyw2LjQzNiw2LjQzNiwwLDAsMSwuMSwxLjM1Niw2Ljg0Miw2Ljg0MiwwLDAsMCwuMDg4LDEuNCwxLjIyMywxLjIyMywwLDAsMCwuMzkzLjY3MSwxLjQ0NywxLjQ0NywwLDAsMCwuOC4yMzFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA3MmEwXFxcIi8+XCIsXG5cdH0sXG5cdFwiQVBMXCI6IHtcblx0XHRjb2xvdXI6IFwiI2QyZDJkMlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTMwLDI4LjI3NSwxNiwyLDIsMjguMjc1SDE0LjE2MlYzMGgzLjY3NlYyOC4yNzVaTTE3LjgzOCwyNC44MjZWMTMuMTYxbDYuMjE1LDExLjY2NVptLTkuODkxLDAsNi4yMTUtMTEuNjY1VjI0LjgyNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIlx1MjM1RFwiLFxuXHRcdF0sXG5cdH0sXG5cdFwiQXBwbGVTY3JpcHRcIjoge1xuXHRcdGNvbG91cjogXCIjYThjMmFiXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTcuMTgxLDQuNDM3QTUuOTkzLDUuOTkzLDAsMCwxLDIxLjU3OSwyYTUuOTc5LDUuOTc5LDAsMCwxLTEuNDQ3LDQuNDc2LDQuNzI5LDQuNzI5LDAsMCwxLTQuMTcsMS45NjFBNS4yLDUuMiwwLDAsMSwxNy4xODEsNC40MzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojYThjMmFiXFxcIi8+PHBhdGggZD1cXFwiTTE2LjIsMTAuMDM0Yy45NDYsMCwyLjctMS4zLDQuOTg5LTEuM2E2LjI0OSw2LjI0OSwwLDAsMSw1LjQ4NCwyLjgsNi4wOCw2LjA4LDAsMCwwLTMuMDI4LDUuMyw2LjIzNSw2LjIzNSwwLDAsMCwzLjc3Miw1LjdzLTIuNjM3LDcuNDIyLTYuMiw3LjQyMmMtMS42MzYsMC0yLjkwOC0xLjEtNC42MzEtMS4xLTEuNzU3LDAtMy41LDEuMTQ0LTQuNjM1LDEuMTQ0QzguNywzMCw0LjU4NywyMi45NTksNC41ODcsMTcuM2MwLTUuNTY4LDMuNDc4LTguNDg5LDYuNzQtOC40ODlDMTMuNDQ4LDguODExLDE1LjA5MywxMC4wMzQsMTYuMiwxMC4wMzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojYThjMmFiXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCItLVwiLFxuXHRcdFx0XCIjXCIsXG5cdFx0XSxcblx0fSxcblx0XCJBcmR1aW5vXCI6IHtcblx0XHRjb2xvdXI6IFwiIzJkOTA5NFwiLFxuXHRcdGljb246IFwiPGRlZnM+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJhXFxcIiBjeD1cXFwiNzY3LjE3OVxcXCIgY3k9XFxcIjUxNjkuNTQzXFxcIiByPVxcXCIxNC45ODlcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTcxOC4xMTIgLTQ5NTMuOTE3KSBzY2FsZSgwLjk1NSAwLjk2MilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMzNmJhYzBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMyZDkwOTRcXFwiLz48L3JhZGlhbEdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2FyZHVpbm88L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOS42NDUsMTUuOTI1QTEzLjc3LDEzLjc3LDAsMSwxLDE1Ljg3NiwyLjA1NiwxMy44MTksMTMuODE5LDAsMCwxLDI5LjY0NSwxNS45MjVaXFxcIiBzdHlsZT1cXFwic3Ryb2tlOiMwMjc5N2U7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS13aWR0aDoxLjEzNjcyMjg0NTQ5NjkyNjdweDtmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMTAuNTgxLDExLjY0OGMyLjQxLS4wNzYsMy4zNTkuODM0LDQuNjA1LDIuMDY5LjI4NS4yODIuNTc5LjU5LjkuOTIxbC45MjItLjk5MWE2LjIyMyw2LjIyMywwLDAsMSwzLjI1Ni0xLjkzYzEuOTM5LS4yMTEsMy4xMTktLjEyMiw0LjMxMS44MTRhNS4wMjMsNS4wMjMsMCwwLDEsMi4yNDUsMy45LDUuNjUzLDUuNjUzLDAsMCwxLTMuMjUsNS4xNTYsNS45NzUsNS45NzUsMCwwLDEtMy45MTMuMTM1LDcuNjU2LDcuNjU2LDAsMCwxLTMuNTQxLTIuOTg3Yy0xLjY3OCwyLjE0Mi0zLjE4NywzLjI1My01LjIzNSwzLjE1NS03LjQ1Mi0uMzU0LTYuODQyLTEwLjA3NS0uMy0xMC4yNDdabTEuNjU3LDcuOTk0YTkuMTkzLDkuMTkzLDAsMCwwLDIuODU2LTIuOWMtLjc0LTEuMjQzLTIuMjA5LTIuODI0LTMuNDU1LTMuMTM0YTQuMzI4LDQuMzI4LDAsMCwwLTMuMjI0Ljc3NywzLjM4NCwzLjM4NCwwLDAsMC0uNzYyLDMuNjg2LDMuNjc0LDMuNjc0LDAsMCwwLDQuNTg1LDEuNTdabS0yLjk4LTMuNDg3LDMuMjc4LjAwNXYxLjIxbC0zLjI4My4wMDVabTEzLjQ0OCwzLjZBMy44NDMsMy44NDMsMCwwLDAsMjQuOTM3LDE3YTMuNDU4LDMuNDU4LDAsMCwwLTEuODYzLTMuMTA5LDMuNjQ4LDMuNjQ4LDAsMCwwLTQuMi43MjgsNy4zNjQsNy4zNjQsMCwwLDAtMS42NDksMi4xNTFBOC45MzYsOC45MzYsMCwwLDAsMTkuMiwxOS4yNTIsNC4wMjIsNC4wMjIsMCwwLDAsMjIuNzA2LDE5Ljc1NFptLTEuOTU1LTIuMzc2LTEuMDg4LS4wMDgsMC0xLjIxNywxLjA5MSwwVjE1LjA3NWwxLjEwNy0uMDA4LS4wMDcsMS4wOTMsMS4wODUsMHYxLjE2NWwtMS4wMjEtLjAwOHYxLjEySDIwLjc1M1pcXFwiIHN0eWxlPVxcXCJzdHJva2U6IzAwMDtzdHJva2Utd2lkdGg6MC4xMjEwMzA5NjQ4MDkyNzQ4MnB4O29wYWNpdHk6MC4xNjgwOTk5OTk0Mjc3OTU0O2lzb2xhdGlvbjppc29sYXRlXFxcIi8+PHBhdGggZD1cXFwiTTQuOTE3LDE2LjMzN2MwLDUuMzQ4LDcuMzU0LDcuMzQsMTAuOTg3LDEuODk0LDMuNzY1LDUuNjQ3LDEwLjgyNCwzLjI4LDEwLjgyNC0xLjlTMTkuNyw4LjY1NiwxNS45LDE0LjQ0MWMtMy42LTUuNzE5LTEwLjk4Ny0zLjQ1My0xMC45ODcsMS45Wm0xLjkzMSwwYzAtMy44Niw1LjQ1NS01LjA3OCw3Ljk5MiwwLTIuNTg4LDQuODg5LTcuOTkyLDMuODU5LTcuOTkyLDBabTEwLjExOSwwYzIuMjg2LTUuMTc4LDcuODg5LTMuNzUxLDcuODcyLjAwOFMxOS4xODYsMjEuMjc3LDE2Ljk2NywxNi4zMzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmO3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDowLjI0MjA2MTkyOTYxODU0OTY0cHhcXFwiLz48cmVjdCB4PVxcXCI4Ljg5OFxcXCIgeT1cXFwiMTUuNzk1XFxcIiB3aWR0aD1cXFwiMy4yMzdcXFwiIGhlaWdodD1cXFwiMS4wNjdcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIwLjY0NCAxNi44NDYgMTkuNTc2IDE2Ljg0NiAxOS41NzYgMTUuNzEyIDIwLjY0NCAxNS43MTIgMjAuNjQ0IDE0LjY0NCAyMS43NzkgMTQuNjQ0IDIxLjc3OSAxNS43MTIgMjIuODQ3IDE1LjcxMiAyMi44NDcgMTYuODQ2IDIxLjc3OSAxNi44NDYgMjEuNzc5IDE3LjkxNCAyMC42NDQgMTcuOTE0IDIwLjY0NCAxNi44NDZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJBUk0gQXNzZW1ibHlcIjoge1xuXHRcdGNvbG91cjogXCIjMDAwMGJmXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCI4MzYuNjNcXFwiIHkxPVxcXCIzNi4yMDVcXFwiIHgyPVxcXCI4NDMuODAyXFxcIiB5Mj1cXFwiMTQuNDhcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoNTI1LjkyMiAzMC4yNDkpIHJvdGF0ZSgxODApIHNjYWxlKDAuNjA3IDAuNjA3KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIiBzdG9wLW9wYWNpdHk9XFxcIjAuMjc1XFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9hc3NlbWJseTwvdGl0bGU+PHBhdGggZD1cXFwiTTE2LDJjLTEuMjQ2LDMuMDU2LTIsNS4wNTctMy4zOTEsOC4wMjJBMjEuODg0LDIxLjg4NCwwLDAsMCwxNi4yLDEzLjE1NmExNC44NTgsMTQuODU4LDAsMCwxLTQtMi4yODNDMTAuNDMsMTQuNTc5LDcuNjQ2LDE5Ljg1NSwyLDMwYzUuMTg2LTIuOTk0LDkuMDEyLTQuNjQ4LDEyLjY5MS00Ljk2NlYyNC4yaC0uODM0di0uODM3aC44MzRWMjQuMmgxLjY3NVYyMi41MjFIMTQuNjkxdi0uODM0aC0uODM0VjIwLjAxM2guODM0di0uODM0aDEuNjc1di44MzRIMTcuMnYuODM3aC0uODM3di0uODM3SDE0LjY5MXYxLjY3NWgxLjY3NXYuODM0SDE3LjJWMjQuMmgtLjgzN3YuNzgzYzMuOTguMSw4LjAwNiwxLjc3MiwxMy42MzQsNS4wMjEtLjg2My0xLjU4OS0xLjYzNi0zLjAyMS0yLjM3Mi00LjM4NWEyNS41MjYsMjUuNTI2LDAsMCwwLTQuODMzLTMuMzMzQTE0LjQzNiwxNC40MzYsMCwwLDEsMjYuNjUsMjMuOEMxOS4xNyw5Ljg3MiwxOC41NjUsOC4wMiwxNiwyWk0xMC41MTEsMTkuMTc5aDEuNjcxdi44MzRoLjgzN3Y1LjAyMWgtLjgzN1YyMi41MjFIMTAuNTExdjIuNTEySDkuNjczVjIwLjAxM2guODM3Wm0wLC44MzR2MS42NzVoMS42NzFWMjAuMDEzWm03LjUyNi0uODM0aC44Mzd2LjgzNGguODM3di44MzdoLjgzNHYtLjgzN2guODM3di0uODM0aC44Mzd2NS44NTVoLS44MzdWMjAuODVoLS44Mzd2LjgzN2gtLjgzNFYyMC44NWgtLjgzN3Y0LjE4NGgtLjgzN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDAwYmZcXFwiLz48cGF0aCBkPVxcXCJNMjMuODgxLDE4LjY0MmMtNi4wNjktOC4yMzctNy40NzYtMTQuODc2LTcuODMyLTE2LjQ2MUExNzUuMjE3LDE3NS4yMTcsMCwwLDAsMjMuODgxLDE4LjY0MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmY7ZmlsbC1vcGFjaXR5OjAuMTY1NjgwNDY4MDgyNDI4XFxcIi8+PHBhdGggZD1cXFwiTTE2LjA1MSwyLjEyLDE1LjYsMy4yMjdjLS4xNTkuMzkxLS4zMTEuNzY1LS40NjEsMS4xMzFzLS4zLjcyNC0uNDQ4LDEuMDc3LS4zLjctLjQ0OCwxLjA1My0uMy43MDYtLjQ2NSwxLjA2Ni0uMzI5LjcyOS0uNTA2LDEuMTExLS4zNjIuNzc4LS41NjEsMS4xOTNjLS4wMjguMDU3LS4wNjEuMTIzLS4wODkuMTgxQTIxLjg3MiwyMS44NzIsMCwwLDAsMTYuMiwxMy4xNTZhMTQuODc5LDE0Ljg3OSwwLDAsMS0zLjk4OS0yLjI3NmwtLjE0LjI4N2MtLjA2NS4xMzMtLjE0NC4yODMtLjIxMi40MmwtLjEwNi4yMTljLS44NzgsMS43OTMtMi4wMDYsMy45ODQtMy41MjQsNi44MjIsMy41NTEtMiw3LjM4MS00Ljg4NywxNC4zMzgtMi40LS4zNDktLjY2MS0uNjctMS4yOC0uOTcxLTEuODYzcy0uNTgxLTEuMTI4LS44NDEtMS42NDQtLjUtMS0uNzI1LTEuNDYzLS40MzMtLjktLjYyOS0xLjMxMy0uMzgtLjgxOC0uNTU0LTEuMi0uMzM5LS43NTQtLjUtMS4xMThTMTguMDQ3LDYuOSwxNy45LDYuNTQ2cy0uMjkxLS43MDktLjQzNC0xLjA2NmMtLjAzNi0uMDkxLS4wNzMtLjE4Ni0uMTA5LS4yNzdDMTYuOTQ5LDQuMjQ3LDE2LjUzNiwzLjI1OCwxNi4wNTEsMi4xMlpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz5cIixcblx0fSxcblx0XCJBc2NpaURvY1wiOiB7XG5cdFx0Y29sb3VyOiBcIiNlNDAwNDZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0zMCwzMEgyVjJIMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDojZTQwMDQ2XFxcIi8+PHBhdGggZD1cXFwiTTIzLjczMSwyNC44M2EuNTg5LjU4OSwwLDAsMS0uNzYzLS4zMzdMMTYuNzI0LDkuMjY5LDEzLjkzLDE1Ljk5aDEuODMzYS41OS41OSwwLDAsMS0uMDI0LDEuMThIOC45YS41OS41OSwwLDAsMSwuMDI0LTEuMThoMy43MjdsMC0uMDEzTDE2LjE4NCw3LjVhLjU5MS41OTEsMCwwLDEsLjUzMy0uMzYzaDBhLjU5Mi41OTIsMCwwLDEsLjU1Ny4zNjZsNi43ODUsMTYuNTQ2LjAwOS4wMjFBLjU5LjU5LDAsMCwxLDIzLjczMSwyNC44M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTQuNTE2LDE4Ljc5MUg3LjY3OWEuNTkuNTksMCwwLDAtLjAyNCwxLjE4SDExTDkuMzA5LDI0LjA0M2EuNTkuNTksMCwwLDAsMS4wODUuNDY0bDAtLjAxMSwxLjg3NS00LjUwOS4wMDUtLjAxNmgyLjIxNWEuNTkuNTksMCwwLDAsLjAyMy0xLjE4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIkFTUC5ORVQgKEMjKVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMzM2E5ZGNcIixcblx0XHRpY29uOiBcIjx0aXRsZT5maWxlX3R5cGVfYXNweDwvdGl0bGU+PHBvbHlnb24gcG9pbnRzPVxcXCIyMi43NSAyIDYuMzUgMiA2LjM1IDMwIDI5LjY1IDMwIDI5LjY1IDkgMjIuNzUgMlxcXCIgc3R5bGU9XFxcImZpbGw6I2M1YzVjNVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjcuMzUgMjcuNyA4Ljc1IDI3LjcgOC43NSA0LjMgMjAuNDUgNC4zIDIwLjQ1IDExLjMgMjcuNDUgMTEuMyAyNy40NSAyNy43IDI3LjM1IDI3LjdcXFwiIHN0eWxlPVxcXCJmaWxsOiNmNWY1ZjVcXFwiLz48cGF0aCBkPVxcXCJNMTIuMSwzMC45OTRBMTEuMDk0LDExLjA5NCwwLDEsMSwyMy4xOTQsMTkuOSwxMS4xMDYsMTEuMTA2LDAsMCwxLDEyLjEsMzAuOTk0Wm0wLTIwLjNBOS4yLDkuMiwwLDEsMCwyMS4zLDE5LjksOS4yMTYsOS4yMTYsMCwwLDAsMTIuMSwxMC43WlxcXCIgc3R5bGU9XFxcImZpbGw6IzMzYTlkY1xcXCIvPjxyZWN0IHg9XFxcIjIuMDk5XFxcIiB5PVxcXCIxOS40NTVcXFwiIHdpZHRoPVxcXCIyMC4wMDNcXFwiIGhlaWdodD1cXFwiMC44OVxcXCIgc3R5bGU9XFxcImZpbGw6IzMzYTlkYztzdHJva2U6IzMzYTlkYztzdHJva2UtbWl0ZXJsaW1pdDoxMFxcXCIvPjxwYXRoIGQ9XFxcIk0xMi4zMjUsMTUuNzYzYTMxLjkzLDMxLjkzLDAsMCwxLTguNDg0LTEuMTFsLjI0Mi0uODA3YTMxLjM3NCwzMS4zNzQsMCwwLDAsMTUuOTkyLDBsLjIzOS44MDdBMjguMDc2LDI4LjA3NiwwLDAsMSwxMi4zMjUsMTUuNzYzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzMzYTlkYztzdHJva2U6IzMzYTlkYztzdHJva2UtbWl0ZXJsaW1pdDoxMFxcXCIvPjxwYXRoIGQ9XFxcIk00LjEsMjUuNzI0bC0uMjM5LS44MDdhMzEuNjUyLDMxLjY1MiwwLDAsMSwxNi40NzIsMGwtLjI0Mi44MDdBMzEuMzgsMzEuMzgsMCwwLDAsNC4xLDI1LjcyNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzM2E5ZGM7c3Ryb2tlOiMzM2E5ZGM7c3Ryb2tlLW1pdGVybGltaXQ6MTBcXFwiLz48cGF0aCBkPVxcXCJNOC41MzYsMjkuMDU1QTI1LjQzOCwyNS40MzgsMCwwLDEsOCwxMC42MDhsLjc3Ni4zMzFhMjQuNTU4LDI0LjU1OCwwLDAsMCwuNTMzLDE3Ljc4M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMzM2E5ZGM7c3Ryb2tlOiMzM2E5ZGM7c3Ryb2tlLW1pdGVybGltaXQ6MTBcXFwiLz48cGF0aCBkPVxcXCJNMTUuNiwyOS4wNTVsLS43NzYtLjMzM2EyNC41NTksMjQuNTU5LDAsMCwwLC41MzEtMTcuNzgzbC43NzYtLjMzMUEyNS40NDMsMjUuNDQzLDAsMCwxLDE1LjYsMjkuMDU1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzMzYTlkYztzdHJva2U6IzMzYTlkYztzdHJva2UtbWl0ZXJsaW1pdDoxMFxcXCIvPjxyZWN0IHg9XFxcIjExLjY1NVxcXCIgeT1cXFwiOS44OThcXFwiIHdpZHRoPVxcXCIwLjg4OVxcXCIgaGVpZ2h0PVxcXCIyMC4zNzFcXFwiIHN0eWxlPVxcXCJmaWxsOiMzM2E5ZGM7c3Ryb2tlOiMzM2E5ZGM7c3Ryb2tlLW1pdGVybGltaXQ6MTBcXFwiLz5cIixcblx0fSxcblx0XCJBdXRvSG90a2V5XCI6IHtcblx0XHRjb2xvdXI6IFwiI2Q4ZDhkOFwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiNTQuNjA0XFxcIiB5MT1cXFwiMTY4LjM4OFxcXCIgeDI9XFxcIjU0LjYwNFxcXCIgeTI9XFxcIjE5NC44ODVcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTM4LjYwNCAtMTY1LjYzNilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNkOGQ4ZDhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNhM2EzYTNcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYlxcXCIgeDE9XFxcIjY4Ljc1NlxcXCIgeTE9XFxcIjIwOS4xNTJcXFwiIHgyPVxcXCI5MS42MzhcXFwiIHkyPVxcXCIyMDkuMTUyXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC01MC42MDEgLTE1OS40NDkpIHNjYWxlKDAuODMyIDAuODM3KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2Q3ZDdkN1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41XFxcIiBzdG9wLWNvbG9yPVxcXCIjZTdlN2U3XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZDdkN2Q3XFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9hdXRvaG90a2V5PC90aXRsZT48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIyLjgyNFxcXCIgd2lkdGg9XFxcIjI4XFxcIiBoZWlnaHQ9XFxcIjI2LjM1M1xcXCIgcng9XFxcIjMuMDg4XFxcIiByeT1cXFwiMy4wODhcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMjYuODU2LDI5LjE4MUg1LjE0NEEzLjE0OCwzLjE0OCwwLDAsMSwyLDI2LjAzN1Y1Ljk2M0EzLjE0OCwzLjE0OCwwLDAsMSw1LjE0NCwyLjgxOUgyNi44NTZBMy4xNDgsMy4xNDgsMCwwLDEsMzAsNS45NjNWMjYuMDM3QTMuMTQ4LDMuMTQ4LDAsMCwxLDI2Ljg1NiwyOS4xODFaTTUuMTQ0LDIuOTYzYTMsMywwLDAsMC0zLDNoMFYyNi4wMzdhMywzLDAsMCwwLDMsM0gyNi44NTZhMywzLDAsMCwwLDMtM1Y1Ljk2M2EzLDMsMCwwLDAtMy0zWlxcXCIgc3R5bGU9XFxcImZpbGw6IzhkOGQ4ZFxcXCIvPjxyZWN0IHg9XFxcIjQuMzEzXFxcIiB5PVxcXCI0LjY0MVxcXCIgd2lkdGg9XFxcIjIzLjE2OVxcXCIgaGVpZ2h0PVxcXCIyMS45NFxcXCIgcng9XFxcIjIuNTcxXFxcIiByeT1cXFwiMi41NzFcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNMjQuOTExLDI2LjY0MUg2Ljg4NEEyLjYzNCwyLjYzNCwwLDAsMSw0LjI1MywyNC4wMVY3LjIxMkEyLjYzNCwyLjYzNCwwLDAsMSw2Ljg4NCw0LjU4MUgyNC45MTFhMi42MzQsMi42MzQsMCwwLDEsMi42MzEsMi42MzF2MTYuOEEyLjYzNCwyLjYzNCwwLDAsMSwyNC45MTEsMjYuNjQxWk02Ljg4NCw0LjdBMi41MTQsMi41MTQsMCwwLDAsNC4zNzMsNy4yMTJ2MTYuOGEyLjUxNCwyLjUxNCwwLDAsMCwyLjUxMSwyLjUxMUgyNC45MTFhMi41MTQsMi41MTQsMCwwLDAsMi41MTEtMi41MTFWNy4yMTJBMi41MTQsMi41MTQsMCwwLDAsMjQuOTExLDQuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmOGY4ZjhcXFwiLz48cGF0aCBkPVxcXCJNNi4xNDUsMjMuOWwyLjM0My02LjFoLjg3bDIuNSw2LjFoLS45MmwtLjcxMi0xLjg0OEg3LjY3M0w3LDIzLjlaTTcuOSwyMS40SDkuOTc0bC0uNjM3LTEuN3EtLjI5MS0uNzctLjQzMy0xLjI2NUE3Ljc3Niw3Ljc3NiwwLDAsMSw4LjU3NiwxOS42WlxcXCIvPjxwYXRoIGQ9XFxcIk0xMy42MDcsMjMuOVYxNy44aC44MDd2Mi41aDMuMTcxVjE3LjhoLjgwN3Y2LjFoLS44MDdWMjEuMDIxaC0zLjE3VjIzLjlaXFxcIi8+PHBhdGggZD1cXFwiTTIwLjQ3OCwyMy45VjE3LjhoLjgwN3YzLjAyNWwzLjAzLTMuMDI1aDEuMDk0TDIyLjg1LDIwLjI2NywyNS41MjIsMjMuOUgyNC40NTZsLTIuMTcyLTMuMDg4LTEsLjk3NFYyMy45WlxcXCIvPlwiLFxuXHR9LFxuXHRcIkF1dG9JdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiM1ZDgzYWNcIixcblx0XHRpY29uOiBcIjxjaXJjbGUgY3g9XFxcIjE2XFxcIiBjeT1cXFwiMTZcXFwiIHI9XFxcIjEyLjU1MVxcXCIgc3R5bGU9XFxcImZpbGw6IzVkODNhY1xcXCIvPjxwYXRoIGQ9XFxcIk0yLDE2QTE0LDE0LDAsMSwxLDE2LDMwLDE0LDE0LDAsMCwxLDIsMTZaTTE2LDQuNzg5QTExLjIxMSwxMS4yMTEsMCwxLDAsMjcuMjExLDE2LDExLjIxMSwxMS4yMTEsMCwwLDAsMTYsNC43ODlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjBmMGYwXFxcIi8+PHBhdGggZD1cXFwiTTI0LjU3NiwyMC4xNTZsLTYuNC05LjI2NGEzLjEzMSwzLjEzMSwwLDAsMC0uODE5LS44MTksMi4zNiwyLjM2LDAsMCwwLTIuNDQyLjAyMywzLjU0MywzLjU0MywwLDAsMC0uODEyLjhMNy41MzMsMjAuMTU2aDMuNzUybDQuODA4LTYuOCwxLjgzOCwyLjcxcS4yNi4zNjguNTQ0Ljc4OXQuNS43cS0uMzY4LS4wMzEtLjg2NS0uMDMxaC0zLjUzbC0xLjkxNCwyLjYzNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmMGYwZjBcXFwiLz5cIixcblx0fSxcblx0XCJBdnJvIElETFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDQwZmZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDExLjY0OWguMDI1YTQuNzg1LDQuNzg1LDAsMCwwLDIuOTExLDEuMzM2YzIuMzA4LjIyMSw0LjU5LS40ODUsNi45LS4zMjZhNy4wMyw3LjAzLDAsMCwxLDIuNjguNjY0Yy41LS4zMTkuOTg5LS42NjIsMS40ODYtLjk4OS41LjMyNy45ODQuNjc0LDEuNDg4Ljk4OWE2LjgzNCw2LjgzNCwwLDAsMSwyLjQ4Ny0uNjVjMS45OTUtLjE2NywzLjk2Ny4zMDgsNS45NTcuMzU5YTUuMiw1LjIsMCwwLDAsNC4wMjYtMS4zODNIMzB2LjIzNmMtLjE3OC43NDctLjg4MiwxLjE3Ni0xLjI4NCwxLjc5YTQuOTQ4LDQuOTQ4LDAsMCwxLS43MzEuNzkxLDMuOCwzLjgsMCwwLDEtLjU2NS43NDgsMi41NTEsMi41NTEsMCwwLDAtLjU5NC41NDEsMi4xODEsMi4xODEsMCwwLDEtLjk2Ljc0OSwxLjE0OSwxLjE0OSwwLDAsMS0uNTY1LjU2LDYuNjksNi42OSwwLDAsMS0xLjk0LjE4NGMuNzIzLjU0OCwxLjUsMS4wMiwyLjI0NiwxLjUzNS43ODIuNTEzLDEuNTQsMS4wNjEsMi4zMjYsMS41NjhINC4wODljMS41LTEuMDU4LDMuMDU3LTIuMDM1LDQuNTUtMy4xQTYuOCw2LjgsMCwwLDEsNi43LDE3LjA2NWExLjE1NSwxLjE1NSwwLDAsMS0uNTY5LS41NjIsMi4yOCwyLjI4LDAsMCwxLTEuMDQzLS44NmMtLjI2OC0uMy0uNjctLjQ2Ni0uODUzLS44NDMtLjItLjQzNi0uNjU4LS42NjQtLjkwOS0xLjA2Ny0uNC0uNjQyLTEuMTM3LTEuMDc2LTEuMzI3LTEuODQ2di0uMjM5bTIuOTM5LDguNTI4cTExLjA1OS4wMDksMjIuMTIsMGMtMy42NjgtMi41MS03LjM3Ni00Ljk2MS0xMS4wNTktNy40NDgtMy42ODQsMi40ODctNy4zOTIsNC45NDEtMTEuMDYxLDcuNDQ5TTQuMTY3LDEzLjJhNy44NDIsNy44NDIsMCwwLDAsMi44NC43MzFjMS4xNjMuMTIzLDIuMzQxLjA0NiwzLjUuMjM2YTIuNywyLjcsMCwwLDEsMS42MDcuNzgxYy42NTktLjQ1MiwxLjMzMi0uODg1LDEuOTg3LTEuMzQybC4wMTItLjA2NGE1LjI5NCw1LjI5NCwwLDAsMC0xLjg3Ny0uNWMtMi42OTMtLjMxNi01LjM4Ny43MTItOC4wNjcuMTZtMTMuNjUyLjM1NmMuNjg4LjQ2NiwxLjM4Mi45MjUsMi4wNywxLjM5MmEyLjQ4OCwyLjQ4OCwwLDAsMSwxLjMtLjcxOSwxOS44NTksMTkuODU5LDAsMCwxLDMuMTM3LS4yNDgsOS4xMDUsOS4xMDUsMCwwLDAsMy41LS43NjhjLTIuNTgyLjUtNS4xNjgtLjQwOS03Ljc2MS0uMmE2LjI1Niw2LjI1NiwwLDAsMC0yLjI0NS41NDVNMy4zMzksMTMuMTY2YTcuMjY0LDcuMjY0LDAsMCwwLDIuNzIzLDEuM2MtLjIxOS0uMTUzLS4zNzYtLjQxNi0uNjU3LS40NTdhNy45NTUsNy45NTUsMCwwLDEtMi4wNjYtLjg0NG0yMy4zMzMuODI1Yy0uMzE3LjAyMy0uNS4zLS43MzMuNDczYTcuMjMyLDcuMjMyLDAsMCwwLDIuNzI0LTEuMyw4LjEwNiw4LjEwNiwwLDAsMS0xLjk5MS44MjRtLTIyLjUuMTI2YTUuMTIxLDUuMTIxLDAsMCwwLDIuNTg5LDEuMWMtLjExNS0uMTI4LS4yMDktLjMxMi0uNC0uMzM0YTEwLjQ1OSwxMC40NTksMCwwLDEtMi4xOS0uNzcxbTIxLjQ2Ny43NjhjLS4xODkuMDIyLS4yODQuMi0uMzk0LjMzNmE1LjE4Nyw1LjE4NywwLDAsMCwyLjYtMS4xMDksMTAuNDc3LDEwLjQ3NywwLDAsMS0yLjIuNzczTTYuMywxNC4yMDZhMy4yNDMsMy4yNDMsMCwwLDAsMi40NDUuMzUyYy0uMS0uMDgtLjE4MS0uMjE1LS4zMjUtLjIwNnEtMS4wNjMtLjA0LTIuMTItLjE0Nm0xNy4zNTEuMTM5Yy0uMTcxLS4wMTktLjI5MS4xLS40MDYuMjExYTMuMTA4LDMuMTA4LDAsMCwwLDIuNDItLjM1MnEtMSwuMTEyLTIuMDE0LjE0MW0tMTYuNzQxLjUzOGEzLjY2OSwzLjY2OSwwLDAsMCwyLjQ4Mi4zMTksMS4xMDcsMS4xMDcsMCwwLDAtLjI4MS0uMzc2LDUuMTU4LDUuMTU4LDAsMCwxLTIuMi4wNTdtMTUuNy4zMThhMy42NzgsMy42NzgsMCwwLDAsMi40ODctLjMxOSw1LjEyNyw1LjEyNywwLDAsMS0yLjItLjA1NywxLjEsMS4xLDAsMCwwLS4yODMuMzc2TTQuODM4LDE0Ljk3N2E0LjExLDQuMTEsMCwwLDAsMi4xMzMuODQxYy0uMDU3LS4wODQtLjExNC0uMTY4LS4xNzEtLjI1NGE2Ljk0OCw2Ljk0OCwwLDAsMS0xLjk2Mi0uNTg3bTIwLjM2MS41ODktLjE2OS4yNTNhNC4xNDEsNC4xNDEsMCwwLDAsMi4xMzYtLjg0Myw3LjAxNSw3LjAxNSwwLDAsMS0xLjk2Ny41OW0tMTguMS0uMTNhLjguOCwwLDAsMCwuNTM0LjMxLDcuNTc5LDcuNTc5LDAsMCwwLDIuMDM3LS4wNzNjLS4wMDktLjAzLS4wMjctLjA5LS4wMzYtLjEyLS40NTctLjA1MS0uOTIzLjA3NC0xLjM4NS4wNDdBNy4wNTQsNy4wNTQsMCwwLDEsNy4xLDE1LjQzN20xNi4xOTEuMTUxYTYuMjgsNi4yOCwwLDAsMC0uOTEzLS4wNDFsLS4wNDIuMTI2YTcuNDE2LDcuNDE2LDAsMCwwLDIuMDQ1LjA3Mi43LjcsMCwwLDAsLjUyMi0uMzMxLDQuMzQ5LDQuMzQ5LDAsMCwxLTEuNjEzLjE3NG0tMTcuNTIuMzI3YTMuMTIsMy4xMiwwLDAsMCwxLjc1NC40ODFjLS4wNjUtLjI0LS4zMzQtLjItLjUyMy0uMjM2LS40MTktLjA0MS0uODE2LS4xODYtMS4yMzEtLjI0Nk0yNSwxNi4xNjNjLS4xODguMDQxLS40NTItLjAwNi0uNTIxLjIzMmEyLjg3NCwyLjg3NCwwLDAsMCwxLjczMi0uNDgyYy0uNC4wNzktLjguMjA3LTEuMjExLjI1MU03LjczNSwxNi4xMTlhMSwxLDAsMCwwLC43ODkuMjc1LDkuMzMxLDkuMzMxLDAsMCwwLDEuMzI1LS4xNThjLS4wMjEtLjA5My0uMDA5LS4yNzgtLjE2My0uMjI4YTkuOTgzLDkuOTgzLDAsMCwxLTEuOTUxLjExMW0xNC40MTUuMTE4YTguMTU3LDguMTU3LDAsMCwwLDEuNDEyLjE1NC45LjksMCwwLDAsLjctLjI3NCw5LjM4Nyw5LjM4NywwLDAsMS0xLjkzNC0uMTFjLS4xNi0uMDYtLjE1NS4xMzItLjE3Ni4yM20tMTUuNDM4LjQ0YTEuOTYyLDEuOTYyLDAsMCwwLDEuMy4xODFsLS4wOTEtLjEyNmMtLjQuMDA2LS44MDctLjAyMi0xLjIwOS0uMDU1bTEuNjE1LjA0M2ExLjAzLDEuMDMsMCwwLDAsLjcxNi4yOTRjLjE3OS0uMTI1LjM1OC0uMjUyLjUzMS0uMzg2YTUuNzQ3LDUuNzQ3LDAsMCwxLTEuMjQ3LjA5Mm0xNC4xLS4wOTNjLjIzNy4xNDQuNDY3LjQ3Ny43ODIuMzQ1LjE2Ni0uMDUuMzY5LS4wODkuNDYxLS4yNTdhNS4yNzEsNS4yNzEsMCwwLDEtMS4yNDMtLjA4OG0xLjcxMy4yNjNhMi4wMDcsMi4wMDcsMCwwLDAsMS4xNDUtLjIxMywxMC4yNjksMTAuMjY5LDAsMCwxLTEuMTQ0LjA0OUMyMy45OTMsMTYuNjY3LDIzLjk4NCwxNi45NjEsMjQuMTM4LDE2Ljg5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNDBmZlxcXCIvPjxwYXRoIGQ9XFxcIk03LjQzNSwxOC44ODZRMTEuNzE5LDE2LjAxMywxNiwxMy4xMzdsOS4zLDYuMjQ0Yy4yMjEuMTQ3LjQzOS4zLjY0OC40NjRxLTkuOTQ3LS4wMS0xOS44OTQsMGMuNDQzLS4zNDQuOTItLjY0LDEuMzgzLS45NThtOC4yNTUtNS4wNjZjLS40NTcsMS44NTktLjkwNywzLjcxOS0xLjM3NSw1LjU3Ni41Mi4wMTUsMS4wNDEuMDEyLDEuNTYyLDBxLS4wMTMtMi44NDEsMC01LjY4bC0uMTg0LjFtLTIuNSwxLjY4NGMuMjU1Ljg1OS40OCwxLjcyOC43NjMsMi41NzkuMjg5LTEuMjM4LjYtMi40NzEuOS0zLjcwNy0uNTUuMzg2LTEuMTE0Ljc1LTEuNjY4LDEuMTI5bTMuMzU3LS44NzNjLS4wMDYuNjgyLDAsMS4zNjQsMCwyLjA0NmEyLjEsMi4xLDAsMCwwLDEuMDE0LS4yNTRjLjE5My0uMTQ1LjEtLjQwOS4wMTEtLjU4NmE0LjI3Niw0LjI3NiwwLDAsMC0xLjAyNC0xLjIwN00xOC4zMjcsMTYuNGMtLjEuNTQ0LS42NjYuNzkyLTEuMTUxLjkuNDc0LjcuOTYsMS4zODksMS40MTYsMi4xLjQ2OS4wMjQuOTQuMDExLDEuNDExLjAwOWExLjYzMSwxLjYzMSwwLDAsMSwuMTYtMi45NzZjLS44MzQtLjYtMS43LTEuMTQtMi41NDQtMS43MjcuMzQ5LjUuODMxLDEuMDM3LjcwOCwxLjdtLTYuODIyLjI0MmMuMjY3LjkyMS41MjksMS44NDUuNzk0LDIuNzY3LjQ0LDAsLjg4LjAwOCwxLjMyMS0uMDA3LS4zMzktMS4xNjEtLjY4NS0yLjMxOS0xLjAwOS0zLjQ4NC0uMzg1LjIxNS0uNzM3LjQ4Mi0xLjEuNzI0bTguOC40NTJhLjk0Ni45NDYsMCwwLDAsLjA1NywxLjdjLjUzMy4wOS44NTUtLjUzMy43NzktLjk5LS4wMjYtLjQtLjQtLjg2MS0uODM2LS43MTRNNy40LDE5LjRxMS4zMjQuMDE4LDIuNjUsMGMuMjU2LS43LjQxMy0xLjQ2OC42MjktMi4yLTEuMS43MTUtMi4xODcsMS40NjEtMy4yNzksMi4xOTRtMTQuMzc3LTEuOWExLjYxNiwxLjYxNiwwLDAsMS0uODc2LDEuOWMxLjIzMy4wMTgsMi40NjUuMDE1LDMuNywwLS45MzQtLjY0NC0xLjg4My0xLjI2Ni0yLjgyMi0xLjltLTUuMjIzLjExNWMtLjAxLjYsMCwxLjIsMCwxLjguNDE1LDAsLjgzMSwwLDEuMjQ4LDAtLjQxOS0uNi0uOC0xLjIxOS0xLjI0My0xLjc5NG0tNS41NDYuOTQxaC4zNDZjLS4wNTUtLjE4Ny0uMTA4LS4zNzYtLjE2Ni0uNTYyYTMuNzUxLDMuNzUxLDAsMCwwLS4xODEuNTYzbS0uMTguNjkzYy0uMDE1LjA0LS4wNDUuMTE5LS4wNjEuMTU5LjI3NS0uMDI2LjU5LjA3MS44NDItLjA1QzExLjQ1MywxOS4xMTIsMTEuMDc0LDE5LjI3NSwxMC44MjYsMTkuMjQ0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNDBmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIkFXS1wiOiB7XG5cdFx0Y29sb3VyOiBcIiNkMmQyZDJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yNi45MjUsMjcuNzM3QzIzLjQzMSwyNi4xLDI0LjYwNiwxNC41ODgsMTMuODEsOC4zMTksMTQuMDg5LDUuNzkyLDE0Ljc1OC0uNSw3Ljk2MSwzLDYuODQ1LDMuMTI4LDQuOTA3LDIuMzMxLDQsNC44MzF2LjExNEMxNi45MTgsMy45LjA4OCwxMC41MywxNi43NSwyNS44NDRjLS4zNzMuMTc2LS42NzQtLjMyNS0xLjk3LjFsLS4wMTQuMDE2Yy0xLjcyMiwxLjEzNSwxLjkzMy43NjgsNC4xNTQsMS4yNzQtMS42MTEuNDE3LTUuNTk0LTEuMTM3LTYuMywxLjY0NS44NzctLjM3LDEsLjMyOSwxLjA3NiwxLjA3N0EyNi4yNzcsMjYuMjc3LDAsMCwxLDIyLjM3OSwyNy41YzEuMS4yODUsNC4xMTgsMi4wNDksNS4xMjIuNTUxQzI3LjUxOSwyNy45MywyNy4yMjEsMjcuODc2LDI2LjkyNSwyNy43MzdaXFxcIi8+PHBhdGggZD1cXFwiTTEwLjQ0NiwyLjk3bC0uMTIxLjA4OGEuMjY2LjI2NiwwLDAsMC0uMDExLjM3Ny4yMTEuMjExLDAsMCwwLC4wNDUuMDM5LjQxNi40MTYsMCwwLDAsLjUyMS0uMDYzLjI2My4yNjMsMCwwLDAsLjA3OC0uMzY0bC0uMDEtLjAxNGMtLjA3Ni0uMTQzLS4xNjMtLjE3Ny0uMzQtLjEyN0MxMC41NTMsMi45MjUsMTAuNSwyLjk0NiwxMC40NDYsMi45N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMTgsMjYuMzY4Yy4xNTEtLjA0MS4zMTgtLjgyOC4xNzQtLjk0OUE2LjI5LDYuMjksMCwwLDAsMTkuNCwyNi40ODVjMS4wMjMsMS4wMDcsMi42NjUtLjAzMiwzLjQ4Mi43NTlhMTAuNzM2LDEwLjczNiwwLDAsMCwxLjk1NywxLjAyN2MtLjEzOS0uMTUxLS4wMjktLjE0NC4xNzktLjAxMS0uMTMtLjMzOC00LjQyMS01LjE1Ni01LjIyNi03LjE4LjA5NS4yOTMtMS42MDgtLjgyNC0yLjA3Ni0xLjQxOS0uMDI4LjA1Ni0uMDkyLS4yNTEtLjIyOC0uNDM0LS4wNDEuMDUtLjItLjQzMy0uMy0uNzI4LjAzNy4xODctLjQ2Mi0uNS0uNjUtLjgxOC0uMDU2LjA5LS43MTkuMzcyLS44MDkuMjg2LS43MjktLjQsMi41MjksNC4wNjYuMTIyLDIuNTU5LjY3Ni42ODMuNjE0LjQtMS4wOTUtLjg1Mi4zNjQuNDUyLS4zMTcuMzEyLTEuNTUzLTEuNTIzLjE4Ni4yLS4yMTgtLjU3Ni0uMjE4LS41NzZhMi42OTIsMi42OTIsMCwwLDAtLjEzMy0uNDgzYy0uMDU2LS4zMi0uMjQxLS43MjMtLjEyLS42NS0xLjQ0NC0xLjU1NiwxLjMxNC0zLjMuNzE5LTMuNjcxLS4xMTEsMC0uMDI3LjAxNy0uMTUxLS4xMDYtLjA5LDAtLjQ2OC4yODUtLjU4Ny0uMjM0LjAwNi4xMzItLjAzNC40MDYtLjE1My0uMS0uMDIzLjA1Mi4wMTUuMS0uMDMuMTQ1LS4yMjUtLjU3Ni0uNzcyLTEuNi0xLjIxNy0yLjUzOS0uMTU4LjE1NS0uMTM4LS4wNzYtLjE5My0xLjA5Mi4wNTMuMTQ0LS4yMjUsMS45MjEtLjIuMTMtLjEyOC4wMDcuMTA4LDEuMjU4LS4zNDMuMjEtLjE0MS4wNS0uMzA1LS4zNjMtLjM0MS0xLjE3OC0uMDQ4LjYyMy0uMjkuMTg3LS41LS45MjMtLjI2OS41MDgtMS42LDEuNzQzLS4zMzMsNy42MjItLjA1My0uMzEzLjE4Ni4zNDEuNzU1LDIuNDI3LjAyMS0uMDM5LS4wMjItLjA4My4wMzgtLjEzMWE2LjMyNCw2LjMyNCwwLDAsMCwuNjc3LDEuMzY1Yy41NDQuNjU4Ljk5NSwyLjA3NC44LDEuMjc3YTExLjg2NywxMS44NjcsMCwwLDAsMi41NTQsMy4yNDlBMzQuNDIzLDM0LjQyMywwLDAsMCwxOCwyNi4zNjhaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDJkMmQyXFxcIi8+PHBhdGggZD1cXFwiTTEwLjgyMywyLjU1N2EuMjkxLjI5MSwwLDAsMC0uMDUxLS4wMjJjLS4yMjEtLjA0LS40MjkuMTUzLS42NTQuMDMyLS4xNDUuMDg1LS4yNTctLjAzNi0uMzc1LS4wNzNhLjIyNC4yMjQsMCwwLDAtLjIuMDE0LDUuODIzLDUuODIzLDAsMCwwLS44MTQuNTgyLDEuMDM3LDEuMDM3LDAsMCwwLS4yNzMuNDQ5Yy0uMDIxLjA0OC0uMDM3LjEyNi4wNS4xMzdhMi4zLDIuMywwLDAsMCwuNjgyLjA0NWMuMTc3LS4wMjguMjc3LS4xNTIuNDE4LS4yMjFhMS4yLDEuMiwwLDAsMCwuNTkyLS42OGMuMDY0LS4xNzUuMTYxLS4xNjcuMjgtLjJTMTAuNywyLjYyLDEwLjgyMywyLjU1N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMTAuMzI1LDMuMDU4bC4xMjEtLjA4OGEuMTE3LjExNywwLDAsMSwuMTIuMDY0Yy4wNDQuMS4xMDYuMTEyLjE5My4wNDcuMDMzLS4wMjUuMDcxLS4wNTguMTE4LS4wMjdhLjExOS4xMTksMCwwLDEsLjA0MS4xMjguMjc2LjI3NiwwLDAsMS0uMTg3LjI0OC4yNjYuMjY2LDAsMCwxLS4zLS4wM0MxMC4zNDEsMy4zMDgsMTAuMjYsMy4yLDEwLjMyNSwzLjA1OFpcXFwiLz5cIixcblx0fSxcblx0XCJCYXRjaFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNkOWI0MDBcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yOS40LDI3LjZIMi41VjQuNUgyOS40Wm0tMjUuOS0xSDI4LjRWNS41SDMuNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkOWI0MDBcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjYuMDc3IDE5LjMxNiA1LjUyMiAxOC40ODQgMTAuMzY2IDE1LjI1NSA1LjQ3OSAxMS4xODQgNi4xMiAxMC40MTYgMTIuMDM1IDE1LjM0NCA2LjA3NyAxOS4zMTZcXFwiIHN0eWxlPVxcXCJmaWxsOiNkOWI0MDBcXFwiLz48cmVjdCB4PVxcXCIxMi43XFxcIiB5PVxcXCIxOC4yXFxcIiB3aWR0aD1cXFwiNy44XFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHN0eWxlPVxcXCJmaWxsOiNkOWI0MDBcXFwiLz48cmVjdCB4PVxcXCIyLjVcXFwiIHk9XFxcIjUuNVxcXCIgd2lkdGg9XFxcIjI2LjlcXFwiIGhlaWdodD1cXFwiMS45XFxcIiBzdHlsZT1cXFwiZmlsbDojZDliNDAwXFxcIi8+XCIsXG5cdH0sXG5cdFwiQyNcIjoge1xuXHRcdGNvbG91cjogXCIjMzY4ODMyXCIsXG5cdFx0aWNvbjogXCI8dGl0bGU+ZmlsZV90eXBlX2NzaGFycDwvdGl0bGU+PHBhdGggZD1cXFwiTTE5Ljc5Miw3LjA3MWgyLjU1M1Y5LjYyNEgyNC45VjcuMDcxaDIuNTUyVjkuNjI0SDMwdjIuNTUyaC0yLjU1djIuNTUxSDMwVjE3LjI4SDI3LjQ0OXYyLjU1MkgyNC45di0yLjU1bC0yLjU1LDAsMCwyLjU1MkgxOS43OTN2LTIuNTVsLTIuNTUzLDBWMTQuNzI1aDIuNTUzVjEyLjE3OUgxNy4yNFY5LjYyMmgyLjU1NFptMi41NTMsNy42NThIMjQuOVYxMi4xNzZIMjIuMzQ1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzM2ODgzMlxcXCIvPjxwYXRoIGQ9XFxcIk0xNC42ODksMjQuMDEzYTEwLjIsMTAuMiwwLDAsMS00LjY1My45MTUsNy42LDcuNiwwLDAsMS01Ljg5LTIuMzM2QTguODM5LDguODM5LDAsMCwxLDIsMTYuMzY3LDkuNDM2LDkuNDM2LDAsMCwxLDQuNDEyLDkuNjQ4YTguMTgxLDguMTgxLDAsMCwxLDYuMjU5LTIuNTc3LDExLjEsMTEuMSwwLDAsMSw0LjAxOC42Mzh2My43NDVhNi44MSw2LjgxLDAsMCwwLTMuNzIzLTEuMDM2LDQuNzkzLDQuNzkzLDAsMCwwLTMuNywxLjUyOSw1Ljg3OSw1Ljg3OSwwLDAsMC0xLjQwNyw0LjE0Miw1Ljc3NCw1Ljc3NCwwLDAsMCwxLjMyOCwzLjk5Miw0LjU1MSw0LjU1MSwwLDAsMCwzLjU3NSwxLjQ4Nyw3LjI4OCw3LjI4OCwwLDAsMCwzLjkyNy0xLjEwOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzNjg4MzJcXFwiLz5cIixcblx0fSxcblx0XCJDXCI6IHtcblx0XHRjb2xvdXI6IFwiIzAwNWY5MVwiLFxuXHRcdGljb246IFwiPHRpdGxlPmZpbGVfdHlwZV9jPC90aXRsZT48cGF0aCBkPVxcXCJNMTAuNjc2LDE1Ljk3M2ExMC4wNTIsMTAuMDUyLDAsMCwwLDEuMTc1LDUuMTUxLDUuNDQ2LDUuNDQ2LDAsMCwwLDYuMzA2LDIuNDA4LDQuMjg0LDQuMjg0LDAsMCwwLDMuMDktMy42Yy4xMDctLjYuMTA5LS42MS4xMDktLjYxLDEuNzM3LjI1MSw0LjUzNy42NTgsNi4yNzQuOTA2bC0uMTEuNDRhMTEuMjU2LDExLjI1NiwwLDAsMS0yLjcsNS4zOSw5LjQzOSw5LjQzOSwwLDAsMS01LjM2NiwyLjY4OCwxNC42MSwxNC42MSwwLDAsMS04LjI3Ny0uODE5QTEwLjE1MSwxMC4xNTEsMCwwLDEsNS40LDIxLjY4N2ExNi4yMjUsMTYuMjI1LDAsMCwxLC4wMTktMTEuNDUsMTAuNTM4LDEwLjUzOCwwLDAsMSw4Ljk2My03LjA1NCwxMy4zNTMsMTMuMzUzLDAsMCwxLDYuNjY2LjU1NSw5LjU3MSw5LjU3MSwwLDAsMSw2LjE2Nyw2LjljLjA5NC4zNTIuMTE0LjQxNy4xMTQuNDE3LTEuOTMyLjM1MS00LjMxOS44LTYuMjM4LDEuMjE1LS4zNjItMS45MTUtMS4yNjUtMy40MjgtMy4yLTMuOWE1LjI2Myw1LjI2MywwLDAsMC02LjYxNiwzLjU3LDEwLjQ5LDEwLjQ5LDAsMCwwLS4zODUsMS40MzlBMTIuMzEsMTIuMzEsMCwwLDAsMTAuNjc2LDE1Ljk3M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDVmOTFcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIi8vXCIsXG5cdFx0XSxcblx0fSxcblx0XCJDKytcIjoge1xuXHRcdGNvbG91cjogXCIjOTg0YzkzXCIsXG5cdFx0aWNvbjogXCI8dGl0bGU+ZmlsZV90eXBlX2NwcDwvdGl0bGU+PHBhdGggZD1cXFwiTTE0Ljc0MiwyNC4wNDdhMTAuMjQyLDEwLjI0MiwwLDAsMS00LjY3My45MTlBNy42MjgsNy42MjgsMCwwLDEsNC4xNTUsMjIuNjIsOC44NzYsOC44NzYsMCwwLDEsMiwxNi4zNjksOS40NzYsOS40NzYsMCwwLDEsNC40MjIsOS42MjFhOC4yMTYsOC4yMTYsMCwwLDEsNi4yODUtMi41ODgsMTEuMTUxLDExLjE1MSwwLDAsMSw0LjAzNS42NDF2My43NjFBNi44MzksNi44MzksMCwwLDAsMTEsMTAuMzk1LDQuODEzLDQuODEzLDAsMCwwLDcuMjg4LDExLjkzYTUuOSw1LjksMCwwLDAtMS40MTMsNC4xNTlBNS44LDUuOCwwLDAsMCw3LjIwOSwyMC4xYTQuNTcsNC41NywwLDAsMCwzLjU5LDEuNDkzLDcuMzE5LDcuMzE5LDAsMCwwLDMuOTQzLTEuMTEzWlxcXCIgc3R5bGU9XFxcImZpbGw6Izk4NGM5M1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTcuMTEyIDE0LjgyOSAxNy4xMTIgMTIuNDg1IDE5LjQ1NiAxMi40ODUgMTkuNDU2IDE0LjgyOSAyMS44IDE0LjgyOSAyMS44IDE3LjE3MiAxOS40NTYgMTcuMTcyIDE5LjQ1NiAxOS41MTUgMTcuMTEyIDE5LjUxNSAxNy4xMTIgMTcuMTcyIDE0Ljc3IDE3LjE3MiAxNC43NyAxNC44MjggMTcuMTEyIDE0LjgyOVxcXCIgc3R5bGU9XFxcImZpbGw6Izk4NGM5M1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjUuMzEzIDE0LjgyOSAyNS4zMTMgMTIuNDg1IDI3LjY1NyAxMi40ODUgMjcuNjU3IDE0LjgyOSAzMCAxNC44MjkgMzAgMTcuMTcyIDI3LjY1NyAxNy4xNzIgMjcuNjU3IDE5LjUxNSAyNS4zMTMgMTkuNTE1IDI1LjMxMyAxNy4xNzIgMjIuOTcxIDE3LjE3MiAyMi45NzEgMTQuODI4IDI1LjMxMyAxNC44MjlcXFwiIHN0eWxlPVxcXCJmaWxsOiM5ODRjOTNcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIi8vXCIsXG5cdFx0XSxcblx0fSxcblx0XCJDbG9qdXJlXCI6IHtcblx0XHRjb2xvdXI6IFwiIzkxZGM0N1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE2LDJBMTQsMTQsMCwxLDAsMzAsMTYsMTQuMDE2LDE0LjAxNiwwLDAsMCwxNiwyXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE1LjQ4OCwxNi4yNTJjLS4xMjYuMjczLS4yNjUuNTc5LS40MDguOUEyMi45NjMsMjIuOTYzLDAsMCwwLDEzLjgsMjAuNjA1YTUuMTgxLDUuMTgxLDAsMCwwLS4xMTksMS4xNTVjMCwuMTc0LjAwOS4zNTYuMDI0LjU0MmE2LjY1OCw2LjY1OCwwLDAsMCw0LjQxMy4wNjcsMy45NjYsMy45NjYsMCwwLDEtLjQ0LS40NjZjLS45LTEuMTQ2LTEuNC0yLjgyNy0yLjE5NC01LjY1MlxcXCIgc3R5bGU9XFxcImZpbGw6IzkxZGM0N1xcXCIvPjxwYXRoIGQ9XFxcIk0xMi4xNjksMTAuNTU2YTYuNjc3LDYuNjc3LDAsMCwwLS4wNzcsMTAuODgxYy40MTEtMS43MSwxLjQ0LTMuMjc2LDIuOTgzLTYuNDE1LS4wOTItLjI1Mi0uMi0uNTI3LS4zMTMtLjgxN2ExMC4yMDcsMTAuMjA3LDAsMCwwLTEuNi0yLjg4Miw0LjQzOSw0LjQzOSwwLDAsMC0xLS43NjdcXFwiIHN0eWxlPVxcXCJmaWxsOiM5MWRjNDdcXFwiLz48cGF0aCBkPVxcXCJNMjEuODQsMjMuN2ExMC44NzcsMTAuODc3LDAsMCwxLTIuMjU3LS40NzFBOC4wMzYsOC4wMzYsMCwwLDEsMTAuNzE2LDkuOTgyYTUuOSw1LjksMCwwLDAtMS40LS4xNzFjLTIuMzU4LjAyMi00Ljg0OCwxLjMyNy01Ljg4NCw0Ljg1MmE2LjYwNiw2LjYwNiwwLDAsMC0uMDc0LDEuMzYxLDEyLjY0OSwxMi42NDksMCwwLDAsMjMsNy4yNzQsMTQuNzM3LDE0LjczNywwLDAsMS0zLjQ0OC40NTlBOC44ODEsOC44ODEsMCwwLDEsMjEuODQsMjMuN1xcXCIgc3R5bGU9XFxcImZpbGw6IzYzYjEzMlxcXCIvPjxwYXRoIGQ9XFxcIk0xOS40NjMsMjEuMjQ0YTMuNTMsMy41MywwLDAsMCwuNS4xNzJBNi42OSw2LjY5LDAsMCwwLDIyLjcsMTYuMDIzaDBhNi42ODEsNi42ODEsMCwwLDAtOC43OS02LjM0OGMxLjM1OCwxLjU0OCwyLjAxMSwzLjc2MSwyLjY0Myw2LjE4MXYwcy4yLjY3My41NDcsMS41NjJhMTUuNDM0LDE1LjQzNCwwLDAsMCwxLjM2MywyLjc4OCwyLjkyNCwyLjkyNCwwLDAsMCwxLDEuMDM2XFxcIiBzdHlsZT1cXFwiZmlsbDojOTBiNGZlXFxcIi8+PHBhdGggZD1cXFwiTTE2LjAxMywzLjM3MkExMi42MzIsMTIuNjMyLDAsMCwwLDUuNzMxLDguNjU2YTYuNDI1LDYuNDI1LDAsMCwxLDMuNDgtMS4wMDksNi44LDYuOCwwLDAsMSwzLjE4Mi43NzJjLjEzNC4wNzcuMjYxLjE2LjM4Ni4yNDZhOC4wMzgsOC4wMzgsMCwwLDEsMTEuMjczLDcuMzU4aDBhOC4wMTMsOC4wMTMsMCwwLDEtMi4zOTEsNS43MTksOS44NzEsOS44NzEsMCwwLDAsMS4xNDMuMDY0LDYuMjQsNi4yNCwwLDAsMCw0LjA1MS0xLjI2Myw1LjM0OCw1LjM0OCwwLDAsMCwxLjctMi45MDZBMTIuNjMyLDEyLjYzMiwwLDAsMCwxNi4wMTMsMy4zNzJcXFwiIHN0eWxlPVxcXCJmaWxsOiM1ODgxZDhcXFwiLz5cIixcblx0fSxcblx0XCJDTWFrZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMWEzMDBcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjkuOTU1XFxcIiB5MT1cXFwiOS4wOTZcXFwiIHgyPVxcXCIxNi42OFxcXCIgeTI9XFxcIjIzLjMyNFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxLCAwLCAwLCAtMSwgMCwgMzIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjMTAxMWExXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNjk2OWUxXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCIxNi4yMzFcXFwiIHkxPVxcXCIxOS42NTVcXFwiIHgyPVxcXCIyNS42MThcXFwiIHkyPVxcXCIzLjc4MlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxLCAwLCAwLCAtMSwgMCwgMzIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjYjQwZTBlXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmY1OTU5XFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImNcXFwiIHgxPVxcXCIyMS42NjNcXFwiIHkxPVxcXCI0LjgyM1xcXCIgeDI9XFxcIjguMzgxXFxcIiB5Mj1cXFwiNS45MzhcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMSwgMCwgMCwgLTEsIDAsIDMyKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzAxYTMwMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzAxZGYwMFxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJkXFxcIiB4MT1cXFwiMTQuNjQzXFxcIiB5MT1cXFwiOC4zNjhcXFwiIHgyPVxcXCIxNC40NzJcXFwiIHkyPVxcXCIxNC4xNDVcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMSwgMCwgMCwgLTEsIDAsIDMyKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzg0ODQ4NFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2QyZDJkMlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfY21ha2U8L3RpdGxlPjxwYXRoIGQ9XFxcIk0xNy4yNTcsMTYuOTE5LDIuMjQ2LDI5Ljc0OSwxNS45OTQsMi4yODNaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTIuMjYyLDI5Ljc2OGwtLjAzOC0uMDNMMTYuMDEyLDIuMTkzbC4wMDguMDg4TDE3LjI4MywxNi45M2wtLjAxLjAwOFpNMTUuOTc3LDIuMzc0LDIuMzI0LDI5LjY0OSwxNy4yMywxNi45MDhaXFxcIi8+PHBhdGggZD1cXFwiTTE3Ljk1MiwyNC45MzEsMTYsMi4yOCwyOS43NjcsMjkuNzUxWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk0yOS44MTgsMjkuOGwtLjA2MS0uMDI1TDE3LjkyOSwyNC45NDhsMC0uMDE1TDE1Ljk3NSwyLjI4MmwuMDQ3LS4wMTNaTTE3Ljk3NiwyNC45MTMsMjkuNzE1LDI5LjcsMTYuMDM2LDIuNDA4WlxcXCIvPjxwYXRoIGQ9XFxcIk0xMS4xNiwyMi4wOTRsMTguNjIxLDcuNjU0SDIuMjVaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2MpXFxcIi8+PHBhdGggZD1cXFwiTTI5Ljc4MSwyOS43NzNIMi4xODNsLjA1MS0uMDQ0LDguOTIxLTcuNjY1LjAxNC4wMDYsMTguNjIyLDcuNjU1Wm0tMjcuNDY0LS4wNUgyOS42NTRsLTE4LjQ4OS03LjZaXFxcIi8+PHBhdGggZD1cXFwiTTExLjE4OSwyMi4xMTJsNi4wNTktNS4xNjguODQzLDcuOThaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTE4LjE0OSwyNWwtLjA3Ny0uMDMyLTYuOTc4LTIuODQyLDYuMTk0LTUuMjgzLjAxLjA5NFptLTYuODY1LTIuOSw2Ljc0OCwyLjc0OS0uODI0LTcuOFpcXFwiLz48cGF0aCBkPVxcXCJNMjkuNywyOS45MTFIMi4yODVhLjIyMS4yMjEsMCwwLDEtLjE4Mi0uMDg4LjIyMi4yMjIsMCwwLDEsLjAyMi0uMkwxNS44NjQsMi4xODdhLjE2OS4xNjksMCwwLDEsLjE0LS4xaDBhLjE1NC4xNTQsMCwwLDEsLjEzLjA4NUwyOS44NjcsMjkuNjA3YS4yMzguMjM4LDAsMCwxLC4wMi4yMjZBLjIxMS4yMTEsMCwwLDEsMjkuNywyOS45MTFabS0yNy40NjgtLjE2YS40ODQuNDg0LDAsMCwwLC4wNTcuMDExaDI3LjRsLjA3My0uMDA5YS4yMjEuMjIxLDAsMCwwLS4wMjgtLjA3N0wxNiwyLjI0OCwxNiwyLjI2LDIuMjYxLDI5LjY4NGEuMjc5LjI3OSwwLDAsMC0uMDI1LjA2N1pcXFwiLz5cIixcblx0fSxcblx0XCJDT0JPTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDVjYTVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMi4yNCw2LjU0NmE0LjQ0OSw0LjQ0OSwwLDAsMCwxLjc2NS0yLjUyMiw0LjYzNiw0LjYzNiwwLDAsMS0uMDE4LDIuMTU3Yy0uMjIzLjU4Mi0uNTY3LDEuMTA3LS44MzQsMS42NjlhMjEuNzcyLDIxLjc3MiwwLDAsMSw0LjU1OS0yLjkzOEMyNy4yMyw2LjQsMjUuODkxLDcuMywyNC45MDcsOC40NDJjLjE5LjQwOS4yOC45ODkuOCwxLjEwOWE1LjAzNiw1LjAzNiwwLDAsMCwyLjUuMTU1Yy45MTItLjMxMywxLjM0NS0xLjI1OCwxLjgtMi4wMzVWOS4xNGExNS43MzgsMTUuNzM4LDAsMCwxLS41ODIsMS43NDhjLjIuNTQ3LjQwOSwxLjA5Mi41ODIsMS42NDd2Ljk1MmMtLjIxNC4zNjgtLjQ0Mi43MjYtLjY2MywxLjA4OWE1LjI5Myw1LjI5MywwLDAsMC0xLjA2OC0xLjE2Miw0LjAzLDQuMDMsMCwwLDAtMS44NTEtLjEyNSwzLjIxMiwzLjIxMiwwLDAsMCwyLjQxMywxLjQ3Yy0uMzU5LjM3LS42NjMuOTEyLTEuMjMuOTY5LTEuNjQxLjI0Ny0zLjIwNy0uNTA1LTQuODM5LS41LS4yODIuMDItLjcwNy4wMjQtLjc4NS4zNzIsMCwuNzM1LjIxNywxLjQ1My4xOSwyLjE4OC0uMDU5LDEuMjU4LS41MTIsMi40NjYtLjUyOSwzLjcyNmExMy43ODUsMTMuNzg1LDAsMCwwLC44MzgsMy40NDhjLS41MjMtLjA3Ny0xLjA0NC0uMTY2LTEuNTYyLS4yNi0uMS4yMDgtLjE4NC40Mi0uMjYuNjM0QTQuNTE0LDQuNTE0LDAsMCwwLDIxLjgsMjYuNTMxYy0uMDYxLjEyNy0uMTgyLjM4MS0uMjQxLjUwOGwtLjU3My4xMzhjLS4xMzEuMjQ3LS4yNjMuNDkyLS40LjczOWE0LjQyMSw0LjQyMSwwLDAsMC0yLjIuMDYxYy0uNDY2LS4xODYtLjkyOC0uMzc2LTEuMzg5LS41NjdhNS45MzksNS45MzksMCwwLDAsLjQwNy0yLjMxNWMtLjI4Mi0uOTgyLTEuNi0uOTg0LTItMS44NzdhNi4yMzMsNi4yMzMsMCwwLDEtMS4wMjItMi44NTFjLS44MjMtLjQzMy0xLjQ1NS0xLjIyMS0yLjQtMS40LS4wNDguNDA5LS4wODMuODItLjE1MywxLjIyN0E2LjAxNSw2LjAxNSwwLDAsMSwxMC40ODEsMjIuNmMuMDM5LjQyMi4wNzkuODQyLjEyLDEuMjY1LjM0Ni4zMjQuNjkxLjY0OCwxLjAzMy45NzRhOS43NTIsOS43NTIsMCwwLDEtMS40MjYuNzEzLDExLjExNCwxMS4xMTQsMCwwLDEtMS42ODcuMDc3Yy0uMjU4LS4yNTQtLjUxOC0uNTA4LS43NzctLjc2NGE0Ljg3MSw0Ljg3MSwwLDAsMCwuMTE0LTIuNjA4Yy4xNzEtLjQuMzI2LS44MTIuNDc1LTEuMjIxYTUuNTY1LDUuNTY1LDAsMCwxLTMuMDEuMjA2LDUuMTIsNS4xMiwwLDAsMS0zLjI5LTQuMzMsMy44NTksMy44NTksMCwwLDEsMS40MDctMy4yNjhBNi40MSw2LjQxLDAsMCwwLDMuMiwxNi4yNTlhMy4wMzgsMy4wMzgsMCwwLDAsMi41LDIuNDY2LDMuNDYyLDMuNDYyLDAsMCwwLDEuOTYtLjY0Myw3LjQ4LDcuNDgsMCwwLDEsLjM2My00LjEzMyw1LjUyNCw1LjUyNCwwLDAsMSwzLjU4Ni0yLjY2LDQuMjM1LDQuMjM1LDAsMCwwLDIuMDExLTEuNTY2LDEwLjY3LDEwLjY3LDAsMCwxLDEuNTI5LTEuMzNjLS4yMjgtLjIxOS0uNDUzLS40NC0uNjgtLjY1OUEyLjE1NCwyLjE1NCwwLDAsMCwxNS45LDYuMDIzYzEuMjg0LS4zLDIuNTUxLS42NjEsMy44Mi0xLjAxMWEzLjc5MywzLjc5MywwLDAsMCwxLjQxNS42MDZjLjMxNy4zNDYuNDk0LDEuMTU3LDEuMS45MjhNMTguNDU4LDE5LjkwOGMuMDQyLjc2OC0uMDQ4LDEuNjY1LjY3NCwyLjE1NSwwLS43NTUtLjA0Ni0xLjUwNy0uMS0yLjI2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNWNhNVxcXCIvPlwiLFxuXHR9LFxuXHRcIkNvZmZlZVNjcmlwdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiM2ZjRlMzdcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xMy4xMTQsNS43MjhjLjAyNS4xNTMtLjA1MS4yOC0uMzA2LjQwOGEzLjQ1NywzLjQ1NywwLDAsMC0xLjYzLS4yMjljLS42MzcuMDUxLTEuMTcyLjI1NS0xLjEuNjg4LjEuNDMzLjcxMy42ODgsMS44MDguNTg2LDIuNjc0LS4yMjksMi42NDktMi4wMzgsNi41NzEtMi4zOTQsMy4wNTYtLjI4LDQuNzYzLjY2Miw0Ljk5MiwxLjgwOC4xNzguODkxLS41NiwxLjc1Ny0yLjc3NiwxLjkzNi0xLjk2MS4xNzgtMy4xMDctLjM1Ny0zLjIwOS0uODkxLS4wNTEtLjI4LjEtLjY4OCwxLjA0NC0uNzkuMS40MzMuNjM3Ljg5MSwxLjkxLjc2NEMyMS4zNDEsNy41MzYsMjIuMSw3LjIsMjIsNi43Yy0uMS0uNTM1LTEuMDctLjg0LTIuNi0uNzEzLTMuMTA3LjI4LTMuODcxLDEuOTg3LTYuNTIsMi4yMTZDMTEsOC4zNzYsOS40NzIsNy42ODksOS4yNjgsNi42N2MtLjA3Ni0uMzgyLS4wNzYtMS4yNzMsMS45MS0xLjQ1MiwxLjAxOS0uMDc2LDEuODM0LjEsMS45MzYuNTA5Wk0zLjE4MSwxNi4zNzRBNS4yNzksNS4yNzksMCwwLDAsMi4wMSwxOS45OWE0LjIwNiw0LjIwNiwwLDAsMCwxLjY1NSwzLjA1Niw0LDQsMCwwLDAsMy4zNjIuNzksMTEuNDM0LDExLjQzNCwwLDAsMCwxLjUtLjQ4NCw0LjIzOCw0LjIzOCwwLDAsMS0yLjc1MS0xLjAxOSw0LjEzLDQuMTMsMCwwLDEtMS43MzItMi44MjdBMy43OSwzLjc5LDAsMCwxLDQuNjU4LDE2LjUsMy45NzcsMy45NzcsMCwwLDEsNy40MDksMTVhNC44MDYsNC44MDYsMCwwLDEsMy4yMDkuOTQyLDYuOTUsNi45NSwwLDAsMC0uODY2LS44NjYsNC4xLDQuMSwwLDAsMC0zLjQ2NC0uNjg4LDUuMiw1LjIsMCwwLDAtMy4xMDcsMS45ODdaTTE2LjgzMywxMC40OUE0MC44MzcsNDAuODM3LDAsMCwxLDguNSw5LjdDNi4yMzcsOS4xNCw1LjA0LDguNTI5LDUuMDQsNy43NGMwLS4zMzEuMTUzLS42MTEuNjExLS45NDItMS40MjYuNTYtMi4xOSwxLjAxOS0yLjE5LDEuNzMyLjA3Ni43OSwxLjM1LDEuNTc5LDMuOTQ4LDIuMTlhMzkuNDQzLDM5LjQ0MywwLDAsMCw5LjM0Ny45NDJBMzguOTkzLDM4Ljk5MywwLDAsMCwyNi4xLDEwLjcyYzIuNi0uNjExLDMuODQ2LTEuNDI2LDMuODQ2LTIuMTksMC0uNTYtLjU2LTEuMS0xLjU3OS0xLjVhLjg2Mi44NjIsMCwwLDEsLjQwOC42ODhjMCwuNzktMS4xNzIsMS40MjYtMy41NCwxLjk2MUEzOS4zMjQsMzkuMzI0LDAsMCwxLDE2LjgzMywxMC40OVptOS4zNzMsMi4xOWE0Mi4zMTUsNDIuMzE1LDAsMCwxLTkuMzQ3Ljk0Miw0NC4xNDQsNDQuMTQ0LDAsMCwxLTkuNDI0LS45NDJjLTIuMTktLjU2LTMuMzYyLTEuMTcyLTMuNzY5LTEuODA4YTIzLjE4NiwyMy4xODYsMCwwLDAsMi42LDcuNjQxYy45NDIsMS40MjYsMS44ODUsMi42NzQsMi44MjcsNC4wMjRhOS44ODMsOS44ODMsMCwwLDEsLjg2NiwyLjM2OSw0LjU1OSw0LjU1OSwwLDAsMCwyLjYsMS43MzIsMTAuNjExLDEwLjYxMSwwLDAsMCw0LjE3Ny42MTFoLjE1M2ExMS44MzksMTEuODM5LDAsMCwwLDQuMy0uNjExLDQuODY5LDQuODY5LDAsMCwwLDIuNTIxLTEuNzMyaC4wNzZhOS41OTIsOS41OTIsMCwwLDEsLjc5LTIuMzY5Yy45NDItMS4zNSwxLjg4NS0yLjYsMi44MjctNC4wMjRBMjQuNjIsMjQuNjIsMCwwLDAsMzAsMTAuODcyQzI5LjQ5MSwxMS41ODUsMjguMzE5LDEyLjIsMjYuMjA1LDEyLjY4MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2ZjRlMzdcXFwiLz5cIixcblx0fSxcblx0XCJDcnlzdGFsXCI6IHtcblx0XHRjb2xvdXI6IFwiI2M4YzhjOFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTI5Ljk0MSwxOS44MTYsMTkuOCwyOS45MjhjLS4wMjguMDI4LS4wODUuMDI4LS4xNjkuMDI4TDUuOCwyNi4yNjdjLS4wMjgsMC0uMDg0LS4wMjgtLjExMy0uMTEzTDIsMTIuMzUyYS40MTkuNDE5LDAsMCwxLC4wMjgtLjE2OUwxMi4xNjgsMi4wNzJjLjAyOC0uMDI4LjA4NC0uMDI4LjE2OS0uMDI4bDEzLjgzLDMuNzE4Yy4wMjgsMCwuMDg0LjAyOC4xMTMuMTEzbDMuNjksMTMuOEMzMC4wMjYsMTkuNzMyLDMwLDE5Ljc4OCwyOS45NDEsMTkuODE2Wk0xNi4zOTMsOC44MzIsMi44MTcsMTIuNDkzcS0uMDQyLDAsMCwuMDg0TDEyLjc2LDIyLjUyYy4wMjguMDI4LjAyOCwwLC4wODQsMEwxNi41MDYsOC45NzJDMTYuNDQ5LDguODMyLDE2LjM5Myw4LjgzMiwxNi4zOTMsOC44MzJaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzhjOGM4XFxcIi8+XCIsXG5cdH0sXG5cdFwiQ1NTXCI6IHtcblx0XHRjb2xvdXI6IFwiIzE1NzJiNlwiLFxuXHRcdGljb246IFwiPHBvbHlnb24gcG9pbnRzPVxcXCI1LjkwMiAyNy4yMDEgMy42NTYgMiAyOC4zNDQgMiAyNi4wOTUgMjcuMTk3IDE1Ljk4NSAzMCA1LjkwMiAyNy4yMDFcXFwiIHN0eWxlPVxcXCJmaWxsOiMxNTcyYjZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE2IDI3Ljg1OCAyNC4xNyAyNS41OTMgMjYuMDkyIDQuMDYxIDE2IDQuMDYxIDE2IDI3Ljg1OFxcXCIgc3R5bGU9XFxcImZpbGw6IzMzYTlkY1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYgMTMuMTkxIDIwLjA5IDEzLjE5MSAyMC4zNzIgMTAuMDI2IDE2IDEwLjAyNiAxNiA2LjkzNSAxNi4wMTEgNi45MzUgMjMuNzUgNi45MzUgMjMuNjc2IDcuNzY0IDIyLjkxNyAxNi4yODIgMTYgMTYuMjgyIDE2IDEzLjE5MVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYuMDE5IDIxLjIxOCAxNi4wMDUgMjEuMjIyIDEyLjU2MyAyMC4yOTIgMTIuMzQzIDE3LjgyNyAxMC42NyAxNy44MjcgOS4yNCAxNy44MjcgOS42NzMgMjIuNjggMTYuMDA0IDI0LjQzOCAxNi4wMTkgMjQuNDM0IDE2LjAxOSAyMS4yMThcXFwiIHN0eWxlPVxcXCJmaWxsOiNlYmViZWJcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE5LjgyNyAxNi4xNTEgMTkuNDU1IDIwLjI5IDE2LjAwOCAyMS4yMiAxNi4wMDggMjQuNDM2IDIyLjM0NCAyMi42OCAyMi4zOTEgMjIuMTU4IDIyLjkyOCAxNi4xNTEgMTkuODI3IDE2LjE1MVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYuMDExIDYuOTM1IDE2LjAxMSA4Ljg1NSAxNi4wMTEgMTAuMDE4IDE2LjAxMSAxMC4wMjYgOC41NTUgMTAuMDI2IDguNTU1IDEwLjAyNiA4LjU0NSAxMC4wMjYgOC40ODMgOS4zMzEgOC4zNDIgNy43NjQgOC4yNjggNi45MzUgMTYuMDExIDYuOTM1XFxcIiBzdHlsZT1cXFwiZmlsbDojZWJlYmViXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNiAxMy4xOTEgMTYgMTUuMTExIDE2IDE2LjI3NCAxNiAxNi4yODIgMTIuNjExIDE2LjI4MiAxMi42MTEgMTYuMjgyIDEyLjYwMSAxNi4yODIgMTIuNTM5IDE1LjU4NyAxMi4zOTkgMTQuMDIgMTIuMzI1IDEzLjE5MSAxNiAxMy4xOTFcXFwiIHN0eWxlPVxcXCJmaWxsOiNlYmViZWJcXFwiLz5cIixcblx0fSxcblx0XCJDU1ZcIjoge1xuXHRcdGNvbG91cjogXCIjYzJjMmMyXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjIuMDM4LDJINi4zNzVhMS43NTUsMS43NTUsMCwwLDAtMS43NSwxLjc1djI0LjVBMS43NTUsMS43NTUsMCwwLDAsNi4zNzUsMzBoMTkuMjVhMS43NTUsMS43NTUsMCwwLDAsMS43NS0xLjc1VjYuODU2Wm0uNTI1LDIuODQ0LDEuNjYzLDEuNTMxSDIyLjU2M1pNNi4zNzUsMjguMjVWMy43NUgyMC44MTNWOC4xMjVoNC44MTNWMjguMjVaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzJjMmMyXFxcIi8+PHJlY3QgeD1cXFwiOC4xMjVcXFwiIHk9XFxcIjE1LjA5N1xcXCIgd2lkdGg9XFxcIjEzLjA3NlxcXCIgaGVpZ2h0PVxcXCIxLjc1XFxcIiBzdHlsZT1cXFwiZmlsbDojODI5ZWMyXFxcIi8+PHJlY3QgeD1cXFwiOC4xMjVcXFwiIHk9XFxcIjI0LjQzOVxcXCIgd2lkdGg9XFxcIjkuNzYyXFxcIiBoZWlnaHQ9XFxcIjEuNzVcXFwiIHN0eWxlPVxcXCJmaWxsOiM4MjllYzJcXFwiLz48cmVjdCB4PVxcXCI4LjEyNVxcXCIgeT1cXFwiMTkuNzYzXFxcIiB3aWR0aD1cXFwiMTUuNzVcXFwiIGhlaWdodD1cXFwiMS43NVxcXCIgc3R5bGU9XFxcImZpbGw6IzgyOWVjMlxcXCIvPjxyZWN0IHg9XFxcIjguMTI1XFxcIiB5PVxcXCIxMC4yM1xcXCIgd2lkdGg9XFxcIjE1Ljc1XFxcIiBoZWlnaHQ9XFxcIjEuNzVcXFwiIHN0eWxlPVxcXCJmaWxsOiM4MjllYzJcXFwiLz5cIixcblx0fSxcblx0XCJEXCI6IHtcblx0XHRjb2xvdXI6IFwiI2IwMzkzMVwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiMTg1LjQ1NVxcXCIgeTE9XFxcIjE2MDEuNjQxXFxcIiB4Mj1cXFwiMTgxLjk1NVxcXCIgeTI9XFxcIjE2MzAuMjI0XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC02Mi41MjMgLTY2Ni42NDYpIHNjYWxlKDAuNDI3KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCIxNzYuMTM2XFxcIiB5MT1cXFwiMTYwMC41XFxcIiB4Mj1cXFwiMTcyLjYzNlxcXCIgeTI9XFxcIjE2MjkuMDgzXFxcIiB4bGluazpocmVmPVxcXCIjYVxcXCIvPjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2RsYW5nPC90aXRsZT48cGF0aCBkPVxcXCJNMy45NzgsMTUuNDYyLDMuOTY5LDguNTA5QS41ODguNTg4LDAsMCwxLDQuNSw3Ljk0N2EuNjU4LjY1OCwwLDAsMSwuMDc2LDBsNi4wNzQtLjAwOWExNS43LDE1LjcsMCwwLDEsNi4wNjcuOTUsOC45LDguOSwwLDAsMSwyLjI0NCwxLjM1OSw0LjQ2OSw0LjQ2OSwwLDAsMSwyLjk0Ni0xLjA4Myw0LjExLDQuMTEsMCwwLDEsNC4yNzYsMy45MkE0LjExLDQuMTEsMCwwLDEsMjEuOTA3LDE3Yy0uMDg5LDAtLjE3Ny0uMDA4LS4yNjUtLjAxMmE2LjYxNyw2LjYxNywwLDAsMS0uMjMyLjk1Myw4NS4zODMsODUuMzgzLDAsMCwxLDguNTksMi42VjJIMlYxNS40UTIuOTkyLDE1LjQyLDMuOTc4LDE1LjQ2MlptMjIuOC03Ljk0NGExLjMyLDEuMzIsMCwwLDEsMS4zNzQsMS4yNTksMS4zNzksMS4zNzksMCwwLDEtMi43NDcsMEExLjMyLDEuMzIsMCwwLDEsMjYuNzgsNy41MTdaXFxcIiBzdHlsZT1cXFwiZmlsbDojYjAzOTMxXFxcIi8+PHBhdGggZD1cXFwiTTE3Ljg2MSwxNS43ODdhNC4xMTQsNC4xMTQsMCwwLDAtMS43NDgtMy40NTgsNS44MTQsNS44MTQsMCwwLDAtMS41MDgtLjgyMiw3LjM1NCw3LjM1NCwwLDAsMC0xLjYyOS0uNDM4LDIxLjYyOSwyMS42MjksMCwwLDAtMi41ODgtLjFsLTIuNjE5LDAsLjAwNiw0LjczN2E4OC44MjcsODguODI3LDAsMCwxLDkuOTEsMS40MDhBNC45MTksNC45MTksMCwwLDAsMTcuODYxLDE1Ljc4N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNiMDM5MzFcXFwiLz48cGF0aCBkPVxcXCJNMjAuOTkzLDE4Ljk3OWE3LjkwNiw3LjkwNiwwLDAsMS0yLjEyOCwyLjU4Miw5LjczOSw5LjczOSwwLDAsMS0zLjI1NiwxLjcxLDExLjU1OCwxMS41NTgsMCwwLDEtMS45NzEuNDcyaC0uMDE1YTMxLjg1NywzMS44NTcsMCwwLDEtMy4zMjYuMTExbC01LjYyNS4wMjJhLjYxNi42MTYsMCwwLDEtLjY4Ni0uNjgxbC0uMDEtNy43MzRRMi45OTIsMTUuNDIsMiwxNS40VjMwSDMwVjIwLjU0NGE4NS4zODMsODUuMzgzLDAsMCwwLTguNTktMi42QTYuOTg1LDYuOTg1LDAsMCwxLDIwLjk5MywxOC45NzlaXFxcIiBzdHlsZT1cXFwiZmlsbDojYjAzOTMxXFxcIi8+PHBhdGggZD1cXFwiTTIwLjk5MywxOC45NzlhNy45MDYsNy45MDYsMCwwLDEtMi4xMjgsMi41ODIsOS43MzksOS43MzksMCwwLDEtMy4yNTYsMS43MSwxMS41NTgsMTEuNTU4LDAsMCwxLTEuOTcxLjQ3MmgtLjAxNWEzMS44NTcsMzEuODU3LDAsMCwxLTMuMzI2LjExMWwtNS42MjUuMDIyYS42MTYuNjE2LDAsMCwxLS42ODYtLjY4MWwtLjAxLTcuNzM0UTIuOTkyLDE1LjQyLDIsMTUuNFYzMEgzMFYyMC41NDRhODUuMzgzLDg1LjM4MywwLDAsMC04LjU5LTIuNkE2Ljk4NSw2Ljk4NSwwLDAsMSwyMC45OTMsMTguOTc5WlxcXCIgc3R5bGU9XFxcIm9wYWNpdHk6MC4zMDAwMDAwMTE5MjA5Mjk7aXNvbGF0aW9uOmlzb2xhdGU7ZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTEwLjQ3NywyMC44MzVhMTYuMDE0LDE2LjAxNCwwLDAsMCwyLjg3Ny0uMiw3LjYzMyw3LjYzMywwLDAsMCwxLjYyOC0uNSw1LjYyOCw1LjYyOCwwLDAsMCwxLjE4Ny0uNzQ4LDQuNDU3LDQuNDU3LDAsMCwwLDEuNTE4LTIuMjcxLDg4LjY5MSw4OC42OTEsMCwwLDAtOS45MS0xLjQwOGwuMDA2LDUuMTMzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2IwMzkzMVxcXCIvPjxwYXRoIGQ9XFxcIk0xMC40NzcsMjAuODM1YTE2LjAxNCwxNi4wMTQsMCwwLDAsMi44NzctLjIsNy42MzMsNy42MzMsMCwwLDAsMS42MjgtLjUsNS42MjgsNS42MjgsMCwwLDAsMS4xODctLjc0OCw0LjQ1Nyw0LjQ1NywwLDAsMCwxLjUxOC0yLjI3MSw4OC42OTEsODguNjkxLDAsMCwwLTkuOTEtMS40MDhsLjAwNiw1LjEzM1pcXFwiIHN0eWxlPVxcXCJvcGFjaXR5OjAuMzAwMDAwMDExOTIwOTI5O2lzb2xhdGlvbjppc29sYXRlO2ZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC4zODMsMTEuNzQ2YTYuOTkzLDYuOTkzLDAsMCwxLDEuMzYsNC4xNDgsNi42MTgsNi42MTgsMCwwLDEtLjEsMS4xYy4wODgsMCwuMTc2LjAxMi4yNjUuMDEyYTQuMTEsNC4xMSwwLDAsMCw0LjI3Ni0zLjkyLDQuMTEsNC4xMSwwLDAsMC00LjI3Ni0zLjkyLDQuNDcsNC40NywwLDAsMC0yLjk0NiwxLjA4M0E4LjEyMyw4LjEyMywwLDAsMSwyMC4zODMsMTEuNzQ2WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxlbGxpcHNlIGN4PVxcXCIyNi43OFxcXCIgY3k9XFxcIjguNzc3XFxcIiByeD1cXFwiMS4zNzRcXFwiIHJ5PVxcXCIxLjI1OVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk00LjY3MywyMy44NzdsNS42MjUtLjAyMmEzMS44NzEsMzEuODcxLDAsMCwwLDMuMzI2LS4xMTFoLjAxNWExMS40OSwxMS40OSwwLDAsMCwxLjk3MS0uNDcyLDkuNzM5LDkuNzM5LDAsMCwwLDMuMjU2LTEuNzEsNy45MDYsNy45MDYsMCwwLDAsMi4xMjgtMi41ODIsNi45ODUsNi45ODUsMCwwLDAsLjQxNy0xLjAzNCw3LjA1Niw3LjA1NiwwLDAsMCwuMzMyLTIuMDUxLDYuOTkyLDYuOTkyLDAsMCwwLTEuMzYtNC4xNDgsOC4xLDguMSwwLDAsMC0xLjQyMS0xLjUsOC44NzgsOC44NzgsMCwwLDAtMi4yNDQtMS4zNTksMTUuNjg2LDE1LjY4NiwwLDAsMC02LjA2Ny0uOTVsLTYuMDc0LjAwOWEuNjU4LjY1OCwwLDAsMC0uMDc2LDAsLjU4OC41ODgsMCwwLDAtLjUzMi41NjJsLjAwOSw2Ljk1Mi4wMSw3LjczNEEuNjE2LjYxNiwwLDAsMCw0LjY3MywyMy44NzdabTMuMS0xMi45MDgsMi42MTksMGEyMS42MjMsMjEuNjIzLDAsMCwxLDIuNTg4LjEsNy4zNTQsNy4zNTQsMCwwLDEsMS42MjkuNDM4LDUuODE0LDUuODE0LDAsMCwxLDEuNTA4LjgyMiw0LjExNiw0LjExNiwwLDAsMSwxLjc0OCwzLjQ1OCw0LjkwNSw0LjkwNSwwLDAsMS0uMTc1LDEuMzI3LDQuNDU3LDQuNDU3LDAsMCwxLTEuNTE4LDIuMjcxLDUuNjEzLDUuNjEzLDAsMCwxLTEuMTg3Ljc0OCw3LjY2Niw3LjY2NiwwLDAsMS0xLjYyOC41LDE2LjAwOSwxNi4wMDksMCwwLDEtMi44NzcuMmwtMi42OTQsMC0uMDA2LTUuMTMzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHRcdGlubGluZUNvbW1lbnQ6IFtcblx0XHRcdFwiLy9cIixcblx0XHRdLFxuXHR9LFxuXHRcIkRhcnRcIjoge1xuXHRcdGNvbG91cjogXCIjNThiNmYwXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTYuNzM5LDIuMDM3YTEuMzE0LDEuMzE0LDAsMCwwLS45MTYuMzc3bC0uMDEzLjAxTDcuMjIsNy4zODlsOC41NjYsOC41NjZ2LjAwNmwxMC4zLDEwLjMsMS45NjMtMy41MzZMMjAuOTY4LDUuNzI4bC0zLjMtMy4zYTEuMzA3LDEuMzA3LDAsMCwwLS45MjctLjM4OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NmMzZmFcXFwiLz48cGF0aCBkPVxcXCJNNy4yNSw3LjM1LDIuMjg4LDE1LjkzMWwtLjAxLjAxM2ExLjMyMiwxLjMyMiwwLDAsMC0uMzc4LjkxOSwxLjMsMS4zLDAsMCwwLC4zODcuOTI0TDYuNCwyMS45bDE2LjA4NCw2LjMyNywzLjYzNi0yLjAyLS4xLS4xLS4wMjUsMC0xMC4wODMtMTAuMUgxNS45TDcuMjUsNy4zNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMTU4OTZcXFwiLz48cGF0aCBkPVxcXCJNNy4xOTIsNy4zNjJsOC43NjQsOC43NzNoLjAxM2wxMC4wODcsMTAuMSwzLjgzOS0uNzMyTDI5LjksMTQuMTRsLTQuMDU0LTMuOTczYTYuNTIxLDYuNTIxLDAsMCwwLTMuNjI0LTEuNjE2bDAtLjA0NEw3LjE5Miw3LjM2MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzU5OTdcXFwiLz48cGF0aCBkPVxcXCJNNy4yNTYsNy40MTFsOC43NjgsOC43Njh2LjAxM0wyNi4xMTYsMjYuMjg0bC0uNzM0LDMuODM5SDE0LjAyMmwtMy45NzEtNC4wNTZhNi41MjIsNi41MjIsMCwwLDEtMS42MTQtMy42MjVsLS4wNDQsMEw3LjI1Niw3LjQxMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM1OGI2ZjBcXFwiLz5cIixcblx0fSxcblx0XCJEaGFsbFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNiN2I3YjdcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xNiwyLjA3QTEzLjkzLDEzLjkzLDAsMSwxLDIsMTYsMTMuOTMsMTMuOTMsMCwwLDEsMTYsMi4wN1pNMTMuMjgsMjIuMzJhMS40OSwxLjQ5LDAsMSwxLTEsMS44M0ExLjQ5LDEuNDksMCwwLDEsMTMuMjgsMjIuMzJabTgtMTUuNjhhLjUzLjUzLDAsMCwxLC4zOC42Ni41Mi41MiwwLDAsMS0uNjUuMzhsLS41LS4xM2E0Mi42Nyw0Mi42NywwLDAsMC0uMzcsNy4wN0MxOC4wNiwxNi40NSwxNC4zOSwyMiwxNC4zOSwyMmwxLjkzLTcuMThhMSwxLDAsMCwwLC44OS0uNjUuOTEuOTEsMCwwLDAtMS43NS0uNDcsMSwxLDAsMCwwLC40NSwxTDE0LDIxLjg1YTY4LjM4LDY4LjM4LDAsMCwwLTEuMzQtOS4yNSwzNC4yOCwzNC4yOCwwLDAsMCwzLjIxLTYuMzFsLS41LS4xM0EuNTUuNTUsMCwwLDEsMTUsNS41YS41My41MywwLDAsMSwuNjYtLjM4bDUuNjgsMS41MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiN2I3Yjc7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz5cIixcblx0fSxcblx0XCJEaWZmXCI6IHtcblx0XHRjb2xvdXI6IFwiI2MwMDAwMFwiLFxuXHRcdGljb246IFwiPHJlY3QgeD1cXFwiNi45NzVcXFwiIHk9XFxcIjNcXFwiIHdpZHRoPVxcXCIxOC4wNVxcXCIgaGVpZ2h0PVxcXCI2LjAxN1xcXCIgc3R5bGU9XFxcImZpbGw6I2MwMDAwMFxcXCIvPjxwYXRoIGQ9XFxcIk0xMi45OTIsMTAuOTV2Ni4wMTdINi45NzV2Ni4wMTdoNi4wMTdWMjloNi4wMTdWMjIuOTgzaDYuMDE3VjE2Ljk2N0gxOS4wMDhWMTAuOTVaXFxcIiBzdHlsZT1cXFwiZmlsbDpncmVlblxcXCIvPlwiLFxuXHR9LFxuXHRcIkRqYW5nby9KaW5qYTJcIjoge1xuXHRcdGNvbG91cjogXCIjZmYwMDAwXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImFcXFwiIGN4PVxcXCIxNlxcXCIgY3k9XFxcIi0xMTkuMjgzXFxcIiByPVxcXCIxMy41XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEsIDAsIDAsIC0wLjk0NSwgMCwgLTk2LjczNSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiM1NzU3NTdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMyZjJmMmZcXFwiLz48L3JhZGlhbEdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2ppbmphPC90aXRsZT48cGF0aCBkPVxcXCJNMjkuMzQsMy4yNDFhMzguMjcxLDM4LjI3MSwwLDAsMS05LjQ1MSwzLjA0Yy00LjI0MS41NS0xMi4zMjksMS4xLTEzLjkzNS43MTJBMjMuMywyMy4zLDAsMCwxLDMuMiw2LjE1MWwuMzM0LDEuMTMyTDIuNSw4LjE4OGwuMTgzLjMyMy40MjQuMDMyLDEuMy4xNjIuMTgzLjU4Mi43MjcuMDY2LjM2NCwxLjIyOHMxLjU0NC4xMywyLC4xMywxLjM2My0uMDY0LDEuMzYzLS4wNjRsLjAzLjQ4NS4zMzQuMDY0di41NWwtLjcyOC42NDguMTgzLjAzMnYuMjI1YTE1LjgxNiwxNS44MTYsMCwwLDEtMi4zLjAzNGMtLjY2Ni0uMS0uNzg4LS4xLS43ODgtLjFsLS4wNi4wNjQtLjAzLjI5MWguMTUxbC4wNiwxLjI2MiwzLjM2My0uMTMtLjI0Myw0LjM2NS0uMDMuNTQ5LTIuODQ4LS4xNjItLjAzLTEuMTY0aC42MzVsLjA2MS0uNDUzLjU3NS0uMTMuMDkxLS4xMjgtMi4xNTEtLjUxOC0xLjYzNi40ODUuMjczLjIyN2guMjczbC4wMy4zODkuNTc1LjAzMlYxOC43bC0uNjM1LjE2Mi4xMjEuMjU3LjE1MS4xdi44NzNoLjM5NHY0LjA0MWwtLjYzNy4xLjA5MSwxLjE2NC4zOTMuMDY2LS4wNiwyLjY1MSwxLjcyNy4wMzItLjM2NC0yLjYxOSwyLjYwNS0uMDY0LS4xODEsMS40MjItLjI0MywxLDIuNjM1LjAzMi4wMy0yLjU4NiwxLjgxNy0uMTYyLS4wOSwxLjY0OS0uMDYxLjk2OWgxLjU0NmwtLjA2MS0yLjY1MS4yMTMuMDM0LjA2LTEuMjYyaC0uMjQzbC0uMDktLjUxOEwxMy44LDIxLjlsLjA2LTEuNzEzaC4zMzNWMTkuMTQ5bC0uNDI0LjAzMi4wNjEtMS4yMi40OTMtLjA0OS4wMjMtLjQuMjgtLjA0MS4yODctLjIxOEwxMy4xODcsMTYuOWwtMS43MTIuMzc5LjE2Ny4yNzQuMTgxLS4wMTUuMjExLS4wMDguMDM5LjUuNDc3LS4wMjMuMDA5LDEuMDgyLTIuMDUzLS4wNDcuMDY5LTEuMTU2LjA2Ny0xLjA1MVYxNS40NTVMMTAuNywxNGw0LjExMS0uMjEsNC44OTItLjI4Mi4wNDYuOTI5LS4xNzQsMi4yMzFMMTkuNSwxOC43NDRsLTEuOC0uMDMyLS4wMDktMS40NTUuNjY3LS4wMjQuMDMtLjQxMS4yNzMtLjA0MS0uMDE0LS4wODEuMjczLS4wMTUuMTUxLS4yTDE3LjAzNCwxNiwxNSwxNi40NGwuMTQ0LjI1MS4yMjctLjAxN3YuMTE0aC4yOHYuNDZsLjYuMDA4LS4wMDcsMS4yNzdoLS42MDVsLS4wMDkuMjkxLjIxMy4wMjQtLjAyMywxLjEwOC40NDcuMDI0LS4wNTMsNC4zOS0uNTkxLjEyLjAwNy4yMWguMjA2djEuMTI0aC4zNGwtLjA5LDEuNTM2TDE1Ljk3NCwyOC43bDIuMTUxLjA1Ni0uMDY5LTEuMTY0LS4xNTgtLjk2OS0uMDMxLS44NDEsMS44MjYtLjAzMi0uMDUzLDEuMy0uMDA5LDEuMzc0LDEuMDMxLjA4MSwxLjQtLjA1Ni40NC0uMTMtLjI0My0uNzM2LS4wNi0xLjE1Ni0uMTE0LS44MjQsMS43NDItLjA2NC0uMDc2LDEuMDEtLjAwNywxLjU4NS43LjA2NC42OS0uMDE1LjMzMy0uMTA1LS4yLTEuNUwyNS4yLDI1LjQ0NWwuMy0uMDMyTDI1LjUsMjQuNGwuMDgzLS4wMTctLjAxNC0uMjE4aC0uMzQxbC0uMDY5LS43NDRMMjUuMTMsMjAuMmwuMjU3LS4wMDhWMTkuMTMzbC4xMDcuMDE3di0uMjFsLS4zOC0uMDM0LjAwOS0xLjIyOC42MzUtLjA1Ni0uMDM3LS40MTMuMjgtLjAyNC0uMDE2LS4wODEuMzcxLS4xODYtMS44ODYtLjM3OS0xLjkxNi4zODkuMTIxLjIyNi4zLS4wMjQuMDE2LjFoLjI1bC4wMTQuNDg1LjYyMS0uMDA4LjA1MywxLjE4OC0yLjItLjAxNy0uMjU3LTEuNzg2LS4yMDYtLjk0Ni0uMTY2LTEuNy4xLS45OTMsNC4zNzctLjMzMi4wMTQtMS40NzkuMjItLjA1Ni0uMDE0LS4yMjUtLjE2Ny0uMXMtMi4zOTMuMzU1LTMuMTUxLjQzNmwtLjM3MS4wNC0uMDIzLS4yNzQtLjkwNS0uNDc0LjAxMS0uNTUyLjMxMS0uMDA5LjAyMy0uNzU5YTI0LjgwNywyNC44MDcsMCwwLDAsMi41NDQtLjI4M2MuNjg5LS4xNjIsMS42NjYtLjMyMywxLjY2Ni0uMzIzTDI2LjIsNy44MDlsLjkxNy0uMjY3LjA3Ni0uMjEsMi4wNzQtLjU3NC4yMzYtLjE5NC0uNzg4LTEuNzIyLjA3Ni0uMzg5LjQtLjIxLjI4OC0uODgxWk0xOS4zNzQsOS44bC0uMDExLjYyNi40Ny4wMi0uMDMuNTk0LS45MjEuNi0uMDU3LjE3NC4zNzEsMCwwLC4xNDYtMi44MTQuMTM3LjAxOS0uNDE2LjEyOC0uMjA3LjAwOS0uMTMzLDAtLjI4Ni4wOC0uMTkuMDMtLjE1NHYtLjExbC4xMjEtLjQ4NVptLTUuODg1LjUzMy0uMDY5LjQyMS4yMi4yNTktLjAxNC40NTMuMi4zMTUtLjA1My4zNzIuMTUxLjIxOC0yLjg3MS4xMTMtLjAwNy0uMS4zMzMtLjA0MS4wMTYtLjEyMi0uNzI3LS4zOTUtLjAzOS0uNjMxLjM0OC0uMDE3LjAzLS42OFptNC4yNDksOS43LDEuNzQyLjExM0wxOS40MiwyMi41bC4yMjcsMS45MjNMMTcuOCwyNC4zNTRabS0xMS42NjMuMSwyLjc4OC4xNDVMOC42MiwyMS45djEuMzU5bC4yLjc1OS0yLjcyNy4xM1ptMTcuODQzLjAxNXY0LjAxbC0xLjc3Mi4xMy0uMDYxLTIuMTE4LS4yLTEuOTczWk0xMC41LDIwLjI0bDIuMDYuMDA4LjAyMSwzLjcxOEwxMC42NTcsMjRsLS4xLTEuMjA1LS4wMDctMS4yWlxcXCIgc3R5bGU9XFxcInN0cm9rZTpyZWQ7c3Ryb2tlLXdpZHRoOjAuNXB4O2ZpbGw6dXJsKCNhKVxcXCIvPlwiLFxuXHR9LFxuXHRcIkRvY2tlclwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDk2ZTZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xNi41NCwxMi42NjNIMTkuNHYyLjkyNGgxLjQ0NmE2LjI3Miw2LjI3MiwwLDAsMCwxLjk4OC0uMzMzLDUuMDkxLDUuMDkxLDAsMCwwLC45NjYtLjQzNiwzLjU4NCwzLjU4NCwwLDAsMS0uNjctMS44NDksMy45MDcsMy45MDcsMCwwLDEsLjctMi43NTNsLjMtLjM0OC4zNTguMjg4YTQuNTU4LDQuNTU4LDAsMCwxLDEuNzk1LDIuODkyLDQuMzc1LDQuMzc1LDAsMCwxLDMuMzE5LjMwOWwuMzkzLjIyNi0uMjA3LjRhNC4xNDEsNC4xNDEsMCwwLDEtNC4xNTcsMS45ODNjLTIuNDgsNi4xNjgtNy44NzEsOS4wODgtMTQuNDA5LDkuMDg4LTMuMzc4LDAtNi40NzYtMS4yNjMtOC4yNDEtNC4yNTlsLS4wMjktLjA0OUwyLjcsMjAuMjI3YTguMzE2LDguMzE2LDAsMCwxLS42NTktNC4yMDhsLjA0LS40MzNINC41MjZWMTIuNjYzSDcuMzg3VjkuOGg1LjcyMVY2Ljk0MkgxNi41NHY1LjcyMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDk2ZTZcXFwiLz48cGF0aCBkPVxcXCJNMTIuMDA2LDI0LjU2N2E2LjAyMiw2LjAyMiwwLDAsMS0zLjE0LTMuMDg5LDEwLjMyOSwxMC4zMjksMCwwLDEtMi4yNjQuMzQzcS0uNS4wMjgtMS4wNDUuMDI4LS42MzIsMC0xLjMzMS0uMDM3YTkuMDUxLDkuMDUxLDAsMCwwLDcsMi43NjlRMTEuNjE4LDI0LjU4MSwxMi4wMDYsMjQuNTY3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk03LjA4LDEzLjM0NmguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdINi43VjEzLjM0NlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yWm0tLjM3NiwwaC4ydjIuMDY3aC0uMlptLS4zNjgsMGguMnYyLjA2N2gtLjJWMTMuMzQ2Wk01LDEzLjE0SDcuNDgydjIuNDc5SDVabTIuODU5LTIuODYxaDIuNDh2Mi40NzlINy44NjNabTIuMDc3LjIwN2guMnYyLjA2NmgtLjJabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM3NiwwaC4ydjIuMDY2aC0uMlYxMC40ODZabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM3NiwwaC4ydjIuMDY2aC0uMlptLS4zNjgsMGguMnYyLjA2NmgtLjJabS0uMjA3LDIuNjUzaDIuNDh2Mi40OEg3Ljg2M1YxMy4xNFptMi4wNzcuMjA3aC4ydjIuMDY3aC0uMlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yVjEzLjM0NlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yWm0tLjM2OCwwaC4ydjIuMDY3aC0uMlptMi42NTQtLjIwN0gxMy4ydjIuNDhoLTIuNDhWMTMuMTRabTIuMDc2LjIwN0gxM3YyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yWm0tLjM3NiwwaC4ydjIuMDY3aC0uMlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yWm0tLjM2OCwwaC4ydjIuMDY3aC0uMlptLS4yMDYtMy4wNjdIMTMuMnYyLjQ3OWgtMi40OFYxMC4yNzlabTIuMDc2LjIwN0gxM3YyLjA2NmgtLjJabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM3NiwwaC4ydjIuMDY2aC0uMlptLS4zNzYsMGguMnYyLjA2NmgtLjJabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM2OCwwaC4ydjIuMDY2aC0uMlptMi42NTQsMi42NTNoMi40Nzl2Mi40OGgtMi40OFYxMy4xNFptMi4wNzYuMjA3aC4ydjIuMDY3aC0uMlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yWm0tLjM3NiwwaC4ydjIuMDY3aC0uMlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzY4LDBoLjE5MnYyLjA2N2gtLjJWMTMuMzQ2Wm0tLjIwNi0zLjA2N2gyLjQ3OXYyLjQ3OWgtMi40OFYxMC4yNzlabTIuMDc2LjIwN2guMnYyLjA2NmgtLjJabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM3NiwwaC4ydjIuMDY2aC0uMlptLS4zNzYsMGguMnYyLjA2NmgtLjJabS0uMzc2LDBoLjJ2Mi4wNjZoLS4yWm0tLjM2OCwwaC4xOTJ2Mi4wNjZoLS4yVjEwLjQ4NlptLS4yMDYtMy4wNjdoMi40NzlWOS45aC0yLjQ4VjcuNDE5Wm0yLjA3Ni4yMDZoLjJWOS42OTFoLS4yWm0tLjM3NiwwaC4yVjkuNjkxaC0uMlptLS4zNzYsMGguMlY5LjY5MWgtLjJabS0uMzc2LDBoLjJWOS42OTFoLS4yWm0tLjM3NiwwaC4yVjkuNjkxaC0uMlptLS4zNjgsMGguMTkyVjkuNjkxaC0uMlY3LjYyNVptMi42NTQsNS41MTRoMi40Nzl2Mi40OGgtMi40OFYxMy4xNFptMi4wNzYuMjA3aC4xOTV2Mi4wNjdoLS4yVjEzLjM0NlptLS4zNzYsMGguMjA2djIuMDY3aC0uMjA2Wm0tLjM3NiwwaC4ydjIuMDY3aC0uMlptLS4zNzYsMGguMnYyLjA2N2gtLjJabS0uMzc2LDBoLjJ2Mi4wNjdoLS4yMDVWMTMuMzQ2Wm0tLjM2OCwwaC4ydjIuMDY3aC0uMTk0VjEzLjM0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTAuMTg4LDE5LjYzOGEuNjg0LjY4NCwwLDEsMS0uNjg0LjY4NEEuNjg0LjY4NCwwLDAsMSwxMC4xODgsMTkuNjM4Wm0wLC4xOTRhLjQ4OS40ODksMCwwLDEsLjE3Ny4wMzMuMi4yLDAsMSwwLC4yNzUuMjY5LjQ5LjQ5LDAsMSwxLS40NTMtLjNaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiRE9UIChHcmFwaHZpeilcIjoge1xuXHRcdGNvbG91cjogXCIjNGVkMWY4XCIsXG5cdFx0aWNvbjogXCI8cG9seWdvbiBwb2ludHM9XFxcIjIzLjk0MiAzMCAxMi42NzkgMzAgMS40MTcgMzAgMS40MTcgMTYgMS40MTcgMiAxMi42NzkgMiAyMy45NDIgMiAyMy45NDIgMTYgMjMuOTQyIDMwXFxcIiBzdHlsZT1cXFwiZmlsbDojZTZlNmU2XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjMuMjAyXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjcuNDJcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMTEuNjM4XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjE1Ljg1NlxcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIuMTMyXFxcIiB5PVxcXCIyMC4wNzRcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMjQuMjkzXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjI4LjUxMVxcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjMuMjAyXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuNTczXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiNi4yMThcXFwiIHk9XFxcIjMuMzMzXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuMzMxXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMTAuNDM2XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjE0LjY1NVxcXCIgeT1cXFwiMy4zMzNcXFwiIHdpZHRoPVxcXCIwLjI2NFxcXCIgaGVpZ2h0PVxcXCIyNS4zMzFcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIxOC44NzNcXFwiIHk9XFxcIjMuMzMzXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuMzMxXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMjMuMDkxXFxcIiB5PVxcXCIzLjIwMlxcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjU3M1xcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxnIHN0eWxlPVxcXCJvcGFjaXR5OjAuNVxcXCI+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjI3LjQ1NlxcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIuMTMyXFxcIiB5PVxcXCIyNi40MDJcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMjUuMzQ3XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjIzLjIzOFxcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIuMTMyXFxcIiB5PVxcXCIyMi4xODRcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMjEuMTI5XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjE5LjAyXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjE3Ljk2NVxcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIuMTMyXFxcIiB5PVxcXCIxNi45MTFcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMTQuODAyXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjEzLjc0N1xcXCIgd2lkdGg9XFxcIjIxLjEzNVxcXCIgaGVpZ2h0PVxcXCIwLjI2NFxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIuMTMyXFxcIiB5PVxcXCIxMi42OTNcXFwiIHdpZHRoPVxcXCIyMS4xMzVcXFwiIGhlaWdodD1cXFwiMC4yNjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIyLjEzMlxcXCIgeT1cXFwiMTAuNTgzXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjkuNTI5XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjguNDc0XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjYuMzY1XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjUuMzExXFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMi4xMzJcXFwiIHk9XFxcIjQuMjU2XFxcIiB3aWR0aD1cXFwiMjEuMTM1XFxcIiBoZWlnaHQ9XFxcIjAuMjY0XFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PC9nPjxnIHN0eWxlPVxcXCJvcGFjaXR5OjAuNVxcXCI+PHJlY3QgeD1cXFwiMjIuMDM2XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjIwLjk4MlxcXCIgeT1cXFwiMy4zMzNcXFwiIHdpZHRoPVxcXCIwLjI2NFxcXCIgaGVpZ2h0PVxcXCIyNS4zMzFcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIxOS45MjdcXFwiIHk9XFxcIjMuMzMzXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuMzMxXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMTcuODE4XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjE2Ljc2NFxcXCIgeT1cXFwiMy4zMzNcXFwiIHdpZHRoPVxcXCIwLjI2NFxcXCIgaGVpZ2h0PVxcXCIyNS4zMzFcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIxNS43MDlcXFwiIHk9XFxcIjMuMzMzXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuMzMxXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMTMuNlxcXCIgeT1cXFwiMy4zMzNcXFwiIHdpZHRoPVxcXCIwLjI2NFxcXCIgaGVpZ2h0PVxcXCIyNS4zMzFcXFwiIHN0eWxlPVxcXCJmaWxsOiM0ZWQxZjhcXFwiLz48cmVjdCB4PVxcXCIxMi41NDVcXFwiIHk9XFxcIjMuMzMzXFxcIiB3aWR0aD1cXFwiMC4yNjRcXFwiIGhlaWdodD1cXFwiMjUuMzMxXFxcIiBzdHlsZT1cXFwiZmlsbDojNGVkMWY4XFxcIi8+PHJlY3QgeD1cXFwiMTEuNDkxXFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjkuMzgyXFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjguMzI3XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjcuMjczXFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjUuMTY0XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjQuMTA5XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjxyZWN0IHg9XFxcIjMuMDU1XFxcIiB5PVxcXCIzLjMzM1xcXCIgd2lkdGg9XFxcIjAuMjY0XFxcIiBoZWlnaHQ9XFxcIjI1LjMzMVxcXCIgc3R5bGU9XFxcImZpbGw6IzRlZDFmOFxcXCIvPjwvZz48cGF0aCBkPVxcXCJNMTMsOC45NzZjLTIuMzA4LDAtNC4xMzEtMS4yNzQtNC4xOTMtMi45NjloMGEyLjc3NSwyLjc3NSwwLDAsMSwxLjI1My0yLjMyLDUuMyw1LjMsMCwwLDEsMi45NDMtLjk2Myw1LjI5NCw1LjI5NCwwLDAsMSwzLjAwNi43NDMsMi43NzUsMi43NzUsMCwwLDEsMS40MjEsMi4yMjFjLjA2NSwxLjc1Mi0xLjc3OSwzLjE5NC00LjIsMy4yODNDMTMuMTU4LDguOTc0LDEzLjA4LDguOTc2LDEzLDguOTc2Wm0uMjMyLTUuMnEtLjA5NSwwLS4xOSwwYTQuMjM4LDQuMjM4LDAsMCwwLTIuMzU0Ljc1NiwxLjc2MSwxLjc2MSwwLDAsMC0uODI4LDEuNDM1QzkuOSw3LjA5LDExLjQyOCw3Ljk3OCwxMy4yLDcuOTE3czMuMjIzLTEuMDY5LDMuMTgxLTIuMTkxYTEuNzYxLDEuNzYxLDAsMCwwLS45MzItMS4zNjlBNC4xNjUsNC4xNjUsMCwwLDAsMTMuMjM0LDMuNzczWlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk02LjQsMjkuMjgxQTUuMjM4LDUuMjM4LDAsMCwxLDMuNiwyOC41MTlhMi43NzUsMi43NzUsMCwwLDEtMS40MS0yLjIyOWMtLjA1Ni0xLjc1MiwxLjgtMy4xODUsNC4yMTMtMy4yNjJzNC4zNTYsMS4yMzYsNC40MTIsMi45ODhBMi43NzUsMi43NzUsMCwwLDEsOS41NDgsMjguMzNhNS4zLDUuMywwLDAsMS0yLjk0OC45NDhRNi41LDI5LjI4MSw2LjQsMjkuMjgxWm0uMTg2LTUuMi0uMTU2LDBjLTEuNzY2LjA1Ni0zLjIyOSwxLjA1Mi0zLjE5MywyLjE3NGExLjc2MSwxLjc2MSwwLDAsMCwuOTI0LDEuMzc0LDQuMjM1LDQuMjM1LDAsMCwwLDIuNC41OTMsNC4yMzUsNC4yMzUsMCwwLDAsMi4zNTctLjc0NCwxLjc2MSwxLjc2MSwwLDAsMCwuODM1LTEuNDNDOS43MjQsMjQuOTYxLDguMjksMjQuMDgsNi41OTEsMjQuMDhaXFxcIiBzdHlsZT1cXFwiZmlsbDojNjU2NTY1XFxcIi8+PHBhdGggZD1cXFwiTTE5LjI2MSwyOS4yNmE1LjIzOCw1LjIzOCwwLDAsMS0yLjgwNy0uNzYyLDIuNzc1LDIuNzc1LDAsMCwxLTEuNDEtMi4yMjloMGMtLjA1NS0xLjc1MiwxLjgtMy4xODUsNC4yMTMtMy4yNjJhNS4zLDUuMywwLDAsMSwzLC43NTlBMi42LDIuNiwwLDAsMSwyMi40LDI4LjMxYTUuMyw1LjMsMCwwLDEtMi45NDguOTQ4UTE5LjM1OCwyOS4yNiwxOS4yNjEsMjkuMjZaTTE2LjEsMjYuMjM2YTEuNzYxLDEuNzYxLDAsMCwwLC45MjQsMS4zNzQsNC41Nyw0LjU3LDAsMCwwLDQuNzU3LS4xNTEsMS41NTgsMS41NTgsMCwwLDAtLjA4OS0yLjgsNC4yMjYsNC4yMjYsMCwwLDAtMi40LS41OTNjLTEuNzY2LjA1Ni0zLjIyOCwxLjA1Mi0zLjE5MywyLjE3NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNNi4yLDIzLjQ3N0EyNy40LDI3LjQsMCwwLDEsOS43NjksOC45ODZsLjY4Ny4zOTFBMjYuNjA5LDI2LjYwOSwwLDAsMCw2Ljk4NiwyMy40NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNMTAuODUzLDcuOTU3YTcuMTcxLDcuMTcxLDAsMCwwLS4wNzUsMi4zMmwtLjc1OC0uOTMtMS4xNzgtLjIzQTcuMTY1LDcuMTY1LDAsMCwwLDEwLjg1Myw3Ljk1N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNMTkuODU0LDIzLjQ3N2wtLjc5LS4wMjdhMjYuNTksMjYuNTksMCwwLDAtLjkxNS03Ljg4NCwyNi42MjQsMjYuNjI0LDAsMCwwLTIuNTU0LTYuMTg5bC42ODctLjM5MWEyNy40MjMsMjcuNDIzLDAsMCwxLDIuNjMsNi4zNzNBMjcuMzcyLDI3LjM3MiwwLDAsMSwxOS44NTQsMjMuNDc3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk0xNS4yLDcuOTU3YTcuMTcxLDcuMTcxLDAsMCwwLDIuMDExLDEuMTU5bC0xLjE3OC4yMy0uNzU4LjkzQTcuMTY1LDcuMTY1LDAsMCwwLDE1LjIsNy45NTdaXFxcIiBzdHlsZT1cXFwiZmlsbDojNjU2NTY1XFxcIi8+PHJlY3QgeD1cXFwiMTEuMzQ4XFxcIiB5PVxcXCI5Ljk0NVxcXCIgd2lkdGg9XFxcIjMuNTE1XFxcIiBoZWlnaHQ9XFxcIjAuNzkxXFxcIiB0cmFuc2Zvcm09XFxcIm1hdHJpeCgwLjAxNiwgLTEsIDEsIDAuMDE2LCAyLjU1NywgMjMuMjc5KVxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk0xMy4wNTQsMTMuNTI5YTcuMTcxLDcuMTcxLDAsMCwwLTEuMS0yLjA0NmwxLjEyMi40MjYsMS4xMzUtLjM5QTcuMTY1LDcuMTY1LDAsMCwwLDEzLjA1NCwxMy41MjlaXFxcIiBzdHlsZT1cXFwiZmlsbDojNjU2NTY1XFxcIi8+PHJlY3QgeD1cXFwiNy44MDlcXFwiIHk9XFxcIjIwLjA4MVxcXCIgd2lkdGg9XFxcIjQuNzU3XFxcIiBoZWlnaHQ9XFxcIjAuNzkxXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMTIuNTYgMTguMTA4KSByb3RhdGUoLTU3LjYwMylcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNOC4xNDcsMjMuNjk0YTcuMTcxLDcuMTcxLDAsMCwwLC4xMzMtMi4zMTdsLjczNC45NDksMS4xNzEuMjZBNy4xNjUsNy4xNjUsMCwwLDAsOC4xNDcsMjMuNjk0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxyZWN0IHg9XFxcIjE1LjQxOFxcXCIgeT1cXFwiMTguMDUxXFxcIiB3aWR0aD1cXFwiMC43OTFcXFwiIGhlaWdodD1cXFwiNC45MTlcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC04LjI1NyAxMC45NTEpIHJvdGF0ZSgtMzAuNzA4KVxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy44LDIzLjg1NmE3LjE3MSw3LjE3MSwwLDAsMC0yLjAwNi0xLjE2OGwxLjE3OS0uMjI1Ljc2Mi0uOTI3QTcuMTY1LDcuMTY1LDAsMCwwLDE3LjgsMjMuODU2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk0xMy4wMjQsMTkuMTI1YTUuMjM4LDUuMjM4LDAsMCwxLTIuODA3LS43NjIsMi43NzUsMi43NzUsMCwwLDEtMS40MS0yLjIyOSwyLjc3NSwyLjc3NSwwLDAsMSwxLjI2Ni0yLjMxNCw1LjMsNS4zLDAsMCwxLDIuOTQ4LS45NDgsNi43MTIsNi43MTIsMCwwLDEsMi4xMzQuMzEzbC0uMzMxLDFhNS42NjgsNS42NjgsMCwwLDAtMS43NjktLjI2MSw0LjIzOCw0LjIzOCwwLDAsMC0yLjM1OC43NDQsMS43NjEsMS43NjEsMCwwLDAtLjgzNSwxLjQzLDEuNzYxLDEuNzYxLDAsMCwwLC45MjQsMS4zNzQsNC4yNDIsNC4yNDIsMCwwLDAsMi40LjU5Myw1LjcsNS43LDAsMCwwLDEuNjc4LS4zNzhsLjM3OC45ODVhNi44NDQsNi44NDQsMCwwLDEtMi4wMjIuNDQ4UTEzLjEyMSwxOS4xMjUsMTMuMDI0LDE5LjEyNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNMTUuNDM1LDEyLjg3NmE0LjMzOCw0LjMzOCwwLDAsMC0uOTg0LDEuNjIyLDIuMDY0LDIuMDY0LDAsMCwxLS4wMTYsMi44MDYsNC40LDQuNCwwLDAsMCwuOTgyLDEuNiwzLjkzMiwzLjkzMiwwLDAsMCwuMDc4LTUuOTg2QzE1LjQ3NiwxMi45LDE1LjQ1NCwxMi44OTMsMTUuNDM1LDEyLjg3NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM2NTY1NjVcXFwiLz48cGF0aCBkPVxcXCJNMTkuNTI1LDE1LjI3OGEyNy45MzEsMjcuOTMxLDAsMCwwLTEuMjYzLTMuNzQyLDQuMzc2LDQuMzc2LDAsMCwwLTEuNzc3LjUxNywyNi4wNjMsMjYuMDYzLDAsMCwxLDEuMjUzLDMuNjg1LDI2LjAzOCwyNi4wMzgsMCwwLDEsLjczNCw0LjUzNCw0LjM0Nyw0LjM0NywwLDAsMCwxLjgyNS0uMzUxQTI3LjksMjcuOSwwLDAsMCwxOS41MjUsMTUuMjc4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NjU2NVxcXCIvPjxwYXRoIGQ9XFxcIk0xNi4xNTMsMTIuMjI5QTQuNDM3LDQuNDM3LDAsMSwwLDIyLjMsMTMuNSw0LjQzNyw0LjQzNywwLDAsMCwxNi4xNTMsMTIuMjI5Wm00LjgxMiw3LjMzMmE0LjM0Niw0LjM0NiwwLDEsMSwxLjI0OS02LjAxOEE0LjM0Niw0LjM0NiwwLDAsMSwyMC45NjUsMTkuNTYxWlxcXCIgc3R5bGU9XFxcImZpbGw6IzJjMjkyOFxcXCIvPjxwYXRoIGQ9XFxcIk0yMi4wMTUsMTkuMTg2YS44MjIuODIyLDAsMCwwLS4xOTItLjIwOSw0LjM0Nyw0LjM0NywwLDAsMS0uMzMzLjMxOSw0LjUyMiw0LjUyMiwwLDAsMS0uNDQ2LjMzNyw0LjczLDQuNzMsMCwwLDEtLjk0LjQ3Ny42NjkuNjY5LDAsMCwwLC4wMzEuMS42NC42NCwwLDAsMCwuMDQ3LjA5NGwuNDg3LjhMMjIuNSwxOS45ODRaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjgyODI4XFxcIi8+PHJlY3QgeD1cXFwiMjAuNzkzXFxcIiB5PVxcXCIyMC43ODRcXFwiIHdpZHRoPVxcXCIyLjE0N1xcXCIgaGVpZ2h0PVxcXCIwLjQ0XFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtNy43NCAxNC40NjUpIHJvdGF0ZSgtMzEuMzk0KVxcXCIgc3R5bGU9XFxcImZpbGw6IzI4MjgyOFxcXCIvPjxyZWN0IHg9XFxcIjIyLjg2OFxcXCIgeT1cXFwiMjAuOTZcXFwiIHdpZHRoPVxcXCIyLjE0N1xcXCIgaGVpZ2h0PVxcXCI2Ljg4N1xcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTkuMjA3IDE2LjA0NCkgcm90YXRlKC0zMS4zOTQpXFxcIiBzdHlsZT1cXFwiZmlsbDojMjgyODI4XFxcIi8+PHBhdGggZD1cXFwiTTI3LjA1NCwyNy40NDNsLS4yMzYtLjM4Ny0xLjgzMywxLjExOS4yMzYuMzg3YS45MjQuOTI0LDAsMCwwLDEuMjc5LjE1OWwuMTEtLjA2N0EuOTI0LjkyNCwwLDAsMCwyNy4wNTQsMjcuNDQzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzI4MjgyOFxcXCIvPjxwYXRoIGQ9XFxcIk0yMC42OCwxNC44NDVhLjMxNS4zMTUsMCwwLDEsLjMzOC4wMjcsMS4wNzgsMS4wNzgsMCwwLDEsLjI5NC41NzgsMS4xLDEuMSwwLDAsMSwuMDI5LjY1NC4zMjcuMzI3LDAsMCwxLS4yNzguMi40NjguNDY4LDAsMCwxLS4zNy0uMS45MjIuOTIyLDAsMCwxLS4yNjItLjUuOTU1Ljk1NSwwLDAsMS0uMDEtLjU4NUEuNDY2LjQ2NiwwLDAsMSwyMC42OCwxNC44NDVabS4wNi4yMjdhLjE0OS4xNDksMCwwLDAtLjA3NC4wNjMuMjQ3LjI0NywwLDAsMC0uMDI3LjEzMiwxLjYyNiwxLjYyNiwwLDAsMCwuMDY0LjM1NSwxLjU5MiwxLjU5MiwwLDAsMCwuMTEyLjMyOS4yNjguMjY4LDAsMCwwLC4wOTQuMTEuMTQyLjE0MiwwLDAsMCwuMDk0LjAxNS4xMjEuMTIxLDAsMCwwLC4wNzgtLjA0OC4yMTEuMjExLDAsMCwwLC4wMjgtLjEyOCwyLjY0MywyLjY0MywwLDAsMC0uMTg2LS43MjIuMjM1LjIzNSwwLDAsMC0uMDkzLS4xMDdBLjExNi4xMTYsMCwwLDAsMjAuNzM5LDE1LjA3MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjEuNjk0LDE0LjRhLjMuMywwLDAsMSwuMzQ2LjA1NywxLjQ5MywxLjQ5MywwLDAsMSwuMzI1LjcsMS41MjEsMS41MjEsMCwwLDEsLjA2Ljc3MS4zMS4zMSwwLDAsMS0uMjcuMjI4LjQ0Ni40NDYsMCwwLDEtLjM3OS0uMTM3LDEuMzEsMS4zMSwwLDAsMS0uMjkyLS42MTcsMS4zNDEsMS4zNDEsMCwwLDEtLjA0MS0uN0EuNDQxLjQ0MSwwLDAsMSwyMS42OTQsMTQuNFptLjA3Mi4yNzNhLjEzNi4xMzYsMCwwLDAtLjA3Mi4wNjkuMzE1LjMxNSwwLDAsMC0uMDIxLjE1NSwyLjM1MSwyLjM1MSwwLDAsMCwuMDg0LjQyNywyLjMxLDIuMzEsMCwwLDAsLjEzMS40LjM0Ny4zNDcsMCwwLDAsLjEuMTM1LjEzLjEzLDAsMCwwLC4xLjAyMS4xMS4xMSwwLDAsMCwuMDc2LS4wNTQuMjc1LjI3NSwwLDAsMCwuMDIyLS4xNSwzLjc3MywzLjc3MywwLDAsMC0uMjI0LS44NjIuMzExLjMxMSwwLDAsMC0uMS0uMTMyQS4xLjEsMCwwLDAsMjEuNzY2LDE0LjY3NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjMuNDcyLDE1LjkzNGwtLjI2OS4wMzgtLjM3OS0xLjQzOWEuOTU1Ljk1NSwwLDAsMS0uMjU3LjM5MmwtLjA4Ny0uMzMxYS44NDEuODQxLDAsMCwwLC4xNjktLjI2Ljg3NC44NzQsMCwwLDAsLjA3NS0uMzgzbC4yLS4wODlaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI0LjQ1NSwxNS43OTRsLS4yNjkuMDM4LS40MjktMS42MjVhMSwxLDAsMCwxLS4yNDcuNDI5bC0uMS0uMzc2YS44NzQuODc0LDAsMCwwLC4xNjItLjI4NCwxLjAyOCwxLjAyOCwwLDAsMCwuMDY0LS40MjRsLjItLjA4OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjQuNjM2LDEzLjExN2MuMTI3LS4wNTUuMjQ5LS4wMDguMzY5LjE0NGEzLjExLDMuMTEsMCwwLDEsLjQxNiwxLjAzNCwzLjE0MywzLjE0MywwLDAsMSwuMTUxLDEuMTFjLS4wMjkuMTktLjExMS4yOTQtLjI0Ny4zMTJzLS4yNzItLjA1OS0uNC0uMjMxYTIuODU1LDIuODU1LDAsMCwxLS4zODEtLjk1LDIuODcxLDIuODcxLDAsMCwxLS4xMzItMS4wMzlBLjQzNy40MzcsMCwwLDEsMjQuNjM2LDEzLjExN1ptLjEwNy40YS4xMjQuMTI0LDAsMCwwLS4wNjcuMDg4LjU4NC41ODQsMCwwLDAsMCwuMjIxLDUuMjE4LDUuMjE4LDAsMCwwLC4xMzkuNjM1LDUuMTUzLDUuMTUzLDAsMCwwLC4xODQuNi42Ni42NiwwLDAsMCwuMTIuMjA4LjExOC4xMTgsMCwwLDAsLjEuMDQuMS4xLDAsMCwwLC4wNzEtLjA3Mi41MjguNTI4LDAsMCwwLDAtLjIxNiw1LjQ0Miw1LjQ0MiwwLDAsMC0uMTQ0LS42NTMsNS40NDcsNS40NDcsMCwwLDAtLjE4OS0uNjE5LjYxMi42MTIsMCwwLDAtLjExOS0uMjA1QS4wOTMuMDkzLDAsMCwwLDI0Ljc0MywxMy41MjJaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI2LjYzOCwxNS40ODhsLS4yNjkuMDM4LS41NC0yLjAzOUExLjE1MSwxLjE1MSwwLDAsMSwyNS42LDE0bC0uMTI2LS40NzVhLjk5Ljk5LDAsMCwwLC4xNDgtLjMzNywxLjQzNiwxLjQzNiwwLDAsMCwuMDM5LS41MTVsLjItLjA4OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjYuNjY2LDEyLjIzNmMuMTI3LS4wNTUuMjU1LjAxMi4zODUuMmE0LjU4NCw0LjU4NCwwLDAsMSwuNDc4LDEuMjY4LDQuNjIsNC42MiwwLDAsMSwuMjEzLDEuMzQzYy0uMDE4LjIyOS0uMS4zNTItLjIzMi4zN3MtLjI3OC0uMDgxLS40MjEtLjNhNC4yODQsNC4yODQsMCwwLDEtLjQ0My0xLjE3OSw0LjI4Myw0LjI4MywwLDAsMS0uMTk0LTEuMjcyQzI2LjQ2OCwxMi40MzgsMjYuNTM5LDEyLjI5MSwyNi42NjYsMTIuMjM2Wm0uMTMxLjVxLS4wNDYuMDE4LS4wNjQuMWEuODI5LjgyOSwwLDAsMCwuMDA5LjI2Niw3Ljg1Niw3Ljg1NiwwLDAsMCwuMTc4Ljc3OXEuMTQzLjU0MS4yMjEuNzM4YS45NDcuOTQ3LDAsMCwwLC4xMzQuMjU4LjExOS4xMTksMCwwLDAsLjEuMDUycS4wNDgtLjAwOS4wNjgtLjA4NWEuNzYyLjc2MiwwLDAsMC0uMDA4LS4yNjIsOC4xMTcsOC4xMTcsMCwwLDAtLjE4Mi0uOHEtLjE0OC0uNTU3LS4yMjctLjc1N2EuODkyLjg5MiwwLDAsMC0uMTMzLS4yNTZRMjYuODQzLDEyLjcxNCwyNi44LDEyLjczMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjcuNjgxLDExLjhjLjEyNy0uMDU1LjI1Ny4wMjMuMzkzLjIzNGE1LjQzMSw1LjQzMSwwLDAsMSwuNTA5LDEuMzg1LDUuNDY3LDUuNDY3LDAsMCwxLC4yNDQsMS40NmMtLjAxMy4yNDktLjA4OC4zODEtLjIyNC40cy0uMjgxLS4wOTItLjQzLS4zMjhhNS4xMSw1LjExLDAsMCwxLS40NzMtMS4yOTQsNS4xLDUuMSwwLDAsMS0uMjI1LTEuMzg4QzI3LjQ4NiwxMi4wMDgsMjcuNTU1LDExLjg1MSwyNy42ODEsMTEuOFptLjE0NC41NDJxLS4wNDYuMDE4LS4wNjIuMTA2YS45Ny45NywwLDAsMCwuMDE1LjI4OXEuMDQuMjU5LjIuODUxdC4yNC44MDdhMS4xMTIsMS4xMTIsMCwwLDAsLjE0LjI4NHEuMDU3LjA2Ny4xMDYuMDU5dC4wNjYtLjA5MWEuOS45LDAsMCwwLS4wMTQtLjI4NHEtLjA0LS4yNi0uMi0uODY3dC0uMjQ1LS44MjdhMS4wNTMsMS4wNTMsMCwwLDAtLjE0LS4yODFRMjcuODcxLDEyLjMyLDI3LjgyNSwxMi4zMzhaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI5LjkxNSwxNS4wMzRsLS4yNy4wMzctLjcwNi0yLjY2MWExLjQ3OCwxLjQ3OCwwLDAsMS0uMTkyLjYzNmwtLjE2Ni0uNjI1QTEuMjQ4LDEuMjQ4LDAsMCwwLDI4LjcwOCwxMmEyLjIxNCwyLjIxNCwwLDAsMCwwLS42NTNsLjItLjA4OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjkuNzEyLDEwLjkyMWMuMTI3LS4wNTQuMjYzLjA0My40MDkuMjk0YTcuMzQ1LDcuMzQ1LDAsMCwxLC41NzIsMS42MTlBNy4zODIsNy4zODIsMCwwLDEsMzEsMTQuNTI3YzAsLjI4OC0uMDcyLjQ0LS4yMDkuNDU4cy0uMjg2LS4xMTQtLjQ0Ny0uMzkzYTYuOTg0LDYuOTg0LDAsMCwxLS41MzUtMS41MjQsNi45NDQsNi45NDQsMCwwLDEtLjI4Ny0xLjYyMUMyOS41MjMsMTEuMTUxLDI5LjU4NiwxMC45NzUsMjkuNzEyLDEwLjkyMVptLjE2OC42MzNxLS4wNDYuMDE4LS4wNTkuMTE5YTEuMjg3LDEuMjg3LDAsMCwwLC4wMjcuMzM0cS4wNTEuMy4yMzUuOTk0dC4yNzcuOTQ2YTEuNDg0LDEuNDg0LDAsMCwwLC4xNTQuMzM0cS4wNi4wOC4xMDkuMDcxdC4wNjMtLjFhMS4yLDEuMiwwLDAsMC0uMDI2LS4zM3EtLjA1MS0uMy0uMjM5LTEuMDExdC0uMjgyLS45NjVhMS40MiwxLjQyLDAsMCwwLS4xNTMtLjMzMlEyOS45MjYsMTEuNTM2LDI5Ljg4LDExLjU1M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjEuMTY3LDE2LjM2MmEuNDIyLjQyMiwwLDAsMSwuMzE4LjE4NSwxLjAwNSwxLjAwNSwwLDAsMS0uMjc3LDEuMDMuNDIuNDIsMCwwLDEtLjM2NiwwLC41OS41OSwwLDAsMS0uMzExLS4yNjEuODA4LjgwOCwwLDAsMSwuMjU0LS44OTNBLjU2MS41NjEsMCwwLDEsMjEuMTY3LDE2LjM2MlptLS4wNTEuMTg5YS4xNzUuMTc1LDAsMCwwLS4xOTIuMDg3LDEuNDg3LDEuNDg3LDAsMCwwLS4xNTUuNTY3LjIxNi4yMTYsMCwwLDAsLjAzOS4xMjQuMTkxLjE5MSwwLDAsMCwuMDg0LjA1OC4xNDUuMTQ1LDAsMCwwLC4xODgtLjA2OSwxLjY2NiwxLjY2NiwwLDAsMCwuMTY0LS42LjE4OS4xODksMCwwLDAtLjA0LS4xMjFBLjE2My4xNjMsMCwwLDAsMjEuMTE3LDE2LjU1MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjIuMzc2LDE2LjU0OGEuMzgyLjM4MiwwLDAsMSwuMzExLjIxMiwxLjAyNCwxLjAyNCwwLDAsMS0uMDE5LjY2LDEuMDIyLDEuMDIyLDAsMCwxLS4zMTUuNTgxLjM4LjM4LDAsMCwxLS4zNzMuMDI1LjUzMy41MzMsMCwwLDEtLjMtLjI5LDEuMTg5LDEuMTg5LDAsMCwxLC4zMDktMS4xQS41LjUsMCwwLDEsMjIuMzc2LDE2LjU0OFptLS4wNjIuMjNhLjE2Ny4xNjcsMCwwLDAtLjEuMDEzLjIzNS4yMzUsMCwwLDAtLjEuMSwyLjIxOSwyLjIxOSwwLDAsMC0uMTg5LjY5NC4yNjkuMjY5LDAsMCwwLC4wMzMuMTQ3LjE2Ny4xNjcsMCwwLDAsLjA4My4wNjQuMTQzLjE0MywwLDAsMCwuMSwwLC4yMDYuMjA2LDAsMCwwLC4wOTQtLjEsMi40MzYsMi40MzYsMCwwLDAsLjItLjcyNy4yNC4yNCwwLDAsMC0uMDM0LS4xNDRBLjE0MS4xNDEsMCwwLDAsMjIuMzE0LDE2Ljc3OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjMuMzcsMTguNTQxbC0uMjgxLS4xMS4zMjgtMS4yMjVhMSwxLDAsMCwxLS40NDIuMTUybC4wNzUtLjI4MWEuODgxLjg4MSwwLDAsMCwuMjkyLS4xLjY4LjY4LDAsMCwwLC4yNTktLjIzOGwuMjQyLjAzN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMjQuNzkzLDE2LjkxOWEuMzQ4LjM0OCwwLDAsMSwuMy4yNjYsMS43NTEsMS43NTEsMCwwLDEtLjA3NS44NywxLjc0OSwxLjc0OSwwLDAsMS0uMzcxLjc5MS4zNDUuMzQ1LDAsMCwxLS4zODguMDc4LjQ4OC40ODgsMCwwLDEtLjI4OC0uMzQ4LDEuNTg3LDEuNTg3LDAsMCwxLC4wNjctLjc5LDEuNTc3LDEuNTc3LDAsMCwxLC4zNTQtLjcyN0EuNDU3LjQ1NywwLDAsMSwyNC43OTMsMTYuOTE5Wm0tLjA4NC4zMTJhLjE0My4xNDMsMCwwLDAtLjEwNy4wMjUuMzUzLjM1MywwLDAsMC0uMTA2LjE0MSw0LjEyNiw0LjEyNiwwLDAsMC0uMjU3Ljk0OC40MDguNDA4LDAsMCwwLC4wMjEuMTkyLjE0My4xNDMsMCwwLDAsLjA4LjA3NS4xMi4xMiwwLDAsMCwuMS0uMDExLjMxOC4zMTgsMCwwLDAsLjEwNS0uMTM3LDQuNDE4LDQuNDE4LDAsMCwwLC4yNjYtLjk4MS4zNzQuMzc0LDAsMCwwLS4wMjItLjE4OUEuMTE5LjExOSwwLDAsMCwyNC43MSwxNy4yMzFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI1LjY0OSwxOS40M2wtLjI4MS0uMTEuNDI4LTEuNmExLjAzMywxLjAzMywwLDAsMS0uNDYyLjIyN2wuMS0uMzcxYS45LjksMCwwLDAsLjMtLjE1MS45My45MywwLDAsMCwuMjgxLS4zMjFsLjI0Mi4wMzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI3LjIxMSwxNy4yOTFhLjM0NC4zNDQsMCwwLDEsLjI4Mi4zMTksMi42OTIsMi42OTIsMCwwLDEtLjEzMSwxLjA4LDIuNjksMi42OSwwLDAsMS0uNDI3LDEsLjM0LjM0LDAsMCwxLS40LjEzLjQ4Ny40ODcsMCwwLDEtLjI3My0uNDA1LDIuNDk0LDIuNDk0LDAsMCwxLC4xMjItMSwyLjQ3LDIuNDcsMCwwLDEsLjQxLS45MzdBLjQ1MS40NTEsMCwwLDEsMjcuMjExLDE3LjI5MVptLS4xMDYuMzk0YS4xMzMuMTMzLDAsMCwwLS4xMS4wMzYuNTA5LjUwOSwwLDAsMC0uMTE3LjE4Miw2LjYyMiw2LjYyMiwwLDAsMC0uMzI1LDEuMi41OTEuNTkxLDAsMCwwLC4wMDkuMjM3LjEzMy4xMzMsMCwwLDAsLjA3Ny4wODYuMTEuMTEsMCwwLDAsLjEwNy0uMDIzLjQ2NS40NjUsMCwwLDAsLjExNi0uMTc4LDQuNjM5LDQuNjM5LDAsMCwwLC4yLS42MTksNC42NTgsNC42NTgsMCwwLDAsLjEzNi0uNjE1LjU1Mi41NTIsMCwwLDAtLjAxLS4yMzVBLjExLjExLDAsMCwwLDI3LjEwNSwxNy42ODVaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+PHBhdGggZD1cXFwiTTI3LjkyNywyMC4zMmwtLjI4MS0uMTEuNTI4LTEuOTcxYTEuMTM0LDEuMTM0LDAsMCwxLS40ODIuM2wuMTIzLS40NmEuOTcyLjk3MiwwLDAsMCwuMzE3LS4yLDEuMjQ4LDEuMjQ4LDAsMCwwLC4zLS40bC4yNDIuMDM3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwZmY4MFxcXCIvPjxwYXRoIGQ9XFxcIk0yOC45NTMsMjAuNzIxbC0uMjgxLS4xMS41NzMtMi4xMzlhMS4yLDEuMiwwLDAsMS0uNDkxLjMzNmwuMTM0LS41YTEuMDIsMS4wMiwwLDAsMCwuMzIzLS4yMiwxLjQxMywxLjQxMywwLDAsMCwuMzE0LS40NGwuMjQyLjAzN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGZmODBcXFwiLz48cGF0aCBkPVxcXCJNMzAuNzE3LDE3LjgzYy4xNTEuMDIzLjIzOC4xNTUuMjYyLjRhNC40MzYsNC40MzYsMCwwLDEtLjIxMywxLjM4NSw0LjQzNCw0LjQzNCwwLDAsMS0uNTA5LDEuMzA3Yy0uMTQuMTk1LS4yOC4yNjMtLjQyMi4yMDdzLS4yMjYtLjIyLS4yNS0uNDg5YTQuMTk0LDQuMTk0LDAsMCwxLC4yLTEuMyw0LjE0Myw0LjE0MywwLDAsMSwuNDkyLTEuMjQxQzMwLjQyLDE3LjksMzAuNTY2LDE3LjgwNywzMC43MTcsMTcuODNabS0uMTM3LjUxM2EuMTMyLjEzMiwwLDAsMC0uMTE1LjA1My44LjgsMCwwLDAtLjEzMy4yNDEsNy41ODcsNy41ODcsMCwwLDAtLjI0NC43OTEsNy41MzksNy41MzksMCwwLDAtLjE4Ljc3OS45My45MywwLDAsMC0uMDA5LjMuMTMxLjEzMSwwLDAsMCwuMDczLjEuMTA4LjEwOCwwLDAsMCwuMTExLS4wMzkuNzQyLjc0MiwwLDAsMCwuMTMyLS4yMzcsNy44LDcuOCwwLDAsMCwuMjQ4LS44MDYsNy44MzUsNy44MzUsMCwwLDAsLjE4NS0uOC44ODQuODg0LDAsMCwwLC4wMDgtLjNRMzAuNjMzLDE4LjM1MywzMC41OCwxOC4zNDNaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBmZjgwXFxcIi8+XCIsXG5cdH0sXG5cdFwiRWRpdG9yQ29uZmlnXCI6IHtcblx0XHRjb2xvdXI6IFwiI2UzZTNmOFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTguNzA5LDE4LjM1MWExLjI2NywxLjI2NywwLDAsMCwuNTMyLTEuMzc5QzguNjkyLDE3LjIwNyw4LjcxOCwxNy43NDksOC43MDksMTguMzUxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2UzZTNmOFxcXCIvPjxwYXRoIGQ9XFxcIk0xNC45MjQsMTkuODUyYS44NzEuODcxLDAsMCwwLC42Mi0xLjEzNUExLjQzLDEuNDMsMCwwLDAsMTQuOTI0LDE5Ljg1MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlM2UzZjhcXFwiLz48cGF0aCBkPVxcXCJNMi43MTMsMjcuMDc5YTEuNTM4LDEuNTM4LDAsMCwwLC41MjQsMS4zNTNjMS40MTQuNzk0LDYuMzcyLjE3NSw4LjA1Ni0uMmExNC45OTQsMTQuOTk0LDAsMCwwLDIuNDI2LTEuMjEzLDIyLjY0MywyMi42NDMsMCwwLDAsNC43MTMtMi41NTdjMS4wODItLjc5NCwyLjgtMy4wMjksMi45ODUtNC4zNjRsLTEuNDc1LS4zMzJjLS4wMzUsMS41LS4zNzUsMS44NDItMS43MTEsMi4xOTFhMTAuNjYyLDEwLjY2MiwwLDAsMS0zLjU3LjE0LDMuMzYyLDMuMzYyLDAsMCwxLTIuMzEzLTEuNTYyYy0xLjA2NS0xLjQxNC4yMzYtMi40LTEuNDQ5LTIuNS0xLjc3MiwyLjE3My00LjkuNjExLTYuMjY3LjM5M2EzMC4wNjYsMzAuMDY2LDAsMCwwLTEuOTM4LDcuNiwyLjc0OCwyLjc0OCwwLDAsMSwyLjEzOC4zMjNjMi42ODgsMS4wMzkuMzQsMS45NTUtLjczMywxLjY4NUMzLjM2OCwyNy44NjQsMy4xNDEsMjcuMzg0LDIuNzEzLDI3LjA3OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZGZkZmRcXFwiLz48cGF0aCBkPVxcXCJNNi4yMzEsMTQuNTM3YTExLjUzOSwxMS41MzksMCwwLDEsMi45ODUsMS4xMjZjMS41MS43NTEsMS43ODEuNjQ2LDEuOTIsMS42OTMuMDE3LjE5Mi0uMDE3LjMuNTMyLjQ3MS45MjUuMjg4LS41MzItLjIyNywxLjk0Ni0uMjE4QTE2LjY0LDE2LjY0LDAsMCwxLDE5LjU1OSwxOC45Yy40NTQuMjg4LjM2Ny42NTUsMS45LjYxMWExOC43NjcsMTguNzY3LDAsMCwwLTEuMi02LjE2MmMtLjg2NC0yLjAwNy0yLjAwNy0yLjMxMy00LjMzOC0zLjA2NC0xLjM2Mi0uNDM2LTUuMzU5LS45MTYtNi42LS4xNDgtMS4xNjEuNzI0LTEuMzc5LDEuNTg5LTIuNDYxLDMuMTA3QTUuMzY2LDUuMzY2LDAsMCwwLDYuMjMxLDE0LjUzN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZGZkZmRcXFwiLz48cGF0aCBkPVxcXCJNMTUuODQsMTguMjQ2Yy44NzMuMzU4LS4wNDQsMi42NzEtMS4yNTcsMi4xMTItLjM5My0xLjEwOC41NDEtMS43MzcuNzk0LTIuMjM0YTguNTEsOC41MSwwLDAsMC0yLjQ2MS0uMTQ4Yy0uNTc2LjIxOC0uNzA3LDEuNDQ5LS40MSwyLjAyNSwxLjQsMi43NDEsNy41NjcsMi4xNTYsNi45MTMuMDI2LS4yNjItLjg2NC0uNTA2LTEtMS4zODgtMS4zQTYuODg1LDYuODg1LDAsMCwwLDE1Ljg0LDE4LjI0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZGZkZmRcXFwiLz48cGF0aCBkPVxcXCJNNC44NjksMTcuOTQxYy43LjY3MiwyLjI3OC43NzcsMy4zLjgyOUM4LjMsMTcuNDE3LDguNDEzLDE2LjQsOS41LDE2LjQ4M2ExLjYsMS42LDAsMCwxLS4zMDUsMi4xMywxLjM4NiwxLjM4NiwwLDAsMCwxLjM2Mi0xLjc2MywxNC41NDIsMTQuNTQyLDAsMCwwLTQuNDYtMS44OTRBOS41MDYsOS41MDYsMCwwLDAsNC44NjksMTcuOTQxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZkZmRmZFxcXCIvPjxwYXRoIGQ9XFxcIk0zLjIyOCwyNi41ODFjLjU3Ni0uMDUyLDIuMDc3LjM4NCwyLjIuODczQzQuNDk0LDI3LjU2OCwzLjMwNywyNy40OCwzLjIyOCwyNi41ODFabS0uNTE1LjVjLjQyOC4zMDUuNjU1Ljc4NiwxLjM4OC45NiwxLjA3NC4yNzEsMy40MjEtLjY0Ni43MzMtMS42ODVBMi43NDgsMi43NDgsMCwwLDAsMi43LDI2LjAzMmEzMC4wNjYsMzAuMDY2LDAsMCwxLDEuOTM4LTcuNmMxLjM3LjIxOCw0LjQ5NSwxLjc4MSw2LjI2Ny0uMzkzLDEuNjg1LjEuMzg0LDEuMDgyLDEuNDQ5LDIuNUEzLjM2MiwzLjM2MiwwLDAsMCwxNC42NjIsMjIuMWExMC42NjIsMTAuNjYyLDAsMCwwLDMuNTctLjE0YzEuMzM1LS4zNDksMS42NzYtLjY5LDEuNzExLTIuMTkxbDEuNDc1LjMzMmMtLjE4MywxLjMzNS0xLjksMy41Ny0yLjk4NSw0LjM2NGEyMi42NDMsMjIuNjQzLDAsMCwxLTQuNzEzLDIuNTU3LDE0Ljk5NCwxNC45OTQsMCwwLDEtMi40MjYsMS4yMTNjLTEuNjg1LjM3NS02LjY0MiwxLTguMDU2LjJBMS41MzgsMS41MzgsMCwwLDEsMi43MTMsMjcuMDc5Wm0xMi4yMTEtNy4yMjdhMS40MywxLjQzLDAsMCwxLC42Mi0xLjEzNUEuODcxLjg3MSwwLDAsMSwxNC45MjQsMTkuODUyWm0uOTE2LTEuNjA2YTYuODg1LDYuODg1LDAsMCwxLDIuMTkxLjQ4Yy44ODIuMywxLjEyNi40MzYsMS4zODgsMS4zLjY1NSwyLjEzLTUuNTE2LDIuNzE0LTYuOTEzLS4wMjYtLjMtLjU3Ni0uMTY2LTEuODA3LjQxLTIuMDI1YTguNTEsOC41MSwwLDAsMSwyLjQ2MS4xNDhjLS4yNTMuNS0xLjE4NywxLjEyNi0uNzk0LDIuMjM0QzE1LjgsMjAuOTE3LDE2LjcxMywxOC42LDE1Ljg0LDE4LjI0NlptLTcuMTMxLjFjLjAwOS0uNi0uMDE3LTEuMTQzLjUzMi0xLjM3OUExLjI2NywxLjI2NywwLDAsMSw4LjcwOSwxOC4zNTFabS0zLjg0LS40MWE5LjUwNiw5LjUwNiwwLDAsMSwxLjIyMi0yLjk4NSwxNC41NDIsMTQuNTQyLDAsMCwxLDQuNDYsMS44OTRBMS4zODYsMS4zODYsMCwwLDEsOS4xOSwxOC42MTNhMS42LDEuNiwwLDAsMCwuMzA1LTIuMTNjLTEuMDgyLS4wNzktMS4yLjkzNC0xLjMyNywyLjI4N0M3LjE0NywxOC43MTcsNS41NjcsMTguNjEzLDQuODY5LDE3Ljk0MVpNNCwxNy4yNDJjLS4zMjMtLjg5LS4zMjMtMi4yNzgsMS4wNDctMi4zOTJsLS43LDEuOTQ2QzQuMTYyLDE3LjIxNiw0LjE2MiwxNy4xMiw0LDE3LjI0MlptMi4yMzQtMi43MDZhNS4zNjYsNS4zNjYsMCwwLDEsLjYyOC0xLjI5MmMxLjA4Mi0xLjUxOSwxLjMtMi4zODMsMi40NjEtMy4xMDcsMS4yMzktLjc2OCw1LjIzNy0uMjg4LDYuNi4xNDgsMi4zMy43NTEsMy40NzQsMS4wNTYsNC4zMzgsMy4wNjRhMTguNzY3LDE4Ljc2NywwLDAsMSwxLjIsNi4xNjJjLTEuNTM2LjA0NC0xLjQ0OS0uMzIzLTEuOS0uNjExYTE2LjY0LDE2LjY0LDAsMCwwLTUuOTQ0LTEuMjkyYy0yLjQ3OS0uMDA5LTEuMDIxLjUwNi0xLjk0Ni4yMTgtLjU1LS4xNzUtLjUxNS0uMjc5LS41MzItLjQ3MS0uMTQtMS4wNDctLjQxLS45NDMtMS45Mi0xLjY5M0ExMS41MzksMTEuNTM5LDAsMCwwLDYuMjMxLDE0LjUzN1ptMTUuNDQ5LS40MjhjLS4xNjYtLjU1LjE0LS41MTUuNjcyLS44OWE5LjAyMSw5LjAyMSwwLDAsMSwuOTI1LS42NTVjMS40MDUtLjc4Niw0LjAyNC0uOTE2LDUuMTQxLjAxN0EyLjQ3OSwyLjQ3OSwwLDAsMSwyOS41LDE0LjY1YTUuODM4LDUuODM4LDAsMCwxLTIuNjE4LDMuODMyLDUuMjEzLDUuMjEzLDAsMCwxLTQuNzgzLDEuMmMtLjE1Ny0uMzg0LS4wMzUtMi44MTktLjIxOC0zLjcxOC0uMTY2LS44LS4wNzktLjg5LjM4NC0xLjM3LDEuMzYyLTEuNDE0LDQuMzEyLTIuNDQ0LDUuOTg4LTEuMjMxLjcwNy41MjQuNTA2LjcyNC44NzMsMS4xMjYuNDU0LS40ODktLjM5My0yLjEzLTMuNTE3LTIuMDI1QzIzLjQ4NiwxMi41MjksMjIuNTcsMTQuMTg3LDIxLjY4LDE0LjEwOVpNOC45NzEsOS4xNDNhOC4wOTQsOC4wOTQsMCwwLDEsMi4yNzgtNC42QzEyLjYsMy41LDE0LjAxNiwyLjUwOSwxNi4wOTQsMy42ODdjLjUxNS4yODguNDg5LjQzNi41NDEsMS4xNTJhMy4zMTIsMy4zMTIsMCwwLDEtLjE5MiwxLjVjLTEuMzc5LDQuNDUxLTIuNTMxLDEuODk0LTYuOTQ4LDIuOTVhNi4zNzQsNi4zNzQsMCwwLDEsMi4xMjEtMy40MTNjMS4yLTEuMTYxLDIuMDYtMS45MTEsMy44NTgtMS42NjdhMS44NDIsMS44NDIsMCwwLDEtLjA1MiwyLjMyMmMtLjgsMS4yOTItMSwxLjIxMy0uODgyLDIuMDk1LjYyOC0uMTU3LjgyLS43NjgsMS4xMDgtMS4zNzksMS43NTQtMy42NjYtLjc5NC00LjExMS0yLjM1Ny0zLjQzOUExMC4zNzIsMTAuMzcyLDAsMCwwLDkuNzY2LDcuNTU0Yy0uMTIyLjI0NC0uMjUzLjU1OS0uMzY3LjgyOVptNi45MTMuMTgzQzE2LjA2Nyw4LjIzNSwxNy4xNSw3Ljk2NCwxNy4xNSw0LjZjMC0xLjQ0OS0xLjc4MS0yLjc0OS00LjExMS0xLjc4MS0yLC44Mi0yLjMsMS40NDktMy4zNjksMy4wNTUtMSwxLjUxOS0uOTY5LDMuMTg2LTEuODMzLDQuNTkxLS4yNTMuNC0uNDguNTQxLS43NTkuOTQzLS4yLjMtLjM0OS42NzItLjU1LDEuMDIxQTEyLjk0LDEyLjk0LDAsMCwwLDUuMzY3LDE0LjRjLTEuMDQ3LjAyNi0xLjkyOS4wNDQtMi4wMzQsMS4xMjYtLjE0LDEuNDg0LjU1OSwxLjg1LjU1OSwyLjQwOS0uMDA5LjYtMi40NTMsNi42NzctMS43NzIsMTAuMy4xOTIsMSwuODQ3LDEsMS44OTQsMS4xMjZhMTcuOTMsMTcuOTMsMCwwLDAsOC4wNTYtLjcwN2w0LjEtMS45NjRhMTguODUsMTguODUsMCwwLDAsMy41NjEtMi41LDEyLjM4MywxMi4zODMsMCwwLDAsMS4zMDktMS43MTksMy4yMTMsMy4yMTMsMCwwLDAsLjgtMi4yMDgsOC40NzMsOC40NzMsMCwwLDEsMi45ODUsMWMtLjA2MS42LS4zNTguMzE0LS4zNTguODU1YTEuMzU1LDEuMzU1LDAsMCwwLDEuMDQ3LS44OWMtLjM1OC0uNTI0LS43MzMtLjQzNi0xLjI0OC0uODU1YTguMjEyLDguMjEyLDAsMCwxLDEuNzE5LS43MDdjMS4yMjItLjUwNiwzLjMwOC0yLjA0MiwzLjgyMy0zLjQzOWE0LjQ0OSw0LjQ0OSwwLDAsMC0uNTU5LTMuNzM2LDUuNDQ0LDUuNDQ0LDAsMCwwLTMuNjQ4LTEuMTYxYy0xLjU4LDAtMy4yMTIsMS4xMzUtNC40ODYsMS42MjMtLjQ4OS0uNDI4LS41MjQtLjkxNi0uODgyLTEuMzg4QTEyLjI4MSwxMi4yODEsMCwwLDAsMTUuODg0LDkuMzI2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAyMDIwMlxcXCIvPjxwYXRoIGQ9XFxcIk0yMS42OCwxNC4xMDljLjg5LjA3OSwxLjgwNy0xLjU4LDMuOTI4LTEuNjUsMy4xMjUtLjEsMy45NzEsMS41MzYsMy41MTcsMi4wMjUtLjM2Ny0uNC0uMTY2LS42LS44NzMtMS4xMjYtMS42NzYtMS4yMTMtNC42MjYtLjE4My01Ljk4OCwxLjIzMS0uNDYzLjQ4LS41NS41NjctLjM4NCwxLjM3LjE4My45LjA2MSwzLjMzNC4yMTgsMy43MThhNS4yMTMsNS4yMTMsMCwwLDAsNC43ODMtMS4yQTUuODM4LDUuODM4LDAsMCwwLDI5LjUsMTQuNjVhMi40NzksMi40NzksMCwwLDAtMS4wODItMi4wNjljLTEuMTE3LS45MzQtMy43MzYtLjgtNS4xNDEtLjAxN2E5LjAyMSw5LjAyMSwwLDAsMC0uOTI1LjY1NUMyMS44MTksMTMuNTk0LDIxLjUxNCwxMy41NTksMjEuNjgsMTQuMTA5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZkZjJmMlxcXCIvPjxwYXRoIGQ9XFxcIk04Ljk3MSw5LjE0Myw5LjQsOC4zODNjLjExMy0uMjcxLjI0NC0uNTg1LjM2Ny0uODI5QTEwLjM3MiwxMC4zNzIsMCwwLDEsMTMuMjkyLDMuODFjMS41NjItLjY3Miw0LjExMS0uMjI3LDIuMzU3LDMuNDM5LS4yODguNjExLS40OCwxLjIyMi0xLjEwOCwxLjM3OS0uMTIyLS44ODIuMDc5LS44Ljg4Mi0yLjA5NWExLjg0MiwxLjg0MiwwLDAsMCwuMDUyLTIuMzIyYy0xLjgtLjI0NC0yLjY2Mi41MDYtMy44NTgsMS42NjdBNi4zNzQsNi4zNzQsMCwwLDAsOS41LDkuMjkxYzQuNDE2LTEuMDU2LDUuNTY5LDEuNSw2Ljk0OC0yLjk1YTMuMzEyLDMuMzEyLDAsMCwwLC4xOTItMS41Yy0uMDUyLS43MTYtLjAyNi0uODY0LS41NDEtMS4xNTItMi4wNzctMS4xNzgtMy40OTEtLjE5Mi00Ljg0NC44NTVBOC4wOTQsOC4wOTQsMCwwLDAsOC45NzEsOS4xNDNaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmVmM2YzXFxcIi8+PHBhdGggZD1cXFwiTTQsMTcuMjQyYy4xNjYtLjEyMi4xNjYtLjAyNi4zNDktLjQ0NWwuNy0xLjk0NkMzLjY3MywxNC45NjQsMy42NzMsMTYuMzUyLDQsMTcuMjQyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2VmZWZlZlxcXCIvPjxwYXRoIGQ9XFxcIk01LjQyOCwyNy40NTRjLS4xMjItLjQ4OS0xLjYyMy0uOTI1LTIuMi0uODczQzMuMzA3LDI3LjQ4LDQuNDk0LDI3LjU2OCw1LjQyOCwyNy40NTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFmMWYxXFxcIi8+XCIsXG5cdH0sXG5cdFwiRUpTXCI6IHtcblx0XHRjb2xvdXI6IFwiIzkwYTkzYVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIsMTcuNjcyVjE0LjMyOGwxMS44Ni02LjJWMTEuMkw1LjEsMTUuOTM5bDguNzYyLDQuODM1djMuMVptMjcuODE0LTguODhMMTkuNDY1LDIzLjIyOUgxNS45MTJMMjYuMjgxLDguNzkxWk0yNi45NDcsMjEuNWEuNzk0Ljc5NCwwLDAsMCwuNjE5LS4yNzgsMS4wNjEsMS4wNjEsMCwwLDAsLjI0OC0uNzMyLDEuMTQxLDEuMTQxLDAsMCwwLS4yNDgtLjc1My43NjguNzY4LDAsMCwwLTEuMjE3LDAsMS4xNDEsMS4xNDEsMCwwLDAtLjI0OC43NTMsMS4wOSwxLjA5LDAsMCwwLC4yMzcuNzMyQS43NjMuNzYzLDAsMCwwLDI2Ljk0NywyMS41Wm0yLjE4NiwxLjA0MmEzLjIzNywzLjIzNywwLDAsMS00LjM1Mi0uMDEsMi44NjQsMi44NjQsMCwwLDEsMC00LjEsMy4yMjMsMy4yMjMsMCwwLDEsNC4zNTIsMEEyLjc3MywyLjc3MywwLDAsMSwzMCwyMC40ODYsMi43NCwyLjc0LDAsMCwxLDI5LjEzNCwyMi41MzhaTTE4LjgyMSwxMy4wNjFhLjc5NC43OTQsMCwwLDAsLjYxOS0uMjc4LDEuMDYxLDEuMDYxLDAsMCwwLC4yNDgtLjczMiwxLjE0MSwxLjE0MSwwLDAsMC0uMjQ4LS43NTMuNzY5Ljc2OSwwLDAsMC0xLjIxNywwLDEuMTQxLDEuMTQxLDAsMCwwLS4yNDguNzUzLDEuMDksMS4wOSwwLDAsMCwuMjM3LjczMkEuNzYzLjc2MywwLDAsMCwxOC44MjEsMTMuMDYxWk0yMS4wMDcsMTQuMWEzLjIzNywzLjIzNywwLDAsMS00LjM1Mi0uMDEsMi44NjQsMi44NjQsMCwwLDEsMC00LjEsMy4yMjMsMy4yMjMsMCwwLDEsNC4zNTIsMCwyLjc3MywyLjc3MywwLDAsMSwuODY2LDIuMDYzQTIuNzQsMi43NCwwLDAsMSwyMS4wMDcsMTQuMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM5MGE5M2FcXFwiLz5cIixcblx0fSxcblx0XCJFbGl4aXJcIjoge1xuXHRcdGNvbG91cjogXCIjNDUyNDU5XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxNy4yNDlcXFwiIHkxPVxcXCItMzM1LjU5N1xcXCIgeDI9XFxcIjE0Ljk3M1xcXCIgeTI9XFxcIi0zMDkuOTk0XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEsIDAsIDAsIC0xLCAwLCAtMzA2KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjAxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZjdmNmY4XFxcIiBzdG9wLW9wYWNpdHk9XFxcIjAuMDRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMDlcXFwiIHN0b3AtY29sb3I9XFxcIiNhYTljYjNcXFwiIHN0b3Atb3BhY2l0eT1cXFwiMC4zOVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yXFxcIiBzdG9wLWNvbG9yPVxcXCIjNmY1NjdlXFxcIiBzdG9wLW9wYWNpdHk9XFxcIjAuNjZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzJcXFwiIHN0b3AtY29sb3I9XFxcIiM0NTI0NTlcXFwiIHN0b3Atb3BhY2l0eT1cXFwiMC44NlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41XFxcIiBzdG9wLWNvbG9yPVxcXCIjMmQwODQzXFxcIiBzdG9wLW9wYWNpdHk9XFxcIjAuOTdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMyNjAwM2RcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2VsaXhpcjwvdGl0bGU+PHBhdGggZD1cXFwiTTE3LjgsOC41OTFjMi4wNzksNC41ODQsNy42NCw2LjUsNy4xNDEsMTIuNDc0LS41ODIsNy4wMTctNS41NTEsOC43ODQtOC4zMTYsOC45MDlhOC44MTUsOC44MTUsMCwwLDEtOS40LTcuNDg1QzUuNjE4LDE1LjA0NiwxMi42NTUsMy42MzIsMTYuNzA5LDJBMTUuMDgzLDE1LjA4MywwLDAsMCwxNy44LDguNTkxWm0tLjE2NiwxOC44NTdhLjQyMy40MjMsMCwwLDAtLjA1Ny0uMzI3Yy0uNTkzLTEuMS01LjgxLTEuNjQ1LTYuOTA3LTEuNzUyYTguMjcyLDguMjcyLDAsMCwwLDEuNjM1LDEuMyw3Ljc2Niw3Ljc2NiwwLDAsMCwyLjgxNCwxLjA0MUMxNS45MjIsMjcuODMxLDE3LjQ2NywyNy45MzMsMTcuNjM1LDI3LjQ0N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM3YzY0OGZcXFwiLz48ZyBzdHlsZT1cXFwib3BhY2l0eTowLjI1XFxcIj48cGF0aCBkPVxcXCJNMTguMjQ4LDEwLjYxOGM0LjQ3LDQuODIzLDYuNDQ1LDQuOTc5LDYuMjM3LDEwLjQ3OC0uMjQ5LDYuNDc2LTQuNTQzLDguMTkxLTcuMDU4LDguNDItNC4yLjU1MS03LjQ5NS0xLjUyOC04LjM1OC01LjY4NkM3LjMxMiwxNy4wNjMsMTIuOTc4LDYuMDIzLDE2LjYzNyw0LjM2QTE1LjMyMywxNS4zMjMsMCwwLDAsMTguMjU4LDEwLjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjYwMDNkXFxcIi8+PC9nPjxnIHN0eWxlPVxcXCJvcGFjaXR5OjAuNzVcXFwiPjxwYXRoIGQ9XFxcIk0xNy4zODUsOS45MjFDMjAuMzY5LDE0LDI0LjMxOSwxMy43LDI1LDE5LjY0MWMuMDk0LDYuOTIzLTMuNiw5LjI4My02LjIzNyw5Ljk0OC00LjUsMS4yNzktOC41MTQtLjY0NS0xMC4wOTQtNS0zLjAzNS03LDIuNjUxLTE4LjUxNCw2LjMxLTIwLjkxNWExNS4wODMsMTUuMDgzLDAsMCwwLDIuMzcsNi4yMzdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PC9nPlwiLFxuXHR9LFxuXHRcIkVsbVwiOiB7XG5cdFx0Y29sb3VyOiBcIiM4Y2Q2MzZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xNiwxNi43NjgsMi43NjgsMzBIMjkuMjMyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzVmYjRjYlxcXCIvPjxwYXRoIGQ9XFxcIk0yNC4xMywyMy4zNjIsMzAsMjkuMjMyVjE3LjQ5MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZWE0MDBcXFwiLz48cGF0aCBkPVxcXCJNMTUuMjMyLDE2LDIsMi43NjhWMjkuMjMyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzU5NjI3N1xcXCIvPjxwYXRoIGQ9XFxcIk0zMCwxNC40NDhWMkgxNy41NTJaXFxcIiBzdHlsZT1cXFwiZmlsbDojNWZiNGNiXFxcIi8+PHBhdGggZD1cXFwiTTIzLjM5Miw5LjM3Nmw2LjU5NCw2LjU5NC02LjYyNCw2LjYyNEwxNi43NjgsMTZaTTIuNzY4LDIsOC44NjMsOC4xSDIyLjExMUwxNi4wMTYsMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4Y2Q2MzZcXFwiLz48cGF0aCBkPVxcXCJNMTYsMTUuMjMybDYuMDUxLTYuMDUxSDkuOTQ5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2VlYTQwMFxcXCIvPlwiLFxuXHR9LFxuXHRcIkVSQlwiOiB7XG5cdFx0Y29sb3VyOiBcIiM5MjFhMWVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk03LjI1LDI0Ljc1aDE3LjVMMTIuNSwxMi41LDcuMjUsMTcuNzVaTTIsMzBIMzBWMkgxNkwyLDE2Wm0yNS4zNzUtMi42MjVINC42MjV2LTEwLjVsMTIuMjUtMTIuMjVoMTAuNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM5MjFhMWVcXFwiLz5cIixcblx0fSxcblx0XCJFcmxhbmdcIjoge1xuXHRcdGNvbG91cjogXCIjYTIwMDNlXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNNi4zODgsMjMuODY3YTExLjAxMiwxMS4wMTIsMCwwLDEtMy40NDEtOC4yMzQsMTAuNzY1LDEwLjc2NSwwLDAsMSwyLjg2NC03LjVIMnYxNS43M1ptMjAuMDY2LDBhMTYuNDQsMTYuNDQsMCwwLDAsMi41MzctMy4xMzZsLTQuMjE4LTEuODczYTguMzA2LDguMzA2LDAsMCwxLTYuNjQxLDQuMTJjLTQuMzU5LS4wMTQtNi4wNzItMy4zMjktNi4wNjMtNy41ODRIMjguMzZhNi40NjUsNi40NjUsMCwwLDAsMC0uOTM1LDkuMDU3LDkuMDU3LDAsMCwwLTIuMDI5LTYuMzI2SDMwdjE1LjczSDI2LjQ1NlpNMTIuMzMyLDExLjc0MmEzLjcyMywzLjcyMywwLDAsMSwzLjktMy4yMywzLjI5LDMuMjksMCwwLDEsMy41MzIsMy4yM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNhMjAwM2VcXFwiLz5cIixcblx0fSxcblx0XCJGI1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMzNzhiYmFcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDE2LDE1LjI4OCwyLjcxMlY5LjM1Nkw4LjY0NCwxNmw2LjY0NCw2LjY0NHY2LjY0NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzNzhiYmFcXFwiLz48cGF0aCBkPVxcXCJNMTAuNTQyLDE2bDQuNzQ2LTQuNzQ2djkuNDkyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzM3OGJiYVxcXCIvPjxwYXRoIGQ9XFxcIk0zMCwxNiwxNi4yMzcsMi43MTJWOS4zNTZMMjIuODgxLDE2bC02LjY0NCw2LjY0NHY2LjY0NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzMGI5ZGJcXFwiLz5cIixcblx0fSxcblx0XCJGaXJlc3RvcmUgc2VjdXJpdHkgcnVsZXNcIjoge1xuXHRcdGNvbG91cjogXCIjZjY4MjBjXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNNS44LDI0LjZsLjE3LS4yMzdMMTMuOTksOS4xNDlsLjAxNy0uMTYxLTMuNTM1LTYuNjRhLjY1Ni42NTYsMCwwLDAtMS4yMjcuMjA3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmYzI0YVxcXCIvPjxwYXRoIGQ9XFxcIk01LjksMjQuNDJsLjEyOC0uMjVMMTMuOTY1LDkuMTE0LDEwLjQzOSwyLjQ0OGEuNi42LDAsMCwwLTEuMTMzLjIwNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmE3MTJcXFwiLz48cGF0aCBkPVxcXCJNMTYuNTg0LDE0LjAxbDIuNjMyLTIuN0wxNi41ODMsNi4yODlhLjY3OC42NzgsMCwwLDAtMS4xOTUsMEwxMy45ODEsOC45NzFWOS4yWlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y0YmQ2MlxcXCIvPjxwYXRoIGQ9XFxcIk0xNi41MzcsMTMuOSwxOS4xLDExLjI4LDE2LjUzNyw2LjRhLjU4OS41ODksMCwwLDAtMS4wNzQtLjA0N0wxNC4wNDksOS4wODJsLS4wNDIuMTM5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmYTUwZVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiNS44MDIgMjQuNjAxIDUuODc5IDI0LjUyMyA2LjE1OCAyNC40MSAxNi40MTggMTQuMTg4IDE2LjU0OCAxMy44MzQgMTMuOTg5IDguOTU2IDUuODAyIDI0LjYwMVxcXCIgc3R5bGU9XFxcImZpbGw6I2Y2ODIwY1xcXCIvPjxwYXRoIGQ9XFxcIk0xNi45MTIsMjkuNzU2LDI2LjIsMjQuNTc3LDIzLjU0Niw4LjI0NkEuNjM1LjYzNSwwLDAsMCwyMi40NzEsNy45TDUuOCwyNC42bDkuMjMzLDUuMTU1YTEuOTI3LDEuOTI3LDAsMCwwLDEuODc4LDBcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZGUwNjhcXFwiLz48cGF0aCBkPVxcXCJNMjYuMTE1LDI0LjUzNCwyMy40ODMsOC4zMjZhLjU1Ny41NTcsMCwwLDAtLjk2Ny0uMzUzTDUuOSwyNC41NjlsOS4xMzEsNS4xYTEuOTEyLDEuOTEyLDAsMCwwLDEuODYzLDBaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmNjYTNmXFxcIi8+PHBhdGggZD1cXFwiTTE2LjkxMiwyOS42YTEuOTI3LDEuOTI3LDAsMCwxLTEuODc4LDBMNS44NzYsMjQuNTIyLDUuOCwyNC42bDkuMjMzLDUuMTU1YTEuOTI3LDEuOTI3LDAsMCwwLDEuODc4LDBMMjYuMiwyNC41NzdsLS4wMjMtLjE0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2VlYWIzN1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjMuMjAxIDEzIDE1LjQwNSAxNi41MzQgMTUuNDA1IDI3LjYwMyAyMS42MjUgMjQuNzg1IDIxLjYyNSAzMSAzMSAyNi43NDMgMzEgMTYuNTM0IDIzLjIwMSAxM1xcXCIgc3R5bGU9XFxcImZpbGw6IzI1MjUyNVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjMuMjAxIDE0LjczIDE2Ljk4NSAxNy41NDkgMTYuOTg1IDIwLjMyNyAyMy4yMDEgMTcuNTA3IDI5LjQyMSAyMC4zMjcgMjkuNDIxIDE3LjU0OSAyMy4yMDEgMTQuNzNcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIzLjIwMSAxOS41NjQgMTYuOTg1IDIyLjM4MSAxNi45ODUgMjUuMTU4IDIzLjIwMSAyMi4zMzcgMjkuNDIxIDI1LjE1OCAyOS40MjEgMjIuMzgxIDIzLjIwMSAxOS41NjRcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI4LjYwNiAyNi4wOTggMjUuNTUxIDI0LjcxMiAyMy4yMDEgMjUuNzc4IDIzLjIwMSAyOC41NDggMjguNjA2IDI2LjA5OFxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIkZsb3dcIjoge1xuXHRcdGNvbG91cjogXCIjZmZiMDQ3XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItNjcuOTA3XFxcIiB5MT1cXFwiLTMwOC41NTFcXFwiIHgyPVxcXCItNjcuODU3XFxcIiB5Mj1cXFwiLTMwOC41NjRcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoODcuODIyLCAwLCAwLCAtODguNTMzLCA1OTg0LjUzMiwgLTI3MjkwLjYxNylcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmQ0NDFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmIwNDdcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYlxcXCIgeDE9XFxcIi02Ny42NzRcXFwiIHkxPVxcXCItMzEwLjEyMVxcXCIgeDI9XFxcIi02Ny42NDdcXFwiIHkyPVxcXCItMzEwLjA2M1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCg4Ny44MjIsIDAsIDAsIC04OC41MzMsIDU5NjQuNjY3LCAtMjc0NDMpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZkNzU0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZiNTMyXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImNcXFwiIHgxPVxcXCItNjcuMDI5XFxcIiB5MT1cXFwiLTMxMC45MVxcXCIgeDI9XFxcIi02Ny4wMjlcXFwiIHkyPVxcXCItMzEwLjg2XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDg3LjgyMiwgMCwgMCwgLTg4LjUzMywgNTkwMi44LCAtMjc1MTguNzMzKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZDY0MlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZDQ0MVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmYjUzMlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJkXFxcIiB4MT1cXFwiLTY2LjI1MlxcXCIgeTE9XFxcIi0zMTAuMzc3XFxcIiB4Mj1cXFwiLTY2LjMyXFxcIiB5Mj1cXFwiLTMxMC4zNjJcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMTA2LjE5OCwgMCwgMCwgLTg4LjU1MSwgNzA0OC40MjgsIC0yNzQ3NC4xNjcpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZkNDQxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZhODI5XFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9mbG93PC90aXRsZT48cGF0aCBkPVxcXCJNMjMuNDI2LDI5LjQxVjIyLjE3MmgtNy4xOGw3LjE4LDcuMjM4XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZkZjUxO2ZpbGwtb3BhY2l0eTowLjY5OTk5OTk4ODA3OTA3MVxcXCIvPjxwYXRoIGQ9XFxcIk0yNC4yMzEsMjUuMzA2VjE3LjQ3N0gxNi40NjZsNy43NjYsNy44MjlcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjg5MDA7ZmlsbC1vcGFjaXR5OjAuNjk5OTk5OTg4MDc5MDcxXFxcIi8+PHBhdGggZD1cXFwiTTE5LjUxNSwyMi4xNzFWMzBoNy43NjZsLTcuNzY2LTcuODI5XFxcIiBzdHlsZT1cXFwiZmlsbC1vcGFjaXR5OjAuNjk5OTk5OTg4MDc5MDcxO2ZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMi42MDgsMThWMTEuODA5SDE2LjQ2NkwyMi42MDgsMThcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmRmNGY7ZmlsbC1vcGFjaXR5OjAuNjk5OTk5OTg4MDc5MDcxXFxcIi8+PHBhdGggZD1cXFwiTTI1LjUyNCwxNi41MjVWOC43SDE3Ljc1OWw3Ljc2Niw3LjgyOVxcXCIgc3R5bGU9XFxcImZpbGwtb3BhY2l0eTowLjc5OTk5OTk1MjMxNjI4NDtmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNMTIuMjg4LDJWOS44MjloNy43NjZMMTIuMjg4LDJcXFwiIHN0eWxlPVxcXCJmaWxsLW9wYWNpdHk6MC44MDAwMDAwMTE5MjA5Mjk7ZmlsbDp1cmwoI2MpXFxcIi8+PHBhdGggZD1cXFwiTTE0LjExLDE0LjI2MlY2LjQzM0g0LjcxOWw3LjczMiw3LjgzLDEuNjU5LDBcXFwiIHN0eWxlPVxcXCJmaWxsLW9wYWNpdHk6MC44Nzk5OTk5OTUyMzE2Mjg7ZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTE0LjExLDI5Ljk1OFYyMC40ODdINC43MTlsOS4zOTEsOS40NzFcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmI3MDA7ZmlsbC1vcGFjaXR5OjAuNjk5OTk5OTg4MDc5MDcxXFxcIi8+PHBhdGggZD1cXFwiTTE0LjExMiwyMi4xMTRWMTQuMjg1SDYuMzQ2bDcuNzY2LDcuODI5XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiNzAwO2ZpbGwtb3BhY2l0eTowLjVcXFwiLz48cGF0aCBkPVxcXCJNMTYuNDY1LDExLjgwOXY3LjgyOWg3Ljc2NmwtNy43NjYtNy44MjlcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmNkMjU7ZmlsbC1vcGFjaXR5OjAuNjk5OTk5OTg4MDc5MDcxXFxcIi8+PHBhdGggZD1cXFwiTTE0LjA5MiwxMi42OTFWNC44NjJINi4zMjZsNy43NjYsNy44MjlcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjg5MDA7ZmlsbC1vcGFjaXR5OjAuNzAwMDAwMDQ3NjgzNzE2XFxcIi8+PHBhdGggZD1cXFwiTTE2LjI0NiwyMi4xNzFWMzBoNy43NjZsLTcuNzY2LTcuODI5XFxcIiBzdHlsZT1cXFwiZmlsbDojZmY4OTAwO2ZpbGwtb3BhY2l0eTowLjY5OTk5OTk4ODA3OTA3MVxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjEuMTIyIDIyLjE3MiAxOC42MDkgMTkuNjM4IDE2LjQ2NSAxOS42MzggMTYuNDY2IDExLjgwOSAyMC44NDcgMTEuODA5IDE4Ljg4MiA5LjgyOSAxNC4wOTIgOS44MjkgMTQuMTEgMTQuMjYyIDE0LjExIDIwLjQ4NyAxNC4xMSAzMCAxNi4yNDYgMzAgMTYuMjQ2IDIyLjE3MiAyMS4xMjIgMjIuMTcyXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiRm9ydHJhblwiOiB7XG5cdFx0Y29sb3VyOiBcIiM3MzRmOTZcIixcblx0XHRpY29uOiBcIjxnIGlkPVxcXCJnMzc2OFxcXCI+PHJlY3QgaWQ9XFxcInJlY3Q4ODFcXFwiIHg9XFxcIjIuMzRcXFwiIHk9XFxcIjIuMzRcXFwiIHdpZHRoPVxcXCIyNy4zM1xcXCIgaGVpZ2h0PVxcXCIyNy4zM1xcXCIgcng9XFxcIjUuMDhcXFwiIHN0eWxlPVxcXCJmaWxsOiM3MzRmOTZcXFwiLz48cGF0aCBpZD1cXFwicGF0aDE0MTJcXFwiIGQ9XFxcIk02LjA2LDI1LjVjMC0xLjA5LDAtMS4xOS4xLTEuMTlsMS4yNS0uMDZjMSwwLDEuMTgtLjA2LDEuNDItLjE5YS43NC43NCwwLDAsMCwuMzktLjM3Yy4xMi0uMjMuMTItLjI5LjEyLTcuNzIsMC03LDAtNy41LS4xLTcuNjdhMS4wNiwxLjA2LDAsMCwwLS42My0uNSwxMC4yMywxMC4yMywwLDAsMC0xLjM4LS4xbC0xLjE3LDBWNS4zMkgyNS45NHY4LjgySDI0Ljg5YTguNTYsOC41NiwwLDAsMS0xLjItLjA1Yy0uMTQsMC0uMTUtLjA1LS4yMi0uOTVhMTIuNzMsMTIuNzMsMCwwLDAtLjM1LTIuNDMsMy4yMiwzLjIyLDAsMCwwLTIuNjMtMi44MWMtLjU3LS4xLTMuMS0uMi01LjE5LS4ySDEzLjg3djYuNjNsLjc1LDBBNi4zMyw2LjMzLDAsMCwwLDE2LjQ5LDE0YTEuODgsMS44OCwwLDAsMCwuODktLjkxLDUuODYsNS44NiwwLDAsMCwuMzktMS43NWMwLS4zMy4wOC0uNjYuMS0uNzNzMC0uMTMsMS4xOC0uMTNIMjAuMlYyMS4wNkgxNy44NWwwLS42MWE3Ljg1LDcuODUsMCwwLDAtLjU0LTIuNjZjLS4zNi0uNjgtMS4wNS0xLTIuNDUtMS4wOGwtLjc2LS4wNy0uMiwwLDAsMy4zNGMwLDMuNTEsMCwzLjY1LjMsMy45NHMuNDMuMzIsMy4yMi40MmMuMDUsMCwuMDcuMjguMDcsMS4xOXYxLjE4SDYuMDZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PC9nPlwiLFxuXHR9LFxuXHRcIkZyZWVNYXJrZXIgVGVtcGxhdGUgTGFuZ3VhZ2VcIjoge1xuXHRcdGNvbG91cjogXCIjMDA1MGIyXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjQuMDIzLDIwLjksMjUuNDA4LDIzbDQuNjE1LTdMMjUuNDA4LDlsLTEuMzg1LDIuMUwyNy4yNTUsMTZaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1MGIyXFxcIi8+PHBhdGggZD1cXFwiTTcuOTc3LDExLjEsNi41OTIsOSwxLjk3NywxNmw0LjYxNSw3LDEuMzg1LTIuMUw0Ljc0NSwxNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDUwYjJcXFwiLz48cGF0aCBkPVxcXCJNMTMuMDM1LDloMi44bC0uNDk0LDIuOGgyLjhMMTguNjM1LDloMi44bC0uNDk0LDIuOGgyLjhsLS40OTUsMi44aC0yLjhsLS40OTMsMi44aDIuOGwtLjQ5NCwyLjhoLTIuOEwxOC45NjcsMjNoLTIuOGwuNDkzLTIuOC0yLjgsMEwxMy4zNzUsMjNIMTAuNTY3bC40OTMtMi44LTIuOCwwLC40OTQtMi44aDIuOGwuNDkzLTIuNzkzaC0yLjhMOS43NDEsMTEuOGgyLjhabTEuMzE5LDguNGgyLjhsLjQ5NC0yLjhoLTIuOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDUwYjJcXFwiLz5cIixcblx0fSxcblx0XCJHYW1lTWFrZXIgTGFuZ3VhZ2VcIjoge1xuXHRcdGNvbG91cjogXCIjOGJjMzRhXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTQuMjE2LDI0LjE2N2gtLjk4OWEzLjI0LDMuMjQsMCwwLDEtMi44MTEtMS42NDlMNi42NjcsMTZsNC42ODEtOC4xNjdIMTYuMmwtNC4zNCw4LjE3Ni4wNTcuMDMyTDEzLjkzNiwxOS41SDE2LjgyWk04LjQ1NSwxMC41MzVsLTEuMjctMi4yMWExLDEsMCwwLDAtLjg1OS0uNDkySDJsNCw2Ljk5MlpNMjEuNTQsOS40ODJhMy4yMzksMy4yMzksMCwwLDAtMi44MTItMS42NDlIMTcuNTIzTDE1LjA0NSwxMi41SDE4LjAyTDIwLjA4MywxNmwtNC41MzEsOC4xNjdoNS4wNTZMMjUuMzMzLDE2Wk0yNiwxNy4xNzJsLTIuNDcsNC4yNywxLjI4MywyLjIzM2ExLDEsMCwwLDAsLjg1OS40OTJIMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDojOGJjMzRhXFxcIi8+XCIsXG5cdH0sXG5cdFwiRy1jb2RlXCI6IHtcblx0XHRjb2xvdXI6IFwiI2JhMDAwMFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE3LjMzMywxNi4zNTZoMEwxNy4zMDksMjAuOGwtMi4xLTEuMDE4LjAyMy00LjQzN2gwbDEwLjU1OC0zLjAzOCwyLjEwNiwxLjAxM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZTAwMDBcXFwiLz48cGF0aCBkPVxcXCJNMjQuNDkyLDE4LjU3NmExNC45MDksMTQuOTA5LDAsMCwxLTEuMzQzLDMuMDc0LDcuODYsNy44NiwwLDAsMS0xLjM5LDEuODI5LDYuOCw2LjgsMCwwLDEtMS43LDEuMzI0LDcuNDA1LDcuNDA1LDAsMCwxLTIuMDA2Ljg1NSw2LDYsMCwwLDEtMy4wNzIuMjNBNC42NjgsNC42NjgsMCwwLDEsMTIuNDQsMjQuNjRhNS4zMjIsNS4zMjIsMCwwLDEtLjYzNi0uNjI5bC0uNTA4LS4yNDRhNC43MTcsNC43MTcsMCwwLDAsLjQ1Ny4xODEsNS41Miw1LjUyLDAsMCwxLTEuMDE1LTEuNzU4LDguMTM1LDguMTM1LDAsMCwxLS40My0xLjUzM2MtLjAyMy0uMTMxLS4wNDMtLjIzOS0uMDYxLS4zNGE3LjI5Miw3LjI5MiwwLDAsMCwuMzc3LDEuMzU0LDUuODM2LDUuODM2LDAsMCwwLDEuNjE0LDIuMzE5Yy4wNi4wNTQuMTI3LjEuMTkuMTQ4LjA0LjAwOC4wNzguMDIyLjExOS4wMjlhNi40NTQsNi40NTQsMCwwLDAsMi45MjgtLjIxOSw4LjQsOC40LDAsMCwwLDEuOTEtLjgwNyw3LjY1OCw3LjY1OCwwLDAsMCwxLjU4OS0xLjIyNyw4LjY2Miw4LjY2MiwwLDAsMCwxLjI5LTEuNjksMTIuNjY3LDEyLjY2NywwLDAsMCwxLjAxOS0yLjE5NEwyMy4zLDE5Yy4wNTYtLjE1My4wOTEtLjI1NC4wOTEtLjI1NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZTAwMDBcXFwiLz48cGF0aCBkPVxcXCJNMjQuNTI0LDQuMDEzYTExLjYsMTEuNiwwLDAsMC02LjU4OC0xLjk5NCwxMy44LDEzLjgsMCwwLDAtOS4zNzMsNC44NEExOC4yNDMsMTguMjQzLDAsMCwwLDQsMTguOGMuMDIxLDMuODUxLDEuNDgxLDcuODA2LDUuMTEyLDkuNTc1YTEzLjU2MywxMy41NjMsMCwwLDAsNC4xNTksMS41NjQsMTIuMTE0LDEyLjExNCwwLDAsMCw2Ljg2OS0xLjUyOWMtMi43MzQsMS4zMzMtNi4xMiwxLjk5My04Ljg5NC40LTIuNjg5LTEuNTQzLTMuOTgzLTQuNzI0LTQuMjIxLTcuNy0uNTEyLTYuNCwzLjEtMTMuNjQsOS4xMzItMTYuMjgxLDMuNTEyLTEuNTM3LDcuMzA3LTEuNTg1LDEwLjIzOSwxLjFDMjYuNzI3LDUuMjQ0LDI1LDQuMzA1LDI0LjUyNCw0LjAxM1ptLTE0LjM1OSwyNC44LS4xMzgtLjA5M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZTAwMDBcXFwiLz48cGF0aCBkPVxcXCJNMjIuNTI5LDI2Ljc4OGMtMy4wNDQsMi41ODItNy45Miw0LjE0OS0xMS41NTQsMS44NTdDNy4yNCwyNi4yODksNi41MywyMS4wODksNy4yMTIsMTcuMDgzYTE3LjIxOCwxNy4yMTgsMCwwLDEsNi43LTEwLjk3YzMuNzcxLTIuNjM2LDguODgtMy40OSwxMi40ODktLjE4MmwtMi4yNywzLjI5MWMtMi41MS0yLjM1NS02LjMtMS45NTYtOC45NDUtLjA1MkExMi40MzQsMTIuNDM0LDAsMCwwLDEwLjUsMTYuMmMtLjY2MiwyLjYyMy0uNSw2LjAxMSwxLjUsOC4wNDcsMi4wODgsMi4xMjksNS4xMTIsMi4xMTYsNy42NTYuOEExMC4zMzQsMTAuMzM0LDAsMCwwLDI0LjUsMTguNjM2TDE3LjMwNywyMC44bC4wMjItNC40MzhMMjcuODksMTMuMzE5bC4xLjgwNmgwQTE2LjYyNSwxNi42MjUsMCwwLDEsMjIuNTI5LDI2Ljc4OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiYTAwMDBcXFwiLz5cIixcblx0fSxcblx0XCJHRFNjcmlwdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiM0NzhjYmZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yOC4xNjYsMjEuMDI5djEuNjUyYS4zNzQuMzc0LDAsMCwxLS4yNi4zNTdsLTIuNi44NDFhLjM2Ny4zNjcsMCwwLDEtLjMzNS0uMDU0LjM3NC4zNzQsMCwwLDEtLjE1NS0uM3YtMS44bC0yLjQzOC40NjRWMjQuMDJhLjM3NS4zNzUsMCwwLDEtLjMyNS4zNzFsLTMuNTI1LjQ4M2MtLjAxNiwwLS4wMzQsMC0uMDUxLDBBLjM3NC4zNzQsMCwwLDEsMTguMSwyNC41VjIyLjU1N2wtMS44MTkuMDA4aC0uMjY3bC0xLjgxOS0uMDA4VjI0LjVhLjM3NS4zNzUsMCwwLDEtLjM3NS4zNzZjLS4wMTcsMC0uMDM0LDAtLjA1MiwwbC0zLjUyNS0uNDgzYS4zNzUuMzc1LDAsMCwxLS4zMjQtLjM3MVYyMi4xODRsLTIuNDM5LS40NjR2MS44YS4zNzQuMzc0LDAsMCwxLS4xNTQuMy4zNy4zNywwLDAsMS0uMzM2LjA1NGwtMi42LS44NDFhLjM3NC4zNzQsMCwwLDEtLjI1OS0uMzU3VjIxLjAyOWwtMS42MDgtLjU0MWE0LjU1OCw0LjU1OCwwLDAsMC0uMTI0LDEuMDRjMCw0LjMxNyw2LjA4Miw3LjY1LDEzLjYsNy42NzRoLjAxOWM3LjUxNy0uMDI0LDEzLjYtMy4zNTYsMTMuNi03LjY3NGE0LjU0LDQuNTQsMCwwLDAtLjEtLjk1WlxcXCIgZmlsbD1cXFwiIzQ3OGNiZlxcXCIvPjxwYXRoIGQ9XFxcIk0zLjcxMSwxMy4zNzNWMjAuMWwuOTA3LjMwNmEuMzc0LjM3NCwwLDAsMSwuMjU2LjM1NXYxLjY1bDEuODU1LjZWMjEuMjY3YS4zNzYuMzc2LDAsMCwxLC40NDUtLjM2OWwzLjE4OS42MDlhLjM3NC4zNzQsMCwwLDEsLjMwNS4zNjh2MS44MThsMi43NzUuMzc5di0xLjg5YS4zNzQuMzc0LDAsMCwxLC4zNzYtLjM3NWgwbDIuMzI3LjAwOSwyLjMyNi0uMDA5YS4zNzQuMzc0LDAsMCwxLC4zNzcuMzc1djEuODlsMi43NzUtLjM3OVYyMS44NzRhLjM3My4zNzMsMCwwLDEsLjMtLjM2OGwzLjE4OS0uNjA5YS4zNzcuMzc3LDAsMCwxLC40NDYuMzY5djEuNzQxbDEuODU1LS42VjIwLjc2YS4zNzQuMzc0LDAsMCwxLC4yNTUtLjM1NWwuNjE4LS4yMDhWMTMuMzczaC4wMTdBMjYuNzkyLDI2Ljc5MiwwLDAsMCwzMCwxMC45MzFhMTkuMDIsMTkuMDIsMCwwLDAtMi41MDktMy4yODhBMjQuNTA3LDI0LjUwNywwLDAsMCwyNSw5LjA5MWExMy4wMSwxMy4wMSwwLDAsMC0xLjI3OS0xLjA1MiwxNS4zNjUsMTUuMzY1LDAsMCwwLTEuMzc1LS44OTQsMjguMzUzLDI4LjM1MywwLDAsMCwuMjMyLTMuMDcxQTE1Ljk2OCwxNS45NjgsMCwwLDAsMTguODQ3LDIuOGEyNi40NCwyNi40NCwwLDAsMC0xLjM4NSwyLjcsOS40Niw5LjQ2LDAsMCwwLTEuNDUzLS4xMTZoLS4wMThhOS40NTcsOS40NTcsMCwwLDAtMS40NTQuMTE2LDI2LjI3NSwyNi4yNzUsMCwwLDAtMS4zODUtMi43QTE1Ljk2MSwxNS45NjEsMCwwLDAsOS40MjIsNC4wNzVhMjguMTQyLDI4LjE0MiwwLDAsMCwuMjMyLDMuMDcxLDE1LjMxMiwxNS4zMTIsMCwwLDAtMS4zNzYuODk0QTEzLjA2LDEzLjA2LDAsMCwwLDcsOS4wOTFhMjQuNTUzLDI0LjU1MywwLDAsMC0yLjQ5LTEuNDQ4QTE5LjAyLDE5LjAyLDAsMCwwLDIsMTAuOTMxYTI2Ljc5MiwyNi43OTIsMCwwLDAsMS42OTQsMi40NDNaXFxcIiBmaWxsPVxcXCIjNDc4Y2JmXFxcIi8+PHBhdGggZD1cXFwibTEyLjQ2MiAxNi42YTIuNzM5IDIuNzM5IDAgMSAxLTIuNzQtMi43MzggMi43MzkgMi43MzkgMCAwIDEgMi43NCAyLjczOFxcXCIgZmlsbD1cXFwiI2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIm0xMS44IDE2Ljc2NGExLjgxOSAxLjgxOSAwIDEgMS0xLjgxOS0xLjgxOSAxLjgxNyAxLjgxNyAwIDAgMSAxLjgxOSAxLjgxOVxcXCIgZmlsbD1cXFwiIzQxNDA0MlxcXCIvPjxwYXRoIGQ9XFxcIk0xNi4xNjYsMTkuNTlhLjg0NC44NDQsMCwwLDEtLjg4Mi0uOFYxNi4yNjdhLjg4Ni44ODYsMCwwLDEsMS43NjQsMHYyLjUyMmEuODQ1Ljg0NSwwLDAsMS0uODgzLjhcXFwiIGZpbGw9XFxcIiNmZmZcXFwiLz48cGF0aCBkPVxcXCJtMTkuODcxIDE2LjZhMi43MzkgMi43MzkgMCAxIDAgMi43NC0yLjczOCAyLjczOSAyLjczOSAwIDAgMC0yLjc0IDIuNzM4XFxcIiBmaWxsPVxcXCIjZmZmXFxcIi8+PHBhdGggZD1cXFwibTIwLjUzMSAxNi43NjRhMS44MTggMS44MTggMCAxIDAgMS44MTctMS44MTkgMS44MTcgMS44MTcgMCAwIDAtMS44MTcgMS44MTlcXFwiIGZpbGw9XFxcIiM0MTQwNDJcXFwiLz5cIixcblx0fSxcblx0XCJHaXRcIjoge1xuXHRcdGNvbG91cjogXCIjZGQ0YzM1XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjkuNDcyLDE0Ljc1MywxNy4yNDcsMi41MjhhMS44LDEuOCwwLDAsMC0yLjU1LDBMMTIuMTU4LDUuMDY3bDMuMjIsMy4yMmEyLjE0MSwyLjE0MSwwLDAsMSwyLjcxMiwyLjczbDMuMSwzLjFhMi4xNDMsMi4xNDMsMCwxLDEtMS4yODUsMS4yMWwtMi44OTUtMi44OTV2Ny42MTdhMi4xNDEsMi4xNDEsMCwxLDEtMS43NjQtLjA2MlYxMi4zYTIuMTQ2LDIuMTQ2LDAsMCwxLTEuMTY1LTIuODE0TDEwLjkxMSw2LjMxNCwyLjUyOCwxNC43YTEuOCwxLjgsMCwwLDAsMCwyLjU1MUwxNC43NTMsMjkuNDcyYTEuOCwxLjgsMCwwLDAsMi41NSwwTDI5LjQ3MiwxNy4zYTEuOCwxLjgsMCwwLDAsMC0yLjU1MVxcXCIgc3R5bGU9XFxcImZpbGw6I2RkNGMzNVxcXCIvPjxwYXRoIGQ9XFxcIk0xMi4xNTgsNS4wNjdsMy4yMiwzLjIyYTIuMTQxLDIuMTQxLDAsMCwxLDIuNzEyLDIuNzNsMy4xLDMuMWEyLjE0MywyLjE0MywwLDEsMS0xLjI4NSwxLjIxbC0yLjg5NS0yLjg5NXY3LjYxN2EyLjE0MSwyLjE0MSwwLDEsMS0xLjc2NC0uMDYyVjEyLjNhMi4xNDYsMi4xNDYsMCwwLDEtMS4xNjUtMi44MTRMMTAuOTExLDYuMzE0XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiR0xTTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiM0Mzg2YjVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk03Ljc3OSwxOC45MjNBMi4zMzMsMi4zMzMsMCwwLDEsNS40LDE3LjE2Yy4zMDYsMS40NjIsMS45NjEsMi44OTIsNy4xODMsMy41MjlhMTQuMjI4LDE0LjIyOCwwLDAsMCw5LjIzMi0xLjYxMnMuNzMzLS4zMjIuMjkzLjE3NmMwLDAtMy4xMDcsMi44NzMtOS4yLDIuOVMxLjk3LDE5LjEwNywyLDE2Yy0uMDI5LTMuMTA3LDQuODA2LTYuMTg1LDEwLjktNi4xNTVzOS4yLDIuOSw5LjIsMi45Yy40NC41LS4yOTMuMTc2LS4yOTMuMTc2LTEuMDg0LS43LTQuMjg2LTIuMDg5LTkuMjMyLTEuNjEyLTQuODY2LjQ2OS02LjQ1MywyLjEyMi02Ljk4MSwzLjIzNWEzLjI1NCwzLjI1NCwwLDAsMC0uMzE4LDEuMjQsMi40MjQsMi40MjQsMCwwLDEsMi41LTIuMzE2QTIuNTA3LDIuNTA3LDAsMCwxLDEwLjMsMTYuMTk1LDIuNTA2LDIuNTA2LDAsMCwxLDcuNzc5LDE4LjkyWm0xOS42NDctMS4wNzRIMzB2LjkzN0gyNi4zNDRWMTMuNjA5aDEuMDgydjQuMjRaTTIzLjQ1NCwxNmgyLjE2M3YyLjc5MUgyNC45bC0uMTA4LS42NDlhMS45LDEuOSwwLDAsMS0xLjYxNC43ODYsMi40MTQsMi40MTQsMCwwLDEtMi4zNzktMi43MTEsMi40ODUsMi40ODUsMCwwLDEsMi41MzEtMi43NEEyLjA1MywyLjA1MywwLDAsMSwyNS42LDE1LjIxN0gyNC41MTVhMS4xMzYsMS4xMzYsMCwwLDAtMS4xMzItLjg1MWMtLjc3MSwwLTEuNDg1LjUzNC0xLjQ4NSwxLjg2LDAsMS40MTMuNzcxLDEuNzgxLDEuNTA2LDEuNzgxYTEuMjgsMS4yOCwwLDAsMCwxLjI1NC0xLjEzOWgtMS4yVjE2Wk03Ljc4MSwxNC4xYTEuODYsMS44NiwwLDAsMC0xLjgsMi4xMDUsMS44NiwxLjg2LDAsMCwwLDEuOCwyLjEwNSwxLjg2LDEuODYsMCwwLDAsMS44LTIuMTA1QTEuODYsMS44NiwwLDAsMCw3Ljc4MSwxNC4xWm0yLjkxMSwxLjM4M2guNTI1di40NjhoLjAxM2ExLjEyLDEuMTIsMCwwLDEsLjk4Ny0uNTYzLDEuNTY1LDEuNTY1LDAsMCwxLDEuNTA2LDEuNjc3LDEuNjc1LDEuNjc1LDAsMCwxLTEuNTgzLDEuODI0LDEsMSwwLDAsMS0uODgtLjQ0M2gtLjAxM1YyMC4xaC0uNTU3VjE1LjQ3OVpNMTIuMSwxOC40Yy42MDgsMCwxLjAxOS0uNTI3LDEuMDE5LTEuMjU0LDAtLjQyNC0uMTcxLTEuMjY0LTEuMDMyLTEuMjY0LS44LDAtLjg5My44NjctLjg5MywxLjQwNiwwLC44OC41NTEsMS4xMTQuOTA1LDEuMTE0Wm01LS42NTJhMS4zNzgsMS4zNzgsMCwwLDEtMS40ODgsMS4xMzMsMS40ODcsMS40ODcsMCwwLDEtMS40ODItMS42NThjMC0xLjAyNS40OTQtMS44NDIsMS41ODgtMS44NDIuOTU2LDAsMS40MjQuNzYsMS40MjQsMS45MzFIMTQuNzIxYzAsLjY5LjMyMywxLjA4OS45NjIsMS4wODlhLjg0MS44NDEsMCwwLDAsLjg1NC0uNjUySDE3LjFabS0uNTktLjg4Yy0uMDMyLS41MTMtLjI0Ny0uOTg3LS45MjQtLjk4N2EuOTcyLjk3MiwwLDAsMC0uOTE4Ljk4N2gxLjg0MlptMy43MTMsMS45MTdoLS41NTdWMTYuNzUxYzAtLjU3Ni0uMTY1LS44NjctLjcwOS0uODY3LS4zMTcsMC0uODc0LjItLjg3NCwxLjF2MS44aC0uNTU3VjE1LjQ3OWguNTI1di40NjhoLjAxM2ExLjIsMS4yLDAsMCwxLDEtLjU2MywxLjA0NiwxLjA0NiwwLDAsMSwxLjE1OCwxLjE1MnYyLjI1M1xcXCIgc3R5bGU9XFxcImZpbGw6IzQzODZiNVxcXCIvPlwiLFxuXHR9LFxuXHRcIkdvIG1vZHVsZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjZTMyNjJcIixcblx0XHRpY29uOiBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjU0LjUgMjI1XFxcIj48dGl0bGU+ZmlsZV90eXBlX2dvX3BhY2thZ2U8L3RpdGxlPjxwYXRoIGQ9XFxcIk02MS45NDksMTMuMDY4YzE2LjA2LS4xNDcsMzIuMTQzLDAsNDguMjExLS4wNjItMy44MSwxNi40MDgtNy40NjYsMzIuODYyLTExLjI2MSw0OS4yNzdIMjUuNTQ4Yy0yLjMxOSwwLTQuNjM3LjA3Ny02Ljk1Ni0uMDkzQzMzLDQ1Ljc3NSw0Ny41NjYsMjkuNSw2MS45NDksMTMuMDY4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2YyZTZjOVxcXCIvPjxwYXRoIGQ9XFxcIk0xNDMuNTA5LDEzLjAxNGg0OC4wNzJjMTQuNDM3LDE2LjQzMSwyOS4wMTMsMzIuNzIzLDQzLjQxMSw0OS4xNzctOS4yNzQuMTkzLTE4LjU0OSwwLTI3LjgyMy4wODVIMTU0LjY1NEMxNTEuMDA2LDQ1LjgzNywxNDcuMTExLDI5LjQ2LDE0My41MDksMTMuMDE0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2YyZTZjOVxcXCIvPjxwYXRoIGQ9XFxcIk0xMTAuMTYsMTMuMDE0aDMzLjM0OWMzLjYsMTYuNDQ2LDcuNDg5LDMyLjgyMywxMS4xNiw0OS4yNTRIOTguOUMxMDIuNjk0LDQ1Ljg2OCwxMDYuMzUsMjkuNDIyLDExMC4xNiwxMy4wMTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWZjNzVlXFxcIi8+PHBhdGggZD1cXFwiTTE4LjU5Miw2Mi4xODNjMi4zMTkuMTcsNC42MzcuMDg1LDYuOTU2LjA5M0g5OC45cTAsMjYuMDI2LjA1NCw1Mi4wNTJhMTguODU3LDE4Ljg1NywwLDAsMCwxLjk3OS4xMzloNTIuMTE0YTE0LjY5MywxNC42OTMsMCwwLDAsMS41NDYtLjEwOGMuMTQ3LTE3LjM2NiwwLTM0LjczMi4wNy01Mi4xaDUyLjUxNmM5LjI3NC0uMDQ2LDE4LjU0OS4xMDgsMjcuODIzLS4wODVWMjEyLjYySDE4LjZRMTguNTkyLDEzNy40MDUsMTguNTkyLDYyLjE4M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNlN2JmNTVcXFwiLz48cGF0aCBkPVxcXCJNOTguOSw2Mi4yOTFoNTUuNzY5Yy0uMDYyLDE3LjM2Ni4wODUsMzQuNzMyLS4wNyw1Mi4xLS41MTguMDU0LTEuMDM2LjA5My0xLjU0Ni4xMDhIMTAwLjk0YTE4Ljg1NywxOC44NTcsMCwwLDEtMS45NzEtLjEzMUM5OC44NjEsOTYuOTkzLDk4Ljk2OSw3OS42MzQsOTguOSw2Mi4yOTFaXFxcIiBzdHlsZT1cXFwiZmlsbDojZGJiNTUxXFxcIi8+PHJlY3QgeD1cXFwiMzQuMzg5XFxcIiB5PVxcXCIxNjMuNjgyXFxcIiB3aWR0aD1cXFwiNzIuNDE3XFxcIiBoZWlnaHQ9XFxcIjI3Ljg4NVxcXCIgc3R5bGU9XFxcImZpbGw6I2YyZjJmMlxcXCIvPjxwYXRoIGQ9XFxcIk02MS40MjIsMTM3LjA4NWMtLjM4OCwwLS40ODctLjE5NC0uMjkxLS40ODdsMi4wNDEtMi42MjVhMS4zOTMsMS4zOTMsMCwwLDEsMS4wNjktLjQ4N2gzNC43Yy4zODgsMCwuNDg3LjI5MS4yOTEuNTg0TDk3LjU4MiwxMzYuNmExLjQ4MSwxLjQ4MSwwLDAsMS0uOTcyLjU4NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZTMyNjJcXFwiLz48cGF0aCBkPVxcXCJNNDYuNzQsMTQ2LjAyOGMtLjM4OCwwLS40ODctLjE5NC0uMjkxLS40ODdsMi4wNDEtMi42MjVhMS4zOTMsMS4zOTMsMCwwLDEsMS4wNjktLjQ4N0g5My44OWEuNDQ3LjQ0NywwLDAsMSwuNDg3LjU4NGwtLjc3OCwyLjMzM2EuODUuODUsMCwwLDEtLjg3NS41ODRaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2UzMjYyXFxcIi8+PHBhdGggZD1cXFwiTTcwLjI2NCwxNTQuOTcxYy0uMzg4LDAtLjQ4Ny0uMjkxLS4yOTEtLjU4NGwxLjM1Ny0yLjQzYTEuMjg5LDEuMjg5LDAsMCwxLC45NzItLjU4NEg5MS43NDdjLjM4OCwwLC41ODQuMjkxLjU4NC42ODFsLS4xOTQsMi4zMzNhLjczMS43MzEsMCwwLDEtLjY4MS42ODFaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2UzMjYyXFxcIi8+PHBhdGggZD1cXFwiTTE3MS4xNjMsMTM1LjMzNWMtNi4xMjQsMS41NTYtMTAuMywyLjcyMi0xNi4zMyw0LjI4LTEuNDYyLjM4OC0xLjU1Ni40ODctMi44MTktLjk3MmExMy4wMTEsMTMuMDExLDAsMCwwLTQuNTY5LTMuNjk0Yy02LjEyNC0zLjAxMy0xMi4wNTQtMi4xMzgtMTcuNTk0LDEuNDYyYTIwLjY3MSwyMC42NzEsMCwwLDAtOS45MTgsMTguNDY5LDE1LjI0MiwxNS4yNDIsMCwwLDAsMTMuMTIzLDE1LjI2MWM2LjYxLjg3NSwxMi4xNTEtMS40NjIsMTYuNTI1LTYuNDE1Ljg3NS0xLjA2OSwxLjY1My0yLjIzNiwyLjYyNS0zLjZIMTMzLjQ0NmMtMi4wNDEsMC0yLjUyOC0xLjI2My0xLjg0Ny0yLjkxNiwxLjI2My0zLjAxMywzLjYtOC4wNjgsNC45NTgtMTAuNmEyLjYyNSwyLjYyNSwwLDAsMSwyLjQzLTEuNTU2aDM1LjM4NGMtLjE5NCwyLjYyNS0uMTk0LDUuMjQ5LS41ODQsNy44NzRhNDEuNDU2LDQxLjQ1NiwwLDAsMS03Ljk2NywxOS4wNDJjLTYuOTk1LDkuMjM0LTE2LjEzNiwxNC45Ny0yNy43LDE2LjUyNS05LjUyNiwxLjI2My0xOC4zNzQtLjU4NC0yNi4xNDgtNi40MTVBMzAuNTMzLDMwLjUzMywwLDAsMSw5OS42MjUsMTYwLjUxYy0xLjI2My0xMC42LDEuODQ3LTIwLjEyMiw4LjI2Mi0yOC40ODFBNDMuMTM3LDQzLjEzNywwLDAsMSwxMzUuMSwxMTUuMjEyYzkuMTM3LTEuNjUzLDE3Ljg4Ni0uNTg0LDI1Ljc2LDQuNzYzQTMwLjQ3MSwzMC40NzEsMCwwLDEsMTcyLjE0LDEzMy42OEMxNzIuNzE5LDEzNC41NTgsMTcyLjMzLDEzNS4wNDQsMTcxLjE2MywxMzUuMzM1WlxcXCIgc3R5bGU9XFxcImZpbGw6I2NlMzI2MlxcXCIvPjxwYXRoIGQ9XFxcIk0yMDMuMzM4LDE4OS4wOWMtOC44NDYtLjE5NC0xNi45MTMtMi43MjItMjMuNzE5LTguNTU0YTMwLjQ4NSwzMC40ODUsMCwwLDEtMTAuNS0xOC43NjFjLTEuNzUtMTAuOTg0LDEuMjYzLTIwLjcsNy44NzQtMjkuMzU2LDcuMS05LjMzMSwxNS42NTEtMTQuMTkyLDI3LjIxOC0xNi4yMzMsOS45MTgtMS43NSwxOS4yNDctLjc3OCwyNy43LDQuOTU4LDcuNjgsNS4yNDksMTIuNDQyLDEyLjM0NSwxMy43MDYsMjEuNjc2LDEuNjUzLDEzLjEyMy0yLjEzOCwyMy44MTYtMTEuMTc5LDMyLjk1M2E0NC41NDIsNDQuNTQyLDAsMCwxLTIzLjMyOSwxMi40NDJDMjA4LjQ5LDE4OC43LDIwNS44NjYsMTg4LjgsMjAzLjMzOCwxODkuMDlabTIzLjEzNS0zOS4yNzFhMjcuOTc4LDI3Ljk3OCwwLDAsMC0uMjkxLTMuMjA4LDE2LjAxMywxNi4wMTMsMCwwLDAtMTguMzc1LTEzLjIzNXEtLjczNC4xMTktMS40NTQuMzA2Yy05LjA0LDIuMDQxLTE0Ljg3Myw3Ljc3Ny0xNy4wMTEsMTYuOTEzYTE2LjAwOSwxNi4wMDksMCwwLDAsOC45NDMsMTguMzc0LDE3LjgyLDE3LjgyLDAsMCwwLDE1Ljg0NS0uNTg0YzcuNjc5LTMuOTg1LDExLjg1OS0xMC4yMDYsMTIuMzQ4LTE4LjU2NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZTMyNjJcXFwiLz48L3N2Zz5cIixcblx0fSxcblx0XCJHb1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMGFjZDdcIixcblx0XHRpY29uOiBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjU0LjUgMjI1XFxcIj48dGl0bGU+ZmlsZV90eXBlX2dvPC90aXRsZT48cGF0aCBkPVxcXCJNLTQ2LjkyNiw4OWMtLjYyMSwwLS43NzctLjMxMS0uNDY2LS43NzdsMy4yNjItNC4xOTRhMi4yMjUsMi4yMjUsMCwwLDEsMS43MDgtLjc3N0gxMy4wMjZjLjYyMSwwLC43NzcuNDY2LjQ2Ni45MzJsLTIuNjQsNC4wMzhhMi4zNjcsMi4zNjcsMCwwLDEtMS41NTMuOTMyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwYWNkN1xcXCIvPjxwYXRoIGQ9XFxcIk0tNzAuMzc5LDEwMy4yODVjLS42MjEsMC0uNzc3LS4zMTEtLjQ2Ni0uNzc3bDMuMjYyLTQuMTk0YTIuMjI1LDIuMjI1LDAsMCwxLDEuNzA4LS43NzdINC45NWEuNzE0LjcxNCwwLDAsMSwuNzc3LjkzMkw0LjQ4NCwxMDIuMmExLjM1OCwxLjM1OCwwLDAsMS0xLjQuOTMyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwYWNkN1xcXCIvPjxwYXRoIGQ9XFxcIk0tMzIuNzkyLDExNy41NzRjLS42MjEsMC0uNzc3LS40NjYtLjQ2Ni0uOTMybDIuMTc0LTMuODgzYTIuMDYsMi4wNiwwLDAsMSwxLjU1My0uOTMySDEuNTMzYy42MjEsMCwuOTMyLjQ2Ni45MzIsMS4wODdsLS4zMTEsMy43MjhhMS4xNjcsMS4xNjcsMCwwLDEtMS4wODcsMS4wODdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBhY2Q3XFxcIi8+PHBhdGggZD1cXFwiTTEyOC40MjYsODYuMmMtOS43ODUsMi40ODUtMTYuNDY0LDQuMzQ5LTI2LjA5Myw2LjgzNC0yLjMzLjYyMS0yLjQ4NS43NzctNC41LTEuNTUzLTIuMzMtMi42NC00LjAzOC00LjM0OS03LjMtNS45LTkuNzg1LTQuODE1LTE5LjI1OS0zLjQxNy0yOC4xMTIsMi4zMy0xMC41NjEsNi44MzQtMTYsMTYuOTI5LTE1Ljg0MiwyOS41MS4xNTUsMTIuNDI1LDguNywyMi42NzYsMjAuOTY4LDI0LjM4NSwxMC41NjEsMS40LDE5LjQxNC0yLjMzLDI2LjQtMTAuMjUxLDEuNC0xLjcwOCwyLjY0LTMuNTcyLDQuMTk0LTUuNzQ3SDY4LjE2M2MtMy4yNjIsMC00LjAzOC0yLjAxOS0yLjk1MS00LjY1OSwyLjAxOS00LjgxNSw1Ljc0Ny0xMi44OTEsNy45MjEtMTYuOTI5YTQuMTk0LDQuMTk0LDAsMCwxLDMuODgzLTIuNDg1aDU2LjUzNWMtLjMxMSw0LjE5NC0uMzExLDguMzg3LS45MzIsMTIuNTgxYTY2LjIzOSw2Ni4yMzksMCwwLDEtMTIuNzM2LDMwLjQ0MkMxMDguNywxNTkuNTEsOTQuMSwxNjguNjczLDc1LjYxOCwxNzEuMTU4Yy0xNS4yMjEsMi4wMTktMjkuMzU1LS45MzItNDEuNzgtMTAuMjUxYTQ4Ljc4NSw0OC43ODUsMCwwLDEtMTkuNzI1LTM0LjQ4Yy0yLjAxOS0xNi45MjksMi45NTEtMzIuMTUsMTMuMi00NS41MDhDMzguMzQyLDY2LjQ3NSw1Mi45NDIsNTcuMzEyLDcwLjgsNTQuMDVjMTQuNi0yLjY0LDI4LjU3OC0uOTMyLDQxLjE1OSw3LjYxYTQ4LjY4Niw0OC42ODYsMCwwLDEsMTguMDE3LDIxLjlDMTMwLjkxMSw4NC45NTgsMTMwLjI4OSw4NS43MzUsMTI4LjQyNiw4Ni4yWlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwYWNkN1xcXCIvPjxwYXRoIGQ9XFxcIk0xNzkuODM1LDE3Mi4wOWMtMTQuMTM0LS4zMTEtMjcuMDI1LTQuMzQ5LTM3LjktMTMuNjY4YTQ4LjcxMSw0OC43MTEsMCwwLDEtMTYuNzc0LTI5Ljk3NmMtMi44LTE3LjU1MSwyLjAxOS0zMy4wODIsMTIuNTgxLTQ2LjkwNSwxMS4zMzgtMTQuOTEsMjUuMDA2LTIyLjY3Niw0My40ODgtMjUuOTM4LDE1Ljg0Mi0yLjgsMzAuNzUzLTEuMjQzLDQ0LjI2NSw3LjkyMSwxMi4yNyw4LjM4NywxOS44OCwxOS43MjUsMjEuOSwzNC42MzUsMi42NCwyMC45NjgtMy40MTcsMzguMDUyLTE3Ljg2MSw1Mi42NTJhNzEuMTcsNzEuMTcsMCwwLDEtMzcuMjc2LDE5Ljg4QzE4OC4wNjcsMTcxLjQ2OSwxODMuODc0LDE3MS42MjQsMTc5LjgzNSwxNzIuMDlaTTIxNi44LDEwOS4zNDNhNDQuNyw0NC43LDAsMCwwLS40NjYtNS4xMjVjLTIuOC0xNS4zNzYtMTYuOTI5LTI0LjA3NC0zMS42ODQtMjAuNjU3LTE0LjQ0NCwzLjI2Mi0yMy43NjMsMTIuNDI1LTI3LjE4LDI3LjAyNWEyNS41NzksMjUuNTc5LDAsMCwwLDE0LjI4OSwyOS4zNTVjOC41NDIsMy43MjgsMTcuMDg1LDMuMjYyLDI1LjMxNy0uOTMyQzIwOS4zNDUsMTMyLjY0LDIxNi4wMjQsMTIyLjcsMjE2LjgsMTA5LjM0M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGFjZDdcXFwiLz48L3N2Zz5cIixcblx0fSxcblx0XCJHcmFkbGVcIjoge1xuXHRcdGNvbG91cjogXCIjMDA2NTMzXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTMuNSw2Ljk2NWg3LjkyM2w0LDYuODg3SDI5Ljk4QTE0LjEsMTQuMSwwLDAsMCwxMS4wMjQsMi45MzJMMTMuNSw2Ljk2NVxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNjUzM1xcXCIvPjxwYXRoIGQ9XFxcIk0yNS42MjgsMThsLTQuMjA5LDcuMjUySDEwLjgwNkw1LjUsMTYuMTA4LDkuNzM5LDguOCw3LjQsNC45ODFBMTQuMDMsMTQuMDMsMCwxLDAsMzAsMThIMjUuNjI4XFxcIiBzdHlsZT1cXFwiZmlsbDojODJiODE2XFxcIi8+PHBhdGggZD1cXFwiTTIxLjA2MSwxNS45NjNhNS4wMjYsNS4wMjYsMCwxLDEtNS4wMjYtNSw1LjAxMyw1LjAxMywwLDAsMSw1LjAyNiw1XFxcIiBzdHlsZT1cXFwiZmlsbDojMDA2NTMyXFxcIi8+XCIsXG5cdH0sXG5cdFwiR3JhcGhRTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNlMTAwOThcIixcblx0XHRpY29uOiBcIjxyZWN0IHg9XFxcIi0wLjQzXFxcIiB5PVxcXCIxMi41MzRcXFwiIHdpZHRoPVxcXCIyMi45MDFcXFwiIGhlaWdodD1cXFwiMS4xODdcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC01Ljg1OCAxNi4xMDcpIHJvdGF0ZSgtNTkuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2UxMDA5OFxcXCIvPjxyZWN0IHg9XFxcIjQuNTQ1XFxcIiB5PVxcXCIyMS4xNjJcXFwiIHdpZHRoPVxcXCIyMi45MDJcXFwiIGhlaWdodD1cXFwiMS4xODdcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cmVjdCB4PVxcXCIxMC40M1xcXCIgeT1cXFwiMTguMDA4XFxcIiB3aWR0aD1cXFwiMS4xODdcXFwiIGhlaWdodD1cXFwiMTMuMjI3XFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMTUuODEyIDIxLjg1Nykgcm90YXRlKC01OS45OTkpXFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHJlY3QgeD1cXFwiMjAuMzgxXFxcIiB5PVxcXCIwLjc3MVxcXCIgd2lkdGg9XFxcIjEuMTg3XFxcIiBoZWlnaHQ9XFxcIjEzLjIyN1xcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoNC4wOTIgMjEuODU2KSByb3RhdGUoLTU5Ljk5OSlcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cmVjdCB4PVxcXCI0LjQxMlxcXCIgeT1cXFwiNi43ODdcXFwiIHdpZHRoPVxcXCIxMy4yMjdcXFwiIGhlaWdodD1cXFwiMS4xODdcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0yLjIxMyA2LjUwMikgcm90YXRlKC0zMC4wMDEpXFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHJlY3QgeD1cXFwiMjAuMzg5XFxcIiB5PVxcXCIxLjY3N1xcXCIgd2lkdGg9XFxcIjEuMTg3XFxcIiBoZWlnaHQ9XFxcIjIyLjkwMVxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTMuNzUzIDEyLjI1KSByb3RhdGUoLTMwLjAwMSlcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cmVjdCB4PVxcXCI1LjQ1NFxcXCIgeT1cXFwiOS4zODZcXFwiIHdpZHRoPVxcXCIxLjE4N1xcXCIgaGVpZ2h0PVxcXCIxMy4yMjhcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cmVjdCB4PVxcXCIyNS4zNlxcXCIgeT1cXFwiOS4zODZcXFwiIHdpZHRoPVxcXCIxLjE4N1xcXCIgaGVpZ2h0PVxcXCIxMy4yMjhcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cmVjdCB4PVxcXCIxNS4yMjJcXFwiIHk9XFxcIjI0LjA5N1xcXCIgd2lkdGg9XFxcIjExLjUwNFxcXCIgaGVpZ2h0PVxcXCIxLjAzN1xcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTkuNDk4IDEzLjc4NSkgcm90YXRlKC0zMC4wMDEpXFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHBhdGggZD1cXFwiTTI4LjEyLDIzYTIuNSwyLjUsMCwxLDEtLjkxNS0zLjQxMUEyLjUsMi41LDAsMCwxLDI4LjEyLDIzXFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHBhdGggZD1cXFwiTTguMiwxMS41YTIuNSwyLjUsMCwxLDEtLjkxNS0zLjQxMUEyLjUsMi41LDAsMCwxLDguMiwxMS41XFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHBhdGggZD1cXFwiTTMuODgsMjNhMi41LDIuNSwwLDEsMSwzLjQxMS45MTVBMi41LDIuNSwwLDAsMSwzLjg4LDIzXFxcIiBzdHlsZT1cXFwiZmlsbDojZTEwMDk4XFxcIi8+PHBhdGggZD1cXFwiTTIzLjgsMTEuNWEyLjUsMi41LDAsMSwxLDMuNDExLjkxNUEyLjUsMi41LDAsMCwxLDIzLjgsMTEuNVxcXCIgc3R5bGU9XFxcImZpbGw6I2UxMDA5OFxcXCIvPjxwYXRoIGQ9XFxcIk0xNiwzMGEyLjUsMi41LDAsMSwxLDIuNS0yLjVBMi40OTMsMi40OTMsMCwwLDEsMTYsMzBcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz48cGF0aCBkPVxcXCJNMTYsNi45OTFhMi41LDIuNSwwLDEsMSwyLjUtMi41LDIuNDkzLDIuNDkzLDAsMCwxLTIuNSwyLjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNlMTAwOThcXFwiLz5cIixcblx0fSxcblx0XCJHcm9vdnlcIjoge1xuXHRcdGNvbG91cjogXCIjNjM5OGFhXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNNy40NTMsMjkuODY1YzAtLjA3NC40OTQtMS43MTcsMS4xLTMuNjUxQTIxLjgwOCwyMS44MDgsMCwwLDAsOS41LDIyLjZjLS4wNzktLjA1Ni0uMzUuMDQ1LS42LjIyNC0uNzY0LjUzOC0uOTIuNC0xLjQ5MS0xLjM1Ni0uNjE3LTEuOS0uNjM5LTIuMDkxLS4zMTctMi44MS4yMS0uNDcuMi0uNTc5LS4xNDctMS4yNzdhMy43NSwzLjc1LDAsMCwxLS4zNzctMS4wNDRjMC0uMjYtMS40MTMtMS40MzgtMy42NDctMy4wNEEzLjg0NSwzLjg0NSwwLDAsMSwyLDEyLjVhMTAuNDc3LDEwLjQ3NywwLDAsMSwyLjM3OC0uMDM5bDIuMzc4LjEuMjMyLS43NDFjLjk4MS0zLjEzLDIuNDYzLTUuOTU3LDMuMTIyLTUuOTU3LjEzNywwLC40MTYuMjY1LjYxOS41ODguMzMxLjUyNy4zNzYuODUzLjQzNSwzLjEyNmEyMy4wMTMsMjMuMDEzLDAsMCwwLC4xNjUsMi43MzljLjA1NS4xMS4yMjgtLjAzNS4zODUtLjMyMi4yLS4zNjcuNDEyLS40NjcuNzEtLjMzNXMuNDg1LjA0My42NDYtLjM0NWMuMjQyLS41ODIsMS40NTUtNC41MTMsMS40NTUtNC43MTcsMC0uMDY5LjI0LS45LjUzNC0xLjg0NnMuNjMxLTIuMDM2Ljc1MS0yLjQyNGMuMjEzLS42ODguMjQ2LS42MDcsMS41MjQsMy43MjYsMS4zMiw0LjQ3NCwyLjAzLDYuMTI0LDIuMzg1LDUuNTQ0LjI0OC0uNCwxLjU1LS40MjgsMS45MTQtLjAzNC4yMDcuMjI0LjMzOC4yMjEuNDUzLS4wMS4yMzctLjQ4LjgtLjQuOTUzLjE0LjExNy40MjMuMTQ3LjQyMy4zMiwwYS44MTIuODEyLDAsMCwxLC42OTItLjQ2NmMuMzg5LDAsLjUzOC4xNjQuNjY2LjczNWwuMTY1LjczNSwyLjU1OC0uMTgzQTExLjUyMSwxMS41MjEsMCwwLDEsMzAsMTIuNDY4YTIwLjc5LDIwLjc5LDAsMCwxLTIuMzIxLDEuODg5Yy0xLjI3Ny45Ni0yLjM0MiwxLjc3NS0yLjM2OCwxLjgxYTE3LjYwNywxNy42MDcsMCwwLDAsLjEyOCwxLjg2NywxMS4wNzUsMTEuMDc1LDAsMCwxLS41NDQsNS43MTMsNC4zMDgsNC4zMDgsMCwwLDEtMS4wMjEsMS40OWMtLjI3OC4xODYtLjUwNi40LS41MDYuNDg2cy4zLDEuMDc3LjY2LDIuMjEyQTkuNjgyLDkuNjgyLDAsMCwxLDI0LjU2OCwzMGMtLjEwOSwwLTIuNzU3LTIuMDctNi44NzYtNS4zNzNhMTEuMTQzLDExLjE0MywwLDAsMC0xLjY0My0xLjE4NGMtLjE3MSwwLTEuNjQ5LDEuMTMzLTUuOTg0LDQuNTg4LTIuNTE0LDItMi42MTIsMi4wNzMtMi42MTIsMS44MzVabTUuMTU4LTQuNzI3YzEuMzM3LTEuMDUxLDIuNjY0LTIuMDc4LDIuOTQ3LTIuMjgyLjQ4OC0uMzUxLjY1MS0uMjYzLDMuMDIxLDEuNjMxLDEuMzc4LDEuMSwyLjczNywyLjE3NCwzLjAyMSwyLjM4NHMuODY4LjY2NiwxLjMsMS4wMTNjLjQ5MS40Ljc0Mi40OTIuNjc0LjI1Ni0uNzctMi42MzQtLjc5My0yLjY3OC0xLjMyNy0yLjQ3Ni0uNjQ0LjI0NC0xLjA0My0uMDA2LTEuMjQ5LS43ODNhMS43MzksMS43MzksMCwwLDEsLjI0LTEuNDUxLDIuMzc3LDIuMzc3LDAsMCwwLS4yMjEtMi43MzEsNC4yODksNC4yODksMCwwLDEtLjY4Ni0xLjUzbC0uMjQxLTEuMDIzLS41MTcuNzFjLS42MzYuODczLTEuNDExLjkxOC0yLjA1OS4xMTlsLS40NzctLjU4OC0uNTU0Ljc2MmMtLjU1NS43NjMtMS4xOTQuODYyLTEuODQ0LjI4NC0uMTc5LS4xNTktLjI1OC0uMS0uMjU4LjJhMS4yNCwxLjI0LDAsMCwxLS4zNzUuNzc3Yy0uNjE5LjU3LTEuMjIzLjQxOS0xLjYzMy0uNDA5TDEyLDE5LjI0OWwtLjMuNzc1YTcuMDMyLDcuMDMyLDAsMCwxLS44NTMsMS40NzksMTMuODkxLDEzLjg5MSwwLDAsMC0xLjQ1NSwzLjY2M2MtLjUsMS42MjctLjksMy4wNDItLjksMy4xNDNzLjM4MS0uMTQxLjg0Ny0uNTM4LDEuOTQyLTEuNTgyLDMuMjc5LTIuNjMzWm0xMS4zNDMtMS4xMzFjMS4wMTUtMS4xNTQsMS4yNS0zLjI4OC44LTcuMjcxLS4zNzUtMy4zMjktLjU2Mi00LjQxOS0uNzg0LTQuNTY1LS4xNTQtLjEtLjE3Ny4wMS0uMDkxLjQyNi41NjIsMi43LjU5Myw0LjA1My4xLDQuNDM0LS4zMzcuMjYyLS42OTUtLjcxOS0uOTc2LTIuNjc1LS4yMTgtMS41MTUtLjQ0NS0yLjItLjYxNy0xLjg1YTMuMzU5LDMuMzU5LDAsMCwwLC4xNiwxLjA3LDI2LjcxOCwyNi43MTgsMCwwLDEsLjM5NCwzLjM4MSwyMS43NTcsMjEuNzU3LDAsMCwwLC4zNzUsMy4xNTFjLjMwOS45ODUuOC43NDcsMS4xMTgtLjU0cy4zNS0uNDI1LjA0NCwxLjA1NWMtLjMxNywxLjUzNi0xLjI2LDItMi4zNTIsMS4xNS0uMTc1LS4xMzYtLjIzNCwwLS4yMzQuNTU1YTQuOTg4LDQuOTg4LDAsMCwxLS4zLDEuNWwtLjMuNzY1LjQwOC4xMzlBMi4yNDcsMi4yNDcsMCwwLDAsMjMuOTU0LDI0LjAwN1pNOS4zNDYsMjEuNDY4YzIuMTE4LTEuMjMyLDIuNS0yLjY2OCwxLjc5My02LjgwNWEyMS45NDEsMjEuOTQxLDAsMCwxLS4zLTIuM2MwLTEuMDI5LS4yNTYtLjU1NC0uNDQ4LjgzMi0uMjU0LDEuODMyLTEuMDE2LDMuMzg5LTEuNjU3LDMuMzgzLS41NTctLjAwNS0uNzM4LS4yMS0uOTY4LTEuMDk0LS40MTMtMS41ODUuMDM3LTQuMDE4LDEuMTg0LTYuNDA2Ljg0LTEuNzQ5LDEuMy0xLjkwOCwxLjMtLjQ0OCwwLDIuMjc2LS43NzYsNS42MjUtMS4xODQsNS4xMTVhMy44MTQsMy44MTQsMCwwLDEsLjA2NS0yLjJjLjItLjcyLjE1Ny0xLjgxOC0uMDY2LTEuODE4LS4yNTksMC0uNzczLDEuOTEtLjg0MSwzLjEyNy0uMDYsMS4wNzYtLjAyMiwxLjMzOC4yMzEsMS42MTIuODg4Ljk2MiwyLjA1Mi0xLjk3MywyLjExMS01LjMyMy4wMzEtMS43NTktLjEzOC0yLjI1NC0uNjc0LTEuOTgyLS43ODEuNC0yLjg4Myw1Ljg4My0yLjg4Myw3LjUyMywwLDEuMjgzLjMxOSwyLjE4Ni44OCwyLjQ5MS45NTQuNTE5LDEuODc2LS40LDIuNTI5LTIuNTMxbC4yNzUtLjg5NFYxNC45N2MwLDEuNzU5LS41NjcsMi42ODYtMi4zNTcsMy44NTJhOC44OTMsOC44OTMsMCwwLDAtLjg1Mi42LDkuNzU4LDkuNzU4LDAsMCwwLC44OTIsMi41MzQsNS4yODMsNS4yODMsMCwwLDAsLjk2OS0uNDg0Wm0xMi43NjQtMi4xODRjLjIxMy0uNDc1LjI1LS45OTIuMi0yLjgxNy0uMDUtMS45ODYtLjEtMi4zMzctLjQ4Ni0zLjE0NC0uNjkxLTEuNDU4LTEuNTQ0LTEuMDg2LTEuMDQ1LjQ1NS4yNjUuODIuNTg5LjY4LjQ3NS0uMjA1LS4wOTEtLjcuMDc5LS43MjMuMzc1LS4wNDEuNTU2LDEuMjgxLjQxNiwzLjA1NS0uMjQyLDMuMDU1LS40NSwwLS41OS0uMzktLjg4My0yLjQ1OWE2Ljc1Miw2Ljc1MiwwLDAsMC0uMzYyLTEuNzE0Yy0uMjE3LDAtLjMxNC4zODgtLjE3OS43MThhMjguMjMsMjguMjMsMCwwLDEsLjQ1MiwyLjg1OWMuNDQxLDMuNTA3LDEuMDU3LDQuNzA3LDEuNjksMy4yOTNabS04LjM4LjA1NmEzLjM4NSwzLjM4NSwwLDAsMCwuMDk1LTEuMzNjLS4wNi0xLjAwOC0uMDk0LTEuMDgxLS4zNjQtLjc5LS4zODcuNDE5LS44LS4zNzUtLjk0NC0xLjgtLjEwNy0xLjA4Mi0uMTQtMS4wNjEuNjQtLjQxNS4xLjA4MS4zNDYtLjE5NC41NTMtLjYxMS4zNzctLjc2My41LTEuNjguMjI4LTEuNjgtLjA4MSwwLS4xNDcuMTM0LS4xNDcuMywwLC40MjktLjQuMzY4LS40OTQtLjA3NS0uMDUzLS4yNTgtLjE2Ni0uMTY3LS4zNjcuMy0uMTYuMzY5LS4zNTYuNjcxLS40MzQuNjcxcy0uMTg1LS4zLS4yMzctLjY3MWMtLjA5LS42NDYtLjEtLjY1LS4zLS4xMTNhLjk1MS45NTEsMCwwLDAtLjAxLjk2NCwxOC44MTgsMTguODE4LDAsMCwxLC41MjEsMy43OTFjMCwxLjE3NC44LDIuMSwxLjI2NywxLjQ2M1ptMi42ODgtMS41NTZhNy4wNTUsNy4wNTUsMCwwLDAsLjQxNi00LjI1OWMtLjIzNi0xLjE0MS0uNjQ1LTEuNTY4LTEuMjIyLTEuMjc1LS40MjkuMjE4LTEuMDgyLDIuNzQ2LTEuMDg0LDQuMiwwLDIuMjYyLDEuMDYsMy4wMTUsMS44OSwxLjMzN1ptLTEuMDA3LTEuNzkyYTMuNzcsMy43NywwLDAsMS0uMjktMS40MTZjMC0uNzQ1LjAyMi0uNzcyLjItLjMuMjIuNTg2LjYxMS42ODguNzYxLjJhMS4wMzUsMS4wMzUsMCwwLDAtLjA2NS0uNjU2Yy0uMjMyLS40NjktLjItMS4xMDcuMDQ5LTEuMTA3LjI4LDAsLjY3MiwxLjE1NC42NzIsMS45ODIsMCwuNjA5LS42MTMsMS44OTMtLjksMS44OTMtLjA3LDAtLjI2LS4yNjgtLjQyMi0uNlpNMTkuMzQ4LDE3LjdhNi40NDcsNi40NDcsMCwwLDAtLjE0MS00LjkxOGMtLjM1OC0uNzczLTEuMTUzLS45MDYtMS40NzktLjI0OGExMS42MDcsMTEuNjA3LDAsMCwwLS40ODksMy44OTVDMTcuNDc3LDE4LjM0OCwxOC43MTYsMTkuMSwxOS4zNDgsMTcuN1pNMTguMSwxNS41MjdhMi40OTIsMi40OTIsMCwwLDEtLjMxOC0xLjU2NWMuMDA4LS45MDkuMDMxLS45OTEuMTM1LS40NzIuMTUzLjc2NC40NzMsMS4wNTIuNzUzLjY3OS4xNzQtLjIzMS4xNjYtLjM0MS0uMDUtLjY3Ni0uMjg4LS40NDctLjM0NC0xLjA3OS0uMS0xLjA3OWE1LjAzNyw1LjAzNywwLDAsMSwxLjAxNywyLjI1YzAsLjQ4LS41NjQsMS4zMjctLjg4NCwxLjMyN0MxOC41MjcsMTUuOTkxLDE4LjI3NiwxNS43ODIsMTguMSwxNS41MjdabTguNjYyLTEuMzE4LDEuNTQ3LTEuMTc1LTEuNjU4LS4wMTJjLTEuNDg0LS4wMTEtMS42NTguMDQzLTEuNjU2LjUxYTExLjUzMiwxMS41MzIsMCwwLDAsLjIsMS44NTdjLjAxMSwwLC43MTYtLjUzNCwxLjU2Ny0xLjE4Wk02LjUzNSwxNGwuMTU4LS45NDlMNS4zLDEyLjk1NmMtLjc2NC0uMDUyLTEuMzg5LS4wMTItMS4zODkuMDg4YTE0LjEsMTQuMSwwLDAsMCwyLjQ0NywxLjkzNEM2LjM3MSwxNC45NjEsNi40NDgsMTQuNTIxLDYuNTM1LDE0Wm05LjUyNi0yLjk0MWExLjYyNCwxLjYyNCwwLDAsMSwuODE5LjZjLjE5Mi4zNDkuMjc2LjMyNi41NzMtLjE2My4xOTEtLjMxNS40NC0uNTcyLjU1My0uNTcycy4yLS4wNjYuMi0uMTQ2YzAtLjI3OC0yLjEyMi03LjMwNi0yLjItNy4zcy0yLjI3LDcuMzg2LTIuMzM3LDcuOTI1Yy0uMDI4LjIyNi4wNi4zMDkuMjMxLjIxOS4xNTItLjA4MS4zNjMuMDYzLjQ2OC4zMTkuMTcuNDE1LjI0LjM4Mi42NDQtLjMwNi4zODQtLjY1NC41NDQtLjc0MiwxLjA0OC0uNTc5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzMzM1xcXCIvPjxwYXRoIGQ9XFxcIk0xNC41LDEyLjE3NWEuODUuODUsMCwwLDEtLjExNS0uMi43MzcuNzM3LDAsMCwwLS4xOTQtLjI5LjI4MS4yODEsMCwwLDAtLjMtLjA2MWMtLjA4Ny4wMzUtLjExMS4wMzktLjE1LjAyNC0uMDY1LS4wMjYtLjA4OS0uMTA2LS4wNy0uMjQyLjAyMy0uMTY5LjItLjgyNS41NDgtMi4wNTQuNzExLTIuNSwxLjY2Ni01LjY0NiwxLjc3Mi01LjgzOS4wMTItLjAyMS4wMTItLjAyMS4wMjQsMCwuMDYzLjExNC40MzIsMS4yNjYuOTM3LDIuOTIyLjY4MiwyLjI0LDEuMjUsNC4yMSwxLjI1LDQuMzM5LDAsLjA3OS0uMDYuMTI3LS4xODYuMTQ3LS4xNTcuMDI2LS4zMzkuMjEyLS41ODcuNmExLjY3NCwxLjY3NCwwLDAsMS0uMjI2LjMxYy0uMDQ4LjA0Ni0uMDUyLjA0OC0uMS4wNDhzLS4wNTYsMC0uMS0uMDQzYS45NTguOTU4LDAsMCwxLS4xLS4xNDQsMS4yNjgsMS4yNjgsMCwwLDAtLjQxNC0uNDIyLDEuNTI1LDEuNTI1LDAsMCwwLS43MzgtLjI4MS40MzQuNDM0LDAsMCwwLS40LjE1NiwyLjcxOCwyLjcxOCwwLDAsMC0uNDE2LjZjLS4yNTcuNDI1LS4zNDguNTEzLS40NDEuNDI2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzYzOThhYVxcXCIvPjxwYXRoIGQ9XFxcIk02LjI1MiwxNC45MjhhMTkuMDU1LDE5LjA1NSwwLDAsMS0yLjMtMS44MzhjLS4wMzEtLjAzOC0uMDM0LS4wNDQtLjAyNS0uMDU3YTIuNywyLjcsMCwwLDEsMS4xNC0uMDg1Yy4yMy4wMTIsMS42MTkuMSwxLjYyMS4xMDhzLS4zLDEuNzc5LS4zMjEsMS44ODFDNi4zNTcsMTQuOTgxLDYuMzM3LDE0Ljk3OSw2LjI1MiwxNC45MjhaXFxcIiBzdHlsZT1cXFwiZmlsbDojNjM5OGFhXFxcIi8+PHBhdGggZD1cXFwiTTI1LjE3NywxNS4zNUExNC4yMzksMTQuMjM5LDAsMCwxLDI1LDEzLjU2YS41NTMuNTUzLDAsMCwxLC4wNDQtLjI5Yy4wODEtLjE1MS4yNDUtLjIwNS43LS4yMy4yMjgtLjAxMywxLjI4MS0uMDE1LDIuMDI1LDBsLjUyMS4wMDhMMjcuMDI5LDE0Yy0xLjE0NC44NjctMS44MSwxLjM2OS0xLjgzNCwxLjM4Mi0uMDA2LDAtLjAxMi0uMDA2LS4wMTgtLjAyN2gwWlxcXCIgc3R5bGU9XFxcImZpbGw6IzYzOThhYVxcXCIvPjxwYXRoIGQ9XFxcIk04LjUwNiwyOC4yODFjMC0uMDcxLjE0OS0uNi41MjctMS44NzguOTA1LTMuMDU3LDEuMzE5LTQuMTY1LDEuODI3LTQuODkyYTcuNjY0LDcuNjY0LDAsMCwwLC45NjktMS43OTJMMTIsMTkuMjkybC4yMjUuNDQ4Yy4zOTQuNzg0LjYzMiwxLjAxMSwxLjA2MiwxLjAxNmExLjIzOSwxLjIzOSwwLDAsMCwxLjEtMS4xMzdjMC0uMTI0LjA0NC0uMjUxLjA4Ni0uMjUxYTEuMTE5LDEuMTE5LDAsMCwxLC4yMjYuMTQsMS4yNzEsMS4yNzEsMCwwLDAsLjY2Ni4zLjg3OS44NzksMCwwLDAsLjYwOS0uMTQ4LDIuNDcsMi40NywwLDAsMCwuNzExLS43NjRjLjE4Ny0uMjUyLjM0Ny0uNDU5LjM1NC0uNDU5cy4xNDMuMTU5LjMuMzUyYTUuMDkxLDUuMDkxLDAsMCwwLC40MjIuNDY3LDEuMDQ5LDEuMDQ5LDAsMCwwLDEuNTQ5LS4wOCw2LjExMSw2LjExMSwwLDAsMCwuNDY3LS41NzJjLjE2OC0uMjI4LjMwNy0uNDEuMzEtLjRzLjA2Ni4yNjkuMTQxLjU4NC4xNjkuNjcuMjA5Ljc4OWEzLjgyNiwzLjgyNiwwLDAsMCwuNjQyLDEuMjM0LDIuMTcsMi4xNywwLDAsMSwuNDY2LDEuMjQ2LDMuMDUxLDMuMDUxLDAsMCwxLS4zNTIsMS40NDcsMi4wNywyLjA3LDAsMCwwLS4yNjcuOTM0LDIuMDE3LDIuMDE3LDAsMCwwLC4yMTMuODUxLjc3My43NzMsMCwwLDAsMS4wNjkuNDEzLDEuMzUxLDEuMzUxLDAsMCwxLC4zMTYtLjA2OGMuMiwwLC4zMTUuMTkzLjU0Mi44ODEuMTU3LjQ3NC41LDEuNjM3LjUsMS42OTUsMCwuMDMtLjAxNi4wNTEtLjAzOS4wNTFhMS40ODYsMS40ODYsMCwwLDEtLjQwNy0uMjI0Yy0uMi0uMTQ0LTIuNjEyLTIuMDI5LTMuNDA4LTIuNjYzLTIuMTI4LTEuNjkzLTIuODI4LTIuMjMzLTMuMTcxLTIuNDQ2LS4zNy0uMjMtLjYyMi0uMjg1LS44MjctLjE3Ny0uMjU0LjEzMy0zLjcyNiwyLjg0Ny01Ljc1MSw0LjVBMTAuODQ2LDEwLjg0NiwwLDAsMSw4LjY1LDI4LjI1MWMtLjE0OS4wODMtLjE0My4wODEtLjE0My4wM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM2Mzk4YWFcXFwiLz5cIixcblx0fSxcblx0XCJIYW1sXCI6IHtcblx0XHRjb2xvdXI6IFwiI2VjZGZhN1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE1LjMxMSwxNi4wNDMsMTMuNCwyOS43MjZhNi4zMjIsNi4zMjIsMCwwLDEtNS45NTYtMS4yNWwzLjEtMTMuMjY2TDQuNjksMy4zNGE4LjAzMSw4LjAzMSwwLDAsMSwzLjc5LS42NDZsNS4xNDQsOS43LDguOTE0LTcuNTgxczMsMS4wNDEsMy4yNywyLjA0MWwtMTAuNSw5LjE4NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlY2RmYTdcXFwiLz48cGF0aCBkPVxcXCJNMjcuMDE2LDE3LjQxMWE0LjI0NCw0LjI0NCwwLDAsMC0uNTQxLS44MTIsNS43LDUuNywwLDAsMC0xLjQ1OC0xLjE4Nyw3LjMzMSw3LjMzMSwwLDAsMC0xLjY4Ny0uNzkxbC0uMjI5LS4wNjItLjE4Ny0uMDYyYy0uMTI1LS4wNDItLjIyOS0uMS0uMzMzLS4xNDZhMS4yODIsMS4yODIsMCwwLDEtLjQ1OC0uNDE3QTEuNzU0LDEuNzU0LDAsMCwxLDIyLDEyLjY0MmEyLjUxOCwyLjUxOCwwLDAsMSwuMS0uMzc1Yy4wNDItLjEyNS4wODMtLjI1LjEyNS0uNGEyLjY5MSwyLjY5MSwwLDAsMCwuMDYyLS42bC4xLS4wODMsMS4yNS0xLjA0MWMuMjI5LS4xODcuNDU4LS40LjY4Ny0uNTgzYTIuMiwyLjIsMCwwLDEsLjIyOS4xNDZzLjY0Ni4wNjIsMS0uOTE2bC0uMTg3LS4xMjUuMTI1LS4xLjMxMi0uMjcxYS42MTMuNjEzLDAsMCwwLC4yMjktLjM3NS41MjkuNTI5LDAsMCwwLS40MTcuMTI1bC0uMzMzLjI1LS4yMjkuMTY3TDIyLjE4NCw2LjQ3OGMuMTQ2LS4xMjUuMjcxLS4yMjkuNDE3LS4zNTRsLjYtLjU0MS4wNjItLjA2MmMuMDYyLjA0Mi4xLjA4My4xNjcuMTI1LjE0Ni4xLjMxMi4yMDguNDU4LjI5MmwuOTE2LjVjLjI5Mi4xNjcuNi4zMzMuOTE2LjQ3OWEzLjMyMywzLjMyMywwLDAsMCwuNDc5LjIwOGMuMDgzLjAyMS4xNjcuMDYyLjI1LjA4My4wNDIsMCwuMS4wMjEuMTQ2LjAyMWguMWEuMTUxLjE1MSwwLDAsMCwuMTI1LS4wODNWNy4xMjNhLjA3Ny4wNzcsMCwwLDEsLjAyMS0uMDYyVjYuOTc3YS4xMDguMTA4LDAsMCwwLS4wNDItLjA4M2MtLjAyMS0uMDQyLS4wNjItLjA4My0uMDgzLS4xMjVhMS41OSwxLjU5LDAsMCwwLS4xODctLjE4N2MtLjEyNS0uMTI1LS4yNzEtLjIyOS0uNC0uMzMzLS4yNzEtLjIwOC0uNTYyLS40LS44NTQtLjU4M2E3LjU0NSw3LjU0NSwwLDAsMC0uOS0uNSwzLjMyMywzLjMyMywwLDAsMC0uNDc5LS4yMDhjLS4wODMtLjAyMS0uMTY3LS4wNjItLjI3MS0uMDgzLS4wNDIsMC0uMS0uMDIxLS4xNjctLjAyMWEuMzEuMzEsMCwwLDAtLjEyNS4wMjEuNTIyLjUyMiwwLDAsMC0uMTY3LjEsMS42LDEuNiwwLDAsMC0uMzc1LjIwOGwtLjYyNS4zNTRjLS4xODcuMTQ2LS40LjMxMi0uNTgzLjQ1OGwtLjIwOC0uMTQ2cy0uODc1LjA4My0uNTgzLjY0NmwuMDgzLjA4M2MtLjgzMy42ODctMS42NDUsMS40LTIuNDU3LDIuMDgzLS44MzMuNzA4LTEuNjQ1LDEuNDE2LTIuNDc4LDIuMTQ1bC0xLjIyOSwxLjA4M2ExLjg3OCwxLjg3OCwwLDAsMS0uMjA4LjE4N2MtLjA0Mi0uMTI1LS4xLS4yMjktLjE0Ni0uMzMzbC0uMjkyLS42MjUtLjU2Mi0xLjI1Yy0uMzc1LS44MzMtLjc1LTEuNjY2LTEuMTQ1LTIuNUwxMS4yMDksNC44OTVsLS4xODctLjM3NWguMjVzLjA4My0uNjg3LS40MTctLjgxMmExLjQsMS40LDAsMCwwLS4yMDguMDIxYy0uMTg3LS4zNzUtLjM1NC0uNzUtLjU0MS0xLjEyNWgwbC0uMDgzLS4zMTJBLjMzLjMzLDAsMCwwLDkuOSwyLjFhLjM1Mi4zNTIsMCwwLDAtLjEtLjA0MmMtLjA2Mi0uMDIxLS4xLS4wMjEtLjE2Ny0uMDQyQTEuMjgxLDEuMjgxLDAsMCwwLDkuMzU1LDJhNC4wNTcsNC4wNTcsMCwwLDAtLjUyMS4wNDIsOC43NjcsOC43NjcsMCwwLDAtMS4wMi4xODdjLS4zMzMuMDgzLS42NjYuMTY3LTEsLjI3MWEzLjI3MiwzLjI3MiwwLDAsMC0uNDc5LjE4N2wtLjI1LjEyNWMtLjA0Mi4wMjEtLjA4My4wNjItLjEyNS4wODNMNS45LDIuOTU4Yy0uMDIxLjAyMS0uMDIxLjA0Mi0uMDQyLjA2MnYuMDYyaDBWMy4xYS4xNjQuMTY0LDAsMCwwLC4xLjEyNWMuMDQyLjAyMS4wNjIuMDQyLjA4My4wNDJhMS4zMjcsMS4zMjcsMCwwLDEsLjE0Ni4wNDIsMS4xODgsMS4xODgsMCwwLDAsLjI3MS4wMjEsNC4zODQsNC4zODQsMCwwLDAsLjUyMS0uMDQyYy4zMzMtLjA0Mi42ODctLjA4MywxLjAyLS4xNDZsMS4wMi0uMTY3Yy4xNjctLjAyMS4zMzMtLjA2Mi41MjEtLjEuMTQ2LjI5Mi4yOTIuNi40MzcuOS0uOTU4LjA4My0yLjQ1Ny4yMDgtMy4zOTUuMzEyLS4xLS4xODctLjE4Ny0uMzU0LS4yOTItLjU0MWEuMTI3LjEyNywwLDAsMC0uMTQ2LS4wNjIuMTA4LjEwOCwwLDAsMC0uMDYyLjE0NmMuMDYyLjE2Ny4xMjUuMzEyLjE4Ny40NzlhMS4xNjcsMS4xNjcsMCwwLDAtLjUuMTI1QTEuODI4LDEuODI4LDAsMCwwLDYuNCw1LjY0NWEzLjU2NywzLjU2NywwLDAsMSwuNDU4LS4xMjVsLjQzNywxLDEuMjUsMi44MzIsMS4yNywyLjgzMmMuNDE3LjkzNy44NTQsMS44NzQsMS4yOTEsMi44MzJoMGEuMDIuMDIsMCwwLDAsLjAyMS4wMjFsLS4xODcuNjI1LS41LDEuNzQ5Yy0uMzEyLDEuMTY2LS42LDIuMzUzLS45LDMuNTJMOS4xMDUsMjIuN2wtLjQxNywxLjc3Yy0uMjkyLDEuMTg3LS41NjIsMi4zNTMtLjksMy41MmEuMTI1LjEyNSwwLDAsMCwuMDIxLjA4MywzLjA3NiwzLjA3NiwwLDAsMCwuNi41NjIsNi4wNDgsNi4wNDgsMCwwLDAsLjY4Ny40MTcsOS40LDkuNCwwLDAsMCwxLjUuNiw2Ljk3Miw2Ljk3MiwwLDAsMCwxLjYyNC4yNzEsMy43MjgsMy43MjgsMCwwLDAsLjgzMy0uMDQyLDYuNTQ3LDYuNTQ3LDAsMCwwLC44MzMtLjE2Ny4yNTQuMjU0LDAsMCwwLC4xNjctLjE4N3YtLjAyMWMuMjI5LTEuMTQ1LjQxNy0yLjMxMi42MjUtMy40NTdsLjU4My0zLjQ3OGMuMTg3LTEuMTY2LjQtMi4zMTIuNTgzLTMuNDc4LjAyMS0uMTI1LjA0Mi0uMjcxLjA2Mi0uNC4wNDIuMDQyLjA2Mi4xLjEuMTQ2YTQuMTM3LDQuMTM3LDAsMCwwLC43MDguNjQ2LDcuMjEyLDcuMjEyLDAsMCwwLDEuNTgzLjgzMywxMS43NzQsMTEuNzc0LDAsMCwwLDEuNjY2LjUsMTAuMTgyLDEwLjE4MiwwLDAsMCwxLjEuMTg3LDIuNjIxLDIuNjIxLDAsMCwwLS4yNSwxLjIwOC4xMTUuMTE1LDAsMCwwLC4wNjIuMWguMDIxYTUuMTY0LDUuMTY0LDAsMCwwLDEuMjcuNDc5LDQuMzMzLDQuMzMzLDAsMCwwLDEuMzc1LjA2MiwyLjYyNywyLjYyNywwLDAsMCwxLjMzMy0uNTYyLDIuODI0LDIuODI0LDAsMCwwLC44MTItMS4xNjZsLjAyMS0uMDIxVjIxLjFsLjA2Mi0uNTYydi0uMDIxYTUuNDI3LDUuNDI3LDAsMCwwLC42MjUtLjQxNywyLjcxLDIuNzEsMCwwLDAsLjY0Ni0uNzI5LDEuODMzLDEuODMzLDAsMCwwLC4yNS0xLDIuNTYzLDIuNTYzLDAsMCwwLS4yOTItLjk1OFptLS40LTEwLjVabS0xLjQ3OS0xLjFhNy4xMiw3LjEyLDAsMCwxLC44MzMuNTQxYy4xMjUuMS4yNzEuMTg3LjQuMzEyYTEuMjU3LDEuMjU3LDAsMCwxLC4xNjcuMTY3bC4wNDIuMDQyaC0uMDQyYy0uMDgzLS4wMjEtLjE0Ni0uMDQyLS4yMjktLjA2Mi0uMTQ2LS4wNjItLjMxMi0uMTI1LS40NTgtLjE4N2E3LjEzMiw3LjEzMiwwLDAsMS0uODc1LS40NzlBNS42MSw1LjYxLDAsMCwxLDI0LjIsNS41MmEyLjUsMi41LDAsMCwxLS4yMjktLjI1bC4zMTIuMTI1YTYuNCw2LjQsMCwwLDEsLjg1NC40MTdabS0xLjQxNi0uOTE2LjAyMS4wMjF2LjA0MmEuMDIuMDIsMCwwLDAtLjAyMS0uMDIxVjQuODk1Wk04Ljg3NiwyLjU2MmE1LjAyMSw1LjAyMSwwLDAsMS0uOTM3LjMzMyw1LjM0Nyw1LjM0NywwLDAsMS0uOTc5LjE2Nyw0LjAxMyw0LjAxMywwLDAsMS0uNS4wMjEuNzgxLjc4MSwwLDAsMS0uMjI5LS4wMjFINi4xNjljLjAyMSwwLC4wMjEtLjAyMS4wNDItLjAyMS4wNjItLjA0Mi4xNDYtLjA2Mi4yMDgtLjEuMTQ2LS4wNjIuMzEyLS4xLjQ1OC0uMTY3LjMxMi0uMDgzLjY0Ni0uMTY3Ljk3OS0uMjI5YTguNCw4LjQsMCwwLDEsLjk3OS0uMTI1QTEuNTc2LDEuNTc2LDAsMCwwLDkuMTQ3LDIuNGExLjUzNiwxLjUzNiwwLDAsMS0uMjcxLjE2N1ptMTQuNDUzLDcuMS0xLjI5MSwxLTEuMjkxLDEuMDJjLS4zNTQuMjkyLS43MDguNTgzLTEuMDYyLjg1NC4wMjEtLjAyMS4wNDItLjA2Mi4wNjItLjA4My4xNjctLjIyOS4zMzMtLjQzNy41LS42NDYuMzU0LS40MTcuNjg3LS44NTQsMS4wNjItMS4yNXMuNzcxLS43OTEsMS4xNjYtMS4xNDVhNC44NzIsNC44NzIsMCwwLDEsLjY0Ni0uNWwuMTg3LS4xMjVjLjE4Ny4xNDYuNC4yOTIuNTgzLjQzNy0uMTY3LjE0Ni0uMzc1LjI5Mi0uNTYyLjQzN1pNOC4wNjQsNy4xbC4xLjFhNS42Myw1LjYzLDAsMCwxLC41ODMuNjQ2LDIuMjEsMi4yMSwwLDAsMSwuMzc1LjcyOS45MjEuOTIxLDAsMCwxLS4wNjIuNjI1bC0uMDIxLS4wNjJMOC4wNjQsNy4xWm0xLjAyLDIuMTY2YS43Mi43MiwwLDAsMCwuMTQ2LS4yNS44NjYuODY2LDAsMCwwLC4wNDItLjQ1OEExLjcsMS43LDAsMCwwLDguOSw3LjcyN2E0LjAxNSw0LjAxNSwwLDAsMC0uOTc5LS45bC0uMjI5LS40NzljLS4xNDYtLjMxMi0uMjkyLS42MjUtLjQ1OC0uOTE2LjMxMi0uMDgzLjY4Ny0uMjA4LDEuMS0uMzEyQTIwLjMxMywyMC4zMTMsMCwwLDEsOS4zNTUsN2E3Ljk2Myw3Ljk2MywwLDAsMSwuNzcxLDIuNTQxYy4wMjEuMjA4LDAsLjQzNywwLC42NjZzMCwuNDU4LjAyMS42ODdhNy42MDksNy42MDksMCwwLDAsLjE0Ni45NThMOS4wODQsOS4yNjhaTTE0LDI2LjI0MmEuOS45LDAsMCwxLS4xODcuMjA4LjQuNCwwLDAsMS0uMzMzLjEuMzU4LjM1OCwwLDAsMS0uMjI5LS4yMjkuOTgxLjk4MSwwLDAsMS0uMDgzLS4zNTQsMi4yNzUsMi4yNzUsMCwwLDEsLjA0Mi0uNzUsMi44MTYsMi44MTYsMCwwLDEsLjIyOS0uNzA4LDEuNDc4LDEuNDc4LDAsMCwxLC4yMDgtLjI5Mi4zNDEuMzQxLDAsMCwxLC4yOTItLjEyNWMuMSwwLC4yMDguMS4yNzEuMjA4YS43NC43NCwwLDAsMSwuMDgzLjE4N2wtLjI1LDEuNDc5Yy0uMDIxLjEtLjAyMS4xODctLjA0Mi4yNzFabTEuMjI5LTcuMTg1LS4zNzUsMi4xODdhMy4zMjksMy4zMjksMCwwLDAtLjEtLjQzN2MtLjEtLjQtLjIyOS0uNzcxLS4zNTQtMS4xNDVhMTUuNTM3LDE1LjUzNywwLDAsMC0uOTU4LTIuMTY2Yy4yMjkuNzcxLjUsMS41Ljc3MSwyLjI0OS4xNDYuMzc1LjI3MS43NS40LDEuMWwuMTg3LjU2MmMwLC4wMjEuMDIxLjA2Mi4wMjEuMDgzLS4wNjIuMzMzLS4xMjUuNjY2LS4xNjcsMS4wMmwtLjMxMiwxLjljLS4wMjEtLjA0Mi0uMDIxLS4wODMtLjA0Mi0uMTI1YS40ODYuNDg2LDAsMCwwLS4zMTItLjI5Mi41MjUuNTI1LDAsMCwwLS40MTcuMTI1LDEuOTQ0LDEuOTQ0LDAsMCwwLS4yNzEuMzEyLDIuMDM2LDIuMDM2LDAsMCwwLS4yNzEuNzUsMi4xMzEsMi4xMzEsMCwwLDAsMCwuODEyLDEuMDIxLDEuMDIxLDAsMCwwLC4xNDYuNC40ODYuNDg2LDAsMCwwLC4zMzMuMjcxLjQyOC40MjgsMCwwLDAsLjM3NS0uMTY3Yy4wNDItLjA0Mi4wODMtLjEuMTI1LS4xNDYtLjE0Ni45NzktLjMxMiwxLjk1OC0uNDU4LDIuOTU3YTIuNzI3LDIuNzI3LDAsMCwxLS41NjIuMTI1Yy0uMjUuMDQyLS41LjA2Mi0uNzUuMDgzYTUuNTMxLDUuNTMxLDAsMCwxLTEuNTQxLS4xNDYsNy44NDYsNy44NDYsMCwwLDEtMS41LS40NzksMy42MjUsMy42MjUsMCwwLDEtMS4yMjktLjg1NGMuMzEyLTEuMTQ1LjY2Ni0yLjI5MSwxLjAyLTMuNDM2bC41NDEtMS43MjkuNTIxLTEuNzQ5Yy4zNTQtMS4xNjYuNzA4LTIuMzMzLDEuMDQxLTMuNS4xNjctLjU4My4zMTItMS4xNjYuNDc5LTEuNzQ5YTMuNjI2LDMuNjI2LDAsMCwwLC4xODctMS44MzN2LS4wMjFjLS4wMjEtLjAyMS0uMDQyLS4wMjEtLjA0MiwwYTMuMTA5LDMuMTA5LDAsMCwwLS4yNS4yOTJjLS4yMjktLjUyMS0uNDc5LTEuMDItLjcwOC0xLjU0MWE0Ljc2NSw0Ljc2NSwwLDAsMS0uMTY3LS41ODMsNy4xNjUsNy4xNjUsMCwwLDEtLjIwOC0xLjMxMmMtLjAyMS0uMjI5LS4wMjEtLjQzNy0uMDIxLS42NjZzLjAyMS0uNDU4LDAtLjY4N2E3LjYyNSw3LjYyNSwwLDAsMC0uODMzLTIuNiwxMi41ODcsMTIuNTg3LDAsMCwwLTEuMS0xLjgzM2MuNjg3LS4xODcsMS40MTYtLjM3NSwyLS40NzkuMDgzLjE4Ny4xODcuMzU0LjI3MS41NDFMMTEuOTM4LDcuNmwxLjI1LDIuNDM3LjYyNSwxLjIwOC4zMTIuNmMuMDgzLjEyNS4xMjUuMjcxLjIwOC4zNzVsLS44MTIuNzVhLjA2OS4wNjksMCwwLDAsMCwuMS4wNzMuMDczLDAsMCwwLC4xLjAyMWMuNDM3LS4zMTIuODc1LS42NDYsMS4zMTItLjk3OWwxLjMxMi0xYy44NzUtLjY2NiwxLjcyOS0xLjMzMywyLjU4Mi0yczEuNzA4LTEuMzU0LDIuNTYyLTIuMDQxbC4wMjEtLjAyMWEyNC4zMTYsMjQuMzE2LDAsMCwwLDEuODc0LDEuNjQ1LDYuMTYyLDYuMTYyLDAsMCwwLS44NzUuNTQxLDguOTQzLDguOTQzLDAsMCwwLTEuMjI5LDEuMTI1LDEyLjI3OSwxMi4yNzksMCwwLDAtMS4wNDEsMS4yOTEsMTEuNzc4LDExLjc3OCwwLDAsMC0uNjQ2LDFjLTEuMjcsMS4wNDEtMi41MiwyLjEtMy43MjgsMy4yMDdhLjEyOC4xMjgsMCwwLDAtLjAyMS4xNDYuMTM4LjEzOCwwLDAsMCwuMTQ2LjA0Miw5LjEzNCw5LjEzNCwwLDAsMC0uMzEyLDEuMjVjLS4xMjUuNTgzLS4yNSwxLjE2Ni0uMzU0LDEuNzQ5Wm05LjIwNSwyLjc5MWEyLjUyNywyLjUyNywwLDAsMS0xLjAyLjQ1OCwzLjc2NywzLjc2NywwLDAsMS0xLjE4Ny4wNDIsNy4zNjEsNy4zNjEsMCwwLDEtMS4xNDUtLjIwOCwyLjAzNywyLjAzNywwLDAsMSwuMTY3LTEuMDQxYy4xNDYuMDIxLjI3MS4wMjEuNDE3LjA0MmEuMTE0LjExNCwwLDAsMCwuMTI1LS4wODMuMTI0LjEyNCwwLDAsMC0uMDgzLS4xNjdoMGMtLjEtLjA0Mi0uMTg3LS4wNjItLjI5Mi0uMWEyLjc3MSwyLjc3MSwwLDAsMSwuMjkyLS40Yy4xMjUtLjEyNS4yNS0uMjUuMzc1LS4zNTRhMy45OTIsMy45OTIsMCwwLDAsLjg1NC40LDIuODgxLDIuODgxLDAsMCwwLDEuMTI1LjEsMS41NSwxLjU1LDAsMCwwLDEuMDItLjU0MSwxLjUyNCwxLjUyNCwwLDAsMCwuMzU0LS45MTYuODUuODUsMCwwLDEsLjAyMS40LDQuNTExLDQuNTExLDAsMCwxLS4wODMuNTIxbC0uMDYyLjMxMkwyNSwyMC40OTRhLjkxOS45MTksMCwwLDAtLjMzMy4zNTQuNzUxLjc1MSwwLDAsMCwuNDc5LDBjLjAyMSwwLC4wMjEtLjAyMS4wNDItLjAyMS0uMDIxLjA2Mi0uMDIxLjEtLjA0Mi4xNjdhMi41NTIsMi41NTIsMCwwLDEtLjcwOC44NTRaTTI2LjUsMTkuMTE5YTIuMiwyLjIsMCwwLDEtLjQ1OC42MjUsMi42MzgsMi42MzgsMCwwLDEtLjI3MS4yMjksMi41ODUsMi41ODUsMCwwLDAtLjA2Mi0uNTYyLDEuNTM0LDEuNTM0LDAsMCwwLS4wODMtLjI5Mi41MzEuNTMxLDAsMCwwLS4xODctLjI1aDBjLS4wMjEsMC0uMDQyLDAtLjA0Mi4wMjFoMGExLjk1LDEuOTUsMCwwLDEtLjU2Mi43NzEsMS40MjksMS40MjksMCwwLDEtLjgxMi4yOTIsMi44NTcsMi44NTcsMCwwLDEtLjkxNi0uMTI1Yy0uMzEyLS4wODMtLjYyNS0uMTg3LS45MzctLjI5MmwtLjA0Mi0uMDIxYS4yLjIsMCwwLDAtLjE4Ny4wNDJjLS4xNjcuMjA4LS4yOTIuNC0uNDM3LjYtLjEuMTY3LS4xODcuMzEyLS4yNzEuNDc5LS4zNzUtLjE0Ni0uNzI5LS4yNzEtMS4xLS40MTctLjUyMS0uMjA4LTEuMDQxLS40MTctMS41Mi0uNjY2YTcuNjQ4LDcuNjQ4LDAsMCwxLTEuNC0uODEyLDIuOTQ5LDIuOTQ5LDAsMCwxLS45NzktMS4wNjJ2LS4wMjFhLjQwOS40MDksMCwwLDAtLjE4Ny0uMTg3YzAtLjA0Mi4wMjEtLjEuMDIxLS4xNDZhNy4zNyw3LjM3LDAsMCwwLC4xLTEuNTJjMS42ODctMS4xODcsMy4zMzItMi40MzcsNC45NTctMy43MjhsLS4wNjIuMTg3YTMuMjcsMy4yNywwLDAsMC0uMTQ2LDEuMDJBMi4wODksMi4wODksMCwwLDAsMjIuMTIyLDE1LjFhMi44MjUsMi44MjUsMCwwLDAsLjQ3OS4xODdsLjI1LjA2Mi4yMDguMDQyYTYuNjQ1LDYuNjQ1LDAsMCwxLDEuNTQxLjYyNSw2LjE1Niw2LjE1NiwwLDAsMSwxLjMxMi45NzksMi4yNzUsMi4yNzUsMCwwLDEsLjcwOCwxLjMzMywxLjUxLDEuNTEsMCwwLDEtLjEyNS43OTFaXFxcIiBzdHlsZT1cXFwiZmlsbDojM2YzZTI5XFxcIi8+PHBhdGggZD1cXFwiTTEyLjY2NywyMy45MDlhMi4xNjEsMi4xNjEsMCwwLDAtLjM1NC43NzEsMS41NTYsMS41NTYsMCwwLDAtLjA2Mi40MTdsLS4wMjEuNDE3YTQuNTMzLDQuNTMzLDAsMCwwLC4xNDYsMS42NjYsNy42NDcsNy42NDcsMCwwLDAsLjY2NiwxLjUyYy0uMDgzLS4yNzEtLjE4Ny0uNTIxLS4yNzEtLjc3MXMtLjE2Ny0uNTIxLS4yMjktLjc5MWE1Ljg5LDUuODksMCwwLDEtLjEtMS42bC4wMjEtLjQxN2EyLjU1MiwyLjU1MiwwLDAsMSwuMDQyLS40LDMuMTM3LDMuMTM3LDAsMCwxLC4yOTItLjcyOSwyLjk2NywyLjk2NywwLDAsMSwuNTIxLS42MjUsMi41OTEsMi41OTEsMCwwLDEsLjY2Ni0uNDc5LDIuNzYsMi43NiwwLDAsMC0xLjMxMiwxLjAyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzNmM2UyOVxcXCIvPlwiLFxuXHR9LFxuXHRcIkhhbmRsZWJhcnNcIjoge1xuXHRcdGNvbG91cjogXCIjYzE5NzcwXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTIuMywxMy4xYTQuMjM4LDQuMjM4LDAsMCwxLDIuNzI4LjlBNC41OTIsNC41OTIsMCwwLDEsMTYsMTUuMTI3YTQuMTQ0LDQuMTQ0LDAsMCwxLDIuMDM5LTEuNzQ3LDQuNzU3LDQuNzU3LDAsMCwxLDMuMjg2LjAxOSw3LjgzMyw3LjgzMywwLDAsMSwyLjQ0MywxLjU1OGMuNTY4LjUsMS4wOTQsMS4wNSwxLjY3OSwxLjUzM2EzLjQsMy40LDAsMCwwLDEuMDE5LjYxNCwxLjQyLDEuNDIsMCwwLDAsMS40Ni0uMzc5Ljk2NS45NjUsMCwwLDAtLjA1NS0xLjMyMy41NDUuNTQ1LDAsMCwwLS44LjEwOC42NTkuNjU5LDAsMCwwLC4wNS42ODYsMS4yMjIsMS4yMjIsMCwwLDEtLjYtLjkyNiwxLjAyMiwxLjAyMiwwLDAsMSwuNjkxLTEuMDMyLDIuMDA1LDIuMDA1LDAsMCwxLDIuMzEyLjY2MSwzLjI1OCwzLjI1OCwwLDAsMSwuNDQsMi4zMDgsMi43NjIsMi43NjIsMCwwLDEtMS4xMzcsMS44NzIsNS4wNTEsNS4wNTEsMCwwLDEtMy4wMTMuOCw4LjQ4OCw4LjQ4OCwwLDAsMS0yLjkzMi0uNjNjLTEuNTU4LS42MjYtMy4wMTYtMS40OTItNC42MjUtMS45OTJhMTMuOTc3LDEzLjk3NywwLDAsMC0xLjctLjM2M2MtLjQzLjAwNy0uODYxLS4wMTUtMS4yOS4wMTVhNS42OTIsNS42OTIsMCwwLDAtMS41MzQuMzQ5Yy0xLjYzNi41MDktMy4xMTYsMS40LTQuNywyLjAyNGE3LjYyNSw3LjYyNSwwLDAsMS00LjI0OS40NzQsMy43NCwzLjc0LDAsMCwxLTIuMTI1LTEuMTRBMi44NTYsMi44NTYsMCwwLDEsMiwxNi42NjhhMi43MjIsMi43MjIsMCwwLDEsLjU1NS0xLjg3NCwxLjk5NCwxLjk5NCwwLDAsMSwxLjY4Ny0uNjgsMS40MjUsMS40MjUsMCwwLDEsMS4wNjMuNTIsMS4wNCwxLjA0LDAsMCwxLC4xMjIuOTExLDEuNDU3LDEuNDU3LDAsMCwxLS41NTYuNjQ0LjY0My42NDMsMCwwLDAsLjA1MS0uNjgxLjU0Ny41NDcsMCwwLDAtLjgzMS0uMDc5Ljk3NS45NzUsMCwwLDAtLjE1MSwxLjExLDEuMzMxLDEuMzMxLDAsMCwwLDEuMDMyLjYyMywyLjMzMiwyLjMzMiwwLDAsMCwxLjYtLjdBMjguNTI2LDI4LjUyNiwwLDAsMSw5LjQsMTQuMDUzLDUuMjUxLDUuMjUxLDAsMCwxLDEyLjMsMTMuMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMTk3NzBcXFwiLz5cIixcblx0fSxcblx0XCJIYXNrZWxsXCI6IHtcblx0XHRjb2xvdXI6IFwiI0MwNDUwNFwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiMC45OTZcXFwiIHkxPVxcXCItMjA2LjA1N1xcXCIgeDI9XFxcIjAuOTUxXFxcIiB5Mj1cXFwiLTIwNi4wNTdcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMjU5Ljk0MSwgMCwgMCwgLTE4My40ODcsIC0yMzcuOTQxLCAtMzc3OTIuNzg4KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZhYmEwOVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2I0MmMwMVxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfaGFza2VsbDI8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yLDI1Ljg4Miw4LjU4OCwxNiwyLDYuMTE4SDYuOTQxTDEzLjUyOSwxNiw2Ljk0MSwyNS44ODJabTYuNTg4LDBMMTUuMTc3LDE2LDguNTg4LDYuMTE4aDQuOTQxTDI2LjcwNiwyNS44ODJIMjEuNzY1bC00LjExNy02LjE3Ni00LjExOCw2LjE3NlpNMjQuNTEsMjAuMTE4bC0yLjItMy4yOTRIMzB2My4yOTRabS0zLjI5NC00Ljk0MS0yLjItMy4yOTRIMzB2My4yOTRaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+XCIsXG5cdH0sXG5cdFwiSGF4ZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmNjg3MTJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xNiw1LjUsNS41LDE2LDE2LDI2LjUsMjYuNSwxNiwxNiw1LjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNmNjg3MTJcXFwiLz48cGF0aCBkPVxcXCJNMiwyLDE2LDUuNSw1LjUsMTYsMiwyXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFiMjBiXFxcIi8+PHBhdGggZD1cXFwiTTMwLDIsMjYuNSwxNiwxNiw1LjUsMzAsMlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y0NzIxNlxcXCIvPjxwYXRoIGQ9XFxcIk0zMCwzMCwxNiwyNi41LDI2LjUsMTYsMzAsMzBcXFwiIHN0eWxlPVxcXCJmaWxsOiNmMjVjMTlcXFwiLz48cGF0aCBkPVxcXCJNMiwzMCw1LjUsMTYsMTYsMjYuNSwyLDMwXFxcIiBzdHlsZT1cXFwiZmlsbDojZjg5YzBlXFxcIi8+PHBhdGggZD1cXFwiTTE2LDUuNSwyLDJIOWw3LDMuNVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZiYzcwN1xcXCIvPjxwYXRoIGQ9XFxcIk0xNiw1LjUsMzAsMkgyM0wxNiw1LjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNmYmM3MDdcXFwiLz48cGF0aCBkPVxcXCJNMTYsMjYuNSwzMCwzMEgyM2wtNy0zLjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNmNjg3MTJcXFwiLz48cGF0aCBkPVxcXCJNMTYsMjYuNSwyLDMwSDlsNy0zLjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNmMjVjMTlcXFwiLz48cGF0aCBkPVxcXCJNNS41LDE2LDIsMzBWMjNsMy41LTdcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmYyMDBcXFwiLz48cGF0aCBkPVxcXCJNNS41LDE2LDIsMlY5bDMuNSw3XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmMjAwXFxcIi8+PHBhdGggZD1cXFwiTTI2LjUsMTYsMzAsMlY5bC0zLjUsN1xcXCIgc3R5bGU9XFxcImZpbGw6I2YxNDcxZFxcXCIvPjxwYXRoIGQ9XFxcIk0yNi41LDE2LDMwLDMwVjIzbC0zLjUtN1xcXCIgc3R5bGU9XFxcImZpbGw6I2YxNDcxZFxcXCIvPlwiLFxuXHR9LFxuXHRcIkhMU0xcIjoge1xuXHRcdGNvbG91cjogXCIjMDAwMGZmXCIsXG5cdFx0aWNvbjogXCI8cG9seWdvbiBwb2ludHM9XFxcIjkuNTI1IDIxLjk0NyA3LjU2IDIxLjk0NyA3LjU2IDE3LjEgMy45NTggMTcuMSAzLjk1OCAyMS45NDcgMiAyMS45NDcgMiAxMC4wNDQgMy45NTggMTAuMDQ0IDMuOTU4IDE0Ljc5MiA3LjU2IDE0Ljc5MiA3LjU2IDEwLjA0NCA5LjUyNSAxMC4wNDQgOS41MjUgMjEuOTQ3XFxcIiBzdHlsZT1cXFwiZmlsbDpibHVlXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNi42OTIgMjEuOTQ3IDExLjUxMyAyMS45NDcgMTEuNTEzIDEwLjA0NCAxMy40NzIgMTAuMDQ0IDEzLjQ3MiAxOS43NzMgMTYuNjkyIDE5Ljc3MyAxNi42OTIgMjEuOTQ3XFxcIiBzdHlsZT1cXFwiZmlsbDpibHVlXFxcIi8+PHBhdGggZD1cXFwiTTE3LjQ2MiwyMS40OTFWMTguODM0YTMuNjc2LDMuNjc2LDAsMCwwLDEuMTQ2LjkwOSwyLjgwOSwyLjgwOSwwLDAsMCwxLjI0OS4zLDIuMDUsMi4wNSwwLDAsMCwuNjQ2LS4wOTIsMS4zMDksMS4zMDksMCwwLDAsLjQ2MS0uMjUyLDEuMDI5LDEuMDI5LDAsMCwwLC4yNzYtLjM4MiwxLjIzMSwxLjIzMSwwLDAsMCwuMDkxLS40NzgsMS4zLDEuMywwLDAsMC0uMTQ1LS42MjMsMS45MDcsMS45MDcsMCwwLDAtLjQtLjUwNiw0LjA3Nyw0LjA3NywwLDAsMC0uNi0uNDQ4cS0uMzQ2LS4yMTUtLjc0Ni0uNDM5YTQuMDQ1LDQuMDQ1LDAsMCwxLTEuNTE5LTEuNDE5LDMuODg0LDMuODg0LDAsMCwxLS41LTIuMDI2LDQuMjMyLDQuMjMyLDAsMCwxLC4yNzMtMS42LDMuMDIsMy4wMiwwLDAsMSwuNzQ0LTEuMSwyLjkzOCwyLjkzOCwwLDAsMSwxLjA4OC0uNjM0LDQuMTY3LDQuMTY3LDAsMCwxLDEuMzEtLjIsNS44MTYsNS44MTYsMCwwLDEsMS4yLjExMSwzLjgsMy44LDAsMCwxLC45NjcuMzQ1djIuNDgyYTIuODU5LDIuODU5LDAsMCwwLS40NzYtLjM2NSwzLjIxMiwzLjIxMiwwLDAsMC0uNTMtLjI2MkEzLjEsMy4xLDAsMCwwLDIxLjQ2LDEyYTIuNzk0LDIuNzk0LDAsMCwwLS41MTItLjA1LDEuOTk0LDEuOTk0LDAsMCwwLS42MDYuMDg3LDEuMzQ3LDEuMzQ3LDAsMCwwLS40NjEuMjQ1LDEuMDkyLDEuMDkyLDAsMCwwLS4yOTEuMzc3LDEuMTQ0LDEuMTQ0LDAsMCwwLS4xLjQ5NCwxLjIsMS4yLDAsMCwwLC4xMTUuNTM2LDEuNjU3LDEuNjU3LDAsMCwwLC4zMjguNDQ4LDMuNDYxLDMuNDYxLDAsMCwwLC41MTUuNDE1Yy4yLjEzNi40My4yNzUuNjg2LjQxOWE3LjA5NCw3LjA5NCwwLDAsMSwuOTM2LjYzNSwzLjcxMiwzLjcxMiwwLDAsMSwuNzEzLjc1OSwzLjI2OSwzLjI2OSwwLDAsMSwuNDU1Ljk2Nyw0LjU3Myw0LjU3MywwLDAsMSwuMTU4LDEuMjY2LDQuNDM5LDQuNDM5LDAsMCwxLS4yNzcsMS42NzIsMi44ODgsMi44ODgsMCwwLDEtLjc0OSwxLjEsMi44MjMsMi44MjMsMCwwLDEtMS4xLjYsNC43NDIsNC43NDIsMCwwLDEtMS4zMjUuMTgyLDUuNDc2LDUuNDc2LDAsMCwxLTEuMzYxLS4xNjZBMy40MSwzLjQxLDAsMCwxLDE3LjQ2MiwyMS40OTFaXFxcIiBzdHlsZT1cXFwiZmlsbDpibHVlXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIzMCAyMS45NDcgMjQuODIyIDIxLjk0NyAyNC44MjIgMTAuMDQ0IDI2Ljc4IDEwLjA0NCAyNi43OCAxOS43NzMgMzAgMTkuNzczIDMwIDIxLjk0N1xcXCIgc3R5bGU9XFxcImZpbGw6Ymx1ZVxcXCIvPlwiLFxuXHR9LFxuXHRcIkhUTUxcIjoge1xuXHRcdGNvbG91cjogXCIjZTQ0ZjI2XCIsXG5cdFx0aWNvbjogXCI8cG9seWdvbiBwb2ludHM9XFxcIjUuOTAyIDI3LjIwMSAzLjY1NSAyIDI4LjM0NSAyIDI2LjA5NSAyNy4xOTcgMTUuOTg1IDMwIDUuOTAyIDI3LjIwMVxcXCIgc3R5bGU9XFxcImZpbGw6I2U0NGYyNlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYgMjcuODU4IDI0LjE3IDI1LjU5MyAyNi4wOTIgNC4wNjEgMTYgNC4wNjEgMTYgMjcuODU4XFxcIiBzdHlsZT1cXFwiZmlsbDojZjE2NjJhXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNiAxMy40MDcgMTEuOTEgMTMuNDA3IDExLjYyOCAxMC4yNDIgMTYgMTAuMjQyIDE2IDcuMTUxIDE1Ljk4OSA3LjE1MSA4LjI1IDcuMTUxIDguMzI0IDcuOTgxIDkuMDgzIDE2LjQ5OCAxNiAxNi40OTggMTYgMTMuNDA3XFxcIiBzdHlsZT1cXFwiZmlsbDojZWJlYmViXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNiAyMS40MzQgMTUuOTg2IDIxLjQzOCAxMi41NDQgMjAuNTA5IDEyLjMyNCAxOC4wNDQgMTAuNjUxIDE4LjA0NCA5LjIyMSAxOC4wNDQgOS42NTQgMjIuODk2IDE1Ljk4NiAyNC42NTQgMTYgMjQuNjUgMTYgMjEuNDM0XFxcIiBzdHlsZT1cXFwiZmlsbDojZWJlYmViXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNS45ODkgMTMuNDA3IDE1Ljk4OSAxNi40OTggMTkuNzk1IDE2LjQ5OCAxOS40MzcgMjAuNTA3IDE1Ljk4OSAyMS40MzcgMTUuOTg5IDI0LjY1MyAyMi4zMjYgMjIuODk2IDIyLjM3MiAyMi4zNzQgMjMuMDk4IDE0LjIzNyAyMy4xNzQgMTMuNDA3IDIyLjM0MSAxMy40MDcgMTUuOTg5IDEzLjQwN1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTUuOTg5IDcuMTUxIDE1Ljk4OSA5LjA3MSAxNS45ODkgMTAuMjM1IDE1Ljk4OSAxMC4yNDIgMjMuNDQ1IDEwLjI0MiAyMy40NDUgMTAuMjQyIDIzLjQ1NSAxMC4yNDIgMjMuNTE3IDkuNTQ4IDIzLjY1OCA3Ljk4MSAyMy43MzIgNy4xNTEgMTUuOTg5IDcuMTUxXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiSFRUUFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMzYjYxYTZcIixcblx0XHRpY29uOiBcIjxkZWZzPjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiYVxcXCIgY3g9XFxcIjEyLjI3OFxcXCIgY3k9XFxcIjI0LjU1N1xcXCIgcj1cXFwiMTguMzcxXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEsIDAsIDAsIC0xLCAtMC4wMDEsIDM0LjAwMSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNkM2U5ZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMTU1XFxcIiBzdG9wLWNvbG9yPVxcXCIjZDNlOWZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjc1XFxcIiBzdG9wLWNvbG9yPVxcXCIjNDA3NGFlXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjMzY0ODZjXFxcIi8+PC9yYWRpYWxHcmFkaWVudD48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImJcXFwiIGN4PVxcXCIxMC42NTdcXFwiIGN5PVxcXCIyNi43NDZcXFwiIHI9XFxcIjI2LjY2XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEsIDAsIDAsIC0xLCAtMC4wMDEsIDM0LjAwMSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiIHN0b3Atb3BhY2l0eT1cXFwiMC4xNjVcXFwiLz48L3JhZGlhbEdyYWRpZW50PjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiY1xcXCIgY3g9XFxcIi00NS4wNVxcXCIgY3k9XFxcIjkuMjg1XFxcIiByPVxcXCI0LjExNVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMjEuOTcxIDQxLjk0Mikgcm90YXRlKDE0My43MzQpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIiBzdG9wLW9wYWNpdHk9XFxcIjBcXFwiLz48L3JhZGlhbEdyYWRpZW50PjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiZFxcXCIgY3g9XFxcIi00MS40NTZcXFwiIGN5PVxcXCIzMi4xNTRcXFwiIHI9XFxcIjQuMTE1XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDMuNTcxIDg3LjA3NSkgcm90YXRlKDE0My43MzQpIHNjYWxlKDEuMjk3KVxcXCIgeGxpbms6aHJlZj1cXFwiI2NcXFwiLz48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImVcXFwiIGN4PVxcXCItNDguNDg1XFxcIiBjeT1cXFwiMTMuMjM5XFxcIiByPVxcXCI0LjExNVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMjMuMDg0IDU1LjQxMykgcm90YXRlKDE0My43MzQpXFxcIiB4bGluazpocmVmPVxcXCIjY1xcXCIvPjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiZlxcXCIgY3g9XFxcIi00MC44ODNcXFwiIGN5PVxcXCIxNi4wMzZcXFwiIHI9XFxcIjQuMTE1XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KC0wLjg3LCAwLjYzOSwgLTAuNjM4LCAtMC44NywgLTkuMzUxLCA0Ny43MDYpXFxcIiB4bGluazpocmVmPVxcXCIjY1xcXCIvPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZ1xcXCIgeDE9XFxcIi02Ni41MDJcXFwiIHkxPVxcXCIyLjIxOVxcXCIgeDI9XFxcIi02NC42MjZcXFwiIHkyPVxcXCI2Ljc0OVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjkzOSwgLTAuODc5LCAtMC42ODMsIC0wLjczLCA4NC44MSwgLTMzLjYyOClcXFwiIHhsaW5rOmhyZWY9XFxcIiNjXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJoXFxcIiB4MT1cXFwiLTI2Ljc5MVxcXCIgeTE9XFxcIjM5LjE1OVxcXCIgeDI9XFxcIi0yNC45OTlcXFwiIHkyPVxcXCI0NC42ODNcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMS4xMzEsIDAuNjEzLCAwLjQ3NywgLTAuODc5LCAyMS42NDgsIDY5LjA3MSlcXFwiIHhsaW5rOmhyZWY9XFxcIiNjXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJpXFxcIiB4MT1cXFwiLTYzLjM4NFxcXCIgeTE9XFxcIjguMTc3XFxcIiB4Mj1cXFwiLTYzLjU3XFxcIiB5Mj1cXFwiNC42OVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjkxOCwgLTAuODU5LCAtMC42NjgsIC0wLjcxMywgNzcuODU3LCAtMzYuNDkzKVxcXCIgeGxpbms6aHJlZj1cXFwiI2NcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImpcXFwiIHgxPVxcXCItOTkuMjU5XFxcIiB5MT1cXFwiODkuNTQ1XFxcIiB4Mj1cXFwiLTk4LjgyNVxcXCIgeTI9XFxcIjkzLjAyM1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgtMS4yOCwgLTAuMTI2LCAtMC4wOTgsIDAuOTk1LCAtMTAxLjYzNywgLTkzLjAxNSlcXFwiIHhsaW5rOmhyZWY9XFxcIiNjXFxcIi8+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJrXFxcIiBjeD1cXFwiLTIwLjcxMlxcXCIgY3k9XFxcIjU3LjYxXFxcIiByPVxcXCIyLjgzNlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLCAtMC44NDMsIC0wLjcyMSwgMCwgMjYuNjI1LCAtMjEuNjk2KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzcyOWZjZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzNiNjFhNlxcXCIvPjwvcmFkaWFsR3JhZGllbnQ+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJsXFxcIiBjeD1cXFwiLTIwLjcxMlxcXCIgY3k9XFxcIjM5Ljg1OFxcXCIgcj1cXFwiMi44MzZcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMjYuNjI1IDYzLjA5Nikgcm90YXRlKDkwKSBzY2FsZSgwLjg0MyAwLjcyMSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiM3MjlmY2ZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiM1MDllMmZcXFwiLz48L3JhZGlhbEdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2h0dHA8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOC4wMjYsMTQuMkExMS44NzcsMTEuODc3LDAsMSwxLDE2LjE0OSwyLjMyNSwxMS44NzgsMTEuODc4LDAsMCwxLDI4LjAyNiwxNC4yWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNi4xNDksMjYuMzg2QTEyLjE4MywxMi4xODMsMCwxLDEsMjguMzMzLDE0LjIsMTIuMiwxMi4yLDAsMCwxLDE2LjE0OSwyNi4zODZabTAtMjMuNzU0QTExLjU3MSwxMS41NzEsMCwxLDAsMjcuNzIsMTQuMiwxMS41ODQsMTEuNTg0LDAsMCwwLDE2LjE0OSwyLjYzMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzOTM5NmNcXFwiLz48cGF0aCBkPVxcXCJNMjcuNjkzLDEyLjQyNGgwbC0uMzI4LjM3MWE3LDcsMCwwLDAtLjY1Ni0uNjQ0bC0uNS4wNzQtLjQ2LS41MTl2LjY0M2wuMzk0LjMuMjYyLjMuMzUtLjRjLjA4OC4xNjUuMTc1LjMzLjI2My41di40OTVsLS4zOTQuNDQ1LS43MjIuNS0uNTQ2LjU0NS0uMzUtLjQuMTc1LS40NDUtLjM1LS40LS41OTEtMS4yNjItLjUtLjU2OUwyMy42LDEyLjFsLjIuNzE4LjM3MS40MjFhMTcuMDY5LDE3LjA2OSwwLDAsMCwuNywxLjc4Myw5Ljk3OSw5Ljk3OSwwLDAsMCwxLjI2OC0uMXYuMzQ3bC0uNTI1LDEuMjg3LS40ODEuNTQ0LS4zOTQuODQzVjE5LjMzbC4xMzIuNTQ1LS4yMTkuMjQ3LS40ODIuMy0uNS40MjEuNDE2LjQ3LS41NjkuNS4xMDkuMzIxLS44NTMuOTY2SDIyLjJsLS40ODEuM2gtLjMwN3YtLjRsLS4xMy0uNzkzYy0uMTY5LS41LS4zNDYtLjk5MS0uNTI1LTEuNDg0LDAtLjM2NC4wMjItLjcyNS4wNDQtMS4wODlsLjIxOS0uNDk1LS4zMDctLjU5NS4wMjItLjgxNy0uNDE2LS40Ny4yMDgtLjY4LS4zMzgtLjM4NEgxOS42bC0uMi0uMjIzLS41OTEuMzcyLS4yNC0uMjczLS41NDcuNDdMMTYuOTExLDE1LjI3bC0uNDM3LTEuMDQuMzk0LS41OTMtLjIxOS0uMjQ3LjQ4MS0xLjEzOWMuMzk1LS40OTEuODA3LS45NjMsMS4yMjUtMS40MzZsLjc0NC0uMi44MzEtLjEuNTY5LjE0OS44MDkuODE2LjI4NC0uMzIxLjM5My0uMDQ5Ljc0NC4yNDdIMjMuM2wuMzk0LS4zNDcuMTc1LS4yNDctLjM5NC0uMjQ3LS42NTYtLjA0OWE2LjYsNi42LDAsMCwwLS41NjgtLjc0M2wtLjIxOS4xLS4wODguNjQ0LS4zOTQtLjQ0NS0uMDg3LS41LS40MzctLjM0NmgtLjE3NmwuNDM4LjQ5NS0uMTc1LjQ0NS0uMzUuMS4yMTktLjQ0NS0uMzk0LS4yLS4zNDktLjQtLjY1Ny4xNDgtLjA4Ny4yLS4zOTQuMjQ4LS4yMTkuNTQ1LS41NDYuMjcyLS4yNDEtLjI3MkgxNy44M1Y5LjQyOGwuNTY5LS4zaC40MzdsLS4wODgtLjM0NkwxOC40LDguNDM4bC41OS0uMTI0LjMyOC0uMzcxLjI2Mi0uNDQ2aC40ODJsLS4xMzItLjM0Ni4zMDctLjJ2LjRsLjY1Ni4xNDguNjU2LS41NDQuMDQ0LS4yNDguNTY4LS40YTQuMzUzLDQuMzUzLDAsMCwwLS42MTIuMVY1Ljk2M2wuMjE5LS41aC0uMjE5bC0uNDguNDQ1LS4xMzIuMjQ4LjEzMi4zNDctLjIxOS41OTMtLjM1LS4yLS4zMDYtLjM0Ni0uNDgyLjM0Ni0uMTc1LS43OTIuODMxLS41NDR2LS4zbC41MjUtLjM0Ni44MzEtLjIuNTY5LjIsMS4wNDkuMi0uMjYyLjNIMjIuNTFsLjU2OS41OTQuNDM3LS40OTUuMTMzLS4yMThhMTUuNTMsMTUuNTMsMCwwLDEsMi42MzUsMy4xNDdBMTEuNDUyLDExLjQ1MiwwLDAsMSwyNy42OTMsMTIuNDI0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzIwNGE4NztmaWxsLW9wYWNpdHk6MC43MTM0NTAzMTI2MTQ0NDA5XFxcIi8+PHBhdGggZD1cXFwiTTE2Ljg2MSw1LjUxN2wtLjA0NC4zLjMwNy4yLjUyNC0uMzQ2LS4yNjItLjMtLjM1LjItLjE3NC0uMDVcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMDRhODc7ZmlsbC1vcGFjaXR5OjAuNzEzNDUwMzEyNjE0NDQwOVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy4zNDMsMy40ODhsLTEuMTM4LS40NDYtMS4zMTIuMTQ4LTEuNjE5LjQ0NS0uMzA2LjMsMS4wMDYuNjkzdi40bC0uMzk0LjQuNTI1LDEuMDQuMzQ5LS4yLjQzOC0uNjkzYTE1LjA1MywxNS4wNTMsMCwwLDAsMS45MjQtLjc0M2wuNTI1LTEuMzM3XFxcIiBzdHlsZT1cXFwiZmlsbDojMjA0YTg3O2ZpbGwtb3BhY2l0eTowLjcxMzQ1MDMxMjYxNDQ0MDlcXFwiLz48cGF0aCBkPVxcXCJNMTguNTI0LDcuNjQ3LDE4LjM0OSw3LjJsLS4zMDcuMS4wODguNTQ0LjM5NC0uMlxcXCIgc3R5bGU9XFxcImZpbGw6IzIwNGE4NztmaWxsLW9wYWNpdHk6MC43MTM0NTAzMTI2MTQ0NDA5XFxcIi8+PHBhdGggZD1cXFwiTTE4LjcsNy41NDdsLS4wODguNTk1LjQ4MS0uMS4zNS0uMzQ2LS4zMDYtLjNjLS4xLS4yNzQtLjIyMS0uNTI5LS4zNS0uNzkyaC0uMjYydi4zbC4xNzQuMnYuNDQ1XFxcIiBzdHlsZT1cXFwiZmlsbDojMjA0YTg3O2ZpbGwtb3BhY2l0eTowLjcxMzQ1MDMxMjYxNDQ0MDlcXFwiLz48cGF0aCBkPVxcXCJNMTIuMjI1LDE2Ljk1M2wtLjM1LS42OTMtLjY1Ni0uMTQ4LS4zNS0uOTQtLjg3NS4xLS43NDMtLjU0NC0uNzg4LjY5M3YuMTA5YTMsMywwLDAsMS0uNzQzLS4yMDlsLS4xNzUtLjQ5NVYxNC4yOGwtLjUyNS4wNDlxLjA2Ni0uNTIuMTMxLTEuMDM5SDYuODQ1bC0uMzA2LjQtLjMwNi4xNDhMNS44LDEzLjU4N2wtLjA0NC0uNTQ1LjA4OC0uNTk0LjY1Ni0uNDk1SDcuMDJsLjA4Ny0uMy42NTYuMTQ4LjQ4MS41OTUuMDg4LS45OTEuODMxLS42OTMuMzA2LS43NDMuNjEyLS4yNDcuMzUtLjQ5NS43ODctLjE0OS4zOTQtLjU5M0gxMC40MzJsLjc0NC0uMzQ3SDExLjdsLjc0NC0uMjQ4LjA4OC0uMy0uMjYzLS4yNDgtLjMwNi0uMS4wODgtLjMtLjIxOS0uNDQ1LS41MjUuMi4wODgtLjQtLjYxMi0uMzQ3TDEwLjMsNi44bC4wNDQuMy0uNDgxLjItLjMwNi42NDMtLjEzMS0uNTk0TDguNTk0LDdsLS4xMzEtLjQ0NSwxLjA5NC0uNjQ0LjQ4MS0uNDQ1LjA0NC0uNTQ0LS4yNjItLjE0OS0uMzUtLjA1LS4yMTkuNTQ1cy0uMzY2LjA3Mi0uNDYuMDk1QTEyLjUsMTIuNSwwLDAsMCw0LjYsMTMuMzcxYTYuNzg5LDYuNzg5LDAsMCwwLC40MDkuNzExbC45MTguNTQ0LjkxOC4yNDguMzk0LjUuNjEyLjQ0NS4zNS0uMDQ5LjI2Mi4xMTh2LjA4bC0uMzUuOTQtLjI2My40LjA4OC4yLS4yMTkuNzQyLjc4NywxLjQzNi43ODcuNjkzLjM1LjQ5NUw5LjYsMjEuOWwuMjYzLjU5M0w5LjYsMjMuNjM3cy0uMDIxLS4wMDcuMDEzLjEwN2E1LjI3OCw1LjI3OCwwLDAsMCwxLjQ4OC44MDlsLjE2MS0uMTIzLS4wODctLjI0Ny4zNS0uMzQ3LjEzMS0uMzQ3LjU2OS0uMi40MzctMS4wODktLjEzMS0uMy4zMDYtLjQ0NS42NTYtLjE0OS4zNS0uNzkyLS4wODgtLjk5LjUyNS0uNzQzLjA4OC0uNzQzYy0uNzE4LS4zNTYtMS40My0uNzIzLTIuMTQzLTEuMDg5XFxcIiBzdHlsZT1cXFwiZmlsbDojMjA0YTg3O2ZpbGwtb3BhY2l0eTowLjcxMzQ1MDMxMjYxNDQ0MDlcXFwiLz48cGF0aCBkPVxcXCJNMTEuMjYzLDUuNzE1bC40MzcuM2guMzVWNS42NjZsLS40MzctLjItLjM1LjI0N1xcXCIgc3R5bGU9XFxcImZpbGw6IzIwNGE4NztmaWxsLW9wYWNpdHk6MC43MTM0NTAzMTI2MTQ0NDA5XFxcIi8+PHBhdGggZD1cXFwiTTEwLjEyNiw1LjMxOWwtLjIxOS41NDRoLjQzOGwuMjE5LS41Yy4xODktLjEzMy4zNzYtLjI2OC41NjgtLjRsLjQzOC4xNDkuODc1LjU5NC40MzgtLjQtLjQ4Mi0uMi0uMjE5LS40NDYtLjgzMS0uMS0uMDQ0LS4yNDgtLjM5NC4xLS4xNzUuMzQ2LS4yMTktLjQ0Ni0uMDg3LjIuMDQ0LjUtLjM1LjNcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMDRhODc7ZmlsbC1vcGFjaXR5OjAuNzEzNDUwMzEyNjE0NDQwOVxcXCIvPjxwYXRoIGQ9XFxcIk0xMS43LDQuMDgxbC4yMTktLjIuNDM4LS4xYTYuOSw2LjksMCwwLDEsLjkxOC0uMzQ3bC0uMTc0LS4zLS41NjUuMDgxLS4yNjcuMjY2LS40NC4wNjQtLjM5MS4xODQtLjE5LjA5Mi0uMTE2LjE1NS41NjguMVxcXCIgc3R5bGU9XFxcImZpbGw6IzIwNGE4NztmaWxsLW9wYWNpdHk6MC43MTM0NTAzMTI2MTQ0NDA5XFxcIi8+PHBhdGggZD1cXFwiTTEyLjQ0NCw4Ljc4NWwuMjYzLS40LS4zOTQtLjMuMTMxLjY5M1xcXCIgc3R5bGU9XFxcImZpbGw6IzIwNGE4NztmaWxsLW9wYWNpdHk6MC43MTM0NTAzMTI2MTQ0NDA5XFxcIi8+PHBhdGggZD1cXFwiTTE2LjE0OSwyNS43ODNBMTEuNTgsMTEuNTgsMCwxLDEsMjcuNzI5LDE0LjIsMTEuNTkzLDExLjU5MywwLDAsMSwxNi4xNDksMjUuNzgzWm0wLTIyLjU0OEExMC45NjgsMTAuOTY4LDAsMSwwLDI3LjExNywxNC4yLDEwLjk4LDEwLjk4LDAsMCwwLDE2LjE0OSwzLjIzNVpcXFwiIHN0eWxlPVxcXCJvcGFjaXR5OjAuMzk1NjA0NDAxODI2ODU4NTtpc29sYXRpb246aXNvbGF0ZTtmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNNS41NDEsMTAuMjQxYTQuMTE1LDQuMTE1LDAsMSwwLDYuNjM2LTQuODY2aDBBNC4xMTUsNC4xMTUsMCwwLDAsNS41NCwxMC4yNFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYylcXFwiLz48cGF0aCBkPVxcXCJNNy44MzYsOC41NThhMS4yNjgsMS4yNjgsMCwxLDAsMi4wNDYtMS41aDBhMS4yNjgsMS4yNjgsMCwwLDAtMi4wNDYsMS41WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0xNy45NTIsMjQuOGE1LjMzNyw1LjMzNywwLDEsMCw4LjYwNy02LjMxMnYwQTUuMzM3LDUuMzM3LDAsMCwwLDE3Ljk1LDI0LjhaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTIwLjkyOCwyMi42MTZhMS42NDUsMS42NDUsMCwxLDAsMi42NTMtMS45NDZoMGExLjY0NSwxLjY0NSwwLDAsMC0yLjY1MywxLjk0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNNC44NTksMTguNDkzQTQuMTE1LDQuMTE1LDAsMSwwLDExLjUsMTMuNjI2aDBhNC4xMTUsNC4xMTUsMCwwLDAtNi42MzYsNC44NjZaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2UpXFxcIi8+PHBhdGggZD1cXFwiTTcuMTU0LDE2LjgwOWExLjI2OCwxLjI2OCwwLDEsMCwyLjA0Ni0xLjVoMGExLjI2OCwxLjI2OCwwLDAsMC0yLjA0NiwxLjVaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTEyLjQwOCwxMC4yNjlBNC40NDEsNC40NDEsMCwxLDAsMTkuNTcsNS4wMTZoMGE0LjQ0MSw0LjQ0MSwwLDEsMC03LjE2Miw1LjI1M1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZilcXFwiLz48cGF0aCBkPVxcXCJNMTQuODg1LDguNDUyYTEuMzY5LDEuMzY5LDAsMSwwLDIuMjA4LTEuNjE5aDBhMS4zNjksMS4zNjksMCwxLDAtMi4yMDgsMS42MTlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTEyLjY4LDI2LjIzOGEzLjgzLDMuODMsMCwwLDEtMi45MDktMS4wODdjLTEuMTMzLTEuMjEtMS4yLTMuMjU1LS4yLTUuNzU3YTIxLjU0MiwyMS41NDIsMCwwLDEsNS4zMDctNy4zMjZDMjAuMDY0LDcuMjE1LDI1Ljk0NSw1LjM1NiwyOC4yNyw3LjgzOWMxLjEzMywxLjIxMSwxLjIsMy4yNTUuMiw1Ljc1N2EyMS41NTMsMjEuNTUzLDAsMCwxLTUuMzA4LDcuMzI2QTIxLjU1MSwyMS41NTEsMCwwLDEsMTUuNSwyNS43MzMsOS4yMjksOS4yMjksMCwwLDEsMTIuNjgsMjYuMjM4Wk0yNS4zNDIsNy4yOGMtMi43LDAtNi42LDEuOTA4LTEwLjEsNS4xODNBMjEsMjEsMCwwLDAsMTAuMDcxLDE5LjZjLS45MjEsMi4zLS44ODcsNC4xMzguMDk0LDUuMTg3czIuODE3LDEuMiw1LjE2OS40MzdhMjEsMjEsMCwwLDAsNy40Ni00LjY5MiwyMSwyMSwwLDAsMCw1LjE3NS03LjEzMmMuOTIxLTIuMy44ODgtNC4xMzgtLjA5NS01LjE4N0EzLjM0LDMuMzQsMCwwLDAsMjUuMzQyLDcuMjhaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2cpXFxcIi8+PHBhdGggZD1cXFwiTTIxLjY4MSwyMi4wOTRhMjAuNjMzLDIwLjYzMywwLDAsMS05LjMzOS0yLjc1OUM2LjEsMTUuOTUsMi40NzMsMTAuOTU3LDQuMDk0LDcuOTY4Yy43OS0xLjQ1OCwyLjctMi4xNzUsNS40LTIuMDEyQTIxLjU0MiwyMS41NDIsMCwwLDEsMTguMTIsOC42NzRhMjEuNTQ1LDIxLjU0NSwwLDAsMSw2Ljk4Nyw1Ljc0NmMxLjYsMi4xNjcsMi4wNTEsNC4xNjMsMS4yNjEsNS42MjFDMjUuNjIyLDIxLjQxNiwyMy45MTUsMjIuMDk0LDIxLjY4MSwyMi4wOTRaTTguNzU5LDYuNDc0Yy0yLjEsMC0zLjU3Mi42MTItNC4xOSwxLjc1MUMzLjExNywxMC45LDYuNzIsMTUuNjc0LDEyLjYsMTguODZzMTEuODQzLDMuNiwxMy4yOTQuOTI0Yy42ODUtMS4yNjMuMjUxLTMuMDU0LTEuMjItNS4wNDJhMjEsMjEsMCwwLDAtNi44MS01LjU5M0EyMSwyMSwwLDAsMCw5LjQ1OSw2LjVROS4xLDYuNDc0LDguNzU5LDYuNDc0WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNoKVxcXCIvPjxwYXRoIGQ9XFxcIk0xMCwyNC4wNzhhMy43NTcsMy43NTcsMCwwLDEtMi44NTEtMS4wNjVjLTEuMTEtMS4xODctMS4xODEtMy4xODktLjItNS42MzlhMjEuMDYyLDIxLjA2MiwwLDAsMSw1LjE4OS03LjE2M2M1LjA3My00Ljc0NywxMC44My02LjU2MywxMy4xLTQuMTMyaDBjMi4yNzUsMi40MzEuMDgzLDguMDUzLTQuOTksMTIuOGEyMS4wNTksMjEuMDU5LDAsMCwxLTcuNDkxLDQuN0E5LjAyNCw5LjAyNCwwLDAsMSwxMCwyNC4wNzhaTTIyLjM3Myw1LjU1M2MtMi42MywwLTYuNDM5LDEuODY0LTkuODU2LDUuMDYyQTIwLjUsMjAuNSwwLDAsMCw3LjQ2MywxNy41OGMtLjksMi4yMzktLjg2Niw0LjAzNC4wOSw1LjA1NXMyLjc0NSwxLjE3Miw1LjAzOC40MjRhMjAuNTEzLDIwLjUxMywwLDAsMCw3LjI4NC00LjU4MmM0Ljc2Ni00LjQ2LDYuOTk0LTkuODUzLDQuOTY1LTEyLjAyaDBBMy4yNTYsMy4yNTYsMCwwLDAsMjIuMzczLDUuNTUzWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNpKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNy41MTIsMTkuNDEzYy0uODYsMC0xLjc0OC0uMDQzLTIuNjU5LS4xMzNDNy43ODQsMTguNTg0LDIuNTA3LDE1LjM4OCwyLjg0LDEyaDBjLjMzMy0zLjM4Myw2LjEzMy01LjQ5LDEzLjItNC43OTFzMTIuMzQ1LDMuODkyLDEyLjAxMiw3LjI3NUMyNy43NjMsMTcuNDM2LDIzLjMyNCwxOS40MTMsMTcuNTEyLDE5LjQxM1pNMy4zNzgsMTIuMDU3Yy0uMywzLjAzMSw0Ljg3Myw2LjAzLDExLjUyOCw2LjY4NnMxMi4zMTItMS4yNzcsMTIuNjExLTQuMzA4UzIyLjY0NCw4LjQwNiwxNS45ODgsNy43NSwzLjY3Nyw5LjAyNywzLjM3OCwxMi4wNTdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2opXFxcIi8+PHBhdGggZD1cXFwiTTYuMjUxLDI5Ljk2Nmg2LjY3NFYyMC44MDloMi45ODFMOS41NDgsMTEuNDM0LDMuMjk1LDIwLjc4MmwyLjk1OC4wMzFaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2spXFxcIi8+PHBhdGggZD1cXFwiTTEyLjkyNCwzMC4wNDVINi4yNTFhLjA0OS4wNDksMCwwLDEtLjAzOS0uMDIzYy0uMDEtLjAxNS0uMDE2LTMuMTM1LS4wMTYtMy4xNTZsMC01Ljk3NS0yLjktLjAzYS4wNi4wNiwwLDAsMS0uMDUxLS4wNDguMS4xLDAsMCwxLC4wMTEtLjA4NUw5LjUwOCwxMS4zOGEuMDU2LjA1NiwwLDAsMSwuMDQxLS4wMjUuMDUuMDUsMCwwLDEsLjA0LjAyNGw2LjM1Nyw5LjM3NWEuMS4xLDAsMCwxLC4wMTEuMDg2LjA1OS4wNTksMCwwLDEtLjA1MS4wNDhIMTIuOTh2OS4wNzhDMTIuOTgsMzAuMDEsMTIuOTU1LDMwLjA0NSwxMi45MjQsMzAuMDQ1Wm0tNi42MTgtLjE1OGg2LjU2MlYyMC44MDljMC0uMDQ0LjAyNS0uMDc5LjA1Ni0uMDc5aDIuODVMOS41NDksMTEuNTQ5LDMuNDI0LDIwLjdsMi44My4wM2MuMDMxLDAsLjA1NS4wMzYuMDU1LjA3OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxODM4NjhcXFwiLz48cGF0aCBkPVxcXCJNMTkuMDUzLDIwLjU4N2wtMi45NTguMDMxLDYuMjU0LDkuMzQ4LDYuMzU3LTkuMzc1SDI1LjcyNFYxMS40MzRIMTkuMDUxWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNsKVxcXCIvPjxwYXRoIGQ9XFxcIk0yNS43OCwxMS40MzR2OS4wNzhoMi45MjVhLjA1OS4wNTksMCwwLDEsLjA1MS4wNDguMS4xLDAsMCwxLS4wMTEuMDg2bC02LjM1Nyw5LjM3NWEuMDUuMDUsMCwwLDEtLjA0LjAyNC4wNTYuMDU2LDAsMCwxLS4wNDEtLjAyNWwtNi4yNTQtOS4zNDhhLjEuMSwwLDAsMS0uMDExLS4wODUuMDYuMDYsMCwwLDEsLjA1MS0uMDQ4bDIuOS0uMDMsMC01Ljk3NWMwLS4wMjEuMDA2LTMuMTQxLjAxNi0zLjE1NmEuMDQ5LjA0OSwwLDAsMSwuMDM5LS4wMjNoNi42NzRDMjUuNzU1LDExLjM1NSwyNS43OCwxMS4zOSwyNS43OCwxMS40MzRabS02LjY3Miw5LjE1M2MwLC4wNDMtLjAyNS4wNzktLjA1NS4wNzlsLTIuODMuMDMsNi4xMjUsOS4xNTYsNi4yMjYtOS4xODFoLTIuODVjLS4wMzEsMC0uMDU2LS4wMzUtLjA1Ni0uMDc5VjExLjUxM0gxOS4xMDdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMTgzODY4XFxcIi8+XCIsXG5cdH0sXG5cdFwiSWRyaXNcIjoge1xuXHRcdGNvbG91cjogXCIjOGEwODE5XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTMuMzc2LDYuMmMzLjYsMS4xLDQuNSwyLDUuOCw1LjItLjMtNC0xLjktNS42LTUuOC01LjJaXFxcIiBzdHlsZT1cXFwiZmlsbDojOGEwODE5XFxcIi8+PHBhdGggZD1cXFwiTTguMzc2LDEyLjRjMi4zLjcsNSwxLjMsNiw1LjcuNC01LjUtMi4yLTUuOC02LTUuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM4YTA4MTlcXFwiLz48cGF0aCBkPVxcXCJNOS45NzYsOC44YzMuNS43LDUuNywxLjcsNyw2LjIuMy01LjgtMi45LTYuNC03LTYuMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4YTA4MTlcXFwiLz48cGF0aCBkPVxcXCJNMTQuNTc2LDJjMTkuMSwxMi40LTQuMiwxMi43LjgsMjcuMWwzLC45Yy04LjMtMTEuMiwxOC40LTE3LTMuOC0yOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4YTA4MTlcXFwiLz5cIixcblx0fSxcblx0XCJJbmlcIjoge1xuXHRcdGNvbG91cjogXCIjOTliOGM0XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjMuMjY1LDI0LjM4MWwuOS0uODk0YzQuMTY0LjEzNiw0LjIyOC0uMDEsNC40MTEtLjQzOGwxLjE0NC0yLjc4NUwyOS44MDUsMjBsLS4wOTMtLjIzMWMtLjA0OS0uMTIyLS4yLS40ODYtMi44LTIuOTY1VjE1LjVjMy0yLjg5LDIuOTM2LTMuMDM4LDIuNzY1LTMuNDYxTDI4LjUzOCw5LjIyNWMtLjE3MS0uNDIyLS4yMzYtLjU4Ny00LjM3LS40NzRsLS45LS45M2EyMC4xNjYsMjAuMTY2LDAsMCwwLS4xNDEtNC4xMDZsLS4xMTYtLjI2My0yLjk3NC0xLjNjLS40MzgtLjItLjU5Mi0uMjcyLTMuNCwyLjc4NmwtMS4yNjItLjAxOWMtMi44OTEtMy4wODYtMy4wMjgtMy4wMy0zLjQ2MS0yLjg1NUw5LjE0OSwzLjE4MmMtLjQzMy4xNzUtLjU4Ni4yMzctLjQxOCw0LjQzN2wtLjg5My44OWMtNC4xNjItLjEzNi00LjIyNi4wMTItNC40MDcuNDM4TDIuMjg1LDExLjczMywyLjE5NSwxMmwuMDk0LjIzMmMuMDQ5LjEyLjE5NC40OCwyLjgsMi45NjJsMCwxLjNjLTMsMi44OS0yLjkzNSwzLjAzOC0yLjc2MywzLjQ2MmwxLjEzOCwyLjgxN2MuMTc0LjQzMS4yMzYuNTg0LDQuMzY5LjQ3NmwuOS45MzVhMjAuMjQzLDIwLjI0MywwLDAsMCwuMTM3LDQuMWwuMTE2LjI2NSwyLjk5MywxLjMwOGMuNDM1LjE4Mi41ODYuMjQ3LDMuMzg2LTIuOGwxLjI2Mi4wMTZjMi44OTUsMy4wOSwzLjA0MywzLjAzLDMuNDY2LDIuODU5bDIuNzU5LTEuMTE1QzIzLjI4OCwyOC42NDQsMjMuNDQsMjguNTgzLDIzLjI2NSwyNC4zODFaTTExLjQwNywxNy44NTdhNC45NTcsNC45NTcsMCwxLDEsNi40ODgsMi44MjRBNS4wMTQsNS4wMTQsMCwwLDEsMTEuNDA3LDE3Ljg1N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM5OWI4YzRcXFwiLz5cIixcblx0fSxcblx0XCJJb1wiOiB7XG5cdFx0Y29sb3VyOiBcIiNjMmMyYzJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDIuODg3SDcuMDc1VjcuNTFIMlptLjA1Miw2LjgzSDcuMDRWMjguNjI2SDIuMDUyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPjxwYXRoIGQ9XFxcIk0xMy4yNzEsMjYuNDU0YTkuNzkxLDkuNzkxLDAsMCwxLTIuNjE2LTcuMTc4LDEwLjE0OCwxMC4xNDgsMCwwLDEsMi42MTYtNy4zNDMsOS4zMjEsOS4zMjEsMCwwLDEsNy4wNDctMi43Miw5LjM0LDkuMzQsMCwwLDEsNy4wNzUsMi43MkExMC4xNjgsMTAuMTY4LDAsMCwxLDMwLDE5LjI3NmE5LjgwOSw5LjgwOSwwLDAsMS0yLjYwNyw3LjE3OCw5LjQ1Niw5LjQ1NiwwLDAsMS03LjA3NSwyLjY1OUE5LjQzNiw5LjQzNiwwLDAsMSwxMy4yNzEsMjYuNDU0Wm0xMC40MzYtMi45NzJhNi43LDYuNywwLDAsMCwxLjE2Ni00LjI1OCw2Ljk0Myw2Ljk0MywwLDAsMC0xLjE2Ni00LjM1NCw0LjA0Nyw0LjA0NywwLDAsMC0zLjM4OS0xLjQ4Niw0LjAyMiw0LjAyMiwwLDAsMC0zLjM4LDEuNDg2LDYuOTkxLDYuOTkxLDAsMCwwLTEuMTU2LDQuMzU0LDYuNzQ0LDYuNzQ0LDAsMCwwLDEuMTU2LDQuMjU4LDQuMDUzLDQuMDUzLDAsMCwwLDMuMzgsMS40NkE0LjA3OCw0LjA3OCwwLDAsMCwyMy43MDcsMjMuNDgyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPlwiLFxuXHR9LFxuXHRcIkphdmFcIjoge1xuXHRcdGNvbG91cjogXCIjNTM4MmExXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTIuMzI1LDIzLjY1NHMtMS4wNy42MjIuNzYxLjgzM2ExNi4wMjMsMTYuMDIzLDAsMCwwLDUuOC0uMjQ2LDEwLjA4OCwxMC4wODgsMCwwLDAsMS41NDEuNzUyYy01LjQ4MSwyLjM0OS0xMi40MDUtLjEzNi04LjEtMS4zMzlcXFwiIHN0eWxlPVxcXCJmaWxsOiM1MzgyYTFcXFwiLz48cGF0aCBkPVxcXCJNMTEuNjU2LDIwLjU4OHMtMS4yLjg4OC42MzMsMS4wNzhhMjIuNjE4LDIyLjYxOCwwLDAsMCw3LjQ4MS0uMzU5LDMuMzIsMy4zMiwwLDAsMCwxLjE1Mi43Yy02LjYyNywxLjkzOC0xNC4wMDkuMTUzLTkuMjY2LTEuNDIxXFxcIiBzdHlsZT1cXFwiZmlsbDojNTM4MmExXFxcIi8+PHBhdGggZD1cXFwiTTE3LjMsMTUuMzg4YTIuMDUxLDIuMDUxLDAsMCwxLS4zNTUsMi45NTRzMy40MjktMS43NywxLjg1NC0zLjk4N2MtMS40NzEtMi4wNjctMi42LTMuMDk1LDMuNTA4LTYuNjM2LDAsMC05LjU4NiwyLjM5NC01LjAwNyw3LjY2OVxcXCIgc3R5bGU9XFxcImZpbGw6IzUzODJhMVxcXCIvPjxwYXRoIGQ9XFxcIk0yNC41NTIsMjUuOTIxcy43OTIuNjUyLS44NzIsMS4xNTdjLTMuMTY0Ljk1OC0xMy4xNjgsMS4yNDgtMTUuOTQ4LjAzOC0xLS40MzUuODc0LTEuMDM4LDEuNDY0LTEuMTY0YTMuOCwzLjgsMCwwLDEsLjk2Ni0uMTA4Yy0xLjExMS0uNzgzLTcuMTgxLDEuNTM3LTMuMDgzLDIuMiwxMS4xNzYsMS44MTIsMjAuMzcyLS44MTYsMTcuNDczLTIuMTI0XFxcIiBzdHlsZT1cXFwiZmlsbDojNTM4MmExXFxcIi8+PHBhdGggZD1cXFwiTTEyLjg0LDE3LjQxMnMtNS4wODksMS4yMDktMS44LDEuNjQ4YTM4LjIyNSwzOC4yMjUsMCwwLDAsNi43MzEtLjA3MmMyLjEwNi0uMTc4LDQuMjIxLS41NTUsNC4yMjEtLjU1NWE4LjkzNCw4LjkzNCwwLDAsMC0xLjI4LjY4NWMtNS4xNjgsMS4zNTktMTUuMTUxLjcyNy0xMi4yNzctLjY2M2E5LjYyOSw5LjYyOSwwLDAsMSw0LjQwNy0xLjA0MlxcXCIgc3R5bGU9XFxcImZpbGw6IzUzODJhMVxcXCIvPjxwYXRoIGQ9XFxcIk0yMS45NjksMjIuNTE1YzUuMjUzLTIuNzMsMi44MjQtNS4zNTMsMS4xMjktNWEzLjkzMiwzLjkzMiwwLDAsMC0uNi4xNjEuOTU3Ljk1NywwLDAsMSwuNDQ5LS4zNDZjMy4zNTQtMS4xNzksNS45MzMsMy40NzgtMS4wODMsNS4zMjJhLjQ1OC40NTgsMCwwLDAsLjEwNi0uMTM4XFxcIiBzdHlsZT1cXFwiZmlsbDojNTM4MmExXFxcIi8+PHBhdGggZD1cXFwiTTE4LjgsMnMyLjkwOSwyLjkxLTIuNzU5LDcuMzg2Yy00LjU0NiwzLjU5LTEuMDM3LDUuNjM3LDAsNy45NzUtMi42NTMtMi4zOTQtNC42LTQuNS0zLjI5NC02LjQ2M0MxNC42NjQsOC4wMTksMTkuOTc2LDYuNjIzLDE4LjgsMlxcXCIgc3R5bGU9XFxcImZpbGw6IzUzODJhMVxcXCIvPjxwYXRoIGQ9XFxcIk0xMy4zNTYsMjkuOTEyYzUuMDQyLjMyMywxMi43ODYtLjE3OSwxMi45NjktMi41NjUsMCwwLS4zNTMuOS00LjE2NywxLjYyM2E0MS40NTgsNDEuNDU4LDAsMCwxLTEyLjc2LjJzLjY0NS41MzMsMy45NTkuNzQ2XFxcIiBzdHlsZT1cXFwiZmlsbDojNTM4MmExXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIvL1wiLFxuXHRcdF0sXG5cdH0sXG5cdFwiSmF2YVNjcmlwdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmNWRlMTlcIixcblx0XHRpY29uOiBcIjxyZWN0IHg9XFxcIjJcXFwiIHk9XFxcIjJcXFwiIHdpZHRoPVxcXCIyOFxcXCIgaGVpZ2h0PVxcXCIyOFxcXCIgc3R5bGU9XFxcImZpbGw6I2Y1ZGUxOVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC44MDksMjMuODc1YTIuODY2LDIuODY2LDAsMCwwLDIuNiwxLjZjMS4wOSwwLDEuNzg3LS41NDUsMS43ODctMS4zLDAtLjktLjcxNi0xLjIyMi0xLjkxNi0xLjc0N2wtLjY1OC0uMjgyYy0xLjktLjgwOS0zLjE2LTEuODIyLTMuMTYtMy45NjQsMC0xLjk3MywxLjUtMy40NzYsMy44NTMtMy40NzZhMy44ODksMy44ODksMCwwLDEsMy43NDIsMi4xMDdMMjUsMTguMTI4QTEuNzg5LDEuNzg5LDAsMCwwLDIzLjMxMSwxN2ExLjE0NSwxLjE0NSwwLDAsMC0xLjI1OSwxLjEyOGMwLC43ODkuNDg5LDEuMTA5LDEuNjE4LDEuNmwuNjU4LjI4MmMyLjIzNi45NTksMy41LDEuOTM2LDMuNSw0LjEzMywwLDIuMzY5LTEuODYxLDMuNjY3LTQuMzYsMy42NjdhNS4wNTUsNS4wNTUsMCwwLDEtNC43OTUtMi42OTFabS05LjI5NS4yMjhjLjQxMy43MzMuNzg5LDEuMzUzLDEuNjkzLDEuMzUzLjg2NCwwLDEuNDEtLjMzOCwxLjQxLTEuNjUzVjE0Ljg1NmgyLjYzMXY4Ljk4MmMwLDIuNzI0LTEuNiwzLjk2NC0zLjkyOSwzLjk2NGE0LjA4NSw0LjA4NSwwLDAsMS0zLjk0Ny0yLjRaXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIvL1wiLFxuXHRcdF0sXG5cdH0sXG5cdFwiSlNPTlwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmNWRlMTlcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk00LjAxNCwxNC45NzZhMi41MSwyLjUxLDAsMCwwLDEuNTY3LS41MThBMi4zNzcsMi4zNzcsMCwwLDAsNi4zODYsMTMuMSwxNS4yNjEsMTUuMjYxLDAsMCwwLDYuNiwxMC4xNTZxLjAxMi0yLjA4NS4wNzUtMi43NDdhNS4yMzYsNS4yMzYsMCwwLDEsLjQxOC0xLjY4NiwzLjAyNSwzLjAyNSwwLDAsMSwuNzU1LTEuMDE4QTMuMDQ2LDMuMDQ2LDAsMCwxLDksNC4xMjUsNi43NjIsNi43NjIsMCwwLDEsMTAuNTQ0LDRoLjdWNS45NmgtLjM4N2EyLjMzOCwyLjMzOCwwLDAsMC0xLjcyMy40NjhBMy40LDMuNCwwLDAsMCw4LjcwOSw4LjUyYTM2LjA1NCwzNi4wNTQsMCwwLDEtLjEzNyw0LjEzMyw0LjczNCw0LjczNCwwLDAsMS0uNzY4LDIuMDZBNC41NjcsNC41NjcsMCwwLDEsNi4xLDE2YTMuODA5LDMuODA5LDAsMCwxLDEuOTkyLDEuNzU0LDguODYxLDguODYxLDAsMCwxLC42MTgsMy44NjVxMCwyLjQzNS4wNSwyLjlBMS43NTUsMS43NTUsMCwwLDAsOS4yNjQsMjUuN2EyLjYzOSwyLjYzOSwwLDAsMCwxLjU5Mi4zMzdoLjM4N1YyOGgtLjdhNS42NTUsNS42NTUsMCwwLDEtMS43NzMtLjIsMi45NywyLjk3LDAsMCwxLTEuMzI0LS45MywzLjM1MywzLjM1MywwLDAsMS0uNjgxLTEuNjNBMjQuMTc1LDI0LjE3NSwwLDAsMSw2LjYsMjIuMDA2LDE2LjQ2OSwxNi40NjksMCwwLDAsNi4zODYsMTguOWEyLjQwOCwyLjQwOCwwLDAsMC0uODA1LTEuMzYxLDIuNDg5LDIuNDg5LDAsMCwwLTEuNTY3LS41MjRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjVkZTE5XFxcIi8+PHBhdGggZD1cXFwiTTI3Ljk4NiwxNy4wMTFhMi40ODksMi40ODksMCwwLDAtMS41NjcuNTI0LDIuNDA4LDIuNDA4LDAsMCwwLS44MDUsMS4zNjEsMTYuNDY5LDE2LjQ2OSwwLDAsMC0uMjEyLDMuMTA5LDI0LjE3NSwyNC4xNzUsMCwwLDEtLjE2OSwzLjIzNCwzLjM1MywzLjM1MywwLDAsMS0uNjgxLDEuNjMsMi45NywyLjk3LDAsMCwxLTEuMzI0LjkzLDUuNjU1LDUuNjU1LDAsMCwxLTEuNzczLjJoLS43VjI2LjA0aC4zODdhMi42MzksMi42MzksMCwwLDAsMS41OTItLjMzNywxLjc1NSwxLjc1NSwwLDAsMCwuNTA2LTEuMTg2cS4wNS0uNDYyLjA1LTIuOWE4Ljg2MSw4Ljg2MSwwLDAsMSwuNjE4LTMuODY1QTMuODA5LDMuODA5LDAsMCwxLDI1LjksMTZhNC41NjcsNC41NjcsMCwwLDEtMS43LTEuMjg2LDQuNzM0LDQuNzM0LDAsMCwxLS43NjgtMi4wNiwzNi4wNTQsMzYuMDU0LDAsMCwxLS4xMzctNC4xMzMsMy40LDMuNCwwLDAsMC0uNDI1LTIuMDkyLDIuMzM4LDIuMzM4LDAsMCwwLTEuNzIzLS40NjhoLS4zODdWNGguN0E2Ljc2Miw2Ljc2MiwwLDAsMSwyMyw0LjEyNWEzLjA0NiwzLjA0NiwwLDAsMSwxLjE0OS41ODEsMy4wMjUsMy4wMjUsMCwwLDEsLjc1NSwxLjAxOCw1LjIzNiw1LjIzNiwwLDAsMSwuNDE4LDEuNjg2cS4wNjIuNjYyLjA3NSwyLjc0N2ExNS4yNjEsMTUuMjYxLDAsMCwwLC4yMTIsMi45NDcsMi4zNzcsMi4zNzcsMCwwLDAsLjgwNSwxLjM1NSwyLjUxLDIuNTEsMCwwLDAsMS41NjcuNTE4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y1ZGUxOVxcXCIvPlwiLFxuXHR9LFxuXHRcIkpTT041XCI6IHtcblx0XHRjb2xvdXI6IFwiIzkwOTA5MFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTEyLjgxNSwxNS4xNjdsLjY4LTUuNjc2aDYuNDg5djJoLTQuNEwxNS4zMjksMTMuN2EyLjQsMi40LDAsMCwxLC4yNTItLjEyMiwyLjk2MiwyLjk2MiwwLDAsMSwuMzc0LS4xMywyLjksMi45LDAsMCwxLC40NTgtLjEwNiwyLjgzNCwyLjgzNCwwLDAsMSwuNTEyLS4wNDYsMy45ODMsMy45ODMsMCwwLDEsMS40NjYuMjUyLDIuNzM2LDIuNzM2LDAsMCwxLDEuMDc2LjcyMywzLjE2NywzLjE2NywwLDAsMSwuNjY0LDEuMTY4LDUsNSwwLDAsMSwuMjI4LDEuNTg4LDQuMTU3LDQuMTU3LDAsMCwxLS4yMzYsMS4zODcsMy4zMDcsMy4zMDcsMCwwLDEtMS45LDIuMDI5LDQuMyw0LjMsMCwwLDEtMS43MTUuMzEyLDQuNzUsNC43NSwwLDAsMS0xLjQ1OC0uMjI4LDQuMDU0LDQuMDU0LDAsMCwxLTEuMjUyLS42NTYsMy4zNTksMy4zNTksMCwwLDEtLjg3OC0xLjA0NiwyLjc4NywyLjc4NywwLDAsMS0uMzItMS4zODJIMTUuMThhMS40NTgsMS40NTgsMCwwLDAsLjM5Ljk3LDEuMzgzLDEuMzgzLDAsMCwwLDEuNTU4LjIwNiwxLjA4OSwxLjA4OSwwLDAsMCwuNC0uNDEyLDEuNzQ5LDEuNzQ5LDAsMCwwLC4yMDYtLjYxOCw0LjMsNC4zLDAsMCwwLC4wNjItLjc0LDIuNzA5LDIuNzA5LDAsMCwwLS4wOTItLjc0LDEuNTA2LDEuNTA2LDAsMCwwLS4yODItLjU1OCwxLjIyOSwxLjIyOSwwLDAsMC0uNS0uMzQ5LDEuNzgsMS43OCwwLDAsMC0uNzE4LS4xMywyLjEyMSwyLjEyMSwwLDAsMC0uNS4wNTQsMS44MDUsMS44MDUsMCwwLDAtLjM4Mi4xMzgsMS4zMTgsMS4zMTgsMCwwLDAtLjI3NC4xOSwxLjI4LDEuMjgsMCwwLDAtLjE5LjJsLTIuMDQ4LS40ODJcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNNS45ODUsMjMuMzQzYTQuNDUsNC40NSwwLDAsMS0xLjMxMS0uNTgsMy4yLDMuMiwwLDAsMS0uODQ4LS44MjQsMy4wMTIsMy4wMTIsMCwwLDEtLjQ1OC0xLjAwOCw0Ljg3OSw0Ljg3OSwwLDAsMS0uMTMtMS4xNDN2LTEuNTVhMi4zLDIuMywwLDAsMC0uMDc2LS42MTgsMS4xODQsMS4xODQsMCwwLDAtLjIyMi0uNDY2Ljk2OS45NjksMCwwLDAtLjM4Mi0uMzA2QTEuMzI0LDEuMzI0LDAsMCwwLDIsMTYuNzQ0VjE1LjAxMmExLjA3NCwxLjA3NCwwLDAsMCwuOTM3LS40LDEuODQxLDEuODQxLDAsMCwwLC4zLTEuMXYtMS41NWE0Ljg3OSw0Ljg3OSwwLDAsMSwuMTMtMS4xNDMsMy4wMzcsMy4wMzcsMCwwLDEsLjQ1OC0xLjAwOEEzLjE3LDMuMTcsMCwwLDEsNC42NzEsOWE0LjQ4Miw0LjQ4MiwwLDAsMSwxLjMxMS0uNThsLjQ4LDEuMzQ0YTEuMjIyLDEuMjIyLDAsMCwwLS40ODguMzI4LDEuNzQyLDEuNzQyLDAsMCwwLS4zMDYuNSwyLjUyNCwyLjUyNCwwLDAsMC0uMTYuNjM0LDUuODI3LDUuODI3LDAsMCwwLS4wNDYuNzR2MS41NUEyLjg0NCwyLjg0NCwwLDAsMSw1LjEyNiwxNC45YTIuMzcsMi4zNywwLDAsMS0xLjA3Ni45ODMsMi4zNTYsMi4zNTYsMCwwLDEsMS4wNzYuOTkyLDIuODA4LDIuODA4LDAsMCwxLC4zMzYsMS4zNzR2MS41NWE1LjgyNyw1LjgyNywwLDAsMCwuMDQ2Ljc0LDIuNTg2LDIuNTg2LDAsMCwwLC4xNi42MzQsMS42ODQsMS42ODQsMCwwLDAsLjMwNi41QTEuMjIyLDEuMjIyLDAsMCwwLDYuNDYyLDIyYzAtLjAwNS0uNDc3LDEuMzQ0LS40NzcsMS4zNDRcXFwiIHN0eWxlPVxcXCJmaWxsOiM5OTlcXFwiLz48cGF0aCBkPVxcXCJNOC4yMTUsMTkuMzkzYTEuMjg5LDEuMjg5LDAsMCwxLC4xLS41MTIsMS4yMTIsMS4yMTIsMCwwLDEsLjI5LS40LDEuMzczLDEuMzczLDAsMCwxLC40NS0uMjc0LDEuNjM3LDEuNjM3LDAsMCwxLC41OC0uMSwxLjU1NSwxLjU1NSwwLDAsMSwuNTcyLjEsMS4yNjksMS4yNjksMCwwLDEsLjQ1LjI3NCwxLjA3NywxLjA3NywwLDAsMSwuMjkuNCwxLjI5NCwxLjI5NCwwLDAsMSwwLDEuMDI0LDEuMTUxLDEuMTUxLDAsMCwxLS4yOS40MTIsMS4zODgsMS4zODgsMCwwLDEtLjQ1LjI2OCwxLjYxMywxLjYxMywwLDAsMS0uNTcyLjEsMS41NzgsMS41NzgsMCwwLDEtLjU4LS4xLDEuNDA5LDEuNDA5LDAsMCwxLS40NS0uMjY4LDEuMjI5LDEuMjI5LDAsMCwxLS4zOS0uOTI0bTAtNi4wODhhMS4yODksMS4yODksMCwwLDEsLjEtLjUxMiwxLjIxMiwxLjIxMiwwLDAsMSwuMjktLjQsMS4zNzMsMS4zNzMsMCwwLDEsLjQ1LS4yNzQsMS42MzcsMS42MzcsMCwwLDEsLjU4LS4xLDEuNTU1LDEuNTU1LDAsMCwxLC41NzIuMSwxLjI2OSwxLjI2OSwwLDAsMSwuNDUuMjc0LDEuMDc3LDEuMDc3LDAsMCwxLC4yOS40LDEuMjk0LDEuMjk0LDAsMCwxLDAsMS4wMjQsMS4xNTEsMS4xNTEsMCwwLDEtLjI5LjQxMiwxLjM4OCwxLjM4OCwwLDAsMS0uNDUuMjY4LDEuNjEzLDEuNjEzLDAsMCwxLS41NzIuMSwxLjU3OCwxLjU3OCwwLDAsMS0uNTgtLjEsMS40MDksMS40MDksMCwwLDEtLjQ1LS4yNjgsMS4yMjksMS4yMjksMCwwLDEtLjM5LS45MjRcXFwiIHN0eWxlPVxcXCJmaWxsOiM5OTlcXFwiLz48cGF0aCBkPVxcXCJNMjQuMjQsMjAuMjkzYTMuNjQ4LDMuNjQ4LDAsMCwxLS4xMjIuOTI5LDQuNTM0LDQuNTM0LDAsMCwxLS4zMzYuODkxLDQuNzA2LDQuNzA2LDAsMCwxLS41LjgwNyw0LjAwNSw0LjAwNSwwLDAsMS0uNjEuNjY0bC0xLjMtLjYxYy4wODEtLjE3My4xNjgtLjM0OS4yNi0uNTI2YTQuODQ2LDQuODQ2LDAsMCwwLC4yNjgtLjU1OCw0LjQ0Myw0LjQ0MywwLDAsMCwuMjA2LS42NTYsMy40MDYsMy40MDYsMCwwLDAsLjA4NC0uOFYxOC42NTZoMi4wNTlsLS4wMDgsMS42MzZcXFwiIHN0eWxlPVxcXCJmaWxsOiM5OTlcXFwiLz48cGF0aCBkPVxcXCJNMjUuNTM4LDIxLjk5NGExLjI1MSwxLjI1MSwwLDAsMCwuNDg4LS4zMjgsMS43MDcsMS43MDcsMCwwLDAsLjMwNi0uNSwyLjUyNSwyLjUyNSwwLDAsMCwuMTYtLjYzNCw1LjgyNiw1LjgyNiwwLDAsMCwuMDQ2LS43NHYtMS41NWEyLjg0NCwyLjg0NCwwLDAsMSwuMzM2LTEuMzgyLDIuMzY0LDIuMzY0LDAsMCwxLDEuMDg0LS45ODMsMi4zNjQsMi4zNjQsMCwwLDEtMS4wODQtLjk4MywyLjg0NCwyLjg0NCwwLDAsMS0uMzM2LTEuMzgydi0xLjU1YTUuODI3LDUuODI3LDAsMCwwLS4wNDYtLjc0LDIuNTg2LDIuNTg2LDAsMCwwLS4xNi0uNjM0LDEuNjg0LDEuNjg0LDAsMCwwLS4zMDYtLjUsMS4yMjIsMS4yMjIsMCwwLDAtLjQ4OC0uMzI4bC40OC0xLjMzOEE0LjQ1LDQuNDUsMCwwLDEsMjcuMzI5LDlhMy4wOTIsMy4wOTIsMCwwLDEsLjg0OC44MTUsMi44OTIsMi44OTIsMCwwLDEsLjQ1LDEuMDA4LDQuNjA2LDQuNjA2LDAsMCwxLC4xMzgsMS4xNDN2MS41NWEyLjY1NSwyLjY1NSwwLDAsMCwuMDY4LjYyNiwxLjQ0OCwxLjQ0OCwwLDAsMCwuMjIyLjQ3NCwxLjAzNywxLjAzNywwLDAsMCwuMzgyLjMsMS4zNzYsMS4zNzYsMCwwLDAsLjU2NC4xMDZ2MS43MzFhMS4wNzcsMS4wNzcsMCwwLDAtLjk0Ni40MTIsMS44MjgsMS44MjgsMCwwLDAtLjI5LDEuMDg0djEuNTVhNC42MDYsNC42MDYsMCwwLDEtLjEzOCwxLjE0MywyLjkxNSwyLjkxNSwwLDAsMS0uNDUsMS4wMDgsMy4xNTcsMy4xNTcsMCwwLDEtLjg0OC44MjQsNC40ODIsNC40ODIsMCwwLDEtMS4zMTEuNThsLS40OC0xLjM1MlxcXCIgc3R5bGU9XFxcImZpbGw6Izk5OVxcXCIvPlwiLFxuXHR9LFxuXHRcIkp1bGlhXCI6IHtcblx0XHRjb2xvdXI6IFwiIzQwNjNkOFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTcuNDQ4LDIxLjk4M1YxMy43NzVsLTIuNDMyLjY2OXY4LjcyOWEyLjY2LDIuNjYsMCwwLDEtLjEwNi45MjkuMzM2LjMzNiwwLDAsMS0uMzA4LjIzOS40MDUuNDA1LDAsMCwxLS4yMTItLjA3NCwxLjI4MiwxLjI4MiwwLDAsMS0uMjg3LS4zLDIuODEzLDIuODEzLDAsMCwwLS4zNzctLjQwOS44NzQuODc0LDAsMCwwLS42MTEtLjIwNywxLjIyLDEuMjIsMCwwLDAtLjgxMi4yNTUuNzg5Ljc4OSwwLDAsMC0uMy42MjdBLjkwNy45MDcsMCwwLDAsMi41NDIsMjVhMy4xMTUsMy4xMTUsMCwwLDAsMS41NjEuMzE5LDcuMDY1LDcuMDY1LDAsMCwwLDEuMzctLjEyMiwyLjM2MSwyLjM2MSwwLDAsMCwxLjA1Ny0uNDgzLDIuMjkyLDIuMjkyLDAsMCwwLC42OC0xLjAxNCw1LjA5NCw1LjA5NCwwLDAsMCwuMjM5LTEuNzE1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzI1MjUyNVxcXCIvPjxwYXRoIGQ9XFxcIk0xMC44MjUsMTQuMDA4SDguNHY1LjYxOGEyLjI0MSwyLjI0MSwwLDAsMCwuMjE4Ljk3NywyLjQ4OSwyLjQ4OSwwLDAsMCwuNi44LDIuOSwyLjksMCwwLDAsLjg5Mi41MzYsMy4wNDUsMy4wNDUsMCwwLDAsMS4xLjIsMi41NSwyLjU1LDAsMCwwLDEuMDUxLS4yNDQsNC4zNDcsNC4zNDcsMCwwLDAsMS4wMTktLjY0OHYuNzQzSDE1LjcxVjE0LjAwOEgxMy4yODl2NS43NTZhMi43NjQsMi43NjQsMCwwLDEtLjY0OC43MDYsMS4xMzksMS4xMzksMCwwLDEtLjY0OC4yODEsMS4xNTUsMS4xNTUsMCwwLDEtLjQ1Ny0uMDksMS4yNjMsMS4yNjMsMCwwLDEtLjM3Mi0uMjM5LDEuMDYsMS4wNiwwLDAsMS0uMjUtLjM1NiwxLjA5MSwxLjA5MSwwLDAsMS0uMDktLjQ0MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyNTI1MjVcXFwiLz48cGF0aCBkPVxcXCJNMTkuMDc0LDIxLjk4M1YxMC4xMzJsLTIuNDExLjY2OVYyMS45ODNaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjUyNTI1XFxcIi8+PHBhdGggZD1cXFwiTTIwLjAzOCwxNC40NDR2Ny41NGgyLjQyMVYxMy43NzVaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjUyNTI1XFxcIi8+PHBhdGggZD1cXFwiTTI3LjU2OCwxNy44NjN2Mi4zcS0uMzcyLjI3Ni0uNjc0LjQ1N2ExLjE2NSwxLjE2NSwwLDAsMS0uNi4xODEuNDY4LjQ2OCwwLDAsMS0uMjc2LS4wOSwxLDEsMCwwLDEtLjIzNC0uMjM5LDEuMTM4LDEuMTM4LDAsMCwxLS4xNjUtLjM1NiwxLjU3NiwxLjU3NiwwLDAsMS0uMDU4LS40My45NjguOTY4LDAsMCwxLC4xODEtLjU1MiwyLjMwNiwyLjMwNiwwLDAsMSwuNDczLS41LDQuNTcyLDQuNTcyLDAsMCwxLC42NDgtLjQzLDcuNjEyLDcuNjEyLDAsMCwxLC43MDYtLjM0NVpNMzAsMjEuOTgzVjE2YTIuMDgzLDIuMDgzLDAsMCwwLS4xOTEtLjksMS43NzksMS43NzksMCwwLDAtLjU5NS0uNjksMy4wMDYsMy4wMDYsMCwwLDAtMS4wMjUtLjQ0MSw2LjIyNSw2LjIyNSwwLDAsMC0xLjQ4MS0uMTU0LDUuNzM1LDUuNzM1LDAsMCwwLTEuMzI3LjE0OSw0LjYsNC42LDAsMCwwLTEuMS40LDIuMzczLDIuMzczLDAsMCwwLS43NTkuNjExLDEuMjE2LDEuMjE2LDAsMCwwLS4yODEuNzcuOTU4Ljk1OCwwLDAsMCwuMzE5LjczOCwxLjE3OCwxLjE3OCwwLDAsMCwuODI4LjI5MiwxLjM2NCwxLjM2NCwwLDAsMCwuNTQ3LS4xLjguOCwwLDAsMCwuMzM1LS4yNTUuOTg2Ljk4NiwwLDAsMCwuMTY1LS4zNzIsMS45NzgsMS45NzgsMCwwLDAsLjA0OC0uNDM1LDEuMDMxLDEuMDMxLDAsMCwxLC4yMjMtLjY2OS45NzUuOTc1LDAsMCwxLC44LS4yNzYsMS4wMDgsMS4wMDgsMCwwLDEsLjc4MS4zMTksMS41OTQsMS41OTQsMCwwLDEsLjI5MiwxLjA4M3YuNzg2bC0uMjY1LjA2NHEtLjQ4OC4xNDktLjk4OC4zMTN0LS45NjEuMzYxYTcuODg0LDcuODg0LDAsMCwwLS44NjUuNDMsMy41MTEsMy41MTEsMCwwLDAtLjcwNi41MzEsMi4zMTksMi4zMTksMCwwLDAtLjQ3OC42NjksMS45MTgsMS45MTgsMCwwLDAtLjE3NS44MjgsMi4wMzQsMi4wMzQsMCwwLDAsLjE2NS44MjMsMS44NzYsMS44NzYsMCwwLDAsLjQ3My42NTMsMi4yNTUsMi4yNTUsMCwwLDAsLjc0OS40MzUsMi45MDcsMi45MDcsMCwwLDAsLjk5My4xNTksMy42NzksMy42NzksMCwwLDAsLjctLjA1OCwyLjUwOSwyLjUwOSwwLDAsMCwuNTM2LS4xNjUsMi4yMDksMi4yMDksMCwwLDAsLjQzLS4yNXEuMTkxLS4xNDMuMzkzLS4zMTN2LjYzN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMyNTI1MjVcXFwiLz48Y2lyY2xlIGN4PVxcXCI2LjIwNFxcXCIgY3k9XFxcIjExLjY3MlxcXCIgcj1cXFwiMS41XFxcIiBzdHlsZT1cXFwiZmlsbDojNjY4MmRmXFxcIi8+PHBhdGggZD1cXFwiTTYuMiwxMy4yODdhMS42MTUsMS42MTUsMCwxLDEsMS42MTUtMS42MTVBMS42MTcsMS42MTcsMCwwLDEsNi4yLDEzLjI4N1ptMC0zYTEuMzg1LDEuMzg1LDAsMSwwLDEuMzg1LDEuMzg1QTEuMzg2LDEuMzg2LDAsMCwwLDYuMiwxMC4yODdaXFxcIiBzdHlsZT1cXFwiZmlsbDojNDA2M2Q4XFxcIi8+PGNpcmNsZSBjeD1cXFwiMjEuNDE3XFxcIiBjeT1cXFwiMTEuNjcyXFxcIiByPVxcXCIxLjVcXFwiIHN0eWxlPVxcXCJmaWxsOiNkNTYzNWNcXFwiLz48cGF0aCBkPVxcXCJNMjEuNDE3LDEzLjI4N2ExLjYxNSwxLjYxNSwwLDEsMSwxLjYxNS0xLjYxNUExLjYxNywxLjYxNywwLDAsMSwyMS40MTcsMTMuMjg3Wm0wLTNBMS4zODUsMS4zODUsMCwxLDAsMjIuOCwxMS42NzIsMS4zODYsMS4zODYsMCwwLDAsMjEuNDE3LDEwLjI4N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNjYjNjMzNcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMy4zODVcXFwiIGN5PVxcXCI4LjI5N1xcXCIgcj1cXFwiMS41XFxcIiBzdHlsZT1cXFwiZmlsbDojNjBhZDUxXFxcIi8+PHBhdGggZD1cXFwiTTIzLjM4NSw5LjkxMkExLjYxNSwxLjYxNSwwLDEsMSwyNSw4LjMsMS42MTcsMS42MTcsMCwwLDEsMjMuMzg1LDkuOTEyWm0wLTNBMS4zODUsMS4zODUsMCwxLDAsMjQuNzcsOC4zLDEuMzg2LDEuMzg2LDAsMCwwLDIzLjM4NSw2LjkxMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzODk4MjZcXFwiLz48Y2lyY2xlIGN4PVxcXCIyNS4zNTRcXFwiIGN5PVxcXCIxMS42NzJcXFwiIHI9XFxcIjEuNVxcXCIgc3R5bGU9XFxcImZpbGw6I2FhNzljMVxcXCIvPjxwYXRoIGQ9XFxcIk0yNS4zNTQsMTMuMjg3YTEuNjE1LDEuNjE1LDAsMSwxLDEuNjE1LTEuNjE1QTEuNjE3LDEuNjE3LDAsMCwxLDI1LjM1NCwxMy4yODdabTAtM2ExLjM4NSwxLjM4NSwwLDEsMCwxLjM4NSwxLjM4NUExLjM4NiwxLjM4NiwwLDAsMCwyNS4zNTQsMTAuMjg3WlxcXCIgc3R5bGU9XFxcImZpbGw6Izk1NThiMlxcXCIvPlwiLFxuXHR9LFxuXHRcIktvdGxpblwiOiB7XG5cdFx0Y29sb3VyOiBcIiM5ZDRiOWRcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjMxMS4zMzZcXFwiIHkxPVxcXCIxNDUyLjA2NFxcXCIgeDI9XFxcIjI4My4zNDJcXFwiIHkyPVxcXCIxNDgwLjA1OFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMjgxLjQgLTE0NTApXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZTQ0ODU3XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQ3XFxcIiBzdG9wLWNvbG9yPVxcXCIjOWQ0YjlkXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNmQ1ZmFhXFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9rb3RsaW48L3RpdGxlPjxwYXRoIGQ9XFxcIk0zMCwzMEgyVjJIMzBMMTYsMTZaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+XCIsXG5cdH0sXG5cdFwiS3VzdG9cIjoge1xuXHRcdGNvbG91cjogXCIjNTliNGQ5XCIsXG5cdFx0aWNvbjogXCI8cmVjdCB4PVxcXCIwLjU1XFxcIiB5PVxcXCIyMi4zMzlcXFwiIHdpZHRoPVxcXCIxNS40MzNcXFwiIGhlaWdodD1cXFwiMi43OTZcXFwiIHJ4PVxcXCIwLjQzOVxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTE0LjM2MyAxMi43OTcpIHJvdGF0ZSgtNDQuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2I4ZDQzMlxcXCIvPjxyZWN0IHg9XFxcIjEuMzcyXFxcIiB5PVxcXCIxNi4zODJcXFwiIHdpZHRoPVxcXCI5Ljg1OVxcXCIgaGVpZ2h0PVxcXCIyLjc5NlxcXCIgcng9XFxcIjAuNDM5XFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMTAuNzI3IDkuNjYzKSByb3RhdGUoLTQ0Ljk5OSlcXFwiIHN0eWxlPVxcXCJmaWxsOiNiOGQ0MzJcXFwiLz48cmVjdCB4PVxcXCI5LjIzMlxcXCIgeT1cXFwiMjQuMzAxXFxcIiB3aWR0aD1cXFwiOS44NTlcXFwiIGhlaWdodD1cXFwiMi43OTZcXFwiIHJ4PVxcXCIwLjQzOVxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTE0LjAyNCAxNy41NDEpIHJvdGF0ZSgtNDQuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2I4ZDQzMlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMzAgMiAyIDIgMzAgMjkuOTk5IDMwIDJcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDc4ZDRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjEwLjI4MiAxMC4yODIgMjEuNzE4IDIxLjcxOCAzMCAxMy40MzYgMzAgMiAxOC41NjQgMiAxMC4yODIgMTAuMjgyXFxcIiBzdHlsZT1cXFwiZmlsbDojNTliNGQ5XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIzMCAyOS45OTkgMzAgMiAxNiAxNiAzMCAyOS45OTlcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmY7b3BhY2l0eTowLjIwMDAwMDAwMjk4MDIzMjI0O2lzb2xhdGlvbjppc29sYXRlXFxcIi8+PHJlY3QgeD1cXFwiMTYuMjI2XFxcIiB5PVxcXCI5LjAwMVxcXCIgd2lkdGg9XFxcIjIuNzk2XFxcIiBoZWlnaHQ9XFxcIjIuNzk2XFxcIiByeD1cXFwiMC42MjJcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0yLjE5MiAxNS41MDcpIHJvdGF0ZSgtNDQuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxyZWN0IHg9XFxcIjIwLjE4XFxcIiB5PVxcXCI1LjA0OFxcXCIgd2lkdGg9XFxcIjIuNzk2XFxcIiBoZWlnaHQ9XFxcIjIuNzk2XFxcIiByeD1cXFwiMC42MjJcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDEuNzYyIDE3LjE0Nikgcm90YXRlKC00NC45OTkpXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHJlY3QgeD1cXFwiMjAuMThcXFwiIHk9XFxcIjEyLjk1NVxcXCIgd2lkdGg9XFxcIjIuNzk2XFxcIiBoZWlnaHQ9XFxcIjIuNzk2XFxcIiByeD1cXFwiMC42MjJcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0zLjgyOSAxOS40NjEpIHJvdGF0ZSgtNDQuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxyZWN0IHg9XFxcIjI0LjEzM1xcXCIgeT1cXFwiOS4wMDJcXFwiIHdpZHRoPVxcXCIyLjc5NlxcXCIgaGVpZ2h0PVxcXCIyLjc5NlxcXCIgcng9XFxcIjAuNjIyXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLjEyNCAyMS4wOTkpIHJvdGF0ZSgtNDQuOTk5KVxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIkxhVGVYXCI6IHtcblx0XHRjb2xvdXI6IFwiI2NmY2ZjZlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTExLjMzMywxMy4xMjJjLS4xMjgtMS41NjItLjI0MS0yLjc1Ni0yLjI4Ny0yLjc1Nkg3LjkxdjguNGgyLjE0NXYuNjExbC0zLjA4My0uMDI5LTMuMDgyLjAyOXYtLjYxMUg2LjAzNHYtOC40SDQuODg0Yy0yLjA0NiwwLTIuMTU5LDEuMjA4LTIuMjg3LDIuNzU2SDJsLjI4NC0zLjM2N2g5LjM2MmwuMjg0LDMuMzY3aC0uNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZmNmY2ZcXFwiLz48cGF0aCBkPVxcXCJNMTkuMjg5LDIyLjUzSDEwLjQxVjIxLjkyaDEuNTA2VjEzLjQ2N0gxMC40MXYtLjYxMWg4LjYzN2wuNDEyLDMuMzY3aC0uNmMtLjIxMy0xLjgzMy0uNjgyLTIuNzU2LTIuODU1LTIuNzU2SDEzLjc5MVYxNy4yaC44MzhjMS4zNjQsMCwxLjUwNS0uNiwxLjUwNS0xLjY2MmguNnYzLjkzNWgtLjZjMC0xLjA4LS4xNDItMS42NjItMS41MDUtMS42NjJoLS44Mzh2NC4xMDZoMi4yMTZjMi40NzIsMCwzLTEuMTA4LDMuMy0zLjIyNWguNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZmNmY2ZcXFwiLz48cGF0aCBkPVxcXCJNMjcuNzI3LDE5LjE4NmMtLjU0LDAtMS45NiwwLTIuNDE1LjAyOVYxOC42aDEuMTc5bC0yLjU1Ny0zLjU1Mi0yLjUyOSwzLjM4MUE0LjEsNC4xLDAsMCwwLDIyLjcsMTguNnYuNjExYy0uMzU1LS4wMjktMS41NzYtLjAyOS0yLjAxNy0uMDI5LS40LDAtMS41NDgsMC0xLjg3NS4wMjlWMTguNmguMzgzYTcuNDU5LDcuNDU5LDAsMCwwLC44MjQtLjA0M2MuNS0uMDQzLjU0LS4wODUuNjY3LS4yNTZMMjMuNTM2LDE0LjVsLTMuMTUzLTQuNDE4SDE5VjkuNDdjLjM4NC4wMjgsMS43OS4wMjgsMi4yNzMuMDI4LjU4MiwwLDEuOTE4LDAsMi40MjktLjAyOHYuNjExSDIyLjUyOGwyLjExNywyLjk1NSwyLjA3NC0yLjc4NGE0LjEsNC4xLDAsMCwwLTEuMjkzLS4xN1Y5LjQ3Yy4zNTYuMDI4LDEuNTkxLjAyOCwyLjAzMi4wMjguNCwwLDEuNTM0LDAsMS44NjEtLjAyOHYuNjExaC0uMzY5YTUuMjY0LDUuMjY0LDAsMCwwLS44MzguMDQzYy0uNDY5LjA0My0uNTI2LjA3MS0uNjY3LjI1NmwtMi40LDMuMjFMMjguNjM2LDE4LjZIMzB2LjYxMUMyOS42NDUsMTkuMTg2LDI4LjE4MiwxOS4xODYsMjcuNzI3LDE5LjE4NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZmNmY2ZcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiVcIixcblx0XHRdLFxuXHR9LFxuXHRcIkxlc3NcIjoge1xuXHRcdGNvbG91cjogXCIjMmE0Zjg0XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItMy42MDlcXFwiIHkxPVxcXCItNDkyLjY4NVxcXCIgeDI9XFxcIi0zLjYwOVxcXCIgeTI9XFxcIi00ODAuMjcxXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDE5LjcxMiA1MDIuODkxKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMC4xNVxcXCIgc3RvcC1jb2xvcj1cXFwiIzJhNGY4NFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4zODhcXFwiIHN0b3AtY29sb3I9XFxcIiMyOTRlODJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMxNzJlNGVcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX2xlc3M8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOC41NTksMjAuMjI2YTIuNCwyLjQsMCwwLDEtMi4zOTQsMi4zOTRINi4wNGEyLjQsMi40LDAsMCwxLTIuMzk0LTIuMzk0VjEyLjZBMi40LDIuNCwwLDAsMSw2LjA0LDEwLjIwNkgyNi4xNjVBMi40LDIuNCwwLDAsMSwyOC41NTksMTIuNlpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMjQuMzQ5LDE2LjI1YTEuOTcyLDEuOTcyLDAsMCwxLDEuNTc4LDEuODkxLDEuNjksMS42OSwwLDAsMS0uNjUzLDEuNCwyLjkzNCwyLjkzNCwwLDAsMS0xLjg2Mi41NTksNC41NTgsNC41NTgsMCwwLDEtMi4yNDEtLjYxOCwxLjk4NiwxLjk4NiwwLDAsMSwuMTYtLjY2OSwxLjgzLDEuODMsMCwwLDEsLjM1LS41NzYsMy43LDMuNywwLDAsMCwxLjY0OS40OTMuOTY1Ljk2NSwwLDAsMCwuNTEtLjExMi4zMzkuMzM5LDAsMCwwLC4xNzgtLjNxMC0uMzUzLS41NDYtLjUyOWwtLjY1My0uMjQ3cS0xLjQ4Mi0uNTQtMS40ODItMS43NjJhMS43NTMsMS43NTMsMCwwLDEsLjYyMy0xLjQxNiwyLjU4NywyLjU4NywwLDAsMSwxLjY3OC0uNjQ4LDUuMDk0LDUuMDk0LDAsMCwxLDEuMTUuMTQ3LDQuNTU1LDQuNTU1LDAsMCwxLDEuMDMyLjQ3MiwxLjY2OCwxLjY2OCwwLDAsMS0uMTMuNzIyLDEuMjIsMS4yMiwwLDAsMS0uMzguNTU4LDQuMjYxLDQuMjYxLDAsMCwwLTEuNjYtLjQ0Ni41NDQuNTQ0LDAsMCwwLS4zNjIuMTA2LjMzOC4zMzgsMCwwLDAtLjEyNC4yN3EwLC4yODIuNDUxLjQ0NmwuNzM2LjI1OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmNmY2ZjZcXFwiLz48cGF0aCBkPVxcXCJNMTkuMSwxNi4yNWExLjk3MiwxLjk3MiwwLDAsMSwxLjU3NywxLjg5MSwxLjY5MSwxLjY5MSwwLDAsMS0uNjUyLDEuNCwyLjkzNywyLjkzNywwLDAsMS0xLjg2Mi41NTksNC41Niw0LjU2LDAsMCwxLTIuMjQxLS42MTgsMS45ODEsMS45ODEsMCwwLDEsLjE2LS42NjksMS44MjEsMS44MjEsMCwwLDEsLjM1LS41NzYsMy43LDMuNywwLDAsMCwxLjY0OS40OTMuOTYzLjk2MywwLDAsMCwuNTEtLjExMi4zNC4zNCwwLDAsMCwuMTc4LS4zcTAtLjM1My0uNTQ2LS41MjlsLS42NTMtLjI0N3EtMS40ODItLjU0LTEuNDgyLTEuNzYyYTEuNzUyLDEuNzUyLDAsMCwxLC42MjMtMS40MTYsMi41ODUsMi41ODUsMCwwLDEsMS42NzctLjY0OCw1LjA4OCw1LjA4OCwwLDAsMSwxLjE1LjE0Nyw0LjU1Miw0LjU1MiwwLDAsMSwxLjAzMi40NzIsMS42NjgsMS42NjgsMCwwLDEtLjEzLjcyMiwxLjIyLDEuMjIsMCwwLDEtLjM4LjU1OCw0LjI2Myw0LjI2MywwLDAsMC0xLjY2MS0uNDQ2LjU0My41NDMsMCwwLDAtLjM2Mi4xMDYuMzM5LjMzOSwwLDAsMC0uMTI0LjI3cTAsLjI4Mi40NTEuNDQ2bC43MzYuMjU5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y2ZjZmNlxcXCIvPjxwYXRoIGQ9XFxcIk0xNS4yNjQsMTYuMzMzYTIuODIyLDIuODIyLDAsMCwwLS4xNzItMSwyLjIzOSwyLjIzOSwwLDAsMC0uNDkyLS43ODcsMi4yOCwyLjI4LDAsMCwwLS43NzctLjUxNywyLjczNywyLjczNywwLDAsMC0xLjAyNi0uMzE0LDIuOCwyLjgsMCwwLDAtMS4xOC4zNjEsMi4yNTYsMi4yNTYsMCwwLDAtLjgzLjY0NiwyLjc2NSwyLjc2NSwwLDAsMC0uNDg3Ljk2OSw0LjQsNC40LDAsMCwwLS4xNiwxLjIxNiw1LjY4MSw1LjY4MSwwLDAsMCwuMTMsMS4yNTcsMi42MjgsMi42MjgsMCwwLDAsLjQ0NSwxLDIuMTA3LDIuMTA3LDAsMCwwLC44MTguNjU3LDIuOTM1LDIuOTM1LDAsMCwwLDEuMjUxLjI3NywzLjk1MiwzLjk1MiwwLDAsMCwyLjMyNC0uNzEyLDEuODY1LDEuODY1LDAsMCwwLS40ODQtMS4wODEsNi4xODgsNi4xODgsMCwwLDEtLjg1Ny4yNjIsMy4yMDgsMy4yMDgsMCwwLDEtLjY1Ni4wNzksMS4wMTcsMS4wMTcsMCwwLDEtLjgxNS0uMjksMS4xODcsMS4xODcsMCwwLDEtLjI3MS0uNzdoMy4wODNBNC40NDcsNC40NDcsMCwwLDAsMTUuMjY0LDE2LjMzM1ptLTMuMjQ4LjA4MWEyLjQzMywyLjQzMywwLDAsMSwuMjE4LTEsLjYzMi42MzIsMCwwLDEsLjU1OS0uMjY0LjY2LjY2LDAsMCwxLC41ODIuMjgyLDEuNzQ5LDEuNzQ5LDAsMCwxLC4xOTQuODU2di4xM0gxMi4wMTZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjZmNmY2XFxcIi8+PHBhdGggZD1cXFwiTTI5LjE4LDE3LjJhMS42MDUsMS42MDUsMCwwLDAtLjUzLDEuMjY1djIuMDUxYTEuODEsMS44MSwwLDAsMS0uNjgzLDEuNTU3LDIuOCwyLjgsMCwwLDEtMS42NTQuNTQ5bC0uMzczLDBWMjEuNTk0YTEuMjQxLDEuMjQxLDAsMCwwLC41OTUtLjMzNCwxLjM2OSwxLjM2OSwwLDAsMCwuNDE5LTEuMDQ3VjE4LjU1NmEyLjU0NSwyLjU0NSwwLDAsMSwuMjU3LTEuMzIzLDIuNSwyLjUsMCwwLDEsMS4yLS44MzgsMi41MjgsMi41MjgsMCwwLDEtMS4zMjQtMS4xNzksMi45NTYsMi45NTYsMCwwLDEtLjEzNS0xLjE2NVYxMi41MzNhMS40NTgsMS40NTgsMCwwLDAtLjM2Ni0xLjA1NCwxLjE1MiwxLjE1MiwwLDAsMC0uNjQ4LS4zMTR2LS45NmMuNDQ1LDAsLjY2OSwwLC45MjgsMGExLjY3NiwxLjY3NiwwLDAsMSwxLjAyMy40NDIsMiwyLDAsMCwxLC42NzMsMS4wMDksMi4zMywyLjMzLDAsMCwxLC4wODYuN3YxLjc1N2ExLjg0NiwxLjg0NiwwLDAsMCwuNSwxLjM4MywyLjExMywyLjExMywwLDAsMCwuODU0LjQ3OXYuNzk0YTEuOTQzLDEuOTQzLDAsMCwwLS44Mi40MjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjZmNmY2O3N0cm9rZTojNDA0MDQwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjI1cHhcXFwiLz48cGF0aCBkPVxcXCJNNS41OTQsMTAuMjA2SDUuMjZhMS42NzMsMS42NzMsMCwwLDAtMS4wMjMuNDQyLDEuNzEsMS43MSwwLDAsMC0uNjczLDEuMDA5LDMuNTMxLDMuNTMxLDAsMCwwLS4wMzguN3YxLjc1N0ExLjg2NywxLjg2NywwLDAsMSwyLjk4MSwxNS41LDIuODQ3LDIuODQ3LDAsMCwxLDIsMTUuOTc3di43OTNhMi41NTIsMi41NTIsMCwwLDEsLjk0Ny40MjYsMS42MzgsMS42MzgsMCwwLDEsLjU3NywxLjI2NXYyLjA1MUExLjc4MSwxLjc4MSwwLDAsMCw0LjE2LDIyLjA3YTIuOCwyLjgsMCwwLDAsMS42NTQuNTVsLjQyMSwwVjIxLjU5NGExLjQ3LDEuNDcsMCwwLDEtLjY0My0uMzM0LDEuMzU1LDEuMzU1LDAsMCwxLS4zNzEtMS4wNDdWMTguNTU3YTIuNTE2LDIuNTE2LDAsMCwwLS4zMDUtMS4zMjMsMi41LDIuNSwwLDAsMC0xLjItLjgzOCwyLjUyOSwyLjUyOSwwLDAsMCwxLjMyNC0xLjE3OCwyLjg1NywyLjg1NywwLDAsMCwuMTgzLTEuMTY1VjEyLjUzNEExLjQ2MiwxLjQ2MiwwLDAsMSw1LjU0LDExLjQ4YTEuMzEzLDEuMzEzLDAsMCwxLC41NzUtLjI3MWwuNDI4LDBWMTAuMjA2SDUuNTk0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y2ZjZmNjtzdHJva2U6IzQwNDA0MDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yNXB4XFxcIi8+PHBhdGggZD1cXFwiTTkuNTM3LDE4LjUyOWgtLjMyYy0uMzQ4LDAtLjQ3OS0uMTgzLS40NzktLjU1MVYxMS4yMTlhMS4yNTYsMS4yNTYsMCwwLDAtLjI2OC0uODU2Yy0uMTUtLjE2NC0uNDExLS4xNjItLjc4My0uMTYySDYuOTY0bC0uMDg1LDB2OC4xMDZhMS44NzUsMS44NzUsMCwwLDAsLjM1MiwxLjI0LDEuNDQxLDEuNDQxLDAsMCwwLDEuMTQ1LjM5Myw3Ljg1OSw3Ljg1OSwwLDAsMCwxLjI2OS0uMTE4LDIuMjMsMi4yMywwLDAsMCwuMDM2LS41MDksMi4yNzgsMi4yNzgsMCwwLDAtLjE0Mi0uNzgyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2Y2ZjZmNlxcXCIvPlwiLFxuXHR9LFxuXHRcIkxpcXVpZFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDQ5OTlcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yOS45ODgsMjIuMzcybC0uNzQ4LjA0OGE1LjIwOSw1LjIwOSwwLDAsMS0yLjk5LS42NzEsNy44LDcuOCwwLDAsMC03LjgsMCw1LjI3NSw1LjI3NSwwLDAsMS01LjMuMDFBNy4yNjIsNy4yNjIsMCwwLDAsOS4yNjMsMjAuN2E3LjIyOSw3LjIyOSwwLDAsMC0zLjk0LDEuMDYsNC43NTEsNC43NTEsMCwwLDEtMi40Ny43bC0uODM4LDBjMCwuODg5LS4wMDksMS43MzktLjAxNSwyLjUxNWwuODYxLDBhNy4yMzcsNy4yMzcsMCwwLDAsMy43NS0xLjA1Miw0Ljc2Myw0Ljc2MywwLDAsMSwyLjY1OS0uNyw0LjgzNSw0LjgzNSwwLDAsMSwyLjYzNC43MTgsNy43OTQsNy43OTQsMCwwLDAsNy44LDAsNS4yODcsNS4yODcsMCwwLDEsNS4zMTksMCw3LjcwOSw3LjcwOSwwLDAsMCw0LjQuOTg5TDMwLDI0Ljg4OEMyOS45OTUsMjQuMSwyOS45OTEsMjMuMjQ5LDI5Ljk4OCwyMi4zNzJaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA0OTk5XFxcIi8+PHBhdGggZD1cXFwiTTI5Ljk4MywxNS41ODFsLS43NDMuMDQ3YTUuMjI2LDUuMjI2LDAsMCwxLTIuOTktLjY3MSw3LjgsNy44LDAsMCwwLTcuOCwwLDUuMjc4LDUuMjc4LDAsMCwxLTUuMy4wMUE3LjMxMiw3LjMxMiwwLDAsMCw5LjI2MywxMy45MWE3LjMsNy4zLDAsMCwwLTMuOTQxLDEuMDYsNC43NDIsNC43NDIsMCwwLDEtMi40NjkuN2wtLjgyOCwwYzAsLjg0OSwwLDEuNjkzLDAsMi41MTVsLjg0LDBhNy4yMzcsNy4yMzcsMCwwLDAsMy43NS0xLjA1Miw0LjcsNC43LDAsMCwxLDIuNjU5LS43LDQuOCw0LjgsMCwwLDEsMi42MzQuNzE4LDcuNzk0LDcuNzk0LDAsMCwwLDcuOCwwLDUuMjg3LDUuMjg3LDAsMCwxLDUuMzE5LDAsNy43MDksNy43MDksMCwwLDAsNC40Ljk4OWwuNTY4LS4wMzdDMjkuOTgzLDE3LjI2OSwyOS45ODMsMTYuNDI0LDI5Ljk4MywxNS41ODFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA0OTk5XFxcIi8+PHBhdGggZD1cXFwiTTI5LjI0LDkuMTM3YTUuMjU0LDUuMjU0LDAsMCwxLTIuOTktLjY3MSw3LjgsNy44LDAsMCwwLTcuOCwwLDUuMjc1LDUuMjc1LDAsMCwxLTUuMy4wMDlBNy4xNiw3LjE2LDAsMCwwLDkuMjYzLDcuNDJhNy4xNTksNy4xNTksMCwwLDAtMy45NCwxLjA1OSw0LjczOCw0LjczOCwwLDAsMS0yLjQ2OS43bC0uODM0LDBjMCwuODIsMCwxLjY2NCwwLDIuNTE3bC44MzYsMGE3LjIzNyw3LjIzNywwLDAsMCwzLjc1LTEuMDUyLDQuNzM4LDQuNzM4LDAsMCwxLDIuNjU5LS43MDYsNC44MTQsNC44MTQsMCwwLDEsMi42MzQuNzE5LDcuNzkxLDcuNzkxLDAsMCwwLDcuOCwwLDUuMjkzLDUuMjkzLDAsMCwxLDUuMzE5LDAsNy43MzIsNy43MzIsMCwwLDAsNC40Ljk4OGwuNTY4LS4wMzdjMC0uODU5LDAtMS43LjAwNy0yLjUxNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDQ5OTlcXFwiLz5cIixcblx0fSxcblx0XCJMaXNwXCI6IHtcblx0XHRjb2xvdXI6IFwiIzgzODFjNVwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiMTkyNS43ODVcXFwiIHkxPVxcXCItMTM4My4wNzVcXFwiIHgyPVxcXCIyMzAyLjM1MVxcXCIgeTI9XFxcIi0xODY4LjU1N1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjA0OCwgMCwgMCwgLTAuMDQ1LCAtODIuNTM5LCAtNTQuNjUpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjODM4MWM1XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU2NlxcXCIgc3RvcC1jb2xvcj1cXFwiIzdlNTViM1xcXCIgc3RvcC1vcGFjaXR5PVxcXCIwLjk5NlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E1MmVjYlxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwLjk5MlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiMjIxNC4xODdcXFwiIHkxPVxcXCItMTc1MC4yMjVcXFwiIHgyPVxcXCIxOTMwLjk3NFxcXCIgeTI9XFxcIi0xNDA4LjM0MlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjA1NCwgMCwgMCwgLTAuMDU0LCAtOTUuMTg4LCAtNjguNDg3KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzQxMWY1ZFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzViMmE4NVxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfZW1hY3M8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yOS4zNjMsMTZBMTMuMzY0LDEzLjM2NCwwLDEsMSwxNiwyLjUsMTMuNDMyLDEzLjQzMiwwLDAsMSwyOS4zNjMsMTZaXFxcIiBzdHlsZT1cXFwic3Ryb2tlLXdpZHRoOjAuNzVweDtmaWxsOnVybCgjYSk7c3Ryb2tlOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNMTEuNDA2LDI1LjQ4M2ExOC4xNTcsMTguMTU3LDAsMCwwLDIuNTg3LS4wNDgsNDEuNzI4LDQxLjcyOCwwLDAsMCw0LjUtLjYzOSwzMC42NzEsMzAuNjcxLDAsMCwwLDMuMTMyLS44MzljMS4xNDItLjQyMSwxLjc2NC0uNzc4LDIuMDQzLTEuMjg0YS42Mi42MiwwLDAsMC0uNDQxLS42OTJjLTEuMzQ3LS41NjUtMi45MDgtLjQ2My02LS41MjgtMy40MjctLjExOC00LjU2Ny0uNjkxLTUuMTc0LTEuMTUzLS41ODItLjQ2OS0uMjktMS43NjUsMi4yMDYtMi45MDdhNTQuMjY2LDU0LjI2NiwwLDAsMSw2LjE4NC0xLjczYy0xLjY1OS0uODItNC43NTMtMi4yNjItNS4zODktMi41NzMtLjU1OC0uMjczLTEuNDUxLS42ODQtMS42NDQtMS4xODItLjIxOS0uNDc4LjUxOC0uODg5LjkzLTEuMDA3YTIwLjMsMjAuMywwLDAsMSw0LjktLjY0Nyw0LjMwOCw0LjMwOCwwLDAsMCwxLS4wNjlBMS43NjcsMS43NjcsMCwwLDAsMjEuODc5LDcuOWEyLjc3NSwyLjc3NSwwLDAsMC0zLjI4Ni0xLjgxQzE3LjIyLDYuMzM4LDEzLjkwOCw3LjMsMTMuOTA4LDcuM2M0LjA5My0uMDM1LDQuNzc5LjAzMyw1LjA4NS40NjEuMTgxLjI1My0uMDgyLjYtMS4xNzQuNzc3LTEuMTg5LjE5NC0zLjY1OS40MjgtMy42NTkuNDI4LTIuMzcuMTQxLTQuMDQuMTUtNC41NCwxLjIxLS4zMjcuNjkzLjM0OSwxLjMuNjQ1LDEuNjg4YTEyLjcyOCwxMi43MjgsMCwwLDAsNC4yMjUsMi43Yy40MzguMjA4LDEuNzIzLjYsMS43MjMuNmExMS41MiwxMS41MiwwLDAsMC04LjEsMi4yODdjLTEuODA3LDEuNjcyLTEuMDA4LDMuNjY1LDIuNjk1LDQuODkxYTEyLjc1NSwxMi43NTUsMCwwLDAsNi41MzQuNzcyYzEuOTIyLS4xLDIuMjI0LS4wNDIsMi4yNDQuMTE2LjAyNy4yMjItMi4xMzQuNzczLTIuNzI0Ljk0NC0xLjUuNDMzLTUuNDM2LDEuMzA3LTUuNDU2LDEuMzEyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIkxpdmVTY3JpcHRcIjoge1xuXHRcdGNvbG91cjogXCIjMzE3ZWFjXCIsXG5cdFx0aWNvbjogXCI8cG9seWdvbiBwb2ludHM9XFxcIjUuNTA0IDIuMDA3IDguOTg2IDIgOC45ODYgMjEuNzQ2IDEwLjc1OSAxOS45ODcgMTAuNzU5IDMuNzU1IDEyLjQ5NyAzLjc1NSAxMi40OTcgMTguMjQgMTQuMjUzIDE2LjQ4NyAxNC4yNTMgMy43NTUgMTUuOTk3IDMuNzU1IDE1Ljk5NyAxNC43MjkgMTcuNzM1IDEyLjk2MiAxNy43MzUgMy43NTUgMTkuNDYxIDMuNzU1IDE5LjQ2MSAxMS4yMjUgMjEuMjQ1IDkuNDYxIDIxLjI0NSAzLjc1NSAyMi45NzIgMy43NTUgMjIuOTcyIDcuNzIzIDI0LjczOCA1Ljk3NSAyNC43MzkgMy43NTUgMjYuNDgzIDMuNzU1IDI2LjQ4MyA1LjQ4MiAyOC4yMDkgNS40ODIgMjguMjA5IDcuMjY3IDI1LjkxMSA3LjI2OCAyNC4xODQgOC45OTMgMjguMjA5IDguOTkzIDI4LjIwOSAxMC43MTkgMjIuNDM4IDEwLjcxOSAyMC42OTggMTIuNTA0IDI4LjIwOSAxMi41MDQgMjguMjA5IDE0LjIzIDE4Ljk2MSAxNC4yMyAxNy4yMDUgMTYuMDE0IDI4LjIwOSAxNi4wMTQgMjguMjA5IDE3Ljc0MSAxNS40NTUgMTcuNzQxIDEzLjcxNSAxOS40OTYgMjguMjA5IDE5LjQ5NiAyOC4yMDkgMjEuMjUyIDExLjk4IDIxLjI1MiAxMC4yNDIgMjIuOTc4IDI5Ljk4MiAyMi45NzggMjkuOTg5IDI2LjQ4OSA4Ljk4NiAyNi40ODkgOC45ODYgMzAgNS41MDQgMzAgNS41MDQgMjYuNDg5IDIuMDExIDI2LjQ4OSAyLjAxMSAyMi45NzggNS41MDQgMjIuOTc4IDUuNTAzIDIgNS41MDQgMi4wMDdcXFwiIHN0eWxlPVxcXCJmaWxsOiMzMTdlYWNcXFwiLz5cIixcblx0fSxcblx0XCJMb2cgZmlsZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMGJkMDJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yOS40LDI3LjZIMi41VjQuNUgyOS40Wm0tMjUuOS0xSDI4LjRWNS41SDMuNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGJkMDJcXFwiLz48cmVjdCB4PVxcXCIyLjVcXFwiIHk9XFxcIjUuNVxcXCIgd2lkdGg9XFxcIjI2LjlcXFwiIGhlaWdodD1cXFwiMS45XFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiMTEuMzMzXFxcIiB5PVxcXCI5LjVcXFwiIHdpZHRoPVxcXCI4LjE2N1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiMTEuMzMzXFxcIiB5PVxcXCIxMi4wODNcXFwiIHdpZHRoPVxcXCIxMi41XFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGJkMDJcXFwiLz48cmVjdCB4PVxcXCIxMS4zMzNcXFwiIHk9XFxcIjE0Ljc1XFxcIiB3aWR0aD1cXFwiMTAuNjE3XFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGJkMDJcXFwiLz48cmVjdCB4PVxcXCIxMS4zMzNcXFwiIHk9XFxcIjE3LjU4M1xcXCIgd2lkdGg9XFxcIjE0LjE2N1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiMTEuMzMzXFxcIiB5PVxcXCIyMC41XFxcIiB3aWR0aD1cXFwiOS44MzRcXFwiIGhlaWdodD1cXFwiMVxcXCIgc3R5bGU9XFxcImZpbGw6IzAwYmQwMlxcXCIvPjxyZWN0IHg9XFxcIjExLjVcXFwiIHk9XFxcIjIzLjA4M1xcXCIgd2lkdGg9XFxcIjEyLjE2N1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCI5LjVcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCIxMi4wODNcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCIxMi4wODNcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCIxNC42NjdcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCIxNy4yNVxcXCIgd2lkdGg9XFxcIjQuMzMzXFxcIiBoZWlnaHQ9XFxcIjFcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGJkMDJcXFwiLz48cmVjdCB4PVxcXCI1LjVcXFwiIHk9XFxcIjIwLjVcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+PHJlY3QgeD1cXFwiNS41XFxcIiB5PVxcXCIyMy4wODNcXFwiIHdpZHRoPVxcXCI0LjMzM1xcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBiZDAyXFxcIi8+XCIsXG5cdH0sXG5cdFwiTE9MQ09ERVwiOiB7XG5cdFx0Y29sb3VyOiBcIiM4ZDI3MDFcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMS4zLDMuNzNhMy45NCwzLjk0LDAsMCwxLDEuMDQxLS42Miw4LjQzNSw4LjQzNSwwLDAsMSwuNTU2LDMuMzg1LDI0Ljg2NSwyNC44NjUsMCwwLDEtLjY0Myw1LjAxOWMtLjM2OC0uMTgtLjczNi0uMzY0LTEuMS0uNTU0YTExLjc1NCwxMS43NTQsMCwwLDAsLjI3My0zLjc0NywzLjA4LDMuMDgsMCwwLDAtLjI1NS0uODY1LDUuMTQyLDUuMTQyLDAsMCwwLTIuMDE2LDIuMDdjLS4zMTktLjI0LS42NTItLjQ1OS0uOTg1LS42NzZBMTUuNzE2LDE1LjcxNiwwLDAsMSwyMS4zLDMuNzNaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWRlZGVkXFxcIi8+PHBhdGggZD1cXFwiTTE5LjQ1MSw4LjZhNC41NzQsNC41NzQsMCwwLDEsMS41MDktMS41NjMsNi42ODUsNi42ODUsMCwwLDEsLjA5LDIuNjcxQzIwLjUxNyw5LjM0MywxOS45NzUsOC45ODcsMTkuNDUxLDguNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZGVkZWRcXFwiLz48cGF0aCBkPVxcXCJNMTYuNDYxLDEwLjA3NmMtLjAzOC0xLjEzNC0uMDMxLTIuMjY5LS4wMjYtMy40LS45LjQ5My0xLjc1OCwxLjA3MS0yLjY0OCwxLjU4OS0uNDUzLjI3LS45MDguNTM2LTEuMzYuODA4LjIyNC0uMTYzLjQ1Ny0uMzEyLjY5LS40NjItLjg2MS0xLjIyNC0xLjk3MS0yLjUtMy41My0yLjc0OGExMC45NjQsMTAuOTY0LDAsMCwwLS4zNjUsNS4xNDdjLjMxOC0uMTk1LjYzMy0uNC45NjItLjU3Mi0uNDc0LjMxOS0uOTY0LjYxNS0xLjQ0Ni45Mi0uOTU3LjYtMS45MjIsMS4xOTItMi44OTIsMS43NzdhMS4yMzIsMS4yMzIsMCwwLDAtLjM5MS4zMmMtLjEsMS4zOTUtLjM0LDQuMzkyLS4zNCw0LjM5Mi0uMjU0LDMuNjY4LS41MjIsNy4zMzYtLjgyNiwxMSw0LjA2Mi4zNDMsOC4xMTguNzQyLDEyLjE3OSwxLjA3NkMxNi40NTgsMjMuMywxNi40NzIsMTYuNjksMTYuNDYxLDEwLjA3NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZGVkZWRcXFwiLz48cGF0aCBkPVxcXCJNMjEuMSwyLjk3N0E1Ljg4NCw1Ljg4NCwwLDAsMSwyMi43MDYsMmExMC4wNjQsMTAuMDY0LDAsMCwxLC43NzIsNC42MDYsMjQuNTkxLDI0LjU5MSwwLDAsMS0uNTA4LDQuNDU5YzEuMi44NDYsMi40MzMsMS42NDUsMy42MTgsMi41MDlxLjQ0LDYuMzguOTA3LDEyLjc1OGMuMDY2LjgzOS4wOTQsMS42OC4yMTYsMi41MTMtMy4wMjkuMjc5LTYuMDU3LjU5MS05LjA4NS44ODZhMTkuMTM3LDE5LjEzNywwLDAsMC0yLjE1OC4yN3YtLjA4M2MtLjAxLTYuNjE0LDAtMTMuMjI3LS4wMDctMTkuODQxLS4wMzgtMS4xMzQtLjAzMS0yLjI2OS0uMDI2LTMuNHYtLjFjLjQwNi4yOTIuODI2LjU2MiwxLjI0My44MzlBMTYuMjc0LDE2LjI3NCwwLDAsMSwyMS4xLDIuOTc3Wm0uMi43NTJhMTUuNzE2LDE1LjcxNiwwLDAsMC0zLjEyOCw0LjAxMWMuMzM0LjIxNy42NjYuNDM3Ljk4NS42NzZhNS4xNDIsNS4xNDIsMCwwLDEsMi4wMTYtMi4wNywzLjA4LDMuMDgsMCwwLDEsLjI1NS44NjUsMTEuNzU0LDExLjc1NCwwLDAsMS0uMjczLDMuNzQ3Yy4zNjQuMTkuNzMxLjM3NCwxLjEuNTU0YTI0Ljg2NSwyNC44NjUsMCwwLDAsLjY0My01LjAxOSw4LjQzNSw4LjQzNSwwLDAsMC0uNTU2LTMuMzg1QTMuOTQsMy45NCwwLDAsMCwyMS4zLDMuNzNaTTE5LjQ1MSw4LjZjLjUyNC4zODMsMS4wNjYuNzM5LDEuNiwxLjEwOGE2LjY4NSw2LjY4NSwwLDAsMC0uMDktMi42NzFBNC41NzQsNC41NzQsMCwwLDAsMTkuNDUxLDguNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNOS4yMTksNS4wNjJhMy41ODEsMy41ODEsMCwwLDEsMi4yMDUuNzQ4QTEyLjksMTIuOSwwLDAsMSwxMy43ODgsOC4yNmMtLjQ1My4yNy0uOTA4LjUzNi0xLjM2LjgwOC4yMjQtLjE2My40NTctLjMxMi42OS0uNDYyLS44NjEtMS4yMjQtMS45NzEtMi41LTMuNTMtMi43NDhhMTAuOTY0LDEwLjk2NCwwLDAsMC0uMzY1LDUuMTQ3Yy4zMTgtLjE5NS42MzMtLjQuOTYyLS41NzItLjQ3NC4zMTktLjk2NC42MTUtMS40NDYuOTJBMTQuMSwxNC4xLDAsMCwxLDkuMjE5LDUuMDYyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzhkMjcwMVxcXCIvPjxwYXRoIGQ9XFxcIk0xMC41MDcsOC40NzZhMi40NTUsMi40NTUsMCwwLDEsMS41MTcuODhsLS4zNi4yQTIuNjksMi42OSwwLDAsMCwxMC43MzksOWEzLjMxOCwzLjMxOCwwLDAsMC0uMTY1LDEuMjgxbC0uMzQ0LjExQTcuMDIxLDcuMDIxLDAsMCwxLDEwLjUwNyw4LjQ3NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNMTIuMTM5LDEwLjY5M2EuNDg3LjQ4NywwLDAsMSwuNTQyLjAxLDEuNTUyLDEuNTUyLDAsMCwxLC4wNjIuNmMtLjAzOS43ODQuMDI0LDEuNTczLS4wNzYsMi4zNTRhMS4wMTMsMS4wMTMsMCwwLDEtMS4wMTIuODg2Yy0uMjMzLS4wNS0uMjc4LS4zNDEtLjI3OC0uNTQxLDAtLjY3NS4xLTEuMzQ3LjA2Ni0yLjAyNEExLjMsMS4zLDAsMCwxLDEyLjEzOSwxMC42OTNabS4xNSwxLjA4NGEuODkxLjg5MSwwLDAsMCwuMjUxLS44NjZDMTIuMjE4LDExLjA2MSwxMS45LDExLjUwNywxMi4yODksMTEuNzc3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzhkMjcwMVxcXCIvPjxwYXRoIGQ9XFxcIk0xNC41LDEzLjcyOGExNy42NzEsMTcuNjcxLDAsMCwxLDEuOTI4LS44MjJjLS4wMjQuMDY0LS4wNjkuMTkxLS4wOTIuMjU1LS42NDkuMzU4LTEuMzYuNi0yLjAyMS45MzhhMTIuMTE4LDEyLjExOCwwLDAsMC0zLjIzOCwyLjI0OEE3LjIsNy4yLDAsMCwxLDEwLDE3LjM4MWE0LjE2Niw0LjE2NiwwLDAsMSwuOTgtMS4yNDZBMTIuNzI3LDEyLjcyNywwLDAsMSwxNC41LDEzLjcyOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNNy42MjgsMTMuMjMxYS45ODkuOTg5LDAsMCwxLC41OTQtLjE1MiwxOC4xMTQsMTguMTE0LDAsMCwxLS4xLDIuNjU0LjcxMy43MTMsMCwwLDEtLjg5Mi42NTgsMjEuMSwyMS4xLDAsMCwxLC4wODItMi4yMjZBMS4zODMsMS4zODMsMCwwLDEsNy42MjgsMTMuMjMxWm0uMTc5LjgzMWMuMjY4LS4xMTIuMzE5LS40MTMuNDEyLS42NTRDNy44MiwxMy4zMTIsNy43NzUsMTMuNzgzLDcuODA3LDE0LjA2MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNMTAuODIzLDE3LjA5NGExMy45MzQsMTMuOTM0LDAsMCwxLDQuNjEyLTEuOTY4Yy0uMDEuMDY4LS4wMjkuMjA2LS4wMzkuMjc0YTE0LjI3MywxNC4yNzMsMCwwLDAtNC40NzUsMS45MTQsMi42MjYsMi42MjYsMCwwLDEtLjY4MS4zNDNDMTAuMywxNy4zNTYsMTAuNiwxNy4yNDksMTAuODIzLDE3LjA5NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNNS4yNjQsMTcuNTlBNS4xNDQsNS4xNDQsMCwwLDEsOCwxNy4xYTEuNSwxLjUsMCwwLDEsMS4xNDIuNjY1QTYuODU0LDYuODU0LDAsMCwwLDcuNiwxNy4yNzhhNi45NjcsNi45NjcsMCwwLDAtMi40ODQuNTY0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzhkMjcwMVxcXCIvPjxwYXRoIGQ9XFxcIk0xMC41NzgsMTcuNzI1YTkuNTksOS41OSwwLDAsMSwzLjYxLS41NjZjLjI0LjAyMS4zMjEuMi4zMTMuNDI0YTMuMjM4LDMuMjM4LDAsMCwwLTEuOTU2LS4wOSwyMS42ODgsMjEuNjg4LDAsMCwwLTIuNTU3LjY1OEM5Ljk5NSwxNy44MjksMTAuMzQ1LDE3LjgwOSwxMC41NzgsMTcuNzI1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzhkMjcwMVxcXCIvPjxwYXRoIGQ9XFxcIk05LjI2OCwxNy42NzZjLjE0OS0uMTc2LjUzMy0uMzMyLjY2NC0uMDYyYTEuMywxLjMsMCwwLDEtLjUxNi45OTNDOS4yNjgsMTguMzM3LDguOTczLDE3Ljk1Miw5LjI2OCwxNy42NzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojOGQyNzAxXFxcIi8+PHBhdGggZD1cXFwiTTUuNzQ0LDE4LjYyOWE1LjksNS45LDAsMCwxLDMuMTgyLS42MThjLS4xODIuMjM1LS40OTMuMTc4LS43NTEuMjA4YTUuNjYzLDUuNjYzLDAsMCwwLTEuNzIuMzNjLS4zNDQuMTI4LS42NjUuMzEtMS4wMi40MDlBLjYuNiwwLDAsMSw1Ljc0NCwxOC42MjlaXFxcIiBzdHlsZT1cXFwiZmlsbDojOGQyNzAxXFxcIi8+PHBhdGggZD1cXFwiTTYuOSwxOS4xMTRhOS42NzYsOS42NzYsMCwwLDEsMi4yLS44NTRjLS4xLjMtLjQ0MS4zMzgtLjcuNDQ0YTcuODM5LDcuODM5LDAsMCwwLTIuNTY0LDEuNDE1QzUuOTM4LDE5LjU4NCw2LjQ4OCwxOS4zNjksNi45LDE5LjExNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz48cGF0aCBkPVxcXCJNMTEuNjM1LDE5LjdhMy4xMSwzLjExLDAsMCwwLDEuOTEtMS4zODNjLjM0Ny0uMS4yNzMuMjc1LjI2LjQ5NGEyLjA1NiwyLjA1NiwwLDAsMS0uOTUsMS4wMzYsMTIuMzY1LDEyLjM2NSwwLDAsMS0xLjgyNyw2LjQxOUEyLjM0MiwyLjM0MiwwLDAsMSw4Ljg3OSwyNy41YTIuMjUxLDIuMjUxLDAsMCwxLTEuNTM1LTEuNDksMTAuODk0LDEwLjg5NCwwLDAsMS0uNjktNC42NjVjLS4xNTctLjExMi0uMzY5LS4xNzktLjQ2LS4zNjItLjEzLS4yLjAxMS0uNDI1LjA0Ny0uNjMxLjE5LjE1MS4zNDUuMzkyLjYwNi40MmEzLjYxNywzLjYxNywwLDAsMCwxLjg2My0uNCwxLjU4OCwxLjU4OCwwLDAsMCwuNzA5LS42NjIsMy44ODEsMy44ODEsMCwwLDAsLjQzMS4yNjZBNC4yOCw0LjI4LDAsMCwwLDExLjYzNSwxOS43Wm0tMi4yLjgzNWE0LjEzMiw0LjEzMiwwLDAsMS0yLjQ2Mi44MDksMTEuMDQ5LDExLjA0OSwwLDAsMCwuMzU4LDMuNTI2LDMuMjI2LDMuMjI2LDAsMCwxLC45LTEuMjgyLDIuMDU1LDIuMDU1LDAsMCwxLDIuMy0uMiwyLjMsMi4zLDAsMCwxLC44ODQsMS4xNzIsMTQuNjU5LDE0LjY1OSwwLDAsMCwxLjAwNS00LjQ4OUE1LjE2Nyw1LjE2NywwLDAsMSw5LjQzNSwyMC41MzJabS0uMzI5LDMuMjZhMi4yNzMsMi4yNzMsMCwwLDAtMS41LDEuNDM0Yy0uMTIzLjI2OS4xLjUxNy4yMjUuNzM4LjMzMS40NjIuNzk1LDEsMS40MzEuODkzYTIuODY4LDIuODY4LDAsMCwwLDEuNzY5LTEuNkExLjYsMS42LDAsMCwwLDkuMTA2LDIzLjc5MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4ZDI3MDFcXFwiLz5cIixcblx0fSxcblx0XCJMdWFcIjoge1xuXHRcdGNvbG91cjogXCIjMDUwMDgwXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTYuNSwzMGwtLjAxMS0uMzIxYy40LS4wMTQuOC0uMDQ1LDEuMTktLjA5NGwuMDM5LjMxOUMxNy4zMTIsMjkuOTUyLDE2LjksMjkuOTg0LDE2LjUsMzBabS0xLjIyMi0uMDExYy0uNC0uMDIxLS44MTQtLjA2MS0xLjIxNi0uMTE4bC4wNDUtLjMxOGMuMzkzLjA1NS43OTMuMDk0LDEuMTg4LjExNVpNMTguOTIsMjkuN2wtLjA2Ny0uMzE0Yy4zODctLjA4My43NzYtLjE4NCwxLjE1NS0uM2wuMDk0LjMwN0MxOS43MTQsMjkuNTExLDE5LjMxNiwyOS42MTUsMTguOTIsMjkuN1ptLTYuMDYzLS4wNTNjLS40LS4wOTEtLjc5MS0uMi0xLjE3Ny0uMzI2bC4xLS4zMDZjLjM3Ny4xMjIuNzY0LjIzLDEuMTUuMzE5Wm04LjQtLjY2NS0uMTIxLS4zYy4zNjQtLjE0OC43MjgtLjMxNCwxLjA4LS40OTNsLjAwNiwwLC4xNDUuMjg2LDAsMEMyMiwyOC42NjEsMjEuNjI2LDI4LjgzMSwyMS4yNTMsMjguOTgyWm0tMTAuNzE4LS4wODhjLS4zNzQtLjE1OC0uNzQ1LS4zMzUtMS4xLS41MjRsLjE1LS4yODRjLjM1LjE4Ni43MTMuMzU4LDEuMDc4LjUxMlptMTIuODkzLTEuMDIxLS4xNy0uMjczYy4zMzctLjIxLjY2OC0uNDM3Ljk4NC0uNjc1bC4xOTMuMjU3QzI0LjExMSwyNy40MjUsMjMuNzcyLDI3LjY1OCwyMy40MjgsMjcuODczWk04LjM3OSwyNy43NTFjLS4zNDEtLjIyLS42NzYtLjQ1OS0xLS43MDhsLjItLjI1M2MuMzEyLjI0My42NC40NzYuOTcyLjY5MVptMTctMS4zNDYtLjIxNS0uMjM5Yy4yOTQtLjI2NS41OC0uNTQ2Ljg1MS0uODM2bC4yMzUuMjE5QzI1Ljk3MiwyNS44NDYsMjUuNjc5LDI2LjEzNCwyNS4zNzgsMjYuNFpNNi40NTQsMjYuMjUyYy0uMy0uMjc2LS41ODUtLjU2OS0uODU2LS44N2wuMjM5LS4yMTVjLjI2NS4yOTQuNTQ3LjU4LjgzNi44NVpNMjcuMDQxLDI0LjYybC0uMjUzLS4yYy4yNDQtLjMxMi40NzYtLjYzOS42OTItLjk3MmwuMjcuMTc1QzI3LjUyOSwyMy45NjYsMjcuMjksMjQuMywyNy4wNDEsMjQuNjJaTTQuODIsMjQuNDM5Yy0uMjQ0LS4zMjQtLjQ3Ni0uNjYyLS42OTItMS4wMDdsLjI3Mi0uMTdjLjIxLjMzNy40MzguNjY4LjY3Ni45ODRabTIzLjU0Ny0xLjg2Ny0uMjg0LS4xNTFjLjE4Ni0uMzUuMzU4LS43MTMuNTEzLTEuMDc4bC4zLjEyNUMyOC43MzUsMjEuODQzLDI4LjU1OCwyMi4yMTQsMjguMzY4LDIyLjU3MlptLTI0Ljg0MS0uMi0uMDA2LS4wMTJjLS4xODMtLjM1OS0uMzUyLS43MjgtLjUtMS4xbC4zLS4xMjFjLjE0Ny4zNjIuMzEyLjcyNC40OTEsMS4wNzRsLjAwNi4wMTJaTTI5LjMyLDIwLjMyNWwtLjMwNi0uMWMuMTIyLS4zNzcuMjMtLjc2NC4zMTktMS4xNWwuMzEzLjA3MkMyOS41NTUsMTkuNTQzLDI5LjQ0NiwxOS45MzksMjkuMzIsMjAuMzI1Wk0yLjYwOCwyMC4xMDdjLS4xMi0uMzg4LS4yMjMtLjc4Ni0uMzA4LTEuMTgybC4zMTQtLjA2N2MuMDgzLjM4Ny4xODQuNzc2LjMsMS4xNTVaTTI5Ljg3LDE3Ljk0NmwtLjMxOC0uMDQ1Yy4wNTYtLjM5My4wOTQtLjc5My4xMTUtMS4xODhsLjMyMS4wMTdDMjkuOTY3LDE3LjEzNSwyOS45MjcsMTcuNTQ0LDI5Ljg3LDE3Ljk0NlpNMi4xLDE3LjcyYy0uMDUtLjQtLjA4Mi0uODEyLS4xLTEuMjE4bC4zMjEtLjAxMWMuMDE0LjQuMDQ2LjguMDk0LDEuMTlabTI3LjU4Mi0yLjJjLS4wMTQtLjQtLjA0NS0uOC0uMDkzLTEuMTlsLjMxOS0uMDM5Yy4wNDkuNC4wODIuODEzLjEsMS4yMThaTTIuMzMxLDE1LjMsMi4wMSwxNS4yOGMuMDIxLS40MDUuMDYxLS44MTQuMTE3LTEuMjE2bC4zMTguMDQ1QzIuMzksMTQuNSwyLjM1MiwxNC45LDIuMzMxLDE1LjNabTI3LjA1Ny0yLjE0NGMtLjA4My0uMzg3LS4xODQtLjc3Ni0uMy0xLjE1NUwyOS40LDExLjljLjExOS4zODguMjIzLjc4Ni4zMDcsMS4xODNaTTIuNjYzLDEyLjkzNGwtLjMxMy0uMDcyYy4wOTEtLjQuMi0uNzkxLjMyNi0xLjE3N2wuMzA2LjFDMi44NTksMTIuMTYxLDIuNzUyLDEyLjU0OCwyLjY2MywxMi45MzRabTI2LjAyNi0yLjA2MmMtLjE0OS0uMzY2LS4zMTUtLjczMi0uNS0xLjA4NmwuMjg2LS4xNDZjLjE4NS4zNjMuMzU1LjczNi41MDcsMS4xMTFaTTMuNCwxMC42NjVsLS4zLS4xMjVjLjE1OC0uMzc0LjMzNC0uNzQ1LjUyNC0xLjFsLjI4NC4xNUMzLjcyNCw5LjkzNywzLjU1MiwxMC4zLDMuNCwxMC42NjVaTTQuNTEzLDguNTU3bC0uMjctLjE3NGMuMjItLjM0MS40NTgtLjY3Ni43MDctMWwuMjU0LjJDNC45NjEsNy45LDQuNzI4LDguMjI0LDQuNTEzLDguNTU3Wk01Ljk3Nyw2LjY3NmwtLjIzNS0uMjE5Yy4yNzYtLjMuNTY5LS41ODUuODctLjg1N2wuMjE1LjIzOUM2LjUzMyw2LjEsNi4yNDcsNi4zODYsNS45NzcsNi42NzZabTEuNzctMS42LS4xOTMtLjI1N2MuMzIzLS4yNDQuNjYyLS40NzcsMS4wMDctLjY5MmwuMTcuMjcyQzguMzk0LDQuNjE0LDguMDYzLDQuODQxLDcuNzQ3LDUuMDc5Wm0xNS43MDUtLjU1OC0uMDE4LS4wMTIuMTc1LS4yNy4wMTguMDExWm0tMS4wNDctLjYxNmMtLjM1LS4xODYtLjcxMy0uMzU4LTEuMDc4LS41MTJsLjEyNS0uM2MuMzc0LjE1OC43NDUuMzM0LDEuMS41MjRaTTkuNzY5LDMuODE1bC0uMTQ2LS4yODYuMDE4LS4wMDljLjM1Ni0uMTgxLjcyNC0uMzQ5LDEuMDkzLS41bC4xMjEuM2MtLjM2MS4xNDctLjcyLjMxMS0xLjA2OC40ODhabTEwLjQ0LS44MzhjLS4zNzctLjEyMi0uNzY0LS4yMjktMS4xNTEtLjMxN2wuMDcyLS4zMTNjLjQuMDkxLjc5Mi4yLDEuMTc4LjMyNVptLTguMjI5LS4wNi0uMDk0LS4zMDdjLjM4OC0uMTE5Ljc4Ni0uMjIzLDEuMTgyLS4zMDhsLjA2Ny4zMTRDMTIuNzQ3LDIuNywxMi4zNTksMi44LDExLjk4LDIuOTE3Wm01LjktLjQ3M2MtLjM5My0uMDU1LS43OTMtLjA5Mi0xLjE4OC0uMTEzbC4wMTYtLjMyMWMuNDA1LjAyMS44MTQuMDU5LDEuMjE2LjExNVptLTMuNTcyLS4wMjYtLjA0LS4zMTljLjQtLjA1LjgxMi0uMDgzLDEuMjE4LS4xbC4wMTIuMzIxQzE1LjEwNiwyLjMzNywxNC43MDUsMi4zNjksMTQuMzEyLDIuNDE4WlxcXCIgc3R5bGU9XFxcImZpbGw6Z3JheVxcXCIvPjxjaXJjbGUgY3g9XFxcIjE2XFxcIiBjeT1cXFwiMTUuOTk4XFxcIiByPVxcXCIxMC43MDhcXFwiIHN0eWxlPVxcXCJmaWxsOm5hdnlcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMC40MzVcXFwiIGN5PVxcXCIxMS41NjJcXFwiIHI9XFxcIjMuMTM2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PGNpcmNsZSBjeD1cXFwiMjYuNzA4XFxcIiBjeT1cXFwiNS4yOVxcXCIgcj1cXFwiMy4xMzdcXFwiIHN0eWxlPVxcXCJmaWxsOm5hdnlcXFwiLz48cGF0aCBkPVxcXCJNMTMuMSwyMS4zNTJ2LS43OUg5LjYyOVYxNC4zMjZoLS45djcuMDI2SDEzLjFcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTcuOTE2LDIxLjM1MlYxNi4zaC0uOHYyLjc4NWMwLDEuMDMxLS41NCwxLjcwNi0xLjM3OCwxLjcwNkEuOTUuOTUsMCwwLDEsMTQuNywxOS44VjE2LjNoLS44djMuODE3YzAsLjgzOC42MjYsMS4zNzgsMS42MDksMS4zNzhhMS44NjMsMS44NjMsMCwwLDAsMS42ODctLjkyNXYuNzgxaC43MjNcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMjMuNzkxLDIxLjMzM3YtLjYwN2EuNjY0LjY2NCwwLDAsMS0uMTczLjAxOWMtLjI3OSwwLS40MzQtLjE0NS0uNDM0LS40VjE3LjUzNmMwLS45LS42NTUtMS4zNzgtMS45LTEuMzc4LTEuMjI0LDAtMS45NzYuNDcyLTIuMDI0LDEuNjM4aC44MWMuMDY3LS42MTcuNDM0LS45LDEuMTg1LS45LjcyMywwLDEuMTI4LjI3LDEuMTI4Ljc1MnYuMjEyYzAsLjMzNy0uMi40ODItLjgzOC41NTlhNS43NjMsNS43NjMsMCwwLDAtMS42MTkuMzA4LDEuMzI3LDEuMzI3LDAsMCwwLS44ODcsMS4zMTFjMCwuOTE2LjYzNiwxLjQ1NSwxLjY1OCwxLjQ1NWEyLjM2MywyLjM2MywwLDAsMCwxLjcxNS0uNzQyLjg1NS44NTUsMCwwLDAsLjgyOS42NjUsMS45NjcsMS45NjcsMCwwLDAsLjU0OS0uMDg3bS0xLjQwNy0xLjcyNWExLjM2NiwxLjM2NiwwLDAsMS0xLjUxMywxLjE4NWMtLjYyNiwwLS45OTMtLjIyMi0uOTkzLS43NzEsMC0uNTMuMzU3LS43NjEsMS4yMTQtLjg4N2E0LDQsMCwwLDAsMS4yOTEtLjI3OXYuNzUyXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCItLVwiLFxuXHRcdF0sXG5cdH0sXG5cdFwiTWFya2Rvd25cIjoge1xuXHRcdGNvbG91cjogXCIjNzU1ODM4XCIsXG5cdFx0aWNvbjogXCI8cmVjdCB4PVxcXCIyLjVcXFwiIHk9XFxcIjcuOTU1XFxcIiB3aWR0aD1cXFwiMjdcXFwiIGhlaWdodD1cXFwiMTYuMDkxXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojNzU1ODM4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI1LjkwOSAyMC42MzYgNS45MDkgMTEuMzY0IDguNjM2IDExLjM2NCAxMS4zNjQgMTQuNzczIDE0LjA5MSAxMS4zNjQgMTYuODE4IDExLjM2NCAxNi44MTggMjAuNjM2IDE0LjA5MSAyMC42MzYgMTQuMDkxIDE1LjMxOCAxMS4zNjQgMTguNzI3IDguNjM2IDE1LjMxOCA4LjYzNiAyMC42MzYgNS45MDkgMjAuNjM2XFxcIiBzdHlsZT1cXFwiZmlsbDojNzU1ODM4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyMi45NTUgMjAuNjM2IDE4Ljg2NCAxNi4xMzYgMjEuNTkxIDE2LjEzNiAyMS41OTEgMTEuMzY0IDI0LjMxOCAxMS4zNjQgMjQuMzE4IDE2LjEzNiAyNy4wNDUgMTYuMTM2IDIyLjk1NSAyMC42MzZcXFwiIHN0eWxlPVxcXCJmaWxsOiM3NTU4MzhcXFwiLz5cIixcblx0fSxcblx0XCJNQVRMQUJcIjoge1xuXHRcdGNvbG91cjogXCIjZWY2YzNlXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxNi44MDNcXFwiIHkxPVxcXCIxNi42MzFcXFwiIHgyPVxcXCIxNS4wMTNcXFwiIHkyPVxcXCIyMi40MTFcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMSwgMCwgMCwgLTEsIDAsIDMyKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzUxMlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yM1xcXCIgc3RvcC1jb2xvcj1cXFwiIzUyM1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4zNlxcXCIgc3RvcC1jb2xvcj1cXFwiIzUzNFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41MVxcXCIgc3RvcC1jb2xvcj1cXFwiIzY0NVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42NlxcXCIgc3RvcC1jb2xvcj1cXFwiIzU2OFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC44NFxcXCIgc3RvcC1jb2xvcj1cXFwiIzI5ZFxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiMjkuNzFcXFwiIHkxPVxcXCIxOC45ODNcXFwiIHgyPVxcXCIxMS43MVxcXCIgeTI9XFxcIjE0LjU2M1xcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMC4wODFcXFwiIHN0b3AtY29sb3I9XFxcIiNjMzNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMTg5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZGU1MjM5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjMxM1xcXCIgc3RvcC1jb2xvcj1cXFwiI2YwNmUzZVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC40MjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmYTgwNDJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZlODY0M1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41OFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZhN2Y0MlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42OTZcXFwiIHN0b3AtY29sb3I9XFxcIiNlZjZjM2VcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuODMzXFxcIiBzdG9wLWNvbG9yPVxcXCIjZGM0YzM3XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjkxNlxcXCIgc3RvcC1jb2xvcj1cXFwiI2NmMzYzM1xcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfbWF0bGFiPC90aXRsZT48cGF0aCBkPVxcXCJNMiwxNy41NWw3Ljk3LTMuMjJhMjAuNywyMC43LDAsMCwxLDIuNzItMi45NWMuNjYtLjM1LDEuOS0uMTYsNC4xNy0yLjk4LDIuMi0yLjc1LDIuOS01LjEsMy45My01LjEsMS42MywwLDIuODMsMy41Miw0LjY1LDguODVBMTE1LjYyOSwxMTUuNjI5LDAsMCwwLDMwLDI0LjEyYy0xLjktMS43Ny0zLjUyLTMuNjgtNS4zNy0zLjYzLTEuNzIuMDQtMy42MywyLjA4LTUuNzIsNC43LTEuNjYsMi4xLTMuODYsMy41NC00LjcyLDMuNTEsMCwwLTIuMjItNi4yOC00LjA4LTcuM2EyLjY0MSwyLjY0MSwwLDAsMC0yLjM5LjJMMiwxNy41NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiM0OWRcXFwiLz48cGF0aCBkPVxcXCJNMTkuOCw0LjAyYy0uNjcuOS0xLjQ4LDIuNTUtMi45NCw0LjM4LTIuMjcsMi44Mi0zLjUsMi42My00LjE3LDIuOThhMTkuNjc0LDE5LjY3NCwwLDAsMC0yLjcyLDIuOTVsMy4zLDIuNDFjMi44LTMuODIsNC4zLTcuOTYsNS40Ny0xMC42NEExMy41NzksMTMuNTc5LDAsMCwxLDE5LjgsNC4wMlpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMjAuOCwzLjNjLTIuMTgsMC0zLjY3LDExLjQ4LTExLjcyLDE3Ljg5LDIuMjYtLjM3LDQuMjIsNS4yNCw1LjEyLDcuNTEsNC0uNjgsNy4yLTguMzMsMTAuNDMtOC4yMSwxLjg1LjA3LDMuNDcsMS44Niw1LjM3LDMuNjNDMjUuNjYsMTUsMjMuNjMsMy4zLDIwLjgsMy4zWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPlwiLFxuXHRcdGlubGluZUNvbW1lbnQ6IFtcblx0XHRcdFwiJVwiLFxuXHRcdF0sXG5cdH0sXG5cdFwiTUFYU2NyaXB0XCI6IHtcblx0XHRjb2xvdXI6IFwiIzAwNjk2YlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE0LjQsNy41NjgsMjAuMjEyLDJINy4yNzNMNC44NDgsNy41MzZsOS41NTcuMDMyWk00Ljg0OCw3LjUzNmw2Ljg0NCwyLjZMMTQuNCw3LjU2OG0tLjAxMywzLjYyMi0yLjctMS4wNTNMNS4yNjMsMTYuMWw2LjI4Niw1LjgyMywyLjgwOC0xLjFMMTQuNCw3LjU2OG0wLDAsMTIuOCw4LjM3NkwyMC4yMTIsMk0yNy4yLDE1Ljk0NCwxNC4zOTEsMTEuMTltLS4wMzUsOS42MzYtLjAzMiwzLjY4NU0yMC4yMjgsMzBsLTguNjc5LTguMDczTDQuOCwyNC40NjQsNy4yNTcsMzBabTAsMEwyNy4yLDE1Ljk0NCwxNC4zMjUsMjQuNTEyTTI3LjIsMTUuOTQ0LDE0LjM1NywyMC44MjZcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMxZDFkMWI7c3Ryb2tlLW1pdGVybGltaXQ6MjIuOTI1NTg0NzkzMDkwODI7c3Ryb2tlLXdpZHRoOjAuMDI4MzQ5OTk5MzM4Mzg4NDQzcHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE0LjM5MSAxMS4xOSAyNy4yIDE1Ljk0NCAxNC40MDUgNy41NjggMTQuMzkxIDExLjE5IDE0LjM5MSAxMS4xOVxcXCIgc3R5bGU9XFxcImZpbGw6IzE4MWIxNztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjcuMiAxNS45NDQgMTQuMzU3IDIwLjgyNiAxNC4zMjUgMjQuNTA5IDE0LjMyNiAyNC41MTEgMjcuMiAxNS45NDQgMjcuMiAxNS45NDRcXFwiIHN0eWxlPVxcXCJmaWxsOiMxYTFkMWE7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE0LjQwNSA3LjU2OCAyNy4yIDE1Ljk0NCAyMC4yMTIgMiAxNC40MDUgNy41NjggMTQuNDA1IDcuNTY4XFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1ZjVlO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyNy4yIDE1Ljk0NCAxNC4zMjYgMjQuNTExIDIwLjIyOCAzMCAyNy4yIDE1Ljk0NCAyNy4yIDE1Ljk0NFxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNDI0MjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTQuMzU3IDIwLjgyNiAyNy4yIDE1Ljk0NCAxNC4zOTEgMTEuMTkgMTQuMzU3IDIwLjgyNiAxNC4zNTcgMjAuODI2XFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1MTUyO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNC4zNTcgMjAuODI2IDE0LjM5MSAxMS4xOSAxMS42OTIgMTAuMTM3IDUuMjYzIDE2LjEwNCAxMS41NDkgMjEuOTI3IDE0LjM1NyAyMC44MjYgMTQuMzU3IDIwLjgyNlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNjk2YjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTEuNjkyIDEwLjEzNyAxNC4zOTEgMTEuMTkgMTQuNDA1IDcuNTY4IDExLjY5MiAxMC4xMzcgMTEuNjkyIDEwLjEzN1xcXCIgc3R5bGU9XFxcImZpbGw6IzFiMjcyNTtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTQuMzU3IDIwLjgyNiAxMS41NDkgMjEuOTI3IDE0LjMyNSAyNC41MDkgMTQuMzU3IDIwLjgyNiAxNC4zNTcgMjAuODI2XFxcIiBzdHlsZT1cXFwiZmlsbDojMWMyNjI0O2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNC4zMjUgMjQuNTEyIDQuOCAyNC40NjQgNy4yNTcgMzAgMjAuMjI4IDMwIDE0LjMyNiAyNC41MTEgMTQuMzI1IDI0LjUxMiAxNC4zMjUgMjQuNTEyXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA2NDY2O2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI0Ljg0OCA3LjUzNiAxNC40MDUgNy41NjggMjAuMjEyIDIgNy4yNzMgMiA0Ljg0OCA3LjUzNiA0Ljg0OCA3LjUzNlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNzY3YTtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTQuNDA1IDcuNTY4IDQuODQ4IDcuNTM2IDExLjY5MiAxMC4xMzcgMTQuNDA1IDcuNTY4IDE0LjQwNSA3LjU2OFxcXCIgc3R5bGU9XFxcImZpbGw6IzFlMzkzODtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTEuNTQ5IDIxLjkyNyA0LjggMjQuNDY0IDE0LjMyNSAyNC41MTIgMTQuMzI1IDI0LjUwOSAxMS41NDkgMjEuOTI3IDExLjU0OSAyMS45MjdcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMDMwMmU7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz5cIixcblx0fSxcblx0XCJNRUxcIjoge1xuXHRcdGNvbG91cjogXCIjMDZhMGEyXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItNjExLjM0OFxcXCIgeTE9XFxcIi02Ny40ODhcXFwiIHgyPVxcXCItNjAwLjI3MlxcXCIgeTI9XFxcIi02NS4zMzVcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMS40MzcsIDAsIDAsIC0xLjQzNywgODk0LjQxNywgLTgyLjI5MilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMwZjYwNjdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNVxcXCIgc3RvcC1jb2xvcj1cXFwiIzA1YWJhY1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzU4YmVjNFxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiLTYwMy41OTRcXFwiIHkxPVxcXCItNzcuNjk5XFxcIiB4Mj1cXFwiLTYwMi4wMTFcXFwiIHkyPVxcXCItNTkuNjA0XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEuNDM3LCAwLCAwLCAtMS40MzcsIDg5NC40MTcsIC04Mi4yOTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjMTE3YzgzXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiMyMWI1YjVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiM3ZWQ0ZDRcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIi02MTIuNzU3XFxcIiB5MT1cXFwiLTU5LjkwNlxcXCIgeDI9XFxcIi02MTYuOTM0XFxcIiB5Mj1cXFwiLTcyLjc2XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEuNDM3LCAwLCAwLCAtMS40MzcsIDg5NC40MTcsIC04Mi4yOTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjOWFjY2QzXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiM3MmFlYjNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzMTdkN2ZcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZFxcXCIgeDE9XFxcIi02MjEuODUxXFxcIiB5MT1cXFwiLTc0LjU3OVxcXCIgeDI9XFxcIi02MTQuODRcXFwiIHkyPVxcXCItNzIuMzAxXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEuNDM3LCAwLCAwLCAtMS40MzcsIDg5NC40MTcsIC04Mi4yOTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjMjE2MjZlXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiMxNTdjODRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMwM2EzYTVcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZVxcXCIgeDE9XFxcIi02MTYuMzY5XFxcIiB5MT1cXFwiLTY0LjQ2OVxcXCIgeDI9XFxcIi02MjUuMzRcXFwiIHkyPVxcXCItNzIuODM1XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEuNDM3LCAwLCAwLCAtMS40MzcsIDg5NC40MTcsIC04Mi4yOTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjMGI3YzgxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiMwNjhkOTBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMxNmIxYjFcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZlxcXCIgeDE9XFxcIi02MDguMDcyXFxcIiB5MT1cXFwiLTc0LjY3OFxcXCIgeDI9XFxcIi02MDMuNDg4XFxcIiB5Mj1cXFwiLTcwLjk2NlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxLjQzNywgMCwgMCwgLTEuNDM3LCA4OTQuNDE3LCAtODIuMjkyKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzBhOGE4ZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41XFxcIiBzdG9wLWNvbG9yPVxcXCIjMGY3YzgyXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjMWE1OTY0XFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImdcXFwiIHgxPVxcXCItNjAxLjEzNFxcXCIgeTE9XFxcIi03MC4xMTNcXFwiIHgyPVxcXCItNjA2LjAwOFxcXCIgeTI9XFxcIi02Ny4wNjdcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMS40MzcsIDAsIDAsIC0xLjQzNywgODk0LjQxNywgLTgyLjI5MilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMyNTZhNzdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNVxcXCIgc3RvcC1jb2xvcj1cXFwiIzBkOTQ5OVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzA2YTBhMlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfbWF5YTwvdGl0bGU+PHBhdGggZD1cXFwiTTIxLjYsMy40NjJIMzBMMTguNzY3LDI0LjIxMXMtMS44OTMtNS41LTIuNzA2LTcuNDU5XFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTIzLjY2OSwyOS4xMThIMzBWMy40NjJDMjkuOTk1LDE2Ljg2OSwyNC4zNiwyOS4xMTgsMjMuNjY5LDI5LjExOFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNMTguNzY3LDI0LjIxMUgxMy41NDFMMiwzLjQ2MmMyLjA0Ny0uMjYsNi4xMzUtLjYxMSw4LjE2LS43NzZaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2MpXFxcIi8+PHBhdGggZD1cXFwiTTguNjkzLDE2LjAxOUM2Ljk2LDIyLjg2NiwxLjk5NSwyOS4zMiwyLDI5LjMxNGM1Ljc1MiwwLDYuOTkxLS44MzUsNi45OTEtMS4yNzZWMTYuNTRDOC44OSwxNi4zNyw4Ljc5NCwxNi4xOTQsOC42OTMsMTYuMDE5WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNkKVxcXCIvPjxwYXRoIGQ9XFxcIk0yLDMuNDYyVjI5LjMxNGMzLjE0Ny01LjIsNC45ODEtOC42LDYuNi0xMy40NUM0LjYsOC43OTQsMiwzLjQ2MiwyLDMuNDYyWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNlKVxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjIzLjIzMyAyOC4xMDIgMjMuNjY5IDI5LjExOCAyMy42NjkgMTUuNjQ3IDIzLjIzMyAxNi4zNzVcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZilcXFwiLz48cGF0aCBkPVxcXCJNMjMuNjQ3LDE1LjY3M3YxMy40bC4wMTYuMDQzYy40NTIsMCw2LjMzMi0xNC41LDYuMzMyLTI1LjY1NkMyOS45OTUsMy40NjIsMjYuNDA2LDEwLjk0NywyMy42NDcsMTUuNjczWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNnKVxcXCIvPlwiLFxuXHR9LFxuXHRcIk1vbmdvREJcIjoge1xuXHRcdGNvbG91cjogXCIjNDFhMjQ3XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItNjQ1LjczMlxcXCIgeTE9XFxcIjgzOS4xODhcXFwiIHgyPVxcXCItNjU0LjU5XFxcIiB5Mj1cXFwiODM5LjI1XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KC0wLjk3NywgLTAuMzIzLCAtMC4yOSwgMC44NzcsIC0zNzUuOTQ0LCAtOTI4LjI4NylcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjAuMjMxXFxcIiBzdG9wLWNvbG9yPVxcXCIjOTk5ODc1XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU2M1xcXCIgc3RvcC1jb2xvcj1cXFwiIzliOTk3N1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42ODNcXFwiIHN0b3AtY29sb3I9XFxcIiNhMDlmN2VcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzY4XFxcIiBzdG9wLWNvbG9yPVxcXCIjYTlhODg5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjgzN1xcXCIgc3RvcC1jb2xvcj1cXFwiI2I3YjY5YVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC44OTZcXFwiIHN0b3AtY29sb3I9XFxcIiNjOWM3YjBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOTQ4XFxcIiBzdG9wLWNvbG9yPVxcXCIjZGVkZGNiXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5NFxcXCIgc3RvcC1jb2xvcj1cXFwiI2Y4ZjZlYlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZiZjllZlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiLTY0NC4yODdcXFwiIHkxPVxcXCI4MjMuNDA1XFxcIiB4Mj1cXFwiLTY1Ny4wMjhcXFwiIHkyPVxcXCI4NDUuNDc2XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KC0wLjk3NywgLTAuMzIzLCAtMC4yOSwgMC44NzcsIC0zNzUuOTQ0LCAtOTI4LjI4NylcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiM0OGE1NDdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzZjkxNDNcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIi02NDMuMzg2XFxcIiB5MT1cXFwiODM5LjQ4NVxcXCIgeDI9XFxcIi02NTIuNDE4XFxcIiB5Mj1cXFwiODMzLjQxN1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgtMC45NzcsIC0wLjMyMywgLTAuMjksIDAuODc3LCAtMzc1Ljk0NCwgLTkyOC4yODcpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjNDFhMjQ3XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjM1MlxcXCIgc3RvcC1jb2xvcj1cXFwiIzRiYTc0YlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45NTZcXFwiIHN0b3AtY29sb3I9XFxcIiM2N2I1NTRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiM2OWI2NTVcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX21vbmdvPC90aXRsZT48cGF0aCBkPVxcXCJNMTYuNjIsMzBsLS43NTEtLjI0OXMuMS0zLjgtMS4yNzUtNC4wNjdjLS45LTEuMDQ4LjEzMy00NC43NDEsMy40MjMtLjE0OWEyLjcxMiwyLjcxMiwwLDAsMC0xLjMzMywxLjUyM0ExNC4xLDE0LjEsMCwwLDAsMTYuNjIsMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTE3LjAyNiwyNi4zMjlhMTMuMjIzLDEzLjIyMywwLDAsMCw1LTEzLjIyNUMyMC41NTYsNi42MTksMTcuMDc1LDQuNDg3LDE2LjcsMy42NzNhOS43OTIsOS43OTIsMCwwLDEtLjgyNS0xLjZsLjI3NywxOC4wNjlTMTUuNTc4LDI1LjY2NCwxNy4wMjYsMjYuMzI5WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNS40ODcsMjYuNTY5UzkuMzY2LDIyLjQsOS43MiwxNS4wMjVBMTUuNTQsMTUuNTQsMCwwLDEsMTUuMjM5LDMuMzc3LDEuNzI1LDEuNzI1LDAsMCwwLDE1Ljg0NiwyYy4zODEuODIuMzE5LDEyLjI0My4zNTksMTMuNTc5QzE2LjM2LDIwLjc3NiwxNS45MTYsMjUuNTg4LDE1LjQ4NywyNi41NjlaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2MpXFxcIi8+XCIsXG5cdH0sXG5cdFwibmdpbnhcIjoge1xuXHRcdGNvbG91cjogXCIjMDE5NjM5XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTUuOTQ4LDJoLjA2NWExMC40MTgsMTAuNDE4LDAsMCwxLC45NzIuNTI4UTIyLjQxNCw1LjY1LDI3Ljg0Myw4Ljc3NGEuNzkyLjc5MiwwLDAsMSwuNDE0Ljc4OGMtLjAwOCw0LjM4OSwwLDguNzc3LS4wMDUsMTMuMTY0YS44MTMuODEzLDAsMCwxLS4zNTYuNTA3cS01Ljc3MywzLjMyNC0xMS41NDcsNi42NDRhLjU4Ny41ODcsMCwwLDEtLjY1Ny4wMzdROS45MTIsMjYuNiw0LjE0MywyMy4yNzRhLjcuNywwLDAsMS0uNC0uNjY2cTAtNi41ODIsMC0xMy4xNjNhLjY5My42OTMsMCwwLDEsLjM4Ny0uNjdROS41NTIsNS42NTcsMTQuOTc0LDIuNTM1Yy4zMjItLjE4NC42MzgtLjM3OS45NzQtLjUzNVxcXCIgc3R5bGU9XFxcImZpbGw6IzAxOTYzOVxcXCIvPjxwYXRoIGQ9XFxcIk04Ljc2NywxMC41MzhxMCw1LjQyOSwwLDEwLjg1OWExLjUwOSwxLjUwOSwwLDAsMCwuNDI3LDEuMDg3LDEuNjQ3LDEuNjQ3LDAsMCwwLDIuMDYuMjA2LDEuNTY0LDEuNTY0LDAsMCwwLC42ODUtMS4yOTNjMC0yLjYyLS4wMDUtNS4yNCwwLTcuODZxMy41ODMsNC4yOSw3LjE4MSw4LjU2OGEyLjgzMywyLjgzMywwLDAsMCwyLjYuNzgyLDEuNTYxLDEuNTYxLDAsMCwwLDEuMjUxLTEuMzcxcS4wMDgtNS41NDEsMC0xMS4wODFhMS41ODIsMS41ODIsMCwwLDAtMy4xNTIsMGMwLDIuNjYyLS4wMTYsNS4zMjEsMCw3Ljk4Mi0yLjM0Ni0yLjc2Ni00LjY2My01LjU1Ni03LTguMzMyQTIuODE3LDIuODE3LDAsMCwwLDEwLjE3LDkuMDMzLDEuNTc5LDEuNTc5LDAsMCwwLDguNzY3LDEwLjUzOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJOaW1cIjoge1xuXHRcdGNvbG91cjogXCIjZmZlOTUzXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTYuMTExLDYuNDA1cy0xLjA3My44NDctMi4xNjcsMS42OWExNS4zNjEsMTUuMzYxLDAsMCwwLTQuNTI3LjY1MWMtMS4xLS43LTIuMDctMS40NjktMi4wNy0xLjQ2OVM2LjUyLDguNyw2LDkuNTM1YTExLjM4MiwxMS4zODIsMCwwLDAtMi4yMzYsMS40ODJDMi45NjEsMTAuNywyLjAzLDEwLjMxLDIsMTAuM2MxLjA2MywyLjE0NSwxLjc3OCw0LjI5MiwzLjcyMiw1LjU4MywzLjEtNC44ODksMTcuNDgtNC40MzksMjAuNjM5LS4wMjhDMjguNCwxNC43ODcsMjkuMiwxMi41LDMwLDEwLjM4Yy0uMDg4LjAyOS0xLjE4MS4zOTUtMS44ODkuNjY1YTExLjQ4OSwxMS40ODksMCwwLDAtMS45ODYtMS41MWMtLjUzNy0uOTg0LTEuMzE5LTIuMzEzLTEuMzE5LTIuMzEzcy0uOTI3LjY4OS0yLDEuNDRhMjEuMjY1LDIxLjI2NSwwLDAsMC00LjY4MS0uNTEyYy0xLS44MjYtMi4wMTQtMS43NDYtMi4wMTQtMS43NDZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjNkNDAwXFxcIi8+PHBhdGggZD1cXFwiTTMuMSwxNC44NTRsMi41NTQsNi4xODVjNC40MzUsNS44NSwxNS43NTksNi4yNTcsMjAuNy4xMTMsMS4xNjgtMi42MzMsMi43NDUtNi4zMzMsMi43NDUtNi4zMzNhMTMuMzc5LDEzLjM3OSwwLDAsMS00LjYsMy44NjksMTIuMjE3LDEyLjIxNywwLDAsMS0yLjk4My43OTNsLTUuNDY1LTIuODMyLTUuNSwyLjc3NWExNS42NzksMTUuNjc5LDAsMCwxLTIuOTgzLS43NjRBMTQuMDc2LDE0LjA3NiwwLDAsMSwzLjEsMTQuODU0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZTk1M1xcXCIvPlwiLFxuXHRcdGlubGluZUNvbW1lbnQ6IFtcblx0XHRcdFwiI1wiLFxuXHRcdF0sXG5cdH0sXG5cdFwiTml4XCI6IHtcblx0XHRjb2xvdXI6IFwiIzUyNzdjM1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTEzLDExLjExNSw2LjE4MywyMy43Niw0LjU5LDIwLjg3bDEuODM5LTMuMzg3LTMuNjUxLS4wMUwyLDE2LjAyOWwuOC0xLjQ3Nyw1LjIuMDE4LDEuODY4LTMuNDQ3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzdlYmFlNDtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwYXRoIGQ9XFxcIk0xMy41MjcsMjEuMjIzaDEzLjY0bC0xLjU0MSwyLjkyMi0zLjY1OC0uMDExLDEuODE3LDMuMzg5LS43NzksMS40NDktMS41OTMsMC0yLjU4NC00LjgyNS0zLjcyMi0uMDA4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzdlYmFlNDtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwYXRoIGQ9XFxcIk0yMS40NjcsMTUuNjgyLDE0LjY0NywzLjAzN2wzLjEzNC0uMDMyTDE5LjYsNi40bDEuODM0LTMuMzc5aDEuNTU3TDIzLjc4Niw0LjUsMjEuMTc0LDkuMzA3bDEuODU0LDMuNDU1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzdlYmFlNDtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwYXRoIGQ9XFxcIk0xMC41NDIsMTYuMzI0bDYuODIxLDEyLjY0NUwxNC4yMjksMjlsLTEuODIxLTMuNC0xLjgzNCwzLjM4SDkuMDE2bC0uOC0xLjQ3NkwxMC44MzEsMjIuNyw4Ljk3NiwxOS4yNDNaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTI3N2MzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE4LjQ2NCwxMC43NTFINC44MjNMNi4zNjUsNy44MjlsMy42NTguMDExTDguMjA3LDQuNDUxLDguOTg2LDNsMS41OTIsMCwyLjU4NCw0LjgyNSwzLjcyMi4wMDhaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTI3N2MzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE5LDIwLjg4OCwyNS44MTcsOC4yNDRsMS41OTMsMi44OUwyNS41NzEsMTQuNTJsMy42NTEuMDFMMzAsMTUuOTc5bC0uOCwxLjQ3Ny01LjItLjAxOC0xLjg2OCwzLjQ0N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM1Mjc3YzM7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz5cIixcblx0fSxcblx0XCJOU0lTXCI6IHtcblx0XHRjb2xvdXI6IFwiI2E0MmQyNlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTI3LjQzNSwxNi4wMzcsMjIuMDEyLDIxLjQ2bDUuNDIzLDUuNDIzXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1NzdiXFxcIi8+PHBhdGggZD1cXFwiTTI2Ljg4NCwxNS41SDE2LjA0OGw1LjQyMyw1LjQyM1xcXCIgc3R5bGU9XFxcImZpbGw6IzAwNzlhYVxcXCIvPjxwYXRoIGQ9XFxcIk0yNi44ODQsMTQuNzEyLDIxLjQ2MSw5LjI4OWwtNS40MjMsNS40MjNcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDk2ZDNcXFwiLz48cGF0aCBkPVxcXCJNMjAuNTI4LDkuMTMxSDkuNjgzbDUuNDIzLDUuNDIzTTI3LjQzNSwzLjMyNSwyMi4wMTIsOC43NDhsNS40MjMsNS40MjNcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMWIwZjBcXFwiLz48cGF0aCBkPVxcXCJNMjAuNTI4LDguMzU2LDE1LjEwNSwyLjkzMyw5LjY4Myw4LjM1NlxcXCIgc3R5bGU9XFxcImZpbGw6IzI3YmNmM1xcXCIvPjxwYXRoIGQ9XFxcIk0xNC4xNzIsMi43NzVIMy4zMjdMOC43NDksOC4yXFxcIiBzdHlsZT1cXFwiZmlsbDojNGZjOWY1XFxcIi8+PHBhdGggZD1cXFwiTTQuNTY4LDE1Ljk2Myw5Ljk5MSwxMC41NCw0LjU2OCw1LjExN1xcXCIgc3R5bGU9XFxcImZpbGw6Izc5MjAxYlxcXCIvPjxwYXRoIGQ9XFxcIk0xMC41NDEsMTEuMDkxLDUuMTE5LDE2LjUxM0gxNS45NjRcXFwiIHN0eWxlPVxcXCJmaWxsOiNhNDJkMjZcXFwiLz48cGF0aCBkPVxcXCJNNS4xMTksMTcuMjg4bDUuNDIzLDUuNDIzLDUuNDIzLTUuNDIzXFxcIiBzdHlsZT1cXFwiZmlsbDojY2MzODJmXFxcIi8+PHBhdGggZD1cXFwiTTQuNTY4LDE3LjgyOVYyOC42NzVsNS40MjMtNS40MjNMOC40LDIxLjY2NW0xMy45MTYsMS4yTDE2LjksMTcuNDQ3bC01LjQyMyw1LjQyM1xcXCIgc3R5bGU9XFxcImZpbGw6I2YwNDUzZlxcXCIvPjxwYXRoIGQ9XFxcIk0xMS40NzUsMjMuNjQ0LDE2LjksMjkuMDY3bDUuNDIzLTUuNDIzXFxcIiBzdHlsZT1cXFwiZmlsbDojZjI2MjVkXFxcIi8+PHBhdGggZD1cXFwiTTE3Ljg0LDI5LjIyNUgyOC42ODVMMjMuMjYzLDIzLjhcXFwiIHN0eWxlPVxcXCJmaWxsOiNmNDdmN2RcXFwiLz48cGF0aCBkPVxcXCJNMjkuODg5LDI5LjMzN2wtMS42OC0xLjY4VjIuMzkyYS4zNzQuMzc0LDAsMCwwLS4yNDMtLjM1NUEuMjYzLjI2MywwLDAsMCwyNy44MjcsMmEuMzU5LjM1OSwwLDAsMC0uMjcxLjExMkwyMS40NzEsOC4yLDE1LjM4NSwyLjExMiwxNS4zLDIuMDM3aC0uMDM3QS4zMDcuMzA3LDAsMCwwLDE1LjEwNSwySDIuNGEuNDM0LjQzNCwwLDAsMC0uMjg5LjExMkEuMzguMzgsMCwwLDAsMiwyLjM5MmEuMzU5LjM1OSwwLDAsMCwuMTEyLjI3MWwxLjY4LDEuNjhWMjkuNjE3YS4zNzQuMzc0LDAsMCwwLC4yNDMuMzU1QS4zODcuMzg3LDAsMCwwLDQuMTg1LDMwYS4zNTkuMzU5LDAsMCwwLC4yNzEtLjExMkwxMC41NDEsMjMuOGw2LjA4NSw2LjA4NS4wODQuMDc1aC4wMzdBLjI1NC4yNTQsMCwwLDAsMTYuOSwzMEgyOS42MDlhLjM5NS4zOTUsMCwwLDAsLjI4LS42NjNaTTI3LjQzNSwzLjMyNVYxNC4xNzFMMjIuMDEyLDguNzQ4bDUuNDIzLTUuNDIzWk05Ljk5MSwxMC41NCw0LjU2OCwxNS45NjNWNS4xMTdMOS45OTEsMTAuNTRaTTkuNjgzLDkuMTMxSDIwLjUyOGwtNS40MjMsNS40MjNMOS42ODMsOS4xMzFabS44NTksMS45Niw1LjQyMyw1LjQyM0g1LjExOWw1LjQyMy01LjQyM1pNMTYuOSwxNy40NDdsNS40MjMsNS40MjNIMTEuNDc1TDE2LjksMTcuNDQ3Wk0xNi4wNDgsMTUuNUgyNi44OTNsLTUuNDIzLDUuNDIzTDE2LjA0OCwxNS41Wm01Ljk2NCw1Ljk2NCw1LjQyMy01LjQyM1YyNi44ODNMMjIuMDEyLDIxLjQ2Wm00Ljg3Mi02Ljc0OEgxNi4wNDhsNS40MjMtNS40MjMsNS40MTMsNS40MjNaTTIwLjUyOCw4LjM1Nkg5LjY4M2w1LjQyMy01LjQyMyw1LjQyMyw1LjQyM1pNMy4zMjcsMi43NzVIMTQuMTcyTDguNzQ5LDguMlptMS4yNDEsMjUuOVYxNy44MjlMOC40LDIxLjY2NWwxLjU4NywxLjU4N0w0LjU2OCwyOC42NzVabS41NTEtMTEuMzg3SDE1Ljk2NGwtNS40MjMsNS40MjNMNS4xMTksMTcuMjg4Wk0xNi45LDI5LjA2N2wtNS40MjMtNS40MjNIMjIuMzJMMTYuOSwyOS4wNjdabS45NDMuMTU5TDIzLjI2MywyMy44bDUuNDIzLDUuNDIzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ2NDA0OVxcXCIvPlwiLFxuXHR9LFxuXHRcIk9iamVjdCBQYXNjYWxcIjoge1xuXHRcdGNvbG91cjogXCIjRkY2MzQ0XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxNlxcXCIgeTE9XFxcIi0wLjQ0M1xcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMjIuMDQyXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjAyMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmMGMxNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzlhMGMwZlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfZGVscGhpPC90aXRsZT48Y2lyY2xlIGN4PVxcXCIxNlxcXCIgY3k9XFxcIjE2XFxcIiByPVxcXCIxNFxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yNy41NDUsMTYuMjQzSDQuOTI0YS45MTQuOTE0LDAsMCwwLTEuMDkyLjgycS4wMzMuNDI5LjEuODQ5YTEyLjQsMTIuNCwwLDAsMCwyNC41MzIsMHEuMDc1LS41LjEwOC0xLjAyMUMyOC40NzgsMTYuNTIzLDI4LjIxMSwxNi4yMDcsMjcuNTQ1LDE2LjI0M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjY0NDNcXFwiLz48cG9seWxpbmUgcG9pbnRzPVxcXCIxOC40OCAxMS42NCAyMy43MDcgNy4yNjYgMTkuNzg3IDUuODggMTYgMTEuMDUzXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTUuNjggMTEuMDI2IDE4LjY0IDUuODggMTQuODUzIDUuODggMTMuMzA3IDExLjI5M1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjEzLjA0IDExLjM3MyAxMy42IDYuNzA2IDEwLjU4NyA3Ljk2IDExLjAxMyAxMi43NlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjEwLjc0NyAxMyA5Ljc4NyA4Ljc2IDcuNzA3IDEwLjg0IDkuNjUzIDE0LjY4XFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS4zODcgMTUuMDUzIDcuNDkzIDEyLjM3NiA2LjY0IDE0LjQ2NiA5LjA0IDE2LjUxN1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjkuMDQgMTYuNzU3IDYuNjQgMTUuMjEzIDYuNDggMTcuNCA5LjIgMTguMzMzXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS4yMjcgMTguODQ2IDYuNjQgMTguMDQgNy4yMjcgMTkuOCA5LjU0NyAxOS44XFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS43MDcgMjAuMDkzIDcuNzA3IDIwLjM4NiA4LjYyNyAyMS43NDYgMTAuMjY3IDIxXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTIwLjAyMywxMy4wODlhNi42MSw2LjYxLDAsMCwwLTQuNTMtMkE2LjI5Myw2LjI5MywwLDAsMCwxMS4zLDIyLjA3bDQuOTQxLjEyOS0yLjA4LTQuMTZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWVlO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE2LjUsMjIuMzY2bC01LjI2Ny0uMTM4LS4wNDQtLjAzOWE2LjQ1Myw2LjQ1MywwLDAsMSw0LjMtMTEuMjY0LDYuNzg3LDYuNzg3LDAsMCwxLDQuNjQzLDIuMDVsLjEyMy4xMjMtNS45LDQuOTgyWm0tNS4xNC0uNDU1LDQuNjE2LjEyMUwxMy45NjEsMThsNS44MjUtNC45MTlhNi40Myw2LjQzLDAsMCwwLTQuMjkyLTEuODM1LDYuMTMzLDYuMTMzLDAsMCwwLTQuMTMxLDEwLjY2N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZTRiMmVcXFwiLz48cGF0aCBkPVxcXCJNMTIuMDEzLDIwLjQ5M2MtNC4xNzMtNS44MTMsMi4xMDktOC4xNzIsMi40NzgtOC40NTMuNDUxLS4zNDQtNy41OSwxLjc4NS0zLjIyNiw4Ljg4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2YwNGUzMTtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjAuNzIgMTIuNiAxMy41MiAxNy41NjcgMTMuNzMzIDE4LjU3MyAyMS40NjcgMTcuMDI2IDIwLjcyIDEyLjZcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZWU7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cGF0aCBkPVxcXCJNMTMuNjEsMTguNzYxLDEzLjM0MSwxNy41bDcuNDk1LTUuMTcuODE0LDQuODI4Wm0uMDg5LTEuMTIzLjE1OC43NDdMMjEuMjgzLDE2LjksMjAuNiwxMi44NzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWU0YjJlXFxcIi8+PHBhdGggZD1cXFwiTTE1LjcyMywyMS4zMTljLTMuOTMtLjY2OC00LjI4My40MjgtNC4yODMuNDI4TDEwLjI2NywyNC40NHMxLjEyLS45MDcsNS40OTMsMGwuNzYtMS4zODhaXFxcIiBzdHlsZT1cXFwiZmlsbDojZGQwYzEzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE0LjEyMiwyMS42Yy0uMDItLjItMS4xLS4zMTktMS42NzctLjEyMy0uNzMyLjI0OS0xLjIxOSwxLjE0Mi0xLjA0NSwxLjIxM2ExLjk3NSwxLjk3NSwwLDAsMSwxLjEyNS0uOTg2QzEzLjQ0NywyMS40OTMsMTQuMTQyLDIxLjgsMTQuMTIyLDIxLjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmY2ZTRmO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE1LjUyLDE4LjYwNmExMS4xLDExLjEsMCwwLDAsMS41NDcsMS40ODcsNi45LDYuOSwwLDAsMSwyLjcyLDQuMTA3Yy0uMTA3LDEuMDY3LTEuOTczLDEuNzYtMS45NzMsMS43NmwtMy4zMDctNy4xOTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWVlO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE3LjczLDI2LjE2MWwtMy40NTctNy41MjEsMS4zMi0uMjA4LjA1Ny4wODFhMTAuODY5LDEwLjg2OSwwLDAsMCwxLjUxMiwxLjQ1MSw3LDcsMCwwLDEsMi43ODIsNC4yMDdsMCwuMDIyLDAsLjAyMmMtLjExNSwxLjE1My0yLDEuODY0LTIuMDc3LDEuODk0Wm0tMi45OS03LjI3LDMuMTU1LDYuODYzYy40MTQtLjE3OCwxLjYzLS43NjMsMS43My0xLjU0OGE2Ljc5Myw2Ljc5MywwLDAsMC0yLjY0OC0zLjk4MWwtLjAxLS4wMDdhMTEuOTQsMTEuOTQsMCwwLDEtMS41MTctMS40MzlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWU0YjJlXFxcIi8+PHBhdGggZD1cXFwiTTI4LDEyLjc0MmMuMDI1LjM5NC4wMzQuNzkyLjAyNSwxLjE5NGExMy45NDYsMTMuOTQ2LDAsMCwxLTE5LjksMTIuM0ExMi44NiwxMi44NiwwLDAsMCwyOCwxMi43NDJaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWFlMGRmO2ZpbGwtcnVsZTpldmVub2RkO29wYWNpdHk6MC4yXFxcIi8+PHBhdGggZD1cXFwiTTIuMzgzLDEzLjg5M0ExMy45NDEsMTMuOTQxLDAsMCwxLDI1LjcsNS44M3MtNS4wMDksNS45NzktMTAuNTg0LDcuOTA3UzIuMzgzLDEzLjg5MywyLjM4MywxMy44OTNaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWFlMGRmO29wYWNpdHk6MC4yXFxcIi8+PHBhdGggZD1cXFwiTTMuNjE4LDE4LjY5NGMtLjA0NC0uMzkyLS4wNzItLjc5LS4wODMtMS4xOTFDMy4zMjksOS44MDcsMTAuMDEyLDQuMiwxNy43MDgsMy45OTFhMTQuMiwxNC4yLDAsMCwxLDUuNzE5LDEuNDU4LDEzLjEyOCwxMy4xMjgsMCwwLDAtNy4xODgtMi4zNjljLTcuMS4xOS0xMy4zMDYsNS4zLTEzLjExNiwxMi40QTEyLjg3MywxMi44NzMsMCwwLDAsMy42MTgsMTguNjk0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2VhZTBkZjtmaWxsLXJ1bGU6ZXZlbm9kZDtvcGFjaXR5OjAuMlxcXCIvPlwiLFxuXHR9LFxuXHRcIk9iamVjdGl2ZS1DXCI6IHtcblx0XHRjb2xvdXI6IFwiI2MyYzJjMlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTExLjI5LDE1Ljk3NmE4Ljg5Miw4Ljg5MiwwLDAsMCwxLjAzOSw0LjU1Nyw0LjgxOCw0LjgxOCwwLDAsMCw1LjU3OSwyLjEzLDMuNzg5LDMuNzg5LDAsMCwwLDIuNzM0LTMuMTgxYy4wOTUtLjUzNS4xLS41NC4xLS41NCwxLjUzNy4yMjIsNC4wMTQuNTgyLDUuNTUuOGwtLjEuMzg5QTkuOTU4LDkuOTU4LDAsMCwxLDIzLjgsMjQuOWE4LjM1LDguMzUsMCwwLDEtNC43NDcsMi4zNzgsMTIuOTI1LDEyLjkyNSwwLDAsMS03LjMyMi0uNzI1LDguOTgsOC45OCwwLDAsMS01LjEwNi01LjUyNEExNC4zNTMsMTQuMzUzLDAsMCwxLDYuNjQyLDEwLjlhOS4zMjMsOS4zMjMsMCwwLDEsNy45MjktNi4yNCwxMS44MTIsMTEuODEyLDAsMCwxLDUuOS40OTEsOC40NjcsOC40NjcsMCwwLDEsNS40NTYsNi4xYy4wODMuMzExLjEuMzY5LjEuMzY5LTEuNzA5LjMxMS0zLjgyMS43MDUtNS41MTgsMS4wNzVDMjAuMTg2LDExLDE5LjM4Nyw5LjY2NiwxNy42NzgsOS4yNWE0LjY1Niw0LjY1NiwwLDAsMC01Ljg1MywzLjE1OCw5LjI4LDkuMjgsMCwwLDAtLjM0MSwxLjI3M0ExMC44OSwxMC44OSwwLDAsMCwxMS4yOSwxNS45NzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzJjMmMyXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyLjAzMyAzMCAyLjAzMyAyIDcuOTY3IDIgNy45NjcgNC4yMjcgNC43MjMgNC4yMjcgNC43MjMgMjcuNzczIDcuOTY3IDI3Ljc3MyA3Ljk2NyAzMCAyLjAzMyAzMFxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjkuOTY3IDI5Ljk5OSAyNC4wMzMgMjkuOTk5IDI0LjAzMyAyNy43NzEgMjcuMjc3IDI3Ljc3MSAyNy4yNzcgNC4yMjYgMjQuMDMzIDQuMjI2IDI0LjAzMyAxLjk5OSAyOS45NjcgMS45OTkgMjkuOTY3IDI5Ljk5OVxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPlwiLFxuXHR9LFxuXHRcIk9DYW1sXCI6IHtcblx0XHRjb2xvdXI6IFwiI2YyOTEwNFwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiLTc0NS42MjNcXFwiIHkxPVxcXCItOTIuNzZcXFwiIHgyPVxcXCItNzQ1LjYyM1xcXCIgeTI9XFxcIi04NS4xMDhcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoNzU4IDExMy4yOClcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmMjkxMDRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNlYzY4MTNcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYlxcXCIgeDE9XFxcIi03NDEuOTlcXFwiIHkxPVxcXCItMTA5LjQ3N1xcXCIgeDI9XFxcIi03NDEuOTlcXFwiIHkyPVxcXCItODUuMDk5XFxcIiB4bGluazpocmVmPVxcXCIjYVxcXCIvPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIi03NTIuMTExXFxcIiB5MT1cXFwiLTkzLjkxOFxcXCIgeDI9XFxcIi03NTIuMTExXFxcIiB5Mj1cXFwiLTg1LjI4NFxcXCIgeGxpbms6aHJlZj1cXFwiI2FcXFwiLz48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9vY2FtbDwvdGl0bGU+PHBhdGggZD1cXFwiTTE2LjU3MSwyNS4yNDZhNC4yOCw0LjI4LDAsMCwwLS4wMzktLjcwOWMtLjA1OS0uMi0uMi0uMjE3LS4zLS4zNzRhMy41MDcsMy41MDcsMCwwLDEtLjUzMi0xLjQ3N2MtLjAyLS40NTMtLjItLjg4Ni0uMjE3LTEuMzM5LS4wMi0uMjE3LjAyLS40NTMsMC0uNjY5YTEuOTYzLDEuOTYzLDAsMCwwLS4wMzktLjMxNSwxLjEzMywxLjEzMywwLDAsMC0uMDM5LS4ybC4wNTktLjEzOGEyLjcyLDIuNzIsMCwwLDEsLjY1LS4wMzljLjI1NiwwLC41MTIuMDIuNzY4LjAyYTcuOTYxLDcuOTYxLDAsMCwwLDEuNTM2LS4wNTksMy43MjIsMy43MjIsMCwwLDAsMS45NDktLjg0Nyw0Ljk0Niw0Ljk0NiwwLDAsMCwxLjUzNi0yLjAwOGMuMTc3LS4zOTQuMTc3LTEuMDgzLjU1MS0xLjQuNDMzLS4zNzQsMS4xODEtLjMzNSwxLjY5My0uNTcxYTEuMTg3LDEuMTg3LDAsMCwxLC44MDctLjEzOGMuMjE3LjAzOS42My4zMTUuNzI5LS4wNTktLjA3OS0uMDM5LS4xLS4xMzgtLjEzOC0uMTc3LjQxNC0uMDM5LDAtMS0uMTU4LTEuMkEyLjIyNSwyLjIyNSwwLDAsMCwyNC4yNSwxM2EzLjUwOSwzLjUwOSwwLDAsMC0xLjUzNi0uMjE3Yy0uODg2LjE3Ny0uODI3LS4zMzUtMS4zMzktLjMzNS0uNjMsMC0xLjczMy4wMzktMS45My42M2ExLjU0LDEuNTQsMCwwLDEtLjMzNS41MTJjLS4xMzguMTc3LjAyLjM1NC0uMDM5LjU3MS0uMDc5LjIxNy0uMTc3Ljk4NS0uMjc2LDEuMjYtLjE3Ny40NTMtLjM5NCwxLjAyNC0uNzg4LDEuMDI0YTMuMTUyLDMuMTUyLDAsMCwxLTEuNDM3LS4wNzljLS4yNzYtLjEtLjcyOS0uMjU2LS45NDUtLjMzNS0xLjAyNC0uNDMzLTEuMi0uOTA2LTEuMi0uOTA2YTMuMDI2LDMuMDI2LDAsMCwxLS41MTItLjg2NmMtLjExOC0uNDE0LS4zMTUtLjc2OC0uMzk0LTFzLS4zLS41OTEtLjQ1My0uOTg1YTIuNjY3LDIuNjY3LDAsMCwwLS43MDktMS4wNjNjLS4zMTUtLjI3Ni0uNjEtLjcyOS0xLjI2LS41OTFhMS42NDEsMS42NDEsMCwwLDAtLjg2Ni4zMTVjLS4yMTcuMTc3LS4zLjU3MS0uNDkyLjg4Ni0uMTE4LjE3Ny0uMzE1LjcwOS0uNTEyLDEuMTYyYTEuOTI5LDEuOTI5LDAsMCwxLS4zMzUuNjVjLS4xMTguMDc5LS4yNTYuMi0uNDE0LjEzOGEuOTI0LjkyNCwwLDAsMS0uMzE1LS4yLDUuMzM0LDUuMzM0LDAsMCwxLS43MDktMS4xMjIsMTEuMSwxMS4xLDAsMCwwLS43ODgtMS4yNDEsMS4wMTYsMS4wMTYsMCwwLDAtLjk4NS0uNTUxYy0xLjAyNCwwLTEuMS41NzEtMS41NTYsMS40MThhNS41NzQsNS41NzQsMCwwLDEtLjY2OSwxLjRjLS4yMzYuMjU2LS45NDUsMS4zMzktMS40NTcsMS41MTZIMnY3LjYyYy4wMzktLjEuMDU5LS4yLjEtLjI3Ni4yLS40MTQuNjUtLjgwNy45MDYtMS4yMjFhMy41LDMuNSwwLDAsMCwuMzc0LS43MDksMy43NDMsMy43NDMsMCwwLDEsLjIzNi0uNzA5Ljc5NC43OTQsMCwwLDEsLjU3MS0uMzM1Yy4zNTQtLjA1OS42NS40OTIsMS4wODMuNzA5LjIuMDc5LDEuMDYzLjM5NCwxLjMxOS40NTMuNDMzLjEuOTA2LjIsMS4zMzkuMjc2LjIzNi4wMzkuNDUzLjA3OS43MDkuMWE3LjMsNy4zLDAsMCwxLDEuMDgzLjEsMi4yNzcsMi4yNzcsMCwwLDAtLjgwNywxLjIyMWMtLjE1OC40MzMtLjI3Ni45MjUtLjQ3MywxLjMzOS0uMjE3LjQ3My0uNjY5LjY2OS0uNjEsMS4yMjFhMi42NjgsMi42NjgsMCwwLDEsLjAyLjY4OSw0LjAwOSw0LjAwOSwwLDAsMS0uMjE3LjY4OWMtLjEuMzE1LS4yMTcsMS4zNTktLjM1NCwxLjY3NGwuOTA2LS4xMThoMEExMC42OTIsMTAuNjkyLDAsMCwwLDguNCwyNi4zODhhMy43MzcsMy43MzcsMCwwLDEsLjcyOS0xLjI4Yy4zMzUtLjM3NC4zMTUtLjg0Ny41MTItMS4zYTEyLjQ4OCwxMi40ODgsMCwwLDEsLjc2OC0xLjNjLjQ5Mi0uODA3LjgwNy0xLjgxMiwxLjg1MS0yLjAyOGEzLjMsMy4zLDAsMCwxLDEuMDI0LjcwOSw0LjQ1Miw0LjQ1MiwwLDAsMSwuODg2LDEuMSwxMi44NTEsMTIuODUxLDAsMCwxLC44ODYsMi42NzgsMS4yMjcsMS4yMjcsMCwwLDAsLjM5NC43MDksNS40NjIsNS40NjIsMCwwLDEsLjQzMy43MjljLjA3OS4xNzcuMi41NzEuMy43ODhhNi4yNjcsNi4yNjcsMCwwLDEsLjMxNS44MjdsLjg0Ny0uMDJoLjAydi0uMDJBOS43NTQsOS43NTQsMCwwLDEsMTYuNTcxLDI1LjI0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTYuMjE3LDI3LjIzNWMtLjEtLjItLjIxNy0uNjEtLjMtLjc4OGE1LjQ2Miw1LjQ2MiwwLDAsMC0uNDMzLS43MjksMS4xMTksMS4xMTksMCwwLDEtLjM5NC0uNzA5LDEyLjQ4NywxMi40ODcsMCwwLDAtLjg4Ni0yLjY3OCw0LjQ1Miw0LjQ1MiwwLDAsMC0uODg2LTEuMSwzLjMsMy4zLDAsMCwwLTEuMDI0LS43MDljLTEuMDQ0LjItMS4zNTksMS4yMjEtMS44NTEsMi4wMjhhMTIuNDg4LDEyLjQ4OCwwLDAsMC0uNzY4LDEuM2MtLjIuNDMzLS4xNzcuOTI1LS41MTIsMS4zYTMuNDQzLDMuNDQzLDAsMCwwLS43MjksMS4yOGMtLjAzOS4xLS4xMTgsMS4wODMtLjIxNywxLjMxOWgwbDEuNTM2LS4xYzEuNDM3LjEsMS4wMjQuNjUsMy4yNDkuNTMybDMuNTI1LS4xMThoMEE2LjI2Nyw2LjI2NywwLDAsMCwxNi4yMTcsMjcuMjM1WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yNi40NTYsMy44SDUuNTQ0QTMuNTIxLDMuNTIxLDAsMCwwLDIuMDIsNy4zMjh2Ny42NzloMGMuNTEyLS4xNzcsMS4yMjEtMS4yNiwxLjQ1Ny0xLjUxNmE1LjkxMyw1LjkxMywwLDAsMCwuNjY5LTEuNGMuNDUzLS44MjcuNTMyLTEuNDE4LDEuNTU2LTEuNDE4YTEuMDE2LDEuMDE2LDAsMCwxLC45ODUuNTUxLDkuNTQ3LDkuNTQ3LDAsMCwxLC43ODgsMS4yNDEsNC44NDksNC44NDksMCwwLDAsLjcwOSwxLjEyMiwyLDIsMCwwLDAsLjMxNS4yYy4xNTguMDU5LjMtLjA1OS40MTQtLjEzOEExLjkyOSwxLjkyOSwwLDAsMCw5LjI0NiwxM2MuMi0uNDUzLjM5NC0uOTY1LjUxMi0xLjE2Mi4yLS4zMTUuMjc2LS43MDkuNDkyLS44ODZhMS41OSwxLjU5LDAsMCwxLC44NjYtLjMxNWMuNjUtLjEzOC45NDUuMzE1LDEuMjYuNTkxYTMuMjg1LDMuMjg1LDAsMCwxLC43MDksMS4wNjNjLjE1OC4zOTQuMzU0Ljc2OC40NTMuOTg1YTguOTQ2LDguOTQ2LDAsMCwxLC4zOTQsMSwzLjcxMywzLjcxMywwLDAsMCwuNTEyLjg2NnMuMTc3LjQ3MywxLjIuOTA2YTguNzQ5LDguNzQ5LDAsMCwwLC45NDUuMzM1LDMuMTUyLDMuMTUyLDAsMCwwLDEuNDM3LjA3OWMuMzk0LDAsLjYxLS41NzEuNzg4LTEuMDI0LjEtLjI3Ni4yMTctMS4wNDQuMjc2LTEuMjZzLS4xLS4zNzQuMDM5LS41NzFjLjE1OC0uMjE3LjI1Ni0uMjM2LjMzNS0uNTEyLjItLjYxLDEuMy0uNjMsMS45My0uNjMuNTMyLDAsLjQ1My41MTIsMS4zMzkuMzM1YTMuMjQzLDMuMjQzLDAsMCwxLDEuNTM2LjIxNywyLjIyNSwyLjIyNSwwLDAsMSwxLjE0Mi41NTFjLjE1OC4yLjU3MSwxLjE2Mi4xNTgsMS4yLjAzOS4wMzkuMDc5LjEzOC4xMzguMTc3LS4xLjM3NC0uNDkyLjEtLjcyOS4wNTlhMS4xODcsMS4xODcsMCwwLDAtLjgwNy4xMzhjLS41MTIuMjE3LTEuMjQxLjItMS42OTMuNTcxLS4zNzQuMzE1LS4zNzQsMS0uNTUxLDEuNGE1LjE2Nyw1LjE2NywwLDAsMS0xLjUzNiwyLjAwOCwzLjksMy45LDAsMCwxLTEuOTQ5Ljg0Nyw3Ljk2MSw3Ljk2MSwwLDAsMS0xLjUzNi4wNTljLS4yNTYtLjAyLS41MTItLjAyLS43NjgtLjAyLS4xNTgsMC0uNjY5LS4wMi0uNjUuMDM5bC0uMDU5LjEzOGEuNy43LDAsMCwwLC4wMzkuMmMuMDIuMTE4LjAyLjIxNy4wMzkuMzE1LDAsLjIxNy0uMDIuNDUzLDAsLjY2OS4wMi40NTMuMi44NjYuMjE3LDEuMzM5YTMuMjYsMy4yNiwwLDAsMCwuNTMyLDEuNDc3Yy4xLjE1OC4yMzYuMTc3LjMuMzc0YTQuMTYzLDQuMTYzLDAsMCwxLC4wMzkuNzA5LDkuNjg1LDkuNjg1LDAsMCwwLC44MjcsMi43NTd2LjAyaDBjLjUxMi0uMDc5LDEuMDQ0LS4yNzYsMS43MTMtLjM3NCwxLjI0MS0uMTc3LDIuOTU0LS4xLDQuMDU2LS4yLDIuOC0uMjU2LDQuMzEyLDEuMTQyLDYuODEzLjU3MVY3LjMyOEEzLjU1MSwzLjU1MSwwLDAsMCwyNi40NTYsMy44Wk0xNi4wMiwyMC4zNDNaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2IpXFxcIi8+PHBhdGggZD1cXFwiTTguNDc4LDIzLjU3M2MuMi0uNDMzLjMxNS0uOTA2LjQ3My0xLjMzOWEyLjI3NywyLjI3NywwLDAsMSwuODA3LTEuMjIxLDcuMyw3LjMsMCwwLDAtMS4wODMtLjFjLS4yMzYtLjAyLS40NzMtLjA1OS0uNzA5LS4xLS40MzMtLjA3OS0uOTI1LS4xNzctMS4zMzktLjI3Ni0uMjU2LS4wNTktMS4xNDItLjM3NC0xLjMxOS0uNDUzLS40NTMtLjItLjc0OC0uNzY4LTEuMDgzLS43MDlhLjc5NC43OTQsMCwwLDAtLjU3MS4zMzUsMy43NDMsMy43NDMsMCwwLDAtLjIzNi43MDljLS4xLjIzNi0uMjU2LjQ3My0uMzc0LjcwOWExMi4yODksMTIuMjg5LDAsMCwwLS45MjUsMS4yYy0uMDM5LjEtLjA1OS4yLS4xLjN2NC43NDVhNS40LDUuNCwwLDAsMSwuNzI5LjE1OCw4Ljc3LDguNzcsMCwwLDAsNC4zNzEuMzU0bC4xNzctLjAyaDBjLjEzOC0uMzE1LjI1Ni0xLjM1OS4zNTQtMS42NzRhNS40OTQsNS40OTQsMCwwLDAsLjIxNy0uNjg5LDIuNjY4LDIuNjY4LDAsMCwwLS4wMi0uNjg5QzcuODA5LDI0LjI0Miw4LjI2MiwyNC4wNDUsOC40NzgsMjMuNTczWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNjKVxcXCIvPlwiLFxuXHR9LFxuXHRcIk9jdGF2ZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiM3N2NjZTFcIixcblx0XHRpY29uOiBcIjxkZWZzIGlkPVxcXCJkZWZzMjg3NFxcXCI+IDxyYWRpYWxHcmFkaWVudCBjeD1cXFwiMTgyLjk4MzdcXFwiIGN5PVxcXCIzOTUuMDQ4NzFcXFwiIHI9XFxcIjE0OC45NTMwOVxcXCIgZng9XFxcIjE4Mi45ODM3XFxcIiBmeT1cXFwiMzk1LjA0ODcxXFxcIiBpZD1cXFwicmFkaWFsR3JhZGllbnQzMDMzXFxcIiB4bGluazpocmVmPVxcXCIjbGluZWFyR3JhZGllbnQzNzU1XFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjIyOTE0MzM0LC0wLjI0OTAxNDc5LDAuNzY0MzU3MiwwLjgzMDY0MjY4LC0yNzIuODUzMzcsLTE1OS42OTQ4MilcXFwiIC8+IDxsaW5lYXJHcmFkaWVudCBpZD1cXFwibGluZWFyR3JhZGllbnQzNzU1XFxcIj4gPHN0b3AgaWQ9XFxcInN0b3AzNzU3XFxcIiBzdHlsZT1cXFwic3RvcC1jb2xvcjojMDA4Y2JlO3N0b3Atb3BhY2l0eToxXFxcIiBvZmZzZXQ9XFxcIjBcXFwiIC8+IDxzdG9wIGlkPVxcXCJzdG9wMzc1OVxcXCIgc3R5bGU9XFxcInN0b3AtY29sb3I6I2IyZmZmZjtzdG9wLW9wYWNpdHk6MVxcXCIgb2Zmc2V0PVxcXCIxXFxcIiAvPiA8L2xpbmVhckdyYWRpZW50PiA8L2RlZnM+IDxnIGlkPVxcXCJsYXllcjFcXFwiIHRyYW5zZm9ybT1cXFwic2NhbGUoMC4xMTI5NikgdHJhbnNsYXRlKC0yMzMuMzU1NDQsLTM5MC43MTgwMilcXFwiPiA8ZyB0cmFuc2Zvcm09XFxcIm1hdHJpeCg4LjQ1MTk3MjMsMCwwLDguNDUxOTcyMywtMjc4LjQ1MDEyLC00MDMuODI5NzUpXFxcIiBpZD1cXFwiZzMwMjVcXFwiPiA8cGF0aCBkPVxcXCJtIDY2LjQzMjEwMyw5Ny40ODg2NzkgYyAtNS4xOTU4NCw1LjY0NjQzMSAtMy45MzY2MSwxNi4xNjkwMzEgMi44MTEwNywyMy41MDE4NzEgNi43NDc2OCw3LjMzMjg1IDE2LjQyODk4LDguNjk5NTUgMjEuNjI0ODMsMy4wNTMxMiA1LjE5NTg1LC01LjY0NjQzIDMuOTQwMiwtMTYuMTY5NDYgLTIuODA3NDksLTIzLjUwMjMgLTYuNzQ3NjgsLTcuMzMyODYxIC0xNi40MzI1NiwtOC42OTkxMzEgLTIxLjYyODQxLC0zLjA1MjY5MSB6IG0gNC43MTE0OSwyLjM0NTUzIGMgNC4wODI1NiwtNC40MzY1OSAxMS41ODksLTMuNDcxNTIgMTYuNzY3NDEsMi4xNTU5NjEgNS4xNzg0Miw1LjYyNzUgNi4wNjY0NywxMy43ODQ5MSAxLjk4MzkxLDE4LjIyMTUgLTQuMDgyNTYsNC40MzY1OCAtMTEuNTkwOTcsMy40NzM2OSAtMTYuNzY5MzksLTIuMTUzODEgLTUuMTc4NDIsLTUuNjI3NSAtNi4wNjQ0OSwtMTMuNzg3MDQgLTEuOTgxOTMsLTE4LjIyMzY1MSB6XFxcIiBpZD1cXFwicGF0aDU4NzRcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjcmFkaWFsR3JhZGllbnQzMDMzKTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6bm9uZVxcXCIgLz4gPHJlY3Qgd2lkdGg9XFxcIjQuMzQ5ODU0XFxcIiBoZWlnaHQ9XFxcIjQuMzQ5ODU0XFxcIiByeD1cXFwiMC43Njk1ODk2NlxcXCIgcnk9XFxcIjAuNzY5NTg5NjZcXFwiIHg9XFxcIjg1LjM4MTU2MVxcXCIgeT1cXFwiOTkuNDkzODgxXFxcIiBpZD1cXFwicmVjdDU4NzZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjdmMmE7ZmlsbC1vcGFjaXR5OjE7ZmlsbC1ydWxlOm5vbnplcm87c3Ryb2tlOiNkNDU1MDA7c3Ryb2tlLXdpZHRoOjAuNzQ0MDM3OTk7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2UtZGFzaGFycmF5Om5vbmVcXFwiIC8+IDxyZWN0IHdpZHRoPVxcXCIxMC4yNDU0MzZcXFwiIGhlaWdodD1cXFwiMTAuMjQ1NDM2XFxcIiByeD1cXFwiMS44MTI2NTQ1XFxcIiByeT1cXFwiMS44MTI2NTQ1XFxcIiB4PVxcXCI2MC45MjY1OVxcXCIgeT1cXFwiMTA1LjIyNDVcXFwiIGlkPVxcXCJyZWN0NTg3OFxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmN2YyYTtmaWxsLW9wYWNpdHk6MTtmaWxsLXJ1bGU6bm9uemVybztzdHJva2U6I2Q0NTUwMDtzdHJva2Utd2lkdGg6MC43NDQwMzc5OTtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZVxcXCIgLz4gPHJlY3Qgd2lkdGg9XFxcIjYuMTg5NzUzMVxcXCIgaGVpZ2h0PVxcXCI2LjE4OTc1MzFcXFwiIHJ4PVxcXCIxLjA5NTExMDJcXFwiIHJ5PVxcXCIxLjA5NTExMDJcXFwiIHg9XFxcIjg3LjQwNDczOVxcXCIgeT1cXFwiMTE4LjYzNzA1XFxcIiBpZD1cXFwicmVjdDU4ODBcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjdmMmE7ZmlsbC1vcGFjaXR5OjE7ZmlsbC1ydWxlOm5vbnplcm87c3Ryb2tlOiNkNDU1MDA7c3Ryb2tlLXdpZHRoOjAuNzQ0MDM3OTk7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2UtZGFzaGFycmF5Om5vbmVcXFwiIC8+IDwvZz4gPC9nPlwiLFxuXHR9LFxuXHRcIk9wZW5DTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNGRjFDMUFcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjI5LjY2MlxcXCIgeTE9XFxcIjE4LjAyNlxcXCIgeDI9XFxcIjIxLjQxOVxcXCIgeTI9XFxcIjIwLjIzNFxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwicmVkXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmY2YTZhXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCIyNC41ODhcXFwiIHkxPVxcXCI5Ljc0OFxcXCIgeDI9XFxcIjE4Ljc3NlxcXCIgeTI9XFxcIjE1LjU2XFxcIiB4bGluazpocmVmPVxcXCIjYVxcXCIvPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIjE4LjQ2NlxcXCIgeTE9XFxcIjYuNjE5XFxcIiB4Mj1cXFwiMTUuOTI0XFxcIiB5Mj1cXFwiMTMuNjAzXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjY2ZhNDBjXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZWRkNDgwXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImRcXFwiIHgxPVxcXCIxMy4xN1xcXCIgeTE9XFxcIjYuNTFcXFwiIHgyPVxcXCIxMy4xN1xcXCIgeTI9XFxcIjEyLjk5N1xcXCIgeGxpbms6aHJlZj1cXFwiI2NcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImVcXFwiIHgxPVxcXCI4LjgwOFxcXCIgeTE9XFxcIjguNDg2XFxcIiB4Mj1cXFwiMTAuOTg4XFxcIiB5Mj1cXFwiMTMuMTYxXFxcIiB4bGluazpocmVmPVxcXCIjY1xcXCIvPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZlxcXCIgeDE9XFxcIjUuNTA1XFxcIiB5MT1cXFwiMTEuNDc3XFxcIiB4Mj1cXFwiOC41NDZcXFwiIHkyPVxcXCIxNC41MTlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMxMWExMTlcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzN2FlM2RcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZ1xcXCIgeDE9XFxcIjMuNjM5XFxcIiB5MT1cXFwiMTQuMjg1XFxcIiB4Mj1cXFwiNi44ODNcXFwiIHkyPVxcXCIxNi4xNThcXFwiIHhsaW5rOmhyZWY9XFxcIiNmXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJoXFxcIiB4MT1cXFwiMi4yNjVcXFwiIHkxPVxcXCIxNy43OTlcXFwiIHgyPVxcXCI1LjM3OVxcXCIgeTI9XFxcIjE4LjkzM1xcXCIgeGxpbms6aHJlZj1cXFwiI2ZcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImlcXFwiIHgxPVxcXCIyXFxcIiB5MT1cXFwiMjEuNjE0XFxcIiB4Mj1cXFwiNC44MzNcXFwiIHkyPVxcXCIyMS42MTRcXFwiIHhsaW5rOmhyZWY9XFxcIiNmXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJqXFxcIiB4MT1cXFwiMjAuNjYyXFxcIiB5MT1cXFwiMTguOTQ5XFxcIiB4Mj1cXFwiMTguMDI2XFxcIiB5Mj1cXFwiMTcuNDI4XFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiM2NDY0NjRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNjYmNiY2JcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwia1xcXCIgeDE9XFxcIjE2LjAyMVxcXCIgeTE9XFxcIjI1LjI2NFxcXCIgeDI9XFxcIjE2LjAyMVxcXCIgeTI9XFxcIjIyLjY5MVxcXCIgeGxpbms6aHJlZj1cXFwiI2pcXFwiLz48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9vcGVuY2w8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yNy44MjgsMTMuNTc0YTE0LjY3NiwxNC42NzYsMCwwLDEsLjgzNSwxLjU0MkExNC45NjQsMTQuOTY0LDAsMCwxLDI5LjkyLDIyLjlIMjIuMTMzYTEwLjM3NywxMC4zNzcsMCwwLDAtLjk2Ny00LjQyNFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMTcuNzUzLDE0LjQzYTEwLjA3NCwxMC4wNzQsMCwwLDEsMi43NzIsMi44NzhsNi4yNzMtNS4yYTE1LjU0LDE1LjU0LDAsMCwwLTQuOTg4LTQuMTVaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2IpXFxcIi8+PHBhdGggZD1cXFwiTTE0Ljc4MSwxMy4wODZhOC44MjcsOC44MjcsMCwwLDEsMi4zNzYuOTY2TDIwLjY2Niw3LjQzYTEyLjcsMTIuNywwLDAsMC00LjY0NS0uOTUyWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNjKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNC4zNjQsMTNsLjYxMi02LjQ4OGExMi40NiwxMi40NiwwLDAsMC0zLjYxMS44MTNsLjUwNyw1LjYzOEE3LjIxOSw3LjIxOSwwLDAsMSwxNC4zNjQsMTNcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZClcXFwiLz48cGF0aCBkPVxcXCJNMTAuOTQ4LDEzLjE3OWwtLjY4My01LjM3M0ExNC41ODgsMTQuNTg4LDAsMCwwLDcuNzczLDkuMzc5bDEuNzQsNC40MmE3LjUxOCw3LjUxOCwwLDAsMSwxLjQzNS0uNjE5XFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2UpXFxcIi8+PHBhdGggZD1cXFwiTTguODYsMTQuMjA2LDYuNDc0LDEwLjUxMWMtLjQ1My40NC0uNzkuODItMS4wMDYsMS4wNzRxLS4yMjcuMjY3LS40MzYuNTM4TDcuNDgsMTUuMzg3YTguODcsOC44NywwLDAsMSwxLjM4LTEuMTgyXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2YpXFxcIi8+PHBhdGggZD1cXFwiTTcuMDQ2LDE1Ljg3NSw0LjMzNSwxMy4xMTJhMTQuMjU5LDE0LjI1OSwwLDAsMC0xLjI1LDIuNDI5bDMuMDA3LDEuNzFhOS44MjYsOS44MjYsMCwwLDEsLjk1NC0xLjM3NlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNnKVxcXCIvPjxwYXRoIGQ9XFxcIk01LjUyNywxOC4zOTNsLTIuNzctMS45NDVhMTUuNDUyLDE1LjQ1MiwwLDAsMC0uNjMsMi44M2wyLjkwNi42MDdhMTAuMzQzLDEwLjM0MywwLDAsMSwuNDk0LTEuNDkyXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2gpXFxcIi8+PHBhdGggZD1cXFwiTTQuODMzLDIwLjlhMTAuNjg0LDEwLjY4NCwwLDAsMC0uMSwySDIuMDkzYTE0LjMzMywxNC4zMzMsMCwwLDEtLjA2NC0yLjU3M1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaSlcXFwiLz48cGF0aCBkPVxcXCJNMjIuNTUxLDEyLjQ3OCwxNC43NTEsMjMuMUExLjU0NCwxLjU0NCwwLDAsMSwxNy41LDI0LjQyOFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjailcXFwiLz48cGF0aCBkPVxcXCJNMTYuMDIxLDI1LjUyMmExLjU0NCwxLjU0NCwwLDEsMSwxLjA5Mi0uNDUyQTEuNTMzLDEuNTMzLDAsMCwxLDE2LjAyMSwyNS41MjJaXFxcIiBzdHlsZT1cXFwiZmlsbDojNjQ2NDY0XFxcIi8+PHBhdGggZD1cXFwiTTE3LjMwOCwyMy45NzhhMS4yODcsMS4yODcsMCwxLDEtLjM3Ny0uOTFBMS4yODMsMS4yODMsMCwwLDEsMTcuMzA4LDIzLjk3OFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaylcXFwiLz5cIixcblx0fSxcblx0XCJQYXNjYWxcIjoge1xuXHRcdGNvbG91cjogXCIjRkY2MzQ0XCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxNlxcXCIgeTE9XFxcIi0wLjQ0M1xcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMjIuMDQyXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjAyMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmMGMxNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzlhMGMwZlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfZGVscGhpPC90aXRsZT48Y2lyY2xlIGN4PVxcXCIxNlxcXCIgY3k9XFxcIjE2XFxcIiByPVxcXCIxNFxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yNy41NDUsMTYuMjQzSDQuOTI0YS45MTQuOTE0LDAsMCwwLTEuMDkyLjgycS4wMzMuNDI5LjEuODQ5YTEyLjQsMTIuNCwwLDAsMCwyNC41MzIsMHEuMDc1LS41LjEwOC0xLjAyMUMyOC40NzgsMTYuNTIzLDI4LjIxMSwxNi4yMDcsMjcuNTQ1LDE2LjI0M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjY0NDNcXFwiLz48cG9seWxpbmUgcG9pbnRzPVxcXCIxOC40OCAxMS42NCAyMy43MDcgNy4yNjYgMTkuNzg3IDUuODggMTYgMTEuMDUzXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiMTUuNjggMTEuMDI2IDE4LjY0IDUuODggMTQuODUzIDUuODggMTMuMzA3IDExLjI5M1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjEzLjA0IDExLjM3MyAxMy42IDYuNzA2IDEwLjU4NyA3Ljk2IDExLjAxMyAxMi43NlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjEwLjc0NyAxMyA5Ljc4NyA4Ljc2IDcuNzA3IDEwLjg0IDkuNjUzIDE0LjY4XFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS4zODcgMTUuMDUzIDcuNDkzIDEyLjM3NiA2LjY0IDE0LjQ2NiA5LjA0IDE2LjUxN1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZhZTdlMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5bGluZSBwb2ludHM9XFxcIjkuMDQgMTYuNzU3IDYuNjQgMTUuMjEzIDYuNDggMTcuNCA5LjIgMTguMzMzXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS4yMjcgMTguODQ2IDYuNjQgMTguMDQgNy4yMjcgMTkuOCA5LjU0NyAxOS44XFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlsaW5lIHBvaW50cz1cXFwiOS43MDcgMjAuMDkzIDcuNzA3IDIwLjM4NiA4LjYyNyAyMS43NDYgMTAuMjY3IDIxXFxcIiBzdHlsZT1cXFwiZmlsbDojZmFlN2UzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTIwLjAyMywxMy4wODlhNi42MSw2LjYxLDAsMCwwLTQuNTMtMkE2LjI5Myw2LjI5MywwLDAsMCwxMS4zLDIyLjA3bDQuOTQxLjEyOS0yLjA4LTQuMTZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWVlO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE2LjUsMjIuMzY2bC01LjI2Ny0uMTM4LS4wNDQtLjAzOWE2LjQ1Myw2LjQ1MywwLDAsMSw0LjMtMTEuMjY0LDYuNzg3LDYuNzg3LDAsMCwxLDQuNjQzLDIuMDVsLjEyMy4xMjMtNS45LDQuOTgyWm0tNS4xNC0uNDU1LDQuNjE2LjEyMUwxMy45NjEsMThsNS44MjUtNC45MTlhNi40Myw2LjQzLDAsMCwwLTQuMjkyLTEuODM1LDYuMTMzLDYuMTMzLDAsMCwwLTQuMTMxLDEwLjY2N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZTRiMmVcXFwiLz48cGF0aCBkPVxcXCJNMTIuMDEzLDIwLjQ5M2MtNC4xNzMtNS44MTMsMi4xMDktOC4xNzIsMi40NzgtOC40NTMuNDUxLS4zNDQtNy41OSwxLjc4NS0zLjIyNiw4Ljg4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2YwNGUzMTtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjAuNzIgMTIuNiAxMy41MiAxNy41NjcgMTMuNzMzIDE4LjU3MyAyMS40NjcgMTcuMDI2IDIwLjcyIDEyLjZcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZWU7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cGF0aCBkPVxcXCJNMTMuNjEsMTguNzYxLDEzLjM0MSwxNy41bDcuNDk1LTUuMTcuODE0LDQuODI4Wm0uMDg5LTEuMTIzLjE1OC43NDdMMjEuMjgzLDE2LjksMjAuNiwxMi44NzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWU0YjJlXFxcIi8+PHBhdGggZD1cXFwiTTE1LjcyMywyMS4zMTljLTMuOTMtLjY2OC00LjI4My40MjgtNC4yODMuNDI4TDEwLjI2NywyNC40NHMxLjEyLS45MDcsNS40OTMsMGwuNzYtMS4zODhaXFxcIiBzdHlsZT1cXFwiZmlsbDojZGQwYzEzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE0LjEyMiwyMS42Yy0uMDItLjItMS4xLS4zMTktMS42NzctLjEyMy0uNzMyLjI0OS0xLjIxOSwxLjE0Mi0xLjA0NSwxLjIxM2ExLjk3NSwxLjk3NSwwLDAsMSwxLjEyNS0uOTg2QzEzLjQ0NywyMS40OTMsMTQuMTQyLDIxLjgsMTQuMTIyLDIxLjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmY2ZTRmO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE1LjUyLDE4LjYwNmExMS4xLDExLjEsMCwwLDAsMS41NDcsMS40ODcsNi45LDYuOSwwLDAsMSwyLjcyLDQuMTA3Yy0uMTA3LDEuMDY3LTEuOTczLDEuNzYtMS45NzMsMS43NmwtMy4zMDctNy4xOTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWVlO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE3LjczLDI2LjE2MWwtMy40NTctNy41MjEsMS4zMi0uMjA4LjA1Ny4wODFhMTAuODY5LDEwLjg2OSwwLDAsMCwxLjUxMiwxLjQ1MSw3LDcsMCwwLDEsMi43ODIsNC4yMDdsMCwuMDIyLDAsLjAyMmMtLjExNSwxLjE1My0yLDEuODY0LTIuMDc3LDEuODk0Wm0tMi45OS03LjI3LDMuMTU1LDYuODYzYy40MTQtLjE3OCwxLjYzLS43NjMsMS43My0xLjU0OGE2Ljc5Myw2Ljc5MywwLDAsMC0yLjY0OC0zLjk4MWwtLjAxLS4wMDdhMTEuOTQsMTEuOTQsMCwwLDEtMS41MTctMS40MzlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWU0YjJlXFxcIi8+PHBhdGggZD1cXFwiTTI4LDEyLjc0MmMuMDI1LjM5NC4wMzQuNzkyLjAyNSwxLjE5NGExMy45NDYsMTMuOTQ2LDAsMCwxLTE5LjksMTIuM0ExMi44NiwxMi44NiwwLDAsMCwyOCwxMi43NDJaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWFlMGRmO2ZpbGwtcnVsZTpldmVub2RkO29wYWNpdHk6MC4yXFxcIi8+PHBhdGggZD1cXFwiTTIuMzgzLDEzLjg5M0ExMy45NDEsMTMuOTQxLDAsMCwxLDI1LjcsNS44M3MtNS4wMDksNS45NzktMTAuNTg0LDcuOTA3UzIuMzgzLDEzLjg5MywyLjM4MywxMy44OTNaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWFlMGRmO29wYWNpdHk6MC4yXFxcIi8+PHBhdGggZD1cXFwiTTMuNjE4LDE4LjY5NGMtLjA0NC0uMzkyLS4wNzItLjc5LS4wODMtMS4xOTFDMy4zMjksOS44MDcsMTAuMDEyLDQuMiwxNy43MDgsMy45OTFhMTQuMiwxNC4yLDAsMCwxLDUuNzE5LDEuNDU4LDEzLjEyOCwxMy4xMjgsMCwwLDAtNy4xODgtMi4zNjljLTcuMS4xOS0xMy4zMDYsNS4zLTEzLjExNiwxMi40QTEyLjg3MywxMi44NzMsMCwwLDAsMy42MTgsMTguNjk0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2VhZTBkZjtmaWxsLXJ1bGU6ZXZlbm9kZDtvcGFjaXR5OjAuMlxcXCIvPlwiLFxuXHR9LFxuXHRcIlBlcmxcIjoge1xuXHRcdGNvbG91cjogXCIjM2EzYzViXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjkuMjUsMTMuOGE2Ljg4OCw2Ljg4OCwwLDAsMC0uNzQyLTIuMjY4LDEuMDExLDEuMDExLDAsMCwwLS4xNzItLjIzMyw5LjQ3MSw5LjQ3MSwwLDAsMS0xLjcyNS0yLjQsOC42MzIsOC42MzIsMCwwLDAtMS4zOTUtMi4zODJBNi45MDYsNi45MDYsMCwwLDEsMjQuMSw0LjY0NCw0LjU3Miw0LjU3MiwwLDAsMCwyMS45OSwxLjcyN2ExLjAwOSwxLjAwOSwwLDAsMC0uMS0uMDU0LDguODg2LDguODg2LDAsMCwwLTEuMy0uNDY4LDEuMDIyLDEuMDIyLDAsMCwwLS4yNjMtLjAzNSwxLjAwOSwxLjAwOSwwLDAsMC0uMi4wMjEsNS42MDcsNS42MDcsMCwwLDEtLjgwNy4xMDdjLS4wNSwwLS4xLS4wMDYtLjE0OS0uMDA2YTIuODQyLDIuODQyLDAsMCwwLTEuNDE2LjQ1M2MtLjA5NC4wNTItLjE4OC4xMDYtLjI4NC4xNDlxLS4wNDEuMDE4LS4wNzguMDM5QTEuNjM3LDEuNjM3LDAsMCwxLDE3LjA2NiwyYTMuMTA5LDMuMTA5LDAsMCwwLS43NzIuMTk0LDEsMSwwLDAsMC0uNTA4LjQ4MywyLjE4NCwyLjE4NCwwLDAsMS0uNDY5LjVBNC4zODIsNC4zODIsMCwwLDAsMTQuNTU1LDRhLjk2NC45NjQsMCwwLDAtLjExNi4yMzQsNC42ODcsNC42ODcsMCwwLDEtMS41NzQsMi4yLDYuNDcxLDYuNDcxLDAsMCwwLS44LjYxMywyLjczNCwyLjczNCwwLDAsMC0uNjI3LTEuNjM0Yy0uMDE3LS4wMTktLjAzNS0uMDM4LS4wNTMtLjA1NmwwLS4wMTRhMi4zNzgsMi4zNzgsMCwwLDAtLjEzNS0uNTg2LDEsMSwwLDAsMC0uMTMyLS4yMzZBNS4xNjcsNS4xNjcsMCwwLDAsOS41MTEsMy4xMTNhLjk4OC45ODgsMCwwLDAtLjM0Ni0uMTE5LDEuNSwxLjUsMCwwLDEtLjE0OC0uMDc3LDIuMDYsMi4wNiwwLDAsMC0xLS4zMTEsMS40NzYsMS40NzYsMCwwLDAtLjY4MS4xNjYuOTg3Ljk4NywwLDAsMC0uMjc0LjIwNiwxLjMyOCwxLjMyOCwwLDAsMS0uMTI1LjA2MywxLjksMS45LDAsMCwwLS45MDguNzc4LDIuNTM5LDIuNTM5LDAsMCwwLS41NDEuMTA2LDEuNjU2LDEuNjU2LDAsMCwxLS4zODMuMDU3LDIuMywyLjMsMCwwLDAtMS41LjU0NWwtLjEwNi4xYTIuNTMzLDIuNTMzLDAsMCwwLTEsMi41MjUsMS4wOCwxLjA4LDAsMCwwLC4wNjguMTY1QTIuMjk0LDIuMjk0LDAsMCwwLDQuNDQ2LDguNDc4Yy0uMS4yMzgtLjIuNDczLS4zMTQuN2ExLjAwOSwxLjAwOSwwLDAsMC0uMDg3LjI5M0ExMS4wNTIsMTEuMDUyLDAsMCwwLDQsMTIuMDM5YzAsLjAyLDAsLjA0LjAwNy4wNmE1LjI3OCw1LjI3OCwwLDAsMSwuMDQxLjU0NywyLjkyNiwyLjkyNiwwLDAsMCwuOTMxLDIuNGMuMDE3LjAxNC4wMzQuMDI2LjA1Mi4wMzlsLjAwOC4wMzFhMi44LDIuOCwwLDAsMCwuMTUxLjQ0NywxLjE4NSwxLjE4NSwwLDAsMCwuNjMyLjYxNywxLjI4OSwxLjI4OSwwLDAsMCwuMjQ4LjU3MSwxLDEsMCwwLDAsLjMzMi4yNzksMi40NTMsMi40NTMsMCwwLDAsLjQ2NS4xNzZsLjA2NC4wMThhLjk3Ni45NzYsMCwwLDAsLjE5Mi4xNzFBNS44NzksNS44NzksMCwwLDEsNy44NzMsMThhMS4xMywxLjEzLDAsMCwwLDEuMzUxLjQyNywxLjUsMS41LDAsMCwwLC43NjUuMjE1LDEuNDIxLDEuNDIxLDAsMCwwLC42MjQtLjE0NWwuMTE0LS4wMjZjLjAyNC40MDguMDMzLjgxNy4wMjgsMS4yMjNhMS4wNDMsMS4wNDMsMCwwLDAsLjAyNi4yNDIsMTAuNzQ0LDEwLjc0NCwwLDAsMSwuMjY2LDEuODI4LjkzMS45MzEsMCwwLDAsLjAzMS4yLDguNDkyLDguNDkyLDAsMCwxLC4yNjgsMS44MTVjMCwuMDMxLDAsLjA2My4wMDguMDk0YTYuMDgzLDYuMDgzLDAsMCwxLS42MSwzLjU3NS45OTQuOTk0LDAsMCwwLS4wODkuMjYxLDEuMDkzLDEuMDkzLDAsMCwwLS4yMzQuMDc5bC0uMDUuMDIyYTIuMDEzLDIuMDEzLDAsMCwwLTEuMiwxLjA2NSwxLjMyMiwxLjMyMiwwLDAsMCwuMDc0LDEuMDU0LDEsMSwwLDAsMCwuMzI0LjM3MSwzLjU0NywzLjU0NywwLDAsMCwzLjUwOS4zLDEuNTQ2LDEuNTQ2LDAsMCwwLC44MjktMS42NTNsLS4wMDUtLjA2N2EuOTg5Ljk4OSwwLDAsMCwuMDU2LS4xNTgsMTEuMTg2LDExLjE4NiwwLDAsMCwuMjg4LTIuMDY4LDguOTM5LDguOTM5LDAsMCwxLC4yNTktMS44MjIsNC43MjcsNC43MjcsMCwwLDAsLjM4OS0xLjU4OGwuMDQyLjA0OGExMi42NjEsMTIuNjYxLDAsMCwwLDEuMjU1LDEuMTI5LDEwLjMsMTAuMywwLDAsMSwxLjEuOTg5bC0uMDExLjAzOGEuNTMyLjUzMiwwLDAsMS0uMzQyLjM1OWwtLjA0OS4wMTdhMS45MjEsMS45MjEsMCwwLDAtMS4xODQsMS4zMzQsMS4zMTMsMS4zMTMsMCwwLDAsLjQ1MiwxLjIzNCwxLDEsMCwwLDAsLjQ0MS4yMjIsNC45MDgsNC45MDgsMCwwLDAsMi43MzUtLjE4MSwxLjU1NiwxLjU1NiwwLDAsMCwuMjY2LS4xMjQsMS40MTEsMS40MTEsMCwwLDAsLjk3LjM3MiwyLjMyNiwyLjMyNiwwLDAsMCwxLS4yNzRjLjA0OS0uMDIzLjEtLjA0NS4xNC0uMDYyYTEsMSwwLDAsMCwuNjM3LS44NjQsNC41NTMsNC41NTMsMCwwLDAtLjQ2OC0yLjM0MywxLjU2LDEuNTYsMCwwLDAtLjUxLS42LDEwLjgsMTAuOCwwLDAsMSwxLjMtMi4xNSwyLjE5MywyLjE5MywwLDAsMCwuNDUxLTIuMDI2LDIuNTE5LDIuNTE5LDAsMCwxLS4wNDMtLjM5NCwxLjA0NiwxLjA0NiwwLDAsMCwwLS4xNDgsNS43NTYsNS43NTYsMCwwLDEsLjAxMi0xLjI3OSw3LjE2MSw3LjE2MSwwLDAsMCwuOTUxLDEuNzkzLDcuODkyLDcuODkyLDAsMCwxLC4xMzMsMS4xLDEwLjczMywxMC43MzMsMCwwLDAsLjEzMywxLjE4Niw5LjM2LDkuMzYsMCwwLDEtLjIyNCwzLjksMSwxLDAsMCwwLS4wMzIuMzRoMGEuOTguOTgsMCwwLDAtLjEuMTc5LDIuMjM4LDIuMjM4LDAsMCwwLS4zMTIsMS4yMzUsMS4wMDcsMS4wMDcsMCwwLDAsLjAzOS4yLDEuMzE1LDEuMzE1LDAsMCwwLDEuMzI4Ljk2M2MuMDg2LDAsLjE3Ny0uMDA2LjI2OC0uMDE0bC4wMTksMCwuMDM4LjAxM2EyLjEwOSwyLjEwOSwwLDAsMCwyLjUxNy0xLjA4OCwxLDEsMCwwLDAsLjA1OC0uNzM1LDUuMjg1LDUuMjg1LDAsMCwxLS4yMDgtMS4wMjcsMS4wMTEsMS4wMTEsMCwwLDAtLjA0Ni0uMjE3LDYuNDcsNi40NywwLDAsMS0uMjIxLTMuMjIsMS4xMTIsMS4xMTIsMCwwLDAsLjAxNS0uMTE0LDMuOTA3LDMuOTA3LDAsMCwxLC4wNzQtLjQ0MywyLjczOCwyLjczOCwwLDAsMC0uMTkzLTIuMSw0LjMzOSw0LjMzOSwwLDAsMSwuMDIxLS40NzZjLjAxMS0uMTQ3LjAyMy0uMy4wMjctLjQ2M2ExLjU5LDEuNTksMCwwLDAsLjg2Mi0uODUxLDEyLjgzLDEyLjgzLDAsMCwwLC45NDctMi4yMywxLjcxOSwxLjcxOSwwLDAsMCwuMTcyLTEuMTg1LDEuMjM0LDEuMjM0LDAsMCwwLC4xMTEtLjI1MUExLjQ2NywxLjQ2NywwLDAsMCwyOS4yNSwxMy44Wk0xOC44NjMsMjIuNzY4Yy0uMDI2LDAtLjA1My0uMDA4LS4wOC0uMDFsLS4wMjQsMGEyLjc0OCwyLjc0OCwwLDAsMS0uMjM2LS4zMjNjLS4wNTktLjA4OC0uMTE4LS4xNzUtLjE3OC0uMjU4YTIuMjUzLDIuMjUzLDAsMCwwLC4yMDgtLjIzNCwxLjI1NSwxLjI1NSwwLDAsMCwuNjI5LS4zMjFBMy4xODYsMy4xODYsMCwwLDEsMTguODYzLDIyLjc2OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNlZGVkZWRcXFwiLz48cGF0aCBkPVxcXCJNMTkuMjg5LDIuM2MtLjU0OC0uMDY1LS45NjEuMy0xLjQxOS41MDYtLjM2OC4yMDYtLjgxNS4xNTItMS4xODUuMzA5LS4yODIuNTc5LS45NDEuOTA4LTEuMywxLjQ0M2E1LjcsNS43LDAsMCwxLTEuOTQyLDIuNjk0LDUuNDY0LDUuNDY0LDAsMCwwLTIuMzY4LDMuMzk0Yy0uMTQ1LjMtLjEyMi43NDYtLjI3NywxLS41MTEuMTQzLS4yMzktLjUxNi0uMy0uODI1LS4wNzQtLjQ3LjM0MS0uNzcuMzczLTEuMjI2YTEuODM0LDEuODM0LDAsMCwwLC4yMDktMS4wNTNjLS4wNTYtLjgxNC4xODktMS44MDctLjM5My0yLjQ3Ny0uMzQ5LS4yLS4yMzktLjYyMy0uMzY2LS45NDdhNC4yMTQsNC4yMTQsMCwwLDAtMS4zLTEuMTM5Yy0uNDE5LS4wNDEtLjgwNi0uNTQyLTEuMjMyLS4zMjMtLjI2Ni4zMDktLjc2My4zMDUtLjkyMi43MTMtLjEuNTE2LS42ODguMzc0LTEuMDY4LjUtLjQ4OC4xODUtMS4xMTguMDA2LTEuNTE4LjM4Mi0uNDExLjQxLTEuMDM0Ljk2MS0uODM1LDEuNjA2LjQ1Ny44ODIsMS42NDUuNDM4LDIuMzE3Ljk3NEExNy45OSwxNy45OSwwLDAsMSw1LjAzNiw5LjYxYTEwLjA1MSwxMC4wNTEsMCwwLDAtLjA0NCwyLjMzMmMuMTIzLjc3My0uMDgzLDEuNzcyLjYwNiwyLjMxOS4zOC4xMzcuMzU3LjU3Mi41Ljg4Ny4xMzQuMjkuNDI3LS4xMTMuNTQzLjE5My4zMzguMTg0LjAzNy41NjEuMjIuOC4yNjMuMTM3LjYzOS4xMjguODIyLjQyNmE2Ljg0NCw2Ljg0NCwwLDAsMSwuOTc1LjgwNmMuMjMuNDY3LjUzMS0uNDU0Ljc4My0uMTA5LjE3LjI4NS41MDYuNTIyLjgxOS4yODVhMi45OTMsMi45OTMsMCwwLDAsMS4zMjQtLjU1NiwxOC4wMzMsMTguMDMzLDAsMCwxLC4xNzEsMi43MTgsMTEuNzMzLDExLjczMywwLDAsMSwuMjksMiw5LjQwOSw5LjQwOSwwLDAsMSwuMywyLjAzLDcuMTExLDcuMTExLDAsMCwxLS43MDksNC4xNiwxLjAxMiwxLjAxMiwwLDAsMS0uODA3LjhjLS4yOTEuMTMtLjkuMzY2LS42OTIuNzc2YTIuNTQ5LDIuNTQ5LDAsMCwwLDIuNTIuMjE0Yy41MS0uMjQzLjA3My0uODU4LjMzNC0xLjIyNi4zNDMtMS4zLjE3NC0yLjY5MS41NzUtMy45ODVhMy43NjIsMy43NjIsMCwwLDAsLjMtMi4xYy4wNzktLjQ0LS4xMDUtLjk2OS4xODctMS4zMjlhMS44MTMsMS44MTMsMCwwLDEsLjQ4My0xLjIsMTQuNzYyLDE0Ljc2MiwwLDAsMCwuMTQ0LTIuMDI2LDMuMjE0LDMuMjE0LDAsMCwxLDEuMjY3LS4xMjdjLjAxOC4zNzUtLjI3Mi44MTItLjE5LDEuMjM0QTEuOTQ4LDEuOTQ4LDAsMCwxLDE1LjUsMjAuM2EyLjg0OSwyLjg0OSwwLDAsMCwuMTY4LDIuMzA4Yy43ODIuODM5LDEuOCwxLjQzMiwyLjUzNiwyLjMyNy4zMTQuMjA1LjIuNTE3LjAzOC43ODRhMS41MjgsMS41MjgsMCwwLDEtLjk4NywxLjAzNGMtLjMwOC4xMjEtLjgwNi41NjYtLjQ0Mi44ODJhMy45MDYsMy45MDYsMCwwLDAsMi4xNzgtLjE0NGMuNDc2LS4xNzEuMy0uNzM4LjQ4OC0xLjA4OC4zLjIzMy40MjMuNzY1LjcxMSwxLjA2OS4zLjQzMy44MDcuMDczLDEuMTU2LS4wNjJhMy41NDksMy41NDksMCwwLDAtLjM3Mi0xLjg0MmMtLjE2Ny0uMzc4LS44LS4zODUtLjc3LS44NTJhMTEuNzYxLDExLjc2MSwwLDAsMSwxLjcxMi0zYy41MS0uNDc5LjEzLTEuMTkxLjE1OC0xLjhBNi43NjUsNi43NjUsMCwwLDEsMjMuMTU4LDE1LjVhMTUuODg5LDE1Ljg4OSwwLDAsMCwuNjkyLDIuMTQsNi4yMyw2LjIzLDAsMCwwLDEuMSwyLjI0NmMuMjM3LjgxMS4xNzYsMS43MS4zMzEsMi41NTFhMTAuNDQsMTAuNDQsMCwwLDEtLjI0Miw0LjM0N2MuMDQuNTE4LS40NTcuOS0uNDE1LDEuNDA4LjE0LjQ2OS43LjA5My45OS4yOWExLjExLDEuMTEsMCwwLDAsMS4zMjQtLjU3Miw2LjIxMiw2LjIxMiwwLDAsMS0uMjQ3LTEuMjIzLDcuNDU0LDcuNDU0LDAsMCwxLS4yNTUtMy43MTljLjA0Ni0uNjY5LjQ1Ny0xLjUtLjA3My0yLjA3Mi0uMTQ4LS42MTkuMS0xLjI4NS0uMDQ5LTEuOTE1YTEyLjg3NywxMi44NzcsMCwwLDEtLjEyMi00LjkzM2MuMDkzLS4yMjcuMDEzLS42NDkuMjQ3LS43NzVhMS44NTEsMS44NTEsMCwwLDEsLjMxNSwxLjIzMiwzLjcsMy43LDAsMCwxLC4wNzksMi4wODFjLS40MjQuNTMxLS4xNjMsMS4yNDgtLjEwOSwxLjg1LjA2OC40MjIuNTE2LjExOC41ODktLjE0NGExMS44NTEsMTEuODUxLDAsMCwwLC45NDQtMi4yNDFjLjI2OS0uMzU2LjAxNC0uNzcsMC0xLjE0Mi40MTMtLjA0OS4yNTYtLjUwNi4wMzUtLjdhNS45Myw1LjkzLDAsMCwwLS42NjctMi4yLDEwLjQ2NCwxMC40NjQsMCwwLDEtMS45NDEtMi43MjNjLS41MjgtMS42MzktMi4wNDItMi43MjYtMi41NTYtNC4zNzlhMy41NTYsMy41NTYsMCwwLDAtMS42NTItMi4zMTdBNy44ODEsNy44ODEsMCwwLDAsMjAuMzIsMi4xNyw2LjUsNi41LDAsMCwxLDE5LjI4OSwyLjNabS40LDE0LjY2YTM4LjkwNywzOC45MDcsMCwwLDEsLjUsNC4yOTEsNC4xNzUsNC4xNzUsMCwwLDEtLjc2LDIuNTE3Yy0uMTIuNDI1LS40ODYuMDEyLS43NTEtLjAxNi0uNjQzLS4wMTgtLjg4Mi0uNjgzLTEuMjMyLTEuMTA3LS4zNi0uMzQ0LS4xLS44LjEzMy0xLjEzMS4yNTItLjE3OS4zNS0uNTc5LjcwOC0uNTQ4LjQtLjAwNy4zMTYtLjQ4Ny4yNi0uNzQzLjIzOC0uMzYyLjA5Mi0uODkyLjMyOC0xLjI4My40MTktLjE4Mi4yOTQtLjgyLjQ0Mi0xLjE4LjExNS0uMjU2LjAxNy0uNzQ5LjMzNC0uODU0LjAzNy0uMDA2LjA0OS4wMTIuMDQyLjA1MlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzYTNjNWJcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiNcIixcblx0XHRdLFxuXHR9LFxuXHRcIlBIUFwiOiB7XG5cdFx0Y29sb3VyOiBcIiM0YzZiOTZcIixcblx0XHRpY29uOiBcIjxkZWZzPjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiYVxcXCIgY3g9XFxcIi0xNi4xMTRcXFwiIGN5PVxcXCIyMC41MzJcXFwiIHI9XFxcIjE4LjM4NFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgyNi41MiAtOS4zMDcpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjVcXFwiIHN0b3AtY29sb3I9XFxcIiM0YzZiOTZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMyMzFmMjBcXFwiLz48L3JhZGlhbEdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3BocDwvdGl0bGU+PGVsbGlwc2UgY3g9XFxcIjE2XFxcIiBjeT1cXFwiMTZcXFwiIHJ4PVxcXCIxNFxcXCIgcnk9XFxcIjcuMzY1XFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PGVsbGlwc2UgY3g9XFxcIjE2XFxcIiBjeT1cXFwiMTZcXFwiIHJ4PVxcXCIxMy40NTNcXFwiIHJ5PVxcXCI2LjgxOFxcXCIgc3R5bGU9XFxcImZpbGw6IzYyODBiNlxcXCIvPjxwYXRoIGQ9XFxcIk0xOC43MjUsMTguMmwuNjY3LTMuNDM0YTEuNzUyLDEuNzUyLDAsMCwwLS4zNzItMS43MTksMi45MjksMi45MjksMCwwLDAtMi0uNTI1SDE1Ljg2N2wuMzMxLTEuN2EuMjE5LjIxOSwwLDAsMC0uMjE1LS4yNmgtMS42YS4yMTkuMjE5LDAsMCwwLS4yMTUuMTc3bC0uNzA5LDMuNjQ2YTIuMDUxLDIuMDUxLDAsMCwwLS40NzctMS4wNTQsMi43ODMsMi43ODMsMCwwLDAtMi4yLS44MDdINy43YS4yMTkuMjE5LDAsMCwwLS4yMTUuMTc3bC0xLjQzNCw3LjM4YS4yMTkuMjE5LDAsMCwwLC4yMTUuMjZINy44NjlhLjIxOS4yMTksMCwwLDAsLjIxNS0uMTc3bC4zNDctMS43ODVoMS4yYTUuMTY3LDUuMTY3LDAsMCwwLDEuNTY4LS4yLDMuMDY4LDMuMDY4LDAsMCwwLDEuMTUtLjY4OSwzLjUzOCwzLjUzOCwwLDAsMCwuNjgtLjg0NGwtLjI4NywxLjQ3NWEuMjE5LjIxOSwwLDAsMCwuMjE1LjI2aDEuNmEuMjE5LjIxOSwwLDAsMCwuMjE1LS4xNzdsLjc4Ny00LjA1MWgxLjA5NGMuNDY2LDAsLjYuMDkzLjY0LjEzM3MuMS4xNjUuMDI1LjU2OWwtLjYzNSwzLjI2NWEuMjE5LjIxOSwwLDAsMCwuMjE1LjI2aDEuNjJBLjIxOS4yMTksMCwwLDAsMTguNzI1LDE4LjJaTTExLjMzLDE1LjM2NmExLjc0OSwxLjc0OSwwLDAsMS0uNTYxLDEuMDkyLDIuMTcxLDIuMTcxLDAsMCwxLTEuMzE1LjMyMUg4Ljc0MmwuNTE1LTIuNjUxaC45MjFjLjY3NywwLC45NDkuMTQ1LDEuMDU5LjI2NkExLjE4MSwxLjE4MSwwLDAsMSwxMS4zMywxNS4zNjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTI1LjU0NiwxMy4zMzJhMi43ODMsMi43ODMsMCwwLDAtMi4yLS44MDdIMjAuMjU1YS4yMTkuMjE5LDAsMCwwLS4yMTUuMTc3bC0xLjQzNCw3LjM4YS4yMTkuMjE5LDAsMCwwLC4yMTUuMjZoMS42MDhhLjIxOS4yMTksMCwwLDAsLjIxNS0uMTc3bC4zNDctMS43ODVoMS4yYTUuMTY3LDUuMTY3LDAsMCwwLDEuNTY4LS4yLDMuMDY4LDMuMDY4LDAsMCwwLDEuMTUtLjY4OSwzLjQyNSwzLjQyNSwwLDAsMCwxLjA3Ni0xLjkyN0EyLjUxMiwyLjUxMiwwLDAsMCwyNS41NDYsMTMuMzMyWm0tMS42NjcsMi4wMzRhMS43NDksMS43NDksMCwwLDEtLjU2MSwxLjA5MkEyLjE3MSwyLjE3MSwwLDAsMSwyMiwxNi43NzhIMjEuMjlsLjUxNS0yLjY1MWguOTIxYy42NzcsMCwuOTQ5LjE0NSwxLjA1OS4yNjZBMS4xODEsMS4xODEsMCwwLDEsMjMuODc5LDE1LjM2NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTAuMTc4LDEzLjkwOGExLjY0NSwxLjY0NSwwLDAsMSwxLjIyMS4zMzgsMS4zNCwxLjM0LDAsMCwxLC4xNDUsMS4xNjEsMS45NDUsMS45NDUsMCwwLDEtLjY0MiwxLjIyM0EyLjM2MSwyLjM2MSwwLDAsMSw5LjQ1NCwxN0g4LjQ3NmwuNi0zLjA4OVpNNi4yNjEsMjAuMTI0SDcuODY5bC4zODEtMS45NjJIOS42MjdhNC45MzEsNC45MzEsMCwwLDAsMS41LS4xOTEsMi44NCwyLjg0LDAsMCwwLDEuMDctLjY0MiwzLjIwNywzLjIwNywwLDAsMCwxLjAxLTEuODA4LDIuMywyLjMsMCwwLDAtLjM4NS0yLjA0NCwyLjU2OCwyLjU2OCwwLDAsMC0yLjAzNS0uNzMySDcuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDAwMDRcXFwiLz48cGF0aCBkPVxcXCJNMTQuMzg3LDEwLjc4MmgxLjZMMTUuNiwxMi43NDRoMS40MjFhMi43NjcsMi43NjcsMCwwLDEsMS44NS40NjgsMS41NDgsMS41NDgsMCwwLDEsLjMwNSwxLjUxNmwtLjY2NywzLjQzNEgxNi44OWwuNjM1LTMuMjY1YS44ODYuODg2LDAsMCwwLS4wOC0uNzYsMS4xMjEsMS4xMjEsMCwwLDAtLjgtLjJIMTUuMzdsLS44MjIsNC4yMjhoLTEuNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDAwMDRcXFwiLz48cGF0aCBkPVxcXCJNMjIuNzI3LDEzLjkwOGExLjY0NSwxLjY0NSwwLDAsMSwxLjIyMS4zMzgsMS4zNCwxLjM0LDAsMCwxLC4xNDUsMS4xNjEsMS45NDUsMS45NDUsMCwwLDEtLjY0MiwxLjIyM0EyLjM2MSwyLjM2MSwwLDAsMSwyMiwxN2gtLjk3OGwuNi0zLjA4OVpNMTguODEsMjAuMTI0aDEuNjA4bC4zODEtMS45NjJoMS4zNzdhNC45MzEsNC45MzEsMCwwLDAsMS41LS4xOTEsMi44NCwyLjg0LDAsMCwwLDEuMDctLjY0MiwzLjIwNywzLjIwNywwLDAsMCwxLjAxLTEuODA4LDIuMywyLjMsMCwwLDAtLjM4NS0yLjA0NCwyLjU2OCwyLjU2OCwwLDAsMC0yLjAzNS0uNzMySDIwLjI0NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDAwMDRcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiNcIixcblx0XHRcdFwiLy9cIixcblx0XHRdLFxuXHR9LFxuXHRcIlBML1NRTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmZjAwMDBcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk04LjU2MiwxNS4yNTZBMjEuMTU5LDIxLjE1OSwwLDAsMCwxNiwxNi40NDlhMjEuMTU5LDIxLjE1OSwwLDAsMCw3LjQzOC0xLjE5NGMxLjg2NC0uNzI3LDIuNTI1LTEuNTM1LDIuNTI1LTJWOS43YTEwLjM1NywxMC4zNTcsMCwwLDEtMi4wODQsMS4wNzZBMjIuMjkzLDIyLjI5MywwLDAsMSwxNiwxMi4wNzhhMjIuMzYsMjIuMzYsMCwwLDEtNy44NzktMS4zQTEwLjI4LDEwLjI4LDAsMCwxLDYuMDM3LDkuN3YzLjU1QzYuMDM3LDEzLjcyNCw2LjcsMTQuNTI4LDguNTYyLDE1LjI1NlpcXFwiIHN0eWxlPVxcXCJmaWxsOnJlZFxcXCIvPjxwYXRoIGQ9XFxcIk04LjU2MiwyMS45NjFhMTUuNjExLDE1LjYxMSwwLDAsMCwyLjYuNzQxQTI0LjksMjQuOSwwLDAsMCwxNiwyMy4xNTVhMjQuOSwyNC45LDAsMCwwLDQuODM4LS40NTIsMTUuNjE0LDE1LjYxNCwwLDAsMCwyLjYtLjc0MWMxLjg2NC0uNzI3LDIuNTI1LTEuNTM1LDIuNTI1LTJ2LTMuMzlhMTAuNzA2LDEwLjcwNiwwLDAsMS0xLjY5Mi44MjVBMjMuNDksMjMuNDksMCwwLDEsMTYsMTguNzRhMjMuNDksMjMuNDksMCwwLDEtOC4yNzEtMS4zNDgsMTAuODI5LDEwLjgyOSwwLDAsMS0xLjY5Mi0uODI1VjE5Ljk2QzYuMDM3LDIwLjQyNiw2LjcsMjEuMjMxLDguNTYyLDIxLjk2MVpcXFwiIHN0eWxlPVxcXCJmaWxsOnJlZFxcXCIvPjxwYXRoIGQ9XFxcIk0xNiwzMGM1LjUsMCw5Ljk2My0xLjc0NCw5Ljk2My0zLjg5NFYyMy4yNjlhMTAuNSwxMC41LDAsMCwxLTEuNTM1Ljc2MmwtLjE1Ny4wNjNBMjMuNDg3LDIzLjQ4NywwLDAsMSwxNiwyNS40NDVhMjMuNDIyLDIzLjQyMiwwLDAsMS04LjI3MS0xLjM1MWMtLjA1NC0uMDItLjEwNi0uMDQzLS4xNTctLjA2M2ExMC41LDEwLjUsMCwwLDEtMS41MzUtLjc2MnYyLjgzN0M2LjAzNywyOC4yNTYsMTAuNSwzMCwxNiwzMFpcXFwiIHN0eWxlPVxcXCJmaWxsOnJlZFxcXCIvPjxlbGxpcHNlIGN4PVxcXCIxNlxcXCIgY3k9XFxcIjUuODk0XFxcIiByeD1cXFwiOS45NjNcXFwiIHJ5PVxcXCIzLjg5NFxcXCIgc3R5bGU9XFxcImZpbGw6cmVkXFxcIi8+XCIsXG5cdH0sXG5cdFwiUGxhaW4gdGV4dFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjMmMyYzJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMi4wMzgsMkg2LjM3NWExLjc1NSwxLjc1NSwwLDAsMC0xLjc1LDEuNzV2MjQuNUExLjc1NSwxLjc1NSwwLDAsMCw2LjM3NSwzMGgxOS4yNWExLjc1NSwxLjc1NSwwLDAsMCwxLjc1LTEuNzVWNi44NTZabS41MjUsMi44NDQsMS42NjMsMS41MzFIMjIuNTYzWk02LjM3NSwyOC4yNVYzLjc1SDIwLjgxM1Y4LjEyNWg0LjgxM1YyOC4yNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMmMyYzJcXFwiLz48cmVjdCB4PVxcXCI4LjEyNVxcXCIgeT1cXFwiMTUuMDk3XFxcIiB3aWR0aD1cXFwiMTMuMDc2XFxcIiBoZWlnaHQ9XFxcIjEuNzVcXFwiIHN0eWxlPVxcXCJmaWxsOiM4MjllYzJcXFwiLz48cmVjdCB4PVxcXCI4LjEyNVxcXCIgeT1cXFwiMjQuNDM5XFxcIiB3aWR0aD1cXFwiOS43NjJcXFwiIGhlaWdodD1cXFwiMS43NVxcXCIgc3R5bGU9XFxcImZpbGw6IzgyOWVjMlxcXCIvPjxyZWN0IHg9XFxcIjguMTI1XFxcIiB5PVxcXCIxOS43NjNcXFwiIHdpZHRoPVxcXCIxNS43NVxcXCIgaGVpZ2h0PVxcXCIxLjc1XFxcIiBzdHlsZT1cXFwiZmlsbDojODI5ZWMyXFxcIi8+PHJlY3QgeD1cXFwiOC4xMjVcXFwiIHk9XFxcIjEwLjIzXFxcIiB3aWR0aD1cXFwiMTUuNzVcXFwiIGhlaWdodD1cXFwiMS43NVxcXCIgc3R5bGU9XFxcImZpbGw6IzgyOWVjMlxcXCIvPlwiLFxuXHR9LFxuXHRcIlBsYW50VU1MXCI6IHtcblx0XHRjb2xvdXI6IFwiI0ExMUY0MVwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiLTMzLjQyM1xcXCIgeTE9XFxcIi0yNTAuOTExXFxcIiB4Mj1cXFwiLTMzLjM1M1xcXCIgeTI9XFxcIi0yNTAuODU4XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDM3LjEzNCwgMjYuMDAxLCAxMy41NzUsIC0xOS4zODcsIDQ2NzMuNDczLCAtMzk4Mi4wMTkpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjNzY3Njc2XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCItMzIuMTA3XFxcIiB5MT1cXFwiLTI0Mi41NjNcXFwiIHgyPVxcXCItMzIuMDI4XFxcIiB5Mj1cXFwiLTI0Mi41ODZcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoODEuMDgxLCA1Ni43NzQsIDE3LjMwNiwgLTI0LjcxNSwgNjgwNC4wMjEsIC00MTQ5LjY0NClcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMwMDc5YjlcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiY1xcXCIgeDE9XFxcIi0zMy4yODJcXFwiIHkxPVxcXCItMjQzLjQyM1xcXCIgeDI9XFxcIi0zMy4yMjRcXFwiIHkyPVxcXCItMjQzLjQ1NVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCg2MC4wMDMsIDQyLjAxNSwgMzQuMTg0LCAtNDguODIsIDEwMzQzLjAwNSwgLTEwNDY5LjA4NClcXFwiIHhsaW5rOmhyZWY9XFxcIiNiXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJkXFxcIiB4MT1cXFwiMTIuMzU2XFxcIiB5MT1cXFwiMjYuMjY4XFxcIiB4Mj1cXFwiMTQuMDExXFxcIiB5Mj1cXFwiMjYuMjY4XFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjNTk1OTU5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjA4N1xcXCIgc3RvcC1jb2xvcj1cXFwiIzZlNmU2ZVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yNDJcXFwiIHN0b3AtY29sb3I9XFxcIiM4YzhjOGNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNDA1XFxcIiBzdG9wLWNvbG9yPVxcXCIjYTRhNGE0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU3N1xcXCIgc3RvcC1jb2xvcj1cXFwiI2I1YjViNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC43NjVcXFwiIHN0b3AtY29sb3I9XFxcIiNiZmJmYmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNjMmMyYzJcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZVxcXCIgeDE9XFxcIjE4LjI5MVxcXCIgeTE9XFxcIjI2LjE3MVxcXCIgeDI9XFxcIjE5Ljk0NlxcXCIgeTI9XFxcIjI2LjE3MVxcXCIgeGxpbms6aHJlZj1cXFwiI2RcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImZcXFwiIHgxPVxcXCIyNC40NFxcXCIgeTE9XFxcIjI2LjE3MVxcXCIgeDI9XFxcIjI2LjA5NlxcXCIgeTI9XFxcIjI2LjE3MVxcXCIgeGxpbms6aHJlZj1cXFwiI2RcXFwiLz48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9wbGFudHVtbDwvdGl0bGU+PHBvbHlnb24gcG9pbnRzPVxcXCIyMC4zMDUgMTcuODcyIDI3LjE2IDIyLjQxOCAyMS43MiAyNS40OTMgMTQuODYxIDIwLjk5OSAyMC4zMDUgMTcuODcyXFxcIiBzdHlsZT1cXFwiZmlsbDojMWMwYTQyXFxcIi8+PHBhdGggZD1cXFwiTTIxLjcxNiwyNS42MTlsLS4wNTUtLjAzNi03LjAwNS00LjU5LDUuNjUzLTMuMjQ3LDcuMDU2LDQuNjhabS02LjY1LTQuNjEzLDYuNjU4LDQuMzYyLDUuMjMxLTIuOTU3TDIwLjMsMThaXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyNi40MDEgMTEuOTA5IDI5LjQxOCAxMy41OTIgMjcuMDcgMTUuMDg4IDI0LjIxMyAxMy4yNDcgMjYuNDAxIDExLjkwOVxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yNy4wNjksMTUuMjE1bC0zLjA1OC0xLjk3LDIuMzg3LTEuNDYsMy4yMjgsMS44Wm0tMi42NTQtMS45NjZMMjcuMDcsMTQuOTYsMjkuMjA4LDEzLjZsLTIuOC0xLjU2NVpcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE0LjQ5OCAxNy44MDcgMjEuMzU0IDIyLjM1NCAxNS45MTQgMjUuNDI5IDkuMDU1IDIwLjkzNSAxNC40OTggMTcuODA3XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiZDNmXFxcIi8+PHBhdGggZD1cXFwiTTE1LjkxLDI1LjU1NGwtLjA1NS0uMDM2TDguODUsMjAuOTI5LDE0LjUsMTcuNjgxbDcuMDU2LDQuNjhaTTkuMjYsMjAuOTQxLDE1LjkxOCwyNS4zbDUuMjMxLTIuOTU3LTYuNjU0LTQuNDEzWlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiNy45OSAxNy45NjYgMTQuOTU0IDIyLjM2NiA5LjU3NyAyNS41MDQgMi4yMTggMjAuODQ5IDcuOTkgMTcuOTY2XFxcIiBzdHlsZT1cXFwiZmlsbDojYTExZjQwXFxcIi8+PHBhdGggZD1cXFwiTTkuNTc1LDI1LjYyOSwyLDIwLjgzOGw2LTMsNy4xNjQsNC41MjdaTTIuNDM2LDIwLjg2LDkuNTgsMjUuMzc4bDUuMTY4LTMuMDE2TDcuOTg0LDE4LjA4OVpcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIuMTExIDIxLjAyMSA5LjQ0MyAyNS41MTUgOS40NDMgMjkuMDYzIDIuMTExIDI0LjMzMiAyLjExMSAyMS4wMjFcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYilcXFwiLz48cGF0aCBkPVxcXCJNOS41NSwyOS4yNiwyLDI0LjM5MVYyMC44MjlMOS41NSwyNS40NTVaTTIuMjE4LDI0LjI3NGw3LjExOCw0LjU5MlYyNS41NzVMMi4yMTgsMjEuMjEzWlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjQuMDcxIDEzLjM0MyAyNy4wMDkgMTUuMjIyIDI3LjAwOSAyMi4xMzEgMjQuMDcxIDIwLjI0NyAyNC4wNzEgMTMuMzQzXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2MpXFxcIi8+PHBhdGggZD1cXFwiTTI3LjA2MywyMi4yMjlsLTMuMDQ1LTEuOTUzVjEzLjI0NWwzLjA0NSwxLjk0N1ptLTIuOTM4LTIuMDEyLDIuODMxLDEuODE1VjE1LjI1MWwtMi44MzEtMS44MVpcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI3LjE0OSAyMi41MjYgMjcuMTQ5IDE1LjE5NCAyOS41MTQgMTMuNzc1IDI5LjUxNCAyOS4xNDkgMjguMzMxIDI5LjE0OSA5LjY0NiAyOS4xNDkgOS42NDYgMjUuNjAxIDE1LjA4NiAyMi41MjYgMTUuNzg1IDI1LjYwMSAxNS43OTYgMjUuNjAxIDIxLjQ3MiAyMi41MjYgMjEuODkxIDI1LjYwMSAyMS45NDUgMjUuNjAxIDI3LjE0OSAyMi41MjZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMjkuNjIxLDI5LjI1Nkg5LjUzOVYyNS41MzhsNS42Mi0zLjE3Ny43LDMuMDgzLDUuNy0zLjA4Ny40MjIsMy4xLDUuMDYxLTIuOTkxVjE1LjEzM2wyLjU4LTEuNTQ4Wk05Ljc1MywyOS4wNDFIMjkuNDA3VjEzLjk2NGwtMi4xNTEsMS4yOXY3LjMzMmwtLjA1My4wMzEtNS4yMjksMy4wOUgyMS44bC0uNDExLTMuMDE0LTUuNTY0LDMuMDE0SDE1LjdsLS42ODYtMy4wMTgtNS4yNiwyLjk3M1pcXFwiLz48cmVjdCB4PVxcXCIxMi4zNTZcXFwiIHk9XFxcIjI1LjQ0XFxcIiB3aWR0aD1cXFwiMS42NTZcXFwiIGhlaWdodD1cXFwiMS42NTZcXFwiIHJ4PVxcXCIwLjIxNVxcXCIgcnk9XFxcIjAuMjE1XFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTEzLjgsMjcuMkgxMi41N2EuMzIyLjMyMiwwLDAsMS0uMzIyLS4zMjJWMjUuNjU1YS4zMjIuMzIyLDAsMCwxLC4zMjItLjMyMkgxMy44YS4zMjIuMzIyLDAsMCwxLC4zMjIuMzIydjEuMjI2QS4zMjIuMzIyLDAsMCwxLDEzLjgsMjcuMlpNMTIuNTcsMjUuNTQ3YS4xMDguMTA4LDAsMCwwLS4xMDcuMTA3djEuMjI2YS4xMDguMTA4LDAsMCwwLC4xMDcuMTA3SDEzLjhhLjEwOC4xMDgsMCwwLDAsLjEwNy0uMTA3VjI1LjY1NWEuMTA4LjEwOCwwLDAsMC0uMTA3LS4xMDdaXFxcIi8+PHJlY3QgeD1cXFwiMTguMjkxXFxcIiB5PVxcXCIyNS4zNDNcXFwiIHdpZHRoPVxcXCIxLjY1NlxcXCIgaGVpZ2h0PVxcXCIxLjY1NlxcXCIgcng9XFxcIjAuMjE1XFxcIiByeT1cXFwiMC4yMTVcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZSlcXFwiLz48cGF0aCBkPVxcXCJNMTkuNzMyLDI3LjEwNkgxOC41MDVhLjMyMi4zMjIsMCwwLDEtLjMyMi0uMzIyVjI1LjU1OGEuMzIyLjMyMiwwLDAsMSwuMzIyLS4zMjJoMS4yMjZhLjMyMi4zMjIsMCwwLDEsLjMyMi4zMjJ2MS4yMjZBLjMyMi4zMjIsMCwwLDEsMTkuNzMyLDI3LjEwNlptLTEuMjI2LTEuNjU2YS4xMDguMTA4LDAsMCwwLS4xMDcuMTA3djEuMjI2YS4xMDguMTA4LDAsMCwwLC4xMDcuMTA3aDEuMjI2YS4xMDguMTA4LDAsMCwwLC4xMDctLjEwN1YyNS41NThhLjEwOC4xMDgsMCwwLDAtLjEwNy0uMTA3WlxcXCIvPjxyZWN0IHg9XFxcIjI0LjQ0XFxcIiB5PVxcXCIyNS4zNDNcXFwiIHdpZHRoPVxcXCIxLjY1NlxcXCIgaGVpZ2h0PVxcXCIxLjY1NlxcXCIgcng9XFxcIjAuMjE1XFxcIiByeT1cXFwiMC4yMTVcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZilcXFwiLz48cGF0aCBkPVxcXCJNMjUuODgxLDI3LjEwNkgyNC42NTVhLjMyMi4zMjIsMCwwLDEtLjMyMi0uMzIyVjI1LjU1OGEuMzIyLjMyMiwwLDAsMSwuMzIyLS4zMjJoMS4yMjZhLjMyMi4zMjIsMCwwLDEsLjMyMi4zMjJ2MS4yMjZBLjMyMi4zMjIsMCwwLDEsMjUuODgxLDI3LjEwNlptLTEuMjI2LTEuNjU2YS4xMDguMTA4LDAsMCwwLS4xMDcuMTA3djEuMjI2YS4xMDguMTA4LDAsMCwwLC4xMDcuMTA3aDEuMjI2YS4xMDguMTA4LDAsMCwwLC4xMDctLjEwN1YyNS41NThhLjEwOC4xMDgsMCwwLDAtLjEwNy0uMTA3WlxcXCIvPjxwYXRoIGQ9XFxcIk0yNy4yMTUsMTEuMjNjLS4wNTIuMDY5LS40MTctLjI2Mi0uNjUzLS41MjZhNC40MDgsNC40MDgsMCwwLDEtLjUxNi0uNzNBMi42LDIuNiwwLDAsMSwyNS43LDkuMmEyLjM1OCwyLjM1OCwwLDAsMS0uMDUyLS42ODIsMi45NTksMi45NTksMCwwLDEsLjEyOS0uNzQ5LDMuMTQyLDMuMTQyLDAsMCwxLC43ODctMS4yMDcsMTUuNTMyLDE1LjUzMiwwLDAsMCwxLjI4My0xLjQsMy4wNjIsMy4wNjIsMCwwLDAsLjQ3OS0uOTI3LDMuOTc5LDMuOTc5LDAsMCwwLC4xNTEtLjg1NWMuMDE5LS4zNjQtLjAyNS0uNTkzLjAyMy0uNjEzcy4yMTUuMjc0LjI4Ny41NjRhMy4xNjcsMy4xNjcsMCwwLDEtLjQ1OCwyLjEsNi45LDYuOSwwLDAsMS0xLjA5NCwxLjQ0OCwyLjgsMi44LDAsMCwwLS44NDksMS4yMzRBMi40NjYsMi40NjYsMCwwLDAsMjYuMyw4LjhhMy40NjUsMy40NjUsMCwwLDAsLjQ3NiwxLjU0MkMyNy4wNjQsMTAuOTE0LDI3LjI1NiwxMS4xNzUsMjcuMjE1LDExLjIzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2VhMmQyZVxcXCIvPjxwYXRoIGQ9XFxcIk0yNy4xOTMsMTEuMjY2Yy0uMTI0LDAtLjQ5Mi0uMzY1LS42NTEtLjU0NGE0LjQ3OCw0LjQ3OCwwLDAsMS0uNTItLjczNCwyLjYyOCwyLjYyOCwwLDAsMS0uMzQ2LS43ODEsMi4zNzUsMi4zNzUsMCwwLDEtLjA1My0uNjksMi45NzgsMi45NzgsMCwwLDEsLjEzLS43NTYsMy4yMDgsMy4yMDgsMCwwLDEsLjc5My0xLjIxNmMuMjk0LS4zMzEuNS0uNTI4LjY1OS0uNjg2YTQuMzkzLDQuMzkzLDAsMCwwLC42MjItLjcxMSwzLjA1MiwzLjA1MiwwLDAsMCwuNDc2LS45MTksMy45NTEsMy45NTEsMCwwLDAsLjE1LS44NDljLjAwOC0uMTU5LDAtLjI5NCwwLS4zOTMsMC0uMTU5LS4wMDYtLjIyNS4wMzgtLjI0M2EuMDUuMDUsMCwwLDEsLjA0MywwLDEuMjI2LDEuMjI2LDAsMCwxLC4yOC41NzksMy4xNjcsMy4xNjcsMCwwLDEtLjQ2LDIuMTIxLDYuOTI4LDYuOTI4LDAsMCwxLTEuMSwxLjQ1M2MtLjA1NS4wNi0uMTA5LjExNi0uMTYyLjE3MWEyLjMsMi4zLDAsMCwwLS42ODEsMS4wNTIsMi40NywyLjQ3LDAsMCwwLS4wODIuNjczLDMuNDU4LDMuNDU4LDAsMCwwLC40NzMsMS41M2MuMTE0LjIzMS4yMTUuNDE1LjI4OS41NDkuMTI5LjIzNS4xNzguMzIzLjE0Mi4zNjloMGEuMDUxLjA1MSwwLDAsMS0uMDQuMDJaTTI4LjUxMiwyLjhhLjg2My44NjMsMCwwLDAsMCwuMTljMCwuMS4wMDcuMjM2LDAsLjRhNC4wMjEsNC4wMjEsMCwwLDEtLjE1Mi44NjEsMy4xMDYsMy4xMDYsMCwwLDEtLjQ4My45MzQsNC40MzcsNC40MzcsMCwwLDEtLjYyOS43MTljLS4xNjIuMTU4LS4zNjQuMzU0LS42NTcuNjgzYTMuMTY4LDMuMTY4LDAsMCwwLS43ODIsMS4yLDIuOTMzLDIuOTMzLDAsMCwwLS4xMjguNzQzLDIuMzI1LDIuMzI1LDAsMCwwLC4wNTIuNjc1LDIuNTksMi41OSwwLDAsMCwuMzQxLjc2Nyw0LjQyMiw0LjQyMiwwLDAsMCwuNTEzLjcyNSwyLjAzNSwyLjAzNSwwLDAsMCwuNjExLjUyNiwxLjE4MywxLjE4MywwLDAsMC0uMTQ3LS4zMWMtLjA3NC0uMTM0LS4xNzUtLjMxOC0uMjktLjU1MUEzLjUsMy41LDAsMCwxLDI2LjI3OCw4LjhhMi41MywyLjUzLDAsMCwxLC4wODQtLjY4OCwyLjM3NSwyLjM3NSwwLDAsMSwuNjk0LTEuMDc1Yy4wNTItLjA1NS4xMDYtLjExMS4xNjEtLjE3MWE2Ljg3OSw2Ljg3OSwwLDAsMCwxLjA5LTEuNDQyLDMuMTE5LDMuMTE5LDAsMCwwLC40NTYtMi4wODNBMS4yODEsMS4yODEsMCwwLDAsMjguNTEyLDIuOFpcXFwiLz48cGF0aCBkPVxcXCJNMjkuOTcyLDYuMDg3Yy0uMDE5LS4wODgtLjQzMi0uMDQtLjc2Ni4wNzNhMi42LDIuNiwwLDAsMC0xLjA1OS43MjIsMi44LDIuOCwwLDAsMC0uOTE2LDEuODU1LDIuOTcyLDIuOTcyLDAsMCwwLC4yNTgsMS4wNmMuMjIxLjU3Mi40NTUuNzczLjQ0NCwxLjIyNS0uMDA3LjMtLjExNC40ODQtLjA0OC41NDlzLjMxNC0uMS40NjItLjMxM2ExLjgsMS44LDAsMCwwLC4yNTktMS4wMjJjLS4wNDYtLjgxNS0uNi0xLjAxNS0uNjA4LTEuOGExLjg1OCwxLjg1OCwwLDAsMSwuMTI5LS42NzZDMjguNTcsNi41MDksMzAuMDA4LDYuMjUyLDI5Ljk3Miw2LjA4N1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNlYTJkMmVcXFwiLz48cGF0aCBkPVxcXCJNMjcuOTM0LDExLjYxN2EuMDk0LjA5NCwwLDAsMS0uMDY5LS4wMjZjLS4wNDYtLjA0Ni0uMDMtLjEyMi0uMDA1LS4yMzdhMS43MTgsMS43MTgsMCwwLDAsLjA0NS0uMzMxLDEuMzc0LDEuMzc0LDAsMCwwLS4yMTQtLjcyLDUsNSwwLDAsMS0uMjI4LS40OTUsMi45OCwyLjk4LDAsMCwxLS4yNTktMS4wNywyLjgxLDIuODEsMCwwLDEsLjkyMy0xLjg3NCwyLjY0LDIuNjQsMCwwLDEsMS4wNy0uNzI5LDEuNDgyLDEuNDgyLDAsMCwxLC43NjYtLjFBLjA2NS4wNjUsMCwwLDEsMzAsNi4wODFoMGMuMDE1LjA3LS4wOTIuMTIxLS4zMDYuMjI0YTIuNzMsMi43MywwLDAsMC0xLjU0MiwxLjQ2MywxLjgyNywxLjgyNywwLDAsMC0uMTI3LjY2NywxLjY0NSwxLjY0NSwwLDAsMCwuMjkxLjg4NSwxLjg4OSwxLjg4OSwwLDAsMSwuMzE3LjkxNCwxLjgxNCwxLjgxNCwwLDAsMS0uMjY0LDEuMDM5LjgwOS44MDksMCwwLDEtLjQyMS4zNDJabTEuODg5LTUuNTQ5YTIuMTE3LDIuMTE3LDAsMCwwLS42MDguMTE3LDIuNTg4LDIuNTg4LDAsMCwwLTEuMDQ4LjcxNSwyLjc2NCwyLjc2NCwwLDAsMC0uOTA5LDEuODM3LDIuOTM1LDIuOTM1LDAsMCwwLC4yNTYsMS4wNSw0Ljk1NSw0Ljk1NSwwLDAsMCwuMjI1LjQ5LDEuNDMzLDEuNDMzLDAsMCwxLC4yMi43NDUsMS43NjUsMS43NjUsMCwwLDEtLjA0Ny4zNDFjLS4wMTkuMDkxLS4wMzUuMTYzLS4wMDkuMTg4YS4wNDYuMDQ2LDAsMCwwLC4wMzguMDEuNzY5Ljc2OSwwLDAsMCwuMzgyLS4zMiwxLjc5MywxLjc5MywwLDAsMCwuMjU0LTEuMDA1LDEuODQ0LDEuODQ0LDAsMCwwLS4zMS0uODksMS43MTEsMS43MTEsMCwwLDEtLjMtLjkxMSwxLjg3NywxLjg3NywwLDAsMSwuMTMtLjY4NkEyLjc3NiwyLjc3NiwwLDAsMSwyOS42Nyw2LjI1N2MuMTI2LS4wNjEuMjgzLS4xMzYuMjc3LS4xNjRsLS4wMDgtLjAwN0EuMjY0LjI2NCwwLDAsMCwyOS44MjMsNi4wNjhaXFxcIi8+XCIsXG5cdH0sXG5cdFwiUG93ZXJRdWVyeVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjZmNmY2ZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0zMCwyNS41ODNIMjUuNzU3VjE1LjM3OGE4LjI3MSw4LjI3MSwwLDAsMC0uODMyLTQuMjYxQTMuMDYxLDMuMDYxLDAsMCwwLDIyLjExOCw5LjhhMy4zODMsMy4zODMsMCwwLDAtMi44MjYsMS42NjQsNi43OTEsNi43OTEsMCwwLDAtMS4xNjEsMy45ODdWMjUuNTgzSDEzLjg2OVYxNS4wMzFxMC01LjIzMS0zLjY5NC01LjIzMWEzLjMzMiwzLjMzMiwwLDAsMC0yLjgyNiwxLjU3Myw2LjkzNSw2LjkzNSwwLDAsMC0xLjEwNiw0LjA3OFYyNS41ODNIMlY2Ljg1Nkg2LjI0M1Y5LjgxOGguMDczYTYuNDg4LDYuNDg4LDAsMCwxLDUuOTA3LTMuNCw1LjU2OSw1LjU2OSwwLDAsMSwzLjM5MywxLjA3QTUuMzI4LDUuMzI4LDAsMCwxLDE3LjYsMTAuMjk0YTYuNjgzLDYuNjgzLDAsMCwxLDYuMjE4LTMuODc3UTMwLDYuNDE3LDMwLDE0LjA0M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZmNmY2ZcXFwiLz5cIixcblx0fSxcblx0XCJQb3dlclNoZWxsXCI6IHtcblx0XHRjb2xvdXI6IFwiIzUzOTFmZVwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiMjMuMzI1XFxcIiB5MT1cXFwiLTExOC41NDNcXFwiIHgyPVxcXCI3LjI2XFxcIiB5Mj1cXFwiLTEwNC4xOTNcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMSwgMCwgMCwgLTEsIDAsIC05NilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiM1MzkxZmVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzZTZkYmZcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYlxcXCIgeDE9XFxcIjcuMVxcXCIgeTE9XFxcIi0xMDQuMDAyXFxcIiB4Mj1cXFwiMjMuMDAxXFxcIiB5Mj1cXFwiLTExOC4yOTJcXFwiIHhsaW5rOmhyZWY9XFxcIiNhXFxcIi8+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfcG93ZXJzaGVsbDwvdGl0bGU+PHBhdGggZD1cXFwiTTMuMTc0LDI2LjU4OWExLjE1NCwxLjE1NCwwLDAsMS0uOTI4LS40MjMsMS4yMzQsMS4yMzQsMCwwLDEtLjIxLTEuMDUyTDYuMjMzLDYuNzhBMS44LDEuOCwwLDAsMSw3LjkxNCw1LjQxSDI4LjgyNmExLjE1NywxLjE1NywwLDAsMSwuOTI4LjQyMywxLjIzNSwxLjIzNSwwLDAsMSwuMjEsMS4wNTJsLTQuMiwxOC4zMzVhMS44LDEuOCwwLDAsMS0xLjY4MSwxLjM3SDMuMTc0WlxcXCIgc3R5bGU9XFxcImZpbGwtcnVsZTpldmVub2RkO2ZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk03LjkxNCw1LjY0NkgyOC44MjZhLjkxMy45MTMsMCwwLDEsLjkwOCwxLjE4N2wtNC4yLDE4LjMzNGExLjU3NSwxLjU3NSwwLDAsMS0xLjQ1MSwxLjE4N0gzLjE3NGEuOTEzLjkxMywwLDAsMS0uOTA4LTEuMTg3bDQuMi0xOC4zMzRBMS41NzQsMS41NzQsMCwwLDEsNy45MTQsNS42NDZaXFxcIiBzdHlsZT1cXFwiZmlsbC1ydWxlOmV2ZW5vZGQ7ZmlsbDp1cmwoI2IpXFxcIi8+PHBhdGggZD1cXFwiTTE2LjA0LDIxLjU0NGg1LjA4NmExLjExOCwxLjExOCwwLDAsMSwwLDIuMjM0SDE2LjA0YTEuMTE4LDEuMTE4LDAsMCwxLDAtMi4yMzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojMmM1NTkxO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTE5LjMzOSwxNi41NzhhMS43NjIsMS43NjIsMCwwLDEtLjU5MS42TDkuMzA5LDIzLjk1M2ExLjIyNCwxLjIyNCwwLDAsMS0xLjQzOC0xLjk3N2w4LjUxMi02LjE2NHYtLjEyNkwxMS4wMzUsMTBhMS4yMjQsMS4yMjQsMCwwLDEsMS43ODItMS42NzJsNi40MTgsNi44MjdBMS4xNjYsMS4xNjYsMCwwLDEsMTkuMzM5LDE2LjU3OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyYzU1OTE7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cGF0aCBkPVxcXCJNMTkuMSwxNi4zNDJhMS43NDksMS43NDksMCwwLDEtLjU5LjZMOS4wNzQsMjMuNzE4YTEuMjI1LDEuMjI1LDAsMCwxLTEuNDM5LTEuOTc3bDguNTEzLTYuMTY0VjE1LjQ1TDEwLjgsOS43NjFhMS4yMjQsMS4yMjQsMCwwLDEsMS43ODMtMS42NzJMMTksMTQuOTE2QTEuMTYyLDEuMTYyLDAsMCwxLDE5LjEsMTYuMzQyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwYXRoIGQ9XFxcIk0xNS45LDIxLjQxMmg1LjA4NmExLjA1OSwxLjA1OSwwLDEsMSwwLDIuMTE4SDE1LjlhMS4wNTksMS4wNTksMCwxLDEsMC0yLjExOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmY7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiNcIixcblx0XHRdLFxuXHR9LFxuXHRcIlByb2Nlc3NpbmdcIjoge1xuXHRcdGNvbG91cjogXCIjMWM0YzcwXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxNlxcXCIgeTE9XFxcIjNcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIjI5XFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjMWM0YzcwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjMGMyYjQyXFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9wcm9jZXNzaW5nbGFuZzwvdGl0bGU+PHBhdGggZD1cXFwiTTE1LjkyMiwxOS45NjJhMTMsMTMsMCwwLDEtMS42NDctLjA3N3Y1LjU1MmEyNy43NiwyNy43NiwwLDAsMSwzLjMzMi40NjFWMjlINS45NjhWMjUuOUEyNy45ODgsMjcuOTg4LDAsMCwxLDkuMywyNS40MzhWNi43MTVhMjguMjE1LDI4LjIxNSwwLDAsMS0zLjMzMS0uNDZ2LTMuMUg4Ljk1NUMxMC4xOCwzLjE1MywxMy41NDksMywxNi4yMywzYzYuMzE4LDAsOS44LDIuOTQ4LDkuOCw4QzI2LjAzMSwxNi4wMTgsMjIuMiwxOS45NjIsMTUuOTIyLDE5Ljk2MlpNMTYsNy4wNThjLS42MTMsMC0xLjE0OSwwLTEuNzIzLjAzOHY4LjYxNWE5LjY5NCw5LjY5NCwwLDAsMCwxLjQ1NS4xMTVjMy4wMjUtLjAzOCw1LjEzLTEuNzIzLDUuMTMtNC41MTlDMjAuODYyLDguNywxOS40MDcsNy4wNTgsMTYsNy4wNThaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+XCIsXG5cdH0sXG5cdFwiUHJvbG9nXCI6IHtcblx0XHRjb2xvdXI6IFwiI2VjMWMyNFwiLFxuXHRcdGljb246IFwiPGRlZnM+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJhXFxcIiBjeD1cXFwiMTM0MS4yNVxcXCIgY3k9XFxcIi0zMzk2Ljg2NlxcXCIgcj1cXFwiMTguMjk5XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0xMzI3LjA3NyAzNDA1LjkzNSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMTgxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmJmYmZiXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjM2NVxcXCIgc3RvcC1jb2xvcj1cXFwiI2VmZWZmMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41NTJcXFwiIHN0b3AtY29sb3I9XFxcIiNkYWRiZGNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzM4XFxcIiBzdG9wLWNvbG9yPVxcXCIjYmViZmMyXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjgyNFxcXCIgc3RvcC1jb2xvcj1cXFwiI2FlYjBiM1xcXCIvPjwvcmFkaWFsR3JhZGllbnQ+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJiXFxcIiBjeD1cXFwiNi42NzhcXFwiIGN5PVxcXCI4NC43NFxcXCIgcj1cXFwiMTUuNTU0XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0xLjg4NCAtODYuMTU0KSBzY2FsZSgxLjA3MiAxLjE2NilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmYWZkZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMDc5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZWVmNWZhXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjIyXFxcIiBzdG9wLWNvbG9yPVxcXCIjY2ZkZmVjXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQwN1xcXCIgc3RvcC1jb2xvcj1cXFwiIzlkYmJkNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42MzFcXFwiIHN0b3AtY29sb3I9XFxcIiM1ODhhYjVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzQ1XFxcIiBzdG9wLWNvbG9yPVxcXCIjMzI2ZmE0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjc5OVxcXCIgc3RvcC1jb2xvcj1cXFwiIzJiNjY5OFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC44OTdcXFwiIHN0b3AtY29sb3I9XFxcIiMxNzRlNzhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOTk0XFxcIiBzdG9wLWNvbG9yPVxcXCIjMDAzMTUyXFxcIi8+PC9yYWRpYWxHcmFkaWVudD48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImNcXFwiIGN4PVxcXCIxMS4yNDFcXFwiIGN5PVxcXCItOS44OTdcXFwiIHI9XFxcIjE2LjU5NFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwIDIyLjYzMSkgc2NhbGUoMSAxLjA2MilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmQ1NDBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjY3XFxcIiBzdG9wLWNvbG9yPVxcXCIjZWMxYzI0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5NFxcXCIgc3RvcC1jb2xvcj1cXFwiIzc2MDAwMFxcXCIvPjwvcmFkaWFsR3JhZGllbnQ+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJkXFxcIiBjeD1cXFwiMTIuMjg2XFxcIiBjeT1cXFwiMjYuMTI3XFxcIiByPVxcXCIyLjA4M1xcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2RkZGZlMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4xNzRcXFwiIHN0b3AtY29sb3I9XFxcIiNkOWRiZGNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzUxXFxcIiBzdG9wLWNvbG9yPVxcXCIjY2RjZmQwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjUzMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2I4YmFiYlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC43MTFcXFwiIHN0b3AtY29sb3I9XFxcIiM5YzllOWZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuODkxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNzg3OTdiXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNWU1ZjYxXFxcIi8+PC9yYWRpYWxHcmFkaWVudD48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImVcXFwiIGN4PVxcXCIxOS4wNjRcXFwiIGN5PVxcXCIyNi4xMjdcXFwiIHI9XFxcIjIuMDgzXFxcIiB4bGluazpocmVmPVxcXCIjZFxcXCIvPjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiZlxcXCIgY3g9XFxcIjE1LjQzNFxcXCIgY3k9XFxcIjE2LjE5MVxcXCIgcj1cXFwiMi42ODdcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMCAwLjQ2MSlcXFwiIHhsaW5rOmhyZWY9XFxcIiNkXFxcIi8+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfcHJvbG9nPC90aXRsZT48ZyBzdHlsZT1cXFwiaXNvbGF0aW9uOmlzb2xhdGVcXFwiPjxjaXJjbGUgY3g9XFxcIjE2XFxcIiBjeT1cXFwiMTZcXFwiIHI9XFxcIjE0XFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtNi42MDIgMTQuOTIpIHJvdGF0ZSgtNDIuMjY1KVxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0xOS45MzgsNi4zMDlhOS43ODUsOS43ODUsMCwwLDAtNi41LTIuMzM5QzguNTY0LDMuOTcsMy43NzQsNy43LDMuNDA1LDE0Ljk2MWMtLjQsNy44LDQuNzUsMTIuODYyLDEyLDEyLjg2MiwxMC43MzMsMCwxNi42NzItOS43OCwxMC4wMjctMjAuMzg4LDQuNjcxLDEwLjYtLjUyNywxNy4yNzktNy4yMzYsMTcuMjc5LTUuNDQxLDAtOS42MS0zLjY1MS05LjYxLTEwLjM0NUM4LjU4Miw0LjcwOSwxNS44MjMsNC4wMzksMTkuOTM4LDYuMzA5WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMi43LDEwLjQxNWMtLjI5My0uOTQtLjY0NS0yLjc4OC42MzQtMy44NmEzLjcyOSwzLjcyOSwwLDAsMC0zLjg0NCwxLjUzNEE5LjE2NSw5LjE2NSwwLDAsMCwxMiw4LjEsMy43MjksMy43MjksMCwwLDAsOC4xNTIsNi41NTVjMS4zMDksMS4xLjkxLDMuMDA1LjYxNCwzLjkyM0ExMC41MTcsMTAuNTE3LDAsMCwwLDYuMSwxNy41MjRjMCwyLjE3NCwxLjQsNC42NDUsMS42NzUsNy45NTVsMS43NjgtMS41MzJhMTEuNzQzLDExLjc0MywwLDAsMCw2LjIxMiwxLjQzMywxMS43NDEsMTEuNzQxLDAsMCwwLDYuMjEyLTEuNDMzbDEuNzY5LDEuNTMyYy4yOC0zLjMxLDEuNjc1LTUuNzgxLDEuNjc1LTcuOTU1QTEwLjUxMiwxMC41MTIsMCwwLDAsMjIuNywxMC40MTVaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2MpXFxcIi8+PHBhdGggZD1cXFwiTTEwLjcyMiwyNy44NjdhMS42MjEsMS42MjEsMCwxLDEsMy4yNCwwYzAsLjAxOCwwLC4wMzUsMCwuMDUzYTIuMjM0LDIuMjM0LDAsMSwwLTMuMjI4LjEyNkMxMC43MjUsMjcuOTg3LDEwLjcyMiwyNy45MjcsMTAuNzIyLDI3Ljg2N1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZClcXFwiLz48cGF0aCBkPVxcXCJNMjAuNjI5LDI3Ljg2N2ExLjYyMSwxLjYyMSwwLDEsMC0zLjI0LDBjMCwuMDE4LDAsLjAzNSwwLC4wNTNhMi4yMzQsMi4yMzQsMCwxLDEsMy4yMjguMTI2QTEuNjc4LDEuNjc4LDAsMCwwLDIwLjYyOSwyNy44NjdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2UpXFxcIi8+PGcgc3R5bGU9XFxcIm9wYWNpdHk6MC41MzttaXgtYmxlbmQtbW9kZTptdWx0aXBseVxcXCI+PHBhdGggZD1cXFwiTTguMzQ2LDE4LjRjLS4xMzIuNjY3LS45NzEuODc3LS45NzEuODc3QTEuMzU5LDEuMzU5LDAsMCwxLDYuODA5LDE4LjFhMi45MjksMi45MjksMCwwLDAsLjQ0MywxLjc5M0EyLjkyNywyLjkyNywwLDAsMCw4LjM0NiwxOC40WlxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxwYXRoIGQ9XFxcIk0xMC4wMDgsMTguNzM3Yy0uMTMyLjY2Ny0uOTcyLjg3Ny0uOTcyLjg3N2ExLjM2LDEuMzYsMCwwLDEtLjU2Ni0xLjE4MiwyLjkyOSwyLjkyOSwwLDAsMCwuNDQ0LDEuNzkzQTIuOTI2LDIuOTI2LDAsMCwwLDEwLjAwOCwxOC43MzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTguODMzLDIwLjI0OWMtLjEzMi42NjctLjk3MS44NzctLjk3MS44NzdBMS4zNTksMS4zNTksMCwwLDEsNy4zLDE5Ljk0NGEyLjkyOSwyLjkyOSwwLDAsMCwuNDQzLDEuNzkzQTIuOTI1LDIuOTI1LDAsMCwwLDguODMzLDIwLjI0OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjBcXFwiLz48cGF0aCBkPVxcXCJNMTAuNSwyMC41ODNjLS4xMzIuNjY3LS45NzEuODc3LS45NzEuODc3YTEuMzYsMS4zNiwwLDAsMS0uNTY2LTEuMTgyQTIuOTI5LDIuOTI5LDAsMCwwLDkuNCwyMi4wNzIsMi45MjcsMi45MjcsMCwwLDAsMTAuNSwyMC41ODNaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTkuMzI4LDIyLjEyMWMtLjEzMi42NjctLjk3Mi44NzctLjk3Mi44NzdhMS4zNiwxLjM2LDAsMCwxLS41NjUtMS4xODIsMi45MjksMi45MjksMCwwLDAsLjQ0MywxLjc5M0EyLjkyNiwyLjkyNiwwLDAsMCw5LjMyOCwyMi4xMjFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTExLjY2NCwxOS4wN2MtLjEzMi42NjctLjk3Mi44NzctLjk3Mi44NzdhMS4zNTksMS4zNTksMCwwLDEtLjU2NS0xLjE4MiwyLjkzLDIuOTMsMCwwLDAsLjQ0MywxLjc5M0EyLjkyNywyLjkyNywwLDAsMCwxMS42NjQsMTkuMDdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PC9nPjxnIHN0eWxlPVxcXCJvcGFjaXR5OjAuNTM7bWl4LWJsZW5kLW1vZGU6bXVsdGlwbHlcXFwiPjxwYXRoIGQ9XFxcIk0yMy4xNTcsMTguNGMuMTMyLjY2Ny45NzEuODc3Ljk3MS44NzdhMS4zNTksMS4zNTksMCwwLDAsLjU2Ni0xLjE4MiwyLjkzLDIuOTMsMCwwLDEtLjQ0MywxLjc5M0EyLjkyNywyLjkyNywwLDAsMSwyMy4xNTcsMTguNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjBcXFwiLz48cGF0aCBkPVxcXCJNMjEuNDk1LDE4LjczN2MuMTMyLjY2Ny45NzIuODc3Ljk3Mi44NzdhMS4zNiwxLjM2LDAsMCwwLC41NjUtMS4xODIsMi45MzEsMi45MzEsMCwwLDEtLjQ0NCwxLjc5M0EyLjkyNiwyLjkyNiwwLDAsMSwyMS40OTUsMTguNzM3WlxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxwYXRoIGQ9XFxcIk0yMi42NjksMjAuMjQ5Yy4xMzIuNjY3Ljk3MS44NzcuOTcxLjg3N2ExLjM2LDEuMzYsMCwwLDAsLjU2Ni0xLjE4MiwyLjkyOSwyLjkyOSwwLDAsMS0uNDQzLDEuNzkzQTIuOTI2LDIuOTI2LDAsMCwxLDIyLjY2OSwyMC4yNDlaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTIxLjAwOCwyMC41ODNjLjEzMi42NjcuOTcxLjg3Ny45NzEuODc3YTEuMzU5LDEuMzU5LDAsMCwwLC41NjUtMS4xODIsMi45MjgsMi45MjgsMCwwLDEtLjQ0MywxLjc5M0EyLjkyNywyLjkyNywwLDAsMSwyMS4wMDgsMjAuNTgzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxwYXRoIGQ9XFxcIk0yMi4xNzUsMjIuMTIxYy4xMzIuNjY3Ljk3Mi44NzcuOTcyLjg3N2ExLjM2LDEuMzYsMCwwLDAsLjU2NS0xLjE4MiwyLjkyOCwyLjkyOCwwLDAsMS0uNDQ0LDEuNzkzQTIuOTI3LDIuOTI3LDAsMCwxLDIyLjE3NSwyMi4xMjFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTE5LjgzOCwxOS4wN2MuMTMyLjY2Ny45NzIuODc3Ljk3Mi44NzdhMS4zNTksMS4zNTksMCwwLDAsLjU2NS0xLjE4MiwyLjkyOCwyLjkyOCwwLDAsMS0uNDQzLDEuNzkzQTIuOTI4LDIuOTI4LDAsMCwxLDE5LjgzOCwxOS4wN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjBcXFwiLz48L2c+PGNpcmNsZSBjeD1cXFwiMTEuMzM5XFxcIiBjeT1cXFwiMTQuMDc0XFxcIiByPVxcXCIzLjgxNlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxjaXJjbGUgY3g9XFxcIjEyLjEzXFxcIiBjeT1cXFwiMTQuNDQ2XFxcIiByPVxcXCIxLjg2MVxcXCIgc3R5bGU9XFxcImZpbGw6I2JkYmZjMVxcXCIvPjxjaXJjbGUgY3g9XFxcIjEyLjEzXFxcIiBjeT1cXFwiMTQuNDQ2XFxcIiByPVxcXCIxLjE5MVxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxjaXJjbGUgY3g9XFxcIjExLjYwM1xcXCIgY3k9XFxcIjE0LjAyN1xcXCIgcj1cXFwiMC4zNTdcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMC4xMTJcXFwiIGN5PVxcXCIxNC4wNzRcXFwiIHI9XFxcIjMuODE2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PGNpcmNsZSBjeD1cXFwiMjAuOTAzXFxcIiBjeT1cXFwiMTQuNDQ2XFxcIiByPVxcXCIxLjg2MVxcXCIgc3R5bGU9XFxcImZpbGw6I2JkYmZjMVxcXCIvPjxjaXJjbGUgY3g9XFxcIjIwLjkwM1xcXCIgY3k9XFxcIjE0LjQ0NlxcXCIgcj1cXFwiMS4xOTFcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjBcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMC4zNzVcXFwiIGN5PVxcXCIxNC4wMjdcXFwiIHI9XFxcIjAuMzU3XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE1LjcwNiwyMS41MmMwLTEuNDEyLDIuMTU3LTMuNDEzLDIuMTU3LTQuODg3YTIuMTU3LDIuMTU3LDAsMCwwLTQuMzEzLDBDMTMuNTUsMTguMTA3LDE1LjcwNiwyMC4xMDgsMTUuNzA2LDIxLjUyWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNmKVxcXCIvPjwvZz5cIixcblx0fSxcblx0XCJQcm90b2NvbCBCdWZmZXJzXCI6IHtcblx0XHRjb2xvdXI6IFwiIzk3ZmYyN1wiLFxuXHRcdGljb246IFwiPHBvbHlnb24gcG9pbnRzPVxcXCIxNS45OTYgMy4yMiAyNi45NjYgOS43IDI2Ljk1NCAyMi4zIDE2IDI4Ljc4IDUuMDM4IDIyLjQwOCA1LjAzNCA5LjYyOCAxNS45OTYgMy4yMlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0xNiwyLDMuOTg3LDkuMDJsMCwxNEwxNiwzMGwxMi03LjEuMDEzLTEzLjhaTTI2Ljk1NCwyMi4zLDE2LDI4Ljc4LDUuMDM4LDIyLjQwOGwwLTEyLjc4TDE2LDMuMjIsMjYuOTY2LDkuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMxNzFjMWVcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI1LjU2OSAxMy42NTQgMTkuOTQ2IDE2Ljk2NCAxOS45NDMgMjQuODkgMjUuNTkgMjEuNTY1IDI1LjU2OSAxMy42NTRcXFwiIHN0eWxlPVxcXCJmaWxsOiMxZWE4ZmZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIzLjI4MiAxMi4zMDMgMjUuNTY5IDEzLjY1NCAxOS45NDYgMTYuOTY0IDE5Ljk0MyAyNC44OSAxNy4zMjcgMjMuMzcgMTcuMzQ4IDE1Ljg3NSAyMy4yODIgMTIuMzAzXFxcIiBzdHlsZT1cXFwiZmlsbDojNTBiZmZmXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyMi41MTIgMTAuMzUgMjIuNTE0IDExLjgxNiAxNi40MTEgMTUuNDk4IDE2LjQxOCAyMy41OTcgMTQuOTk4IDI0LjQzMSAxNC45OTQgMTQuODU2IDIyLjUxMiAxMC4zNVxcXCIgc3R5bGU9XFxcImZpbGw6Izk3ZmYyN1xcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjAuMDA4IDguODcxIDIyLjUxMiAxMC4zNSAxNC45OTQgMTQuODU2IDE0Ljk5OCAyNC40MzEgMTIuMTk0IDIyLjgwMSAxMi4xODkgMTMuNDEzIDIwLjAwOCA4Ljg3MVxcXCIgc3R5bGU9XFxcImZpbGw6I2MyZmY3MlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTkuMjI2IDYuNjA2IDE5LjIyNiA4LjM3NCAxMS4yMSAxMy4wNzQgMTEuMjEgMjMuMTcyIDkuODA4IDIzLjk4OCA5LjgzNSAxMi4yNzcgMTkuMjI2IDYuNjA2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmYyNzRiXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNi4xNiA0Ljc4NCA2LjUzIDEwLjM5NCA2LjUyOSAyMi4wNzEgOS44MjcgMjMuOTg4IDkuODM1IDEyLjI3NyAxOS4yMzUgNi42MDYgMTYuMTYgNC43ODRcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZjVjNzdcXFwiLz5cIixcblx0fSxcblx0XCJQdWdcIjoge1xuXHRcdGNvbG91cjogXCIjNDQyODIzXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjUuNTE0LDEyLjg0NmMtLjA1Mi0uOTM4LjIwOS0xLjgyNS0uMjA5LTIuNTU0LTEuMDQzLTEuODI1LTMuNjQ5LTIuODY3LTguODYzLTIuODY3VjcuMzcyaDB2LjA1MmMtNS43MzUsMC04LjE4NSwxLjA0My05LjIyNywyLjg2N2E1LjYsNS42LDAsMCwwLS40NjksMi41NTQsOS41NDYsOS41NDYsMCwwLDAtLjI2MSwyLjQ1Yy4xNTYsMS4xNDcuMjYxLDIuMjk0LjQxNywzLjMzNi4xNTYuODg2LDEuNDA4LDEuNTY0LDEuNTY0LDIuNC4zMTMsMi4yNDIsMi4yOTQsMy4yODQsOC4wMjgsMy4yODR2LjI2MWgtLjF2LS4yNjFjNS4yMTMsMCw3LjQtMS4wNDMsNy43MTYtMy4yODQuMS0uODM0LDEuMTQ3LTEuNTEyLDEuMy0yLjQuMTU2LTEuMDQzLjIwOS0yLjE5LjM2NS0zLjMzNkExMS43NzQsMTEuNzc0LDAsMCwwLDI1LjUxNCwxMi44NDZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWZjY2EzXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4MiwxMy42OGEzLjI0MSwzLjI0MSwwLDAsMSwyLjE5LDEuMTQ3Yy43My42MjYsMS45MjksMS4wNDMsMi40NSwxLjYxNmE0LjcxNSw0LjcxNSwwLDAsMSwxLjQwOCwxLjk4MSw4LjksOC45LDAsMCwxLC4zMTMsMi4yNDJjMCwuMjYxLjE1Ni4yMDkuNTczLDBhOS4wMiw5LjAyLDAsMCwwLDIuMTktMS44NzdjLS4xNTYuODg2LTEuMjUxLDEuNjY4LTEuMzU1LDIuNS0uMzEzLDIuMjQyLTIuNSwzLjMzNi03Ljg3MiwzLjMzNmguMzEzXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTE5LjUxOSwxMS45MDhjLjIwOS42NzguODg2LDMuMDI0LS40NjksMi4yNDJhMi41NTcsMi41NTcsMCwwLDEsLjkzOCwxLjU2NCwxLjgzMSwxLjgzMSwwLDAsMCwxLjMsMS40MDgsMy40NzksMy40NzksMCwwLDAsMi41NTQtLjYyNiwyLjk1NiwyLjk1NiwwLDAsMCwuNjc4LTMuMjg0LDIuNDMsMi40MywwLDAsMC0yLjEzNy0xLjYxNkMyMS40LDExLjMzNCwxOS4zMSwxMS4xMjYsMTkuNTE5LDExLjkwOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjY2FjOGRcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMi4xNzhcXFwiIGN5PVxcXCIxNC40MVxcXCIgcj1cXFwiMS45MjlcXFwiLz48Y2lyY2xlIGN4PVxcXCIyMS42NTZcXFwiIGN5PVxcXCIxMy41MjRcXFwiIHI9XFxcIjAuNTIxXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE5LjIwNiwxNC4zMDZhMTcuNjgsMTcuNjgsMCwwLDEsMi43MTEsMi4zNDZjLjkzOCwxLjIuOTM4LDEuNDA4LjkzOCwxLjQwOGwtLjY3OC4zMTNhNy4xLDcuMSwwLDAsMC0yLjEzNy0yLjVjLTEuMi0uNjc4LTEuMzU1LTEuMjUxLTEuMzU1LTEuMjUxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2VmY2NhM1xcXCIvPjxwYXRoIGQ9XFxcIk0xNi4yMzUsMTMuNjhhMy42MDUsMy42MDUsMCwwLDAtMi4zNDYsMS4xNDdjLS43My42MjYtMi4wMzMsMS4wNDMtMi41LDEuNjE2YTQuODA2LDQuODA2LDAsMCwwLTEuNDYsMS45ODEsOC45LDguOSwwLDAsMC0uMzEzLDIuMjQyYzAsLjI2MS4wNTIuMzEzLS42MjYsMEE3Ljk3Miw3Ljk3MiwwLDAsMSw2LjgsMTguNzg5Yy4xNTYuODg2LDEuMjUxLDEuNjY4LDEuMzU1LDIuNS4zMTMsMi4xOSwyLjUsMy4yODQsNy44NzIsMy4yODRoLjM2NVxcXCIgc3R5bGU9XFxcImZpbGw6I2NjYWM4ZFxcXCIvPjxwYXRoIGQ9XFxcIk0yMS4yMzksMTcuMjc3YTYuNTUyLDYuNTUyLDAsMCwwLTUuMTA5LTIuNjA3aDBhNi42MzgsNi42MzgsMCwwLDAtNS4xMDksMi42MDcsMy44NjEsMy44NjEsMCwwLDAtMS4wNDMsMy4xOGMwLDQuNjQsMS42MTYsMy4yMzIsMi43MTEsMy44MDZhNy40NjYsNy40NjYsMCwwLDAsMy4zODkuMzEzaDBhNy40LDcuNCwwLDAsMCwzLjM4OS0uMzEzYzEuMDk1LS41NzMsMi43MTEuODM0LDIuNzExLTMuODA2QTMuMzg2LDMuMzg2LDAsMCwwLDIxLjIzOSwxNy4yNzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTYzMzJiXFxcIi8+PHBhdGggZD1cXFwiTTE2LjAyNiwxNS45NzRhOS41NDksOS41NDksMCwwLDEtLjQ2OSwyLjU1NGwuNTczLS4xNTZaXFxcIiBzdHlsZT1cXFwiZmlsbDojNDQyODIzXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4MiwxNS45NzRhOS41NDksOS41NDksMCwwLDAsLjQ2OSwyLjU1NGwtLjU3My0uMTU2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ0MjgyM1xcXCIvPjxwYXRoIGQ9XFxcIk0xNC4zNTgsMTUuNDUzYy0uMjA5LS41MjEuNTczLTEuMzU1LDEuODI1LTEuMzU1czIuMDMzLjgzNCwxLjgyNSwxLjM1NS0xLjA0My42NzgtMS44MjUuNjc4QzE1LjM0OCwxNi4xMywxNC41NjYsMTUuOTc0LDE0LjM1OCwxNS40NTNaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTYzMzJiXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4MiwxNS45NzRjMC0uMS43My0uMSwxLjE0Ny0uMzY1LDAsMC0uODM0LjI2MS0uOTkxLjE1NmEuNjU2LjY1NiwwLDAsMS0uMjA5LS4zNjUuNjU2LjY1NiwwLDAsMS0uMjA5LjM2NWMtLjE1Ni4xLTEuMDk1LS4xNTYtMS4wOTUtLjE1NmE4LjA1OCw4LjA1OCwwLDAsMSwxLjIuMzY1di40MTdhMTAuNDkyLDEwLjQ5MiwwLDAsMCwuMSwyLjAzM2MuMTU2LjIwOS4xLTEuNDYuMS0yLjAzM0ExLjMsMS4zLDAsMCwxLDE2LjE4MiwxNS45NzRaXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4MiwxOC45NDVhMy4zNSwzLjM1LDAsMCwxLDEuNjE2LjY3OCwzLjEyMSwzLjEyMSwwLDAsMC0xLjYxNi0xLjA5NSwzLjAzNiwzLjAzNiwwLDAsMC0xLjgyNSwxLjJBMy4zMTIsMy4zMTIsMCwwLDEsMTYuMTgyLDE4Ljk0NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM3ZjRhNDFcXFwiLz48cGF0aCBkPVxcXCJNMTYuMDc4LDIyLjhhOC45LDguOSwwLDAsMS0yLjQtLjQ2OWMtLjE1Ni0uMDUyLS4zMTMuMDUyLS40NjksMGE2LjE3Miw2LjE3MiwwLDAsMS0zLjE4LTIuMTM3di4yMDljMCw0LjY0LDEuNjE2LDMuMjMyLDIuNzExLDMuODA2YTcuNDY2LDcuNDY2LDAsMCwwLDMuMzg5LjMxM2gwYTcuNCw3LjQsMCwwLDAsMy4zODktLjMxM2MxLjA5NS0uNTczLDIuNzExLjgzNCwyLjcxMS0zLjgwNnYtLjQ2OUE1LjkxNCw1LjkxNCwwLDAsMSwxOSwyMi4yODJjLS4xNTYuMDUyLS40MTctLjA1Mi0uNTczLS4wNTJBNy4wNDUsNy4wNDUsMCwwLDEsMTYuMDc4LDIyLjhaXFxcIiBzdHlsZT1cXFwiZmlsbDojNDQyODIzXFxcIi8+PHBhdGggZD1cXFwiTTEzLjk0MSwyMC4zcy0uNTczLDEuNjY4LS4xNTYsMi40bC0uNTIxLS4yMDlBMTUuNDMzLDE1LjQzMywwLDAsMSwxMy45NDEsMjAuM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM0NDI4MjNcXFwiLz48cGF0aCBkPVxcXCJNMTguMzIsMjAuM3MuNTczLDEuNjY4LjE1NiwyLjRMMTksMjIuNDkxQTEwLjYyOSwxMC42MjksMCwwLDAsMTguMzIsMjAuM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM0NDI4MjNcXFwiLz48cGF0aCBkPVxcXCJNMTIuNTg1LDExLjkwOGMtLjIwOS42NzgtLjg4NiwzLjAyNC40NjksMi4yNDJhMi41NTcsMi41NTcsMCwwLDAtLjkzOCwxLjU2NCwxLjgzMSwxLjgzMSwwLDAsMS0xLjMsMS40MDhBMy40NzksMy40NzksMCwwLDEsOC4yNTgsMTYuNWEyLjk1NiwyLjk1NiwwLDAsMS0uNjc4LTMuMjg0LDIuNDMsMi40MywwLDAsMSwyLjEzNy0xLjYxNkMxMC43MDksMTEuMzM0LDEyLjc5NCwxMS4xMjYsMTIuNTg1LDExLjkwOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjY2FjOGRcXFwiLz48cGF0aCBkPVxcXCJNMTYuMTMsMTguNTI4YTMuMzkzLDMuMzkzLDAsMCwxLDIuNDUsMi44Njd2LS4xYTMuMDUxLDMuMDUxLDAsMCwwLTIuNDUtMi45MTksMywzLDAsMCwwLTIuNDUsMi45MTl2LjFBMy40NjMsMy40NjMsMCwwLDEsMTYuMTMsMTguNTI4WlxcXCIvPjxlbGxpcHNlIGN4PVxcXCIxNi41NDZcXFwiIGN5PVxcXCIxNS4xMzhcXFwiIHJ4PVxcXCIwLjE1NlxcXCIgcnk9XFxcIjAuMzEzXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMy4yNTYgNC42MTEpIHJvdGF0ZSgtMTQuNDYpXFxcIiBzdHlsZT1cXFwiZmlsbDojMzMxNzEyXFxcIi8+PGVsbGlwc2UgY3g9XFxcIjE1LjYwOVxcXCIgY3k9XFxcIjE1LjE0NlxcXCIgcng9XFxcIjAuMzEzXFxcIiByeT1cXFwiMC4xNTZcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0zLjQ4MiAyNS41NjcpIHJvdGF0ZSgtNzIuNzY1KVxcXCIgc3R5bGU9XFxcImZpbGw6IzMzMTcxMlxcXCIvPjxjaXJjbGUgY3g9XFxcIjEwLjAzMVxcXCIgY3k9XFxcIjE0LjQxXFxcIiByPVxcXCIxLjkyOVxcXCIvPjxjaXJjbGUgY3g9XFxcIjEwLjU1MlxcXCIgY3k9XFxcIjEzLjUyNFxcXCIgcj1cXFwiMC41MjFcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTYuNywxNC40MXMtLjUyMS4yMDktLjYyNi4yNjFhMi40OTIsMi40OTIsMCwwLDEtLjYyNi0uMjYxSDE2LjdaXFxcIiBzdHlsZT1cXFwiZmlsbDojN2Y0YTQxXFxcIi8+PHBhdGggZD1cXFwiTTEyLjksMTQuMzA2YTE3LjY4LDE3LjY4LDAsMCwwLTIuNzExLDIuMzQ2Yy0uOTM4LDEuMi0uOTM4LDEuNDA4LS45MzgsMS40MDhsLjY3OC4zMTNhNy4xLDcuMSwwLDAsMSwyLjEzNy0yLjVjMS4yLS42NzgsMS4zNTUtMS4yNTEsMS4zNTUtMS4yNTFaXFxcIiBzdHlsZT1cXFwiZmlsbDojZWZjY2EzXFxcIi8+PHBhdGggZD1cXFwiTTkuMDkyLDEwLjgxM2E0LjUxOSw0LjUxOSwwLDAsMS0xLjkyOSwyLjI5NEEyLjE5LDIuMTksMCwwLDAsOS4wOTIsMTAuODEzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2NjYWM4ZFxcXCIvPjxwYXRoIGQ9XFxcIk0yMi45MDgsMTAuODEzYTQuNTE5LDQuNTE5LDAsMCwwLDEuOTI5LDIuMjk0QTIuMTksMi4xOSwwLDAsMSwyMi45MDgsMTAuODEzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2NjYWM4ZFxcXCIvPjxwYXRoIGQ9XFxcIk0xOS4zMSwxMy44MzZhNS4xNiw1LjE2LDAsMCwwLTMuMDc2LTEuNDA4aC4xNTZhMy44NTIsMy44NTIsMCwwLDAtMy4wMjQsMS40MDgsNC44MzIsNC44MzIsMCwwLDEsMy4wMjQtMS4wNDNoMEE1Ljc4NSw1Ljc4NSwwLDAsMSwxOS4zMSwxMy44MzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTE3Ljc0NiwxMC45NjlhMi40NTUsMi40NTUsMCwwLDAtMS41NjQtLjkzOGguMTU2YTEuNzg2LDEuNzg2LDAsMCwwLTEuNTEyLjkzOCwyLjE4NywyLjE4NywwLDAsMSwxLjUxMi0uNjc4aDBBMS44OTQsMS44OTQsMCwwLDEsMTcuNzQ2LDEwLjk2OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjY2FjOGRcXFwiLz48cGF0aCBkPVxcXCJNMTAuMDMxLDE3Ljc0NmEyLjU0NSwyLjU0NSwwLDAsMS0xLjc3My4yMDlIOC4wNWEzLjY4LDMuNjgsMCwwLDEtLjg4Ni0xLjUxMkEyLjI3LDIuMjcsMCwwLDAsMTAuMDMxLDE3Ljc0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjY2FjOGRcXFwiLz48cGF0aCBkPVxcXCJNMjIuMTI2LDE3Ljc0NmEyLjU0NSwyLjU0NSwwLDAsMCwxLjc3My4yMDlIMjMuNjlhMS43NDksMS43NDksMCwwLDAsMS4wOTUtMS41MTJBMi4wMiwyLjAyLDAsMCwxLDIyLjEyNiwxNy43NDZaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTExLjIzLDEwLjcwOWE0Ljc1LDQuNzUsMCwwLDEsMi4yNDIuMWMuOTM4LjMxMy4yMDksMS41NjQuMzY1LDEuNjE2YTIuODY1LDIuODY1LDAsMCwxLDIuMjQyLS43M2MxLjc3My4xLDEuOTgxLjg4NiwyLjI0Mi43My4yNjEtLjEtLjI2MS0yLjE5LDIuNDUtMS43MiwwLDAtMi43NjMtLjczLTIuNjU5LDEuMjUxYTMuNjc1LDMuNjc1LDAsMCwwLTMuODU4LS4xUzE0LjgyNyw5LjkyNywxMS4yMywxMC43MDlaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTEwLjUsOHMtMi40LDIuOTcyLTIuNzExLDQuMTE4Yy0uMzY1LDEuMTQ3LS42MjYsNS45NDMtLjkzOCw2LjYyMUw1Ljc1NiwxNC4wNDVsMi4wMzMtNC45WlxcXCIgc3R5bGU9XFxcImZpbGw6I2NjYWM4ZFxcXCIvPjxwYXRoIGQ9XFxcIk0yMS42NTYsOHMyLjQsMi45NzIsMi43MTEsNC4xMThjLjM2NSwxLjE0Ny42MjYsNS45NDMuOTM4LDYuNjIxTDI2LjQsMTQuMDQ1bC0yLjAzMy00LjlaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTIxLjUsOGExMS42MTcsMTEuNjE3LDAsMCwxLDMuMjg0LDQuNTg4Yy43MywyLjQ1LjQxNyw1LjQ3NC45OTEsNS44MzkuODM0LjUyMSwxLjcyLTIuNjA3LDIuMDMzLTIuOTE5LjQ2OS0uNTIxLDIuMDg1LTEuODc3LDIuMTktMi4xMzdzLTMuMjMyLTMuOTEtNC43NDQtNC42NEMyMy41ODUsNy44OTMsMjEuNCw3Ljc4OSwyMS41LDhaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTYzMzJiXFxcIi8+PHBhdGggZD1cXFwiTTIzLjY5LDkuM2ExNS4zNzksMTUuMzc5LDAsMCwxLDIuOTcyLDguNjU0bDEuMi0yLjQ1QTE2LjU2NCwxNi41NjQsMCwwLDAsMjMuNjksOS4zWlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ0MjgyM1xcXCIvPjxwYXRoIGQ9XFxcIk0xMC41LDhhMTEuNjE3LDExLjYxNywwLDAsMC0zLjI4NCw0LjU4OGMtLjczLDIuNDUtLjQxNyw1LjQ3NC0uOTkxLDUuODM5LS44MzQuNTIxLTEuNzItMi42MDctMi4wMzMtMi45MTktLjQ2OS0uNTIxLTIuMDg1LTEuODc3LTIuMTktMi4xMzdzMy4yMzItMy45MSw0Ljc0NC00LjY0QzguNDE1LDcuODkzLDEwLjYsNy43ODksMTAuNSw4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzU2MzMyYlxcXCIvPjxwYXRoIGQ9XFxcIk04LjMxLDkuM2ExNS4zNzksMTUuMzc5LDAsMCwwLTIuOTcyLDguNjU0TDQuMTQsMTUuNUExNi41NjQsMTYuNTY0LDAsMCwxLDguMzEsOS4zWlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ0MjgyM1xcXCIvPjxwYXRoIGQ9XFxcIk02LjY0MiwxOC4wMDdhNC4xMTgsNC4xMTgsMCwwLDAsLjU3MywxLjU2NGMuMzY1LjM2NS4xLS4zMTMuMS0uMzEzcy0uMzY1LS4yMDktLjMxMy0xLjcyUzYuNjQyLDE4LjAwNyw2LjY0MiwxOC4wMDdaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2NhYzhkXFxcIi8+PHBhdGggZD1cXFwiTTI1LjQxLDE4LjAwN2E0LjExOCw0LjExOCwwLDAsMS0uNTczLDEuNTY0Yy0uMzY1LjM2NS0uMS0uMzEzLS4xLS4zMTNzLjM2NS0uMjA5LjMxMy0xLjcyQzI0Ljk5MywxNi4wNzgsMjUuNDEsMTguMDA3LDI1LjQxLDE4LjAwN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNjY2FjOGRcXFwiLz48Y2lyY2xlIGN4PVxcXCIxMy44ODlcXFwiIGN5PVxcXCIxNy4xMjFcXFwiIHI9XFxcIjAuMTU2XFxcIiBzdHlsZT1cXFwiZmlsbDojNDQyODIzXFxcIi8+PGNpcmNsZSBjeD1cXFwiMTIuODQ2XFxcIiBjeT1cXFwiMTguMjE2XFxcIiByPVxcXCIwLjE1NlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ0MjgyM1xcXCIvPjxjaXJjbGUgY3g9XFxcIjEyLjUzM1xcXCIgY3k9XFxcIjE3LjEyMVxcXCIgcj1cXFwiMC4xNTZcXFwiIHN0eWxlPVxcXCJmaWxsOiM0NDI4MjNcXFwiLz48Y2lyY2xlIGN4PVxcXCIxOC4xNjRcXFwiIGN5PVxcXCIxNy4xMjFcXFwiIHI9XFxcIjAuMTU2XFxcIiBzdHlsZT1cXFwiZmlsbDojNDQyODIzXFxcIi8+PGNpcmNsZSBjeD1cXFwiMTkuMTU0XFxcIiBjeT1cXFwiMTguMjE2XFxcIiByPVxcXCIwLjE1NlxcXCIgc3R5bGU9XFxcImZpbGw6IzQ0MjgyM1xcXCIvPjxjaXJjbGUgY3g9XFxcIjE5LjQ2N1xcXCIgY3k9XFxcIjE3LjEyMVxcXCIgcj1cXFwiMC4xNTZcXFwiIHN0eWxlPVxcXCJmaWxsOiM0NDI4MjNcXFwiLz5cIixcblx0fSxcblx0XCJQdXBwZXRcIjoge1xuXHRcdGNvbG91cjogXCIjZmZhZTFhXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjUuMDg5LDExLjgyMkgxOC43TDE1LjI2Nyw4LjM4OFYySDYuOTExdjguMzU3SDEzLjNsMy40MjIsMy40MjJoMHY0LjQzMWgwbC0zLjQzNCwzLjQzNEg2LjkxMVYzMGg4LjM1N1YyMy42MTJoMEwxOC43LDIwLjE3OGg2LjM4OFpNOS43LDQuNzg2aDIuNzg2VjcuNTcxSDkuN1pNMTIuNDgyLDI3LjJIOS43VjI0LjQxN2gyLjc4NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmFlMWFcXFwiLz5cIixcblx0fSxcblx0XCJQdXJlU2NyaXB0XCI6IHtcblx0XHRjb2xvdXI6IFwiIzE2MTcxYlwiLFxuXHRcdGljb246IFwiPHJlY3Qgd2lkdGg9XFxcIjMyXFxcIiBoZWlnaHQ9XFxcIjMyXFxcIiBzdHlsZT1cXFwiZmlsbDojMTYxNzFiXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyMS44OTIgMjIuMTM2IDE5LjcwNiAyMC4wOTUgMTAuMTA3IDIwLjA5NSAxMi4yOTMgMjIuMTM2IDIxLjg5MiAyMi4xMzZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjEyLjI5MyAxNC45OCAxMC4xMDcgMTcuMDIxIDE5LjcwNiAxNy4wMjEgMjEuODkyIDE0Ljk4IDEyLjI5MyAxNC45OFxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjEuODkxIDExLjkwNiAxOS43MDYgOS44NjQgMTAuMTA3IDkuODY0IDEyLjI5MyAxMS45MDYgMjEuODkxIDExLjkwNlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk05LjEsMTMuOTI2LDcuNjUyLDEyLjQ4MiwyLjMsMTcuODM2YTEuMDIzLDEuMDIzLDAsMCwwLDAsMS40NDNsNS4zNTQsNS4zNTRMOS4xLDIzLjE5LDQuNDY0LDE4LjU1OFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMjkuNywxMi43MjEsMjQuMzQ4LDcuMzY2LDIyLjksOC44MWw0LjYzLDQuNjMyTDIyLjksMTguMDc1bDEuNDQzLDEuNDQzTDI5LjcsMTQuMTY1YTEuMDIxLDEuMDIxLDAsMCwwLDAtMS40NDRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiUHl0aG9uXCI6IHtcblx0XHRjb2xvdXI6IFwiIzM2NzFBMVwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiLTEzMy4yNjhcXFwiIHkxPVxcXCItMjAyLjkxXFxcIiB4Mj1cXFwiLTEzMy4xOThcXFwiIHkyPVxcXCItMjAyLjg0XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDI1MjQzLjA2MSAzODUxOS4xNykgc2NhbGUoMTg5LjM4IDE4OS44MSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMzODdlYjhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzNjY5OTRcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYlxcXCIgeDE9XFxcIi0xMzMuNTc1XFxcIiB5MT1cXFwiLTIwMy4yMDNcXFwiIHgyPVxcXCItMTMzLjQ5NVxcXCIgeTI9XFxcIi0yMDMuMTMzXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDI1MzA5LjA2MSAzODU4My40Mikgc2NhbGUoMTg5LjM4IDE4OS44MSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmUwNTJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmMzMzFcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3B5dGhvbjwvdGl0bGU+PHBhdGggZD1cXFwiTTE1Ljg4NSwyLjFjLTcuMSwwLTYuNjUxLDMuMDctNi42NTEsMy4wN1Y4LjM2aDYuNzUydjFINi41NDVTMiw4LjgsMiwxNi4wMDVzNC4wMTMsNi45MTIsNC4wMTMsNi45MTJIOC4zM1YxOS41NTZzLS4xMy00LjAxMywzLjktNC4wMTNoNi43NjJzMy43NzIuMDYsMy43NzItMy42NTJWNS44cy41NzItMy43MTItNi44NDItMy43MTJoMFpNMTIuMTUzLDQuMjM3YTEuMjE0LDEuMjE0LDAsMSwxLTEuMTgzLDEuMjQ0di0uMDJhMS4yMTQsMS4yMTQsMCwwLDEsMS4yMTQtMS4yMTRoMFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz48cGF0aCBkPVxcXCJNMTYuMDg1LDI5LjkxYzcuMSwwLDYuNjUxLTMuMDgsNi42NTEtMy4wOFYyMy42NUgxNS45ODV2LTFoOS40N1MzMCwyMy4xNTgsMzAsMTUuOTk1cy00LjAxMy02LjkxMi00LjAxMy02LjkxMkgyMy42NFYxMi40cy4xMyw0LjAxMy0zLjksNC4wMTNIMTIuOTc1UzkuMiwxNi4zNTYsOS4yLDIwLjA2OFYyNi4ycy0uNTcyLDMuNzEyLDYuODQyLDMuNzEyaC4wNFptMy43MzItMi4xNDdBMS4yMTQsMS4yMTQsMCwxLDEsMjEsMjYuNTE5di4wM2ExLjIxNCwxLjIxNCwwLDAsMS0xLjIxNCwxLjIxNGguMDNaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2IpXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIjXCIsXG5cdFx0XSxcblx0fSxcblx0XCJRIChrZGIrIGRhdGFiYXNlKVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMxZTc4YjNcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMC4wOTIsMjlWMTkuNjgyQTYuOTUzLDYuOTUzLDAsMCwxLDE3LjcsMjEuNjQ1YTYuNzQzLDYuNzQzLDAsMCwxLTMuMDg5LjcyNEE2LjU1Nyw2LjU1NywwLDAsMSw5LjQxMywyMCwxMS4wODEsMTEuMDgxLDAsMCwxLDcsMTIuNDc1LDEwLjAzMywxMC4wMzMsMCwwLDEsOS4yNjQsNS41LDcuMjUxLDcuMjUxLDAsMCwxLDE0Ljg3NCwzYTYuMjY2LDYuMjY2LDAsMCwxLDMuMi43ODUsNy4zMjksNy4zMjksMCwwLDEsMi40LDIuMzczVjMuNDE5SDI1VjI5Wm0uMTU3LTE2LjU0MmE2LjQ5Miw2LjQ5MiwwLDAsMC0xLjE2LTQuMjMyLDMuNjM0LDMuNjM0LDAsMCwwLTIuOTA1LTEuMzg3LDMuNzQyLDMuNzQyLDAsMCwwLTIuOTc1LDEuNDEzLDYuODgxLDYuODgxLDAsMCwwLTEuMiw0LjQ4NSw2Ljc2Nyw2Ljc2NywwLDAsMCwxLjE1Miw0LjQwNkEzLjU5MywzLjU5MywwLDAsMCwxNi4wMDksMTguNWEzLjc4NiwzLjc4NiwwLDAsMCwyLjk2Ni0xLjUxOEE2Ljg4OSw2Ljg4OSwwLDAsMCwyMC4yNDksMTIuNDU4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFlNzhiM1xcXCIvPlwiLFxuXHR9LFxuXHRcIlEjXCI6IHtcblx0XHRjb2xvdXI6IFwiIzMzMzNjY1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE5LjQ1MSw2LjIxOGgyLjYzOFY4Ljg1NmgyLjYzN1Y2LjIxOGgyLjYzN1Y4Ljg1NkgzMFYxMS41SDI3LjM2NHYyLjYzNkgzMFYxNi43N0gyNy4zNjR2Mi42MzdIMjQuNzI3VjE2Ljc2OUgyMi4wOTFsMCwyLjYzN0gxOS40NTNWMTYuNzY4SDE2LjgxNVYxNC4xMjdoMi42MzhWMTEuNUgxNi44MTVWOC44NTNoMi42MzlabTIuNjM4LDcuOTE0aDIuNjM3VjExLjVIMjIuMDg5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzMzY1xcXCIvPjxwYXRoIGQ9XFxcIk0xNC4wMTgsMjEuNTI0YTExLjQzNiwxMS40MzYsMCwwLDAsMS41NzItNi4xOTIsMTAuODc3LDEwLjg3NywwLDAsMC0xLjg1OC02LjZBNS44ODksNS44ODksMCwwLDAsOC44MDgsNi4xNTNhNS45MjEsNS45MjEsMCwwLDAtNC45NCwyLjU4MUExMC44NDIsMTAuODQyLDAsMCwwLDIsMTUuMzMzYTEwLjg1MywxMC44NTMsMCwwLDAsMS44NjgsNi41OTIsNS45MTgsNS45MTgsMCwwLDAsNC45NDEsMi41ODgsNS43NDMsNS43NDMsMCwwLDAsMy4yNi0uOTg3bDIuMzA2LDIuMzIxLDEuNTc3LTIuNFptLTUuMTctMS4yMTgsMS4xMTcsMS4xMjFhMy4yMjksMy4yMjksMCwwLDEtMS4xNzQuMjE3LDMuMzM1LDMuMzM1LDAsMCwxLTIuODM3LTEuNTkzLDguMTI1LDguMTI1LDAsMCwxLTEuMTgtNC43MTksOC4xLDguMSwwLDAsMSwxLjE4NC00LjcyNCwzLjM3MiwzLjM3MiwwLDAsMSwyLjg3LTEuNTg4LDMuMzEsMy4zMSwwLDAsMSwyLjgxOSwxLjU4NSw4LjE3OCw4LjE3OCwwLDAsMSwxLjE3Miw0LjcyNiw5LjExMyw5LjExMywwLDAsMS0uODMzLDQuMTVsLTEuNTYtMS41NzFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMzNjXFxcIi8+XCIsXG5cdH0sXG5cdFwiUU1MXCI6IHtcblx0XHRjb2xvdXI6IFwiIzQxY2Q1MlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTI3LjMsNUg1Ljg4NkwyLDguOTU4VjI2SDI2LjExNEwzMCwyMi4wNDJWNVpNMTYuOSwyMy4wN2wtMS44MjguODUyTDEzLjUsMjEuMzMxYTMuOTY4LDMuOTY4LDAsMCwxLTEuMDgyLjEwNmMtMS44NDUsMC0zLjEyMy0uNS0zLjg1LTEuNDlhOC4wMyw4LjAzLDAsMCwxLTEuMDgyLTQuNyw4LjM1MSw4LjM1MSwwLDAsMSwxLjEtNC43NzMsNC4zNzksNC4zNzksMCwwLDEsMy44MzMtMS41NjFjMS44MjgsMCwzLjA4Ny41MTUsMy44MzMsMS41NDRhOC4zNTEsOC4zNTEsMCwwLDEsMS4xLDQuNzczLDEwLjgwOSwxMC44MDksMCwwLDEtLjQ1MiwzLjQ0LDMuOSwzLjksMCwwLDEtMS40NzMsMlptNS44NDgtMS42N2EyLjczNSwyLjczNSwwLDAsMS0yLjE2OC0uNjkyQTQuMTkyLDQuMTkyLDAsMCwxLDIwLDE4LjFWMTRIMTlWMTJoMVY5aDJ2M2gydjJIMjJ2My45YTMuOTA3LDMuOTA3LDAsMCwwLC4xNjgsMS40MzdjLjExMi4yMzEuMzkzLjM1NS44Ni4zNTVsMS41MzMtLjA1My4wOTMsMS41NDRBMTIuNTE5LDEyLjUxOSwwLDAsMSwyMi43NDgsMjEuNFpNMTIuNDE2LDEwLjYxNGEyLjQsMi40LDAsMCwwLTIuMjg5LDEuMSw3LjY1Nyw3LjY1NywwLDAsMC0uNiwzLjUxMyw3LjEzMSw3LjEzMSwwLDAsMCwuNiwzLjQ0MkEyLjQ0LDIuNDQsMCwwLDAsMTIuNDMzLDE5LjdhMi40MTcsMi40MTcsMCwwLDAsMi4yODktMS4wMTEsNy4zNDMsNy4zNDMsMCwwLDAsLjU4Ni0zLjQ0Miw3LjY5Miw3LjY5MiwwLDAsMC0uNi0zLjUzMUEyLjQsMi40LDAsMCwwLDEyLjQxNiwxMC42MTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojNDFjZDUyXFxcIi8+XCIsXG5cdH0sXG5cdFwiUlwiOiB7XG5cdFx0Y29sb3VyOiBcIiMyNzZkYzNcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIi0xMzQuODExXFxcIiB5MT1cXFwiLTEwMy4yODRcXFwiIHgyPVxcXCItMTM0Ljc3MlxcXCIgeTI9XFxcIi0xMDMuMzIzXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDcyMS4wOTQsIDAsIDAsIC00ODIuOTM3LCA5NzIxMy41OTUsIC00OTg3NC41MTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjY2JjZWQwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjODQ4MzhiXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCItMTM1LjM3OFxcXCIgeTE9XFxcIi0xMDIuOTg1XFxcIiB4Mj1cXFwiLTEzNS4zMzlcXFwiIHkyPVxcXCItMTAzLjAyNFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgzOTgsIDAsIDAsIC00MDYuMTI0LCA1Mzg5MywgLTQxODEyLjgzNilcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiMyNzZkYzNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMxNjVjYWFcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3I8L3RpdGxlPjxwYXRoIGQ9XFxcIk0xNiwyMy45NTZjLTcuNzMyLDAtMTQtNC4yLTE0LTkuMzc2UzguMjY4LDUuMiwxNiw1LjIsMzAsOS40LDMwLDE0LjU4LDIzLjczMiwyMy45NTYsMTYsMjMuOTU2Wk0xOC4xNDMsOC44N0MxMi4yNjYsOC44Nyw3LjUsMTEuNzQsNy41LDE1LjI4czQuNzY0LDYuNDEsMTAuNjQxLDYuNDEsMTAuMjE0LTEuOTYyLDEwLjIxNC02LjQxUzI0LjAyLDguODcsMTguMTQzLDguODdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTIzLjMyMSwxOS43MjZhMTAuNTQ1LDEwLjU0NSwwLDAsMSwxLjM0LjUsMi41OTEsMi41OTEsMCwwLDEsLjY4LjQ4NSwxLjgzNSwxLjgzNSwwLDAsMSwuMzExLjQ0N2wzLjMzOSw1LjYzLTUuNCwwLTIuNTI0LTQuNzRhNi4xLDYuMSwwLDAsMC0uODM1LTEuMTQ1Ljg3OS44NzksMCwwLDAtLjY0MS0uMjkxSDE4LjMxMXY2LjE3M2wtNC43NzYsMFYxMS4wMjZoOS41OTFTMjcuNSwxMS4xLDI3LjUsMTUuMjYxLDIzLjMyMSwxOS43MjYsMjMuMzIxLDE5LjcyNlptLTIuMDc3LTUuMjgtMi44OTEsMHYyLjY4MWgyLjg5M2ExLjMyMywxLjMyMywwLDAsMCwxLjM0LTEuMzY0QTEuMjQ3LDEuMjQ3LDAsMCwwLDIxLjI0NCwxNC40NDdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2IpXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIjXCIsXG5cdFx0XSxcblx0fSxcblx0XCJSYWNrZXRcIjoge1xuXHRcdGNvbG91cjogXCIjOWYxZDIwXCIsXG5cdFx0aWNvbjogXCI8Y2lyY2xlIGN4PVxcXCIxNlxcXCIgY3k9XFxcIjE2XFxcIiByPVxcXCIxNFxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0yNy4wMTYsMjQuNjQxYTE0LDE0LDAsMCwwLTE1LjgtMjEuOEMxNi45LDUuODIyLDI0LjQxMywxNS41NDksMjcuMDE2LDI0LjY0MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzZTViYTlcXFwiLz48cGF0aCBkPVxcXCJNMTMuOTk1LDEwLjkzYTI0LjMsMjQuMywwLDAsMC03LjIyLTUuNDZBMTQsMTQsMCwwLDAsNS40NjMsMjUuMjE3LDM5LjU2LDM5LjU2LDAsMCwxLDEzLjk5NSwxMC45M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM5ZjFkMjBcXFwiLz48cGF0aCBkPVxcXCJNMTYuNTc1LDE0LjFBMzIuNjQ1LDMyLjY0NSwwLDAsMCw5LjQzLDI4LjM2NWExNC4wMTYsMTQuMDE2LDAsMCwwLDEzLjMtLjA4OUEzOC42NDIsMzguNjQyLDAsMCwwLDE2LjU3NSwxNC4xWlxcXCIgc3R5bGU9XFxcImZpbGw6IzlmMWQyMFxcXCIvPlwiLFxuXHR9LFxuXHRcIlJhem9yIEMjXCI6IHtcblx0XHRjb2xvdXI6IFwiIzM2ODgzMlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIzLjg0NCwyNy42OTJhMTYuMzMyLDE2LjMzMiwwLDAsMS02LjY0NSwxLjNxLTYuMzY0LDAtMTAuMDEzLTMuMjQzYTExLjMsMTEuMywwLDAsMS0zLjY0OS04LjlBMTMuNzE2LDEzLjcxNiwwLDAsMSw3LjMyMiw2Ljk1MSwxMi43MTYsMTIuNzE2LDAsMCwxLDE2LjksMy4wMDhhMTEuNjc2LDExLjY3NiwwLDAsMSw4LjQyNSwzLjAwNiw5Ljk5NCw5Ljk5NCwwLDAsMSwzLjE0Miw3LjUzMywxMC4xODcsMTAuMTg3LDAsMCwxLTIuMzE4LDcuMTE0LDcuNTMyLDcuNTMyLDAsMCwxLTUuODE3LDIuNTQ3LDIuNjEzLDIuNjEzLDAsMCwxLTEuODQ1LS42NDIsMi4zMjMsMi4zMjMsMCwwLDEtLjc2NC0xLjYsNC45LDQuOSwwLDAsMS00LjE0OCwyLjI0Myw0LjYsNC42LDAsMCwxLTMuNTA3LTEuNDc5LDUuNzA2LDUuNzA2LDAsMCwxLTEuMzg0LTQuMDYzLDkuOTEzLDkuOTEzLDAsMCwxLDIuMi02LjM1N3EyLjItMi43NjMsNC44LTIuNzYzYTUuMDYzLDUuMDYzLDAsMCwxLDQuMjU2LDEuNzE2bC4zMTEtMS4zMzhoMi40MDVsLTIuMDgxLDkuMDhhMTAuNzE2LDEwLjcxNiwwLDAsMC0uMzUyLDIuMjQzcTAsLjk3Mi43NDQuOTcyYTQuODE5LDQuODE5LDAsMCwwLDMuODc3LTIuMDQ3LDguOTMsOC45MywwLDAsMCwxLjYyMS01LjY4MSw3Ljk4LDcuOTgsMCwwLDAtMi42NzUtNi4xNzUsOS44ODcsOS44ODcsMCwwLDAtNi45MTktMi40MzJBMTAuNiwxMC42LDAsMCwwLDguNzEzLDguMzUyYTEyLjA2NiwxMi4wNjYsMCwwLDAtMy4yLDguNDk1LDkuNTYxLDkuNTYxLDAsMCwwLDMuMDYsNy41NzNxMy4wNiwyLjcsOC41ODYsMi43YTEzLjc1NywxMy43NTcsMCwwLDAsNS42NzUtMS4wNTRaTTE5LjQ2NiwxMi4yNWEzLjk3NywzLjk3NywwLDAsMC0zLjYtMS43MTZxLTEuODI0LDAtMy4yNjMsMi4yM2E4LjcyNiw4LjcyNiwwLDAsMC0xLjQzOSw0LjgyNHEwLDMuNjM1LDIuOTA1LDMuNjM1QTMuNzcxLDMuNzcxLDAsMCwwLDE2LjcyLDIwLjA0YTYuMzA5LDYuMzA5LDAsMCwwLDEuNy0zLjJaXFxcIiBzdHlsZT1cXFwiZmlsbDojMzY4ODMyXFxcIi8+XCIsXG5cdH0sXG5cdFwiUmVhY3QgSlNYXCI6IHtcblx0XHRjb2xvdXI6IFwiIzAwZDhmZlwiLFxuXHRcdGljb246IFwiPGNpcmNsZSBjeD1cXFwiMTZcXFwiIGN5PVxcXCIxNS45NzRcXFwiIHI9XFxcIjIuNVxcXCIgc3R5bGU9XFxcImZpbGw6IzAwZDhmZlxcXCIvPjxwYXRoIGQ9XFxcIk0xNiwyMS43MDZhMjguMzg1LDI4LjM4NSwwLDAsMS04Ljg4LTEuMiwxMS4zLDExLjMsMCwwLDEtMy42NTctMS45NThBMy41NDMsMy41NDMsMCwwLDEsMiwxNS45NzRjMC0xLjY1MywxLjgxNi0zLjI3Myw0Ljg1OC00LjMzM0EyOC43NTUsMjguNzU1LDAsMCwxLDE2LDEwLjI5M2EyOC42NzQsMjguNjc0LDAsMCwxLDkuMDIyLDEuMzI0LDExLjM3NiwxMS4zNzYsMCwwLDEsMy41MzgsMS44NjZBMy4zOTEsMy4zOTEsMCwwLDEsMzAsMTUuOTc0YzAsMS43MTgtMi4wMywzLjQ1OS01LjMsNC41NDFBMjguOCwyOC44LDAsMCwxLDE2LDIxLjcwNlptMC0xMC4yMTdhMjcuOTQ4LDI3Ljk0OCwwLDAsMC04Ljc0OSwxLjI4MmMtMi44Ljk3Ny00LjA1NSwyLjMxMy00LjA1NSwzLjIsMCwuOTI4LDEuMzQ5LDIuMzg3LDQuMzExLDMuNEEyNy4yMSwyNy4yMSwwLDAsMCwxNiwyMC41MWEyNy42LDI3LjYsMCwwLDAsOC4zMjUtMS4xM0MyNy40LDE4LjM2MSwyOC44LDE2LjksMjguOCwxNS45NzRhMi4zMjcsMi4zMjcsMCwwLDAtMS4wMS0xLjU3MywxMC4xOTQsMTAuMTk0LDAsMCwwLTMuMTYxLTEuNjU0QTI3LjQ2MiwyNy40NjIsMCwwLDAsMTYsMTEuNDg5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwZDhmZlxcXCIvPjxwYXRoIGQ9XFxcIk0xMC4zMiwyOC40NDNhMi42MzksMi42MzksMCwwLDEtMS4zMzYtLjMyOGMtMS40MzItLjgyNi0xLjkyOC0zLjIwOC0xLjMyNy02LjM3M2EyOC43NTUsMjguNzU1LDAsMCwxLDMuNC04LjU5M2gwQTI4LjY3NiwyOC42NzYsMCwwLDEsMTYuNzEsNS45OTVhMTEuMzc2LDExLjM3NiwwLDAsMSwzLjM4NC0yLjEzMywzLjM5MSwzLjM5MSwwLDAsMSwyLjg3OCwwYzEuNDg5Ljg1OCwxLjk4MiwzLjQ4NiwxLjI4Nyw2Ljg1OWEyOC44MDYsMjguODA2LDAsMCwxLTMuMzE2LDguMTMzLDI4LjM4NSwyOC4zODUsMCwwLDEtNS40NzYsNy4wOTMsMTEuMywxMS4zLDAsMCwxLTMuNTIzLDIuMTg5QTQuOTI2LDQuOTI2LDAsMCwxLDEwLjMyLDI4LjQ0M1ptMS43NzMtMTQuN2EyNy45NDgsMjcuOTQ4LDAsMCwwLTMuMjYsOC4yMTljLS41NTMsMi45MTUtLjAyMiw0LjY2OC43NSw1LjExNC44LjQ2MywyLjc0Mi4wMjQsNS4xLTIuMDM2YTI3LjIwOSwyNy4yMDksMCwwLDAsNS4yMjctNi43OSwyNy42LDI3LjYsMCwwLDAsMy4xODEtNy43NzZjLjY1NC0zLjE3NS4wODktNS4xMTktLjcxMy01LjU4MWEyLjMyNywyLjMyNywwLDAsMC0xLjg2OC4wODlBMTAuMTk0LDEwLjE5NCwwLDAsMCwxNy41LDYuOWEyNy40NjQsMjcuNDY0LDAsMCwwLTUuNCw2Ljg0OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMGQ4ZmZcXFwiLz48cGF0aCBkPVxcXCJNMjEuNjc3LDI4LjQ1NmMtMS4zNTUsMC0zLjA3Ni0uODItNC44NjgtMi4zNjFhMjguNzU2LDI4Ljc1NiwwLDAsMS01Ljc0Ny03LjIzN2gwYTI4LjY3NiwyOC42NzYsMCwwLDEtMy4zNzQtOC40NzEsMTEuMzc2LDExLjM3NiwwLDAsMS0uMTU4LTRBMy4zOTEsMy4zOTEsMCwwLDEsOC45NjQsMy45YzEuNDg3LS44NjEsNC4wMS4wMjQsNi41ODUsMi4zMWEyOC44LDI4LjgsMCwwLDEsNS4zOSw2LjkzNCwyOC4zODQsMjguMzg0LDAsMCwxLDMuNDEsOC4yODcsMTEuMywxMS4zLDAsMCwxLC4xMzcsNC4xNDYsMy41NDMsMy41NDMsMCwwLDEtMS40OTQsMi41NTVBMi41OSwyLjU5LDAsMCwxLDIxLjY3NywyOC40NTZabS05LjU4LTEwLjJhMjcuOTQ5LDI3Ljk0OSwwLDAsMCw1LjQ5Miw2LjkyOWMyLjI0OSwxLjkzNSw0LjAzMywyLjM1MSw0LjgsMS45LjgtLjQ2NSwxLjM5LTIuMzYzLjc4Mi01LjQzNEEyNy4yMTIsMjcuMjEyLDAsMCwwLDE5LjksMTMuNzQsMjcuNiwyNy42LDAsMCwwLDE0Ljc1NSw3LjFjLTIuNDI0LTIuMTUyLTQuMzktMi42MzMtNS4xOTEtMi4xNjlhMi4zMjcsMi4zMjcsMCwwLDAtLjg1NSwxLjY2MiwxMC4xOTQsMTAuMTk0LDAsMCwwLC4xNTMsMy41NjUsMjcuNDY1LDI3LjQ2NSwwLDAsMCwzLjIzNiw4LjFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDBkOGZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiUmVhY3QgVFNYXCI6IHtcblx0XHRjb2xvdXI6IFwiIzAwN2FjY1wiLFxuXHRcdGljb246IFwiPGNpcmNsZSBjeD1cXFwiMTZcXFwiIGN5PVxcXCIxNS45NzRcXFwiIHI9XFxcIjIuNVxcXCIgc3R5bGU9XFxcImZpbGw6IzAwN2FjY1xcXCIvPjxwYXRoIGQ9XFxcIk0xNiwyMS43MDZhMjguMzg1LDI4LjM4NSwwLDAsMS04Ljg4LTEuMiwxMS4zLDExLjMsMCwwLDEtMy42NTctMS45NThBMy41NDMsMy41NDMsMCwwLDEsMiwxNS45NzRjMC0xLjY1MywxLjgxNi0zLjI3Myw0Ljg1OC00LjMzM0EyOC43NTUsMjguNzU1LDAsMCwxLDE2LDEwLjI5M2EyOC42NzQsMjguNjc0LDAsMCwxLDkuMDIyLDEuMzI0LDExLjM3NiwxMS4zNzYsMCwwLDEsMy41MzgsMS44NjZBMy4zOTEsMy4zOTEsMCwwLDEsMzAsMTUuOTc0YzAsMS43MTgtMi4wMywzLjQ1OS01LjMsNC41NDFBMjguOCwyOC44LDAsMCwxLDE2LDIxLjcwNlptMC0xMC4yMTdhMjcuOTQ4LDI3Ljk0OCwwLDAsMC04Ljc0OSwxLjI4MmMtMi44Ljk3Ny00LjA1NSwyLjMxMy00LjA1NSwzLjIsMCwuOTI4LDEuMzQ5LDIuMzg3LDQuMzExLDMuNEEyNy4yMSwyNy4yMSwwLDAsMCwxNiwyMC41MWEyNy42LDI3LjYsMCwwLDAsOC4zMjUtMS4xM0MyNy40LDE4LjM2MSwyOC44LDE2LjksMjguOCwxNS45NzRhMi4zMjcsMi4zMjcsMCwwLDAtMS4wMS0xLjU3MywxMC4xOTQsMTAuMTk0LDAsMCwwLTMuMTYxLTEuNjU0QTI3LjQ2MiwyNy40NjIsMCwwLDAsMTYsMTEuNDg5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwN2FjY1xcXCIvPjxwYXRoIGQ9XFxcIk0xMC4zMiwyOC40NDNhMi42MzksMi42MzksMCwwLDEtMS4zMzYtLjMyOGMtMS40MzItLjgyNi0xLjkyOC0zLjIwOC0xLjMyNy02LjM3M2EyOC43NTUsMjguNzU1LDAsMCwxLDMuNC04LjU5M2gwQTI4LjY3NiwyOC42NzYsMCwwLDEsMTYuNzEsNS45OTVhMTEuMzc2LDExLjM3NiwwLDAsMSwzLjM4NC0yLjEzMywzLjM5MSwzLjM5MSwwLDAsMSwyLjg3OCwwYzEuNDg5Ljg1OCwxLjk4MiwzLjQ4NiwxLjI4Nyw2Ljg1OWEyOC44MDYsMjguODA2LDAsMCwxLTMuMzE2LDguMTMzLDI4LjM4NSwyOC4zODUsMCwwLDEtNS40NzYsNy4wOTMsMTEuMywxMS4zLDAsMCwxLTMuNTIzLDIuMTg5QTQuOTI2LDQuOTI2LDAsMCwxLDEwLjMyLDI4LjQ0M1ptMS43NzMtMTQuN2EyNy45NDgsMjcuOTQ4LDAsMCwwLTMuMjYsOC4yMTljLS41NTMsMi45MTUtLjAyMiw0LjY2OC43NSw1LjExNC44LjQ2MywyLjc0Mi4wMjQsNS4xLTIuMDM2YTI3LjIwOSwyNy4yMDksMCwwLDAsNS4yMjctNi43OSwyNy42LDI3LjYsMCwwLDAsMy4xODEtNy43NzZjLjY1NC0zLjE3NS4wODktNS4xMTktLjcxMy01LjU4MWEyLjMyNywyLjMyNywwLDAsMC0xLjg2OC4wODlBMTAuMTk0LDEwLjE5NCwwLDAsMCwxNy41LDYuOWEyNy40NjQsMjcuNDY0LDAsMCwwLTUuNCw2Ljg0OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDdhY2NcXFwiLz48cGF0aCBkPVxcXCJNMjEuNjc3LDI4LjQ1NmMtMS4zNTUsMC0zLjA3Ni0uODItNC44NjgtMi4zNjFhMjguNzU2LDI4Ljc1NiwwLDAsMS01Ljc0Ny03LjIzN2gwYTI4LjY3NiwyOC42NzYsMCwwLDEtMy4zNzQtOC40NzEsMTEuMzc2LDExLjM3NiwwLDAsMS0uMTU4LTRBMy4zOTEsMy4zOTEsMCwwLDEsOC45NjQsMy45YzEuNDg3LS44NjEsNC4wMS4wMjQsNi41ODUsMi4zMWEyOC44LDI4LjgsMCwwLDEsNS4zOSw2LjkzNCwyOC4zODQsMjguMzg0LDAsMCwxLDMuNDEsOC4yODcsMTEuMywxMS4zLDAsMCwxLC4xMzcsNC4xNDYsMy41NDMsMy41NDMsMCwwLDEtMS40OTQsMi41NTVBMi41OSwyLjU5LDAsMCwxLDIxLjY3NywyOC40NTZabS05LjU4LTEwLjJhMjcuOTQ5LDI3Ljk0OSwwLDAsMCw1LjQ5Miw2LjkyOWMyLjI0OSwxLjkzNSw0LjAzMywyLjM1MSw0LjgsMS45LjgtLjQ2NSwxLjM5LTIuMzYzLjc4Mi01LjQzNEEyNy4yMTIsMjcuMjEyLDAsMCwwLDE5LjksMTMuNzQsMjcuNiwyNy42LDAsMCwwLDE0Ljc1NSw3LjFjLTIuNDI0LTIuMTUyLTQuMzktMi42MzMtNS4xOTEtMi4xNjlhMi4zMjcsMi4zMjcsMCwwLDAtLjg1NSwxLjY2MiwxMC4xOTQsMTAuMTk0LDAsMCwwLC4xNTMsMy41NjUsMjcuNDY1LDI3LjQ2NSwwLDAsMCwzLjIzNiw4LjFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA3YWNjXFxcIi8+XCIsXG5cdH0sXG5cdFwiUmVhc29uXCI6IHtcblx0XHRjb2xvdXI6IFwiI2RkNGIzOVwiLFxuXHRcdGljb246IFwiPHBvbHlsaW5lIHBvaW50cz1cXFwiMiAyIDMwIDIgMzAgMzAgMiAzMCAyIDJcXFwiIHN0eWxlPVxcXCJmaWxsOiNkZDRiMzlcXFwiLz48cGF0aCBkPVxcXCJNOS4wNTEsMTcuNTI3cTIuNTM3LDAsNS4wNzIsMEE0Ljk0Nyw0Ljk0NywwLDAsMSwxNy4xLDE4LjVhMy4yOSwzLjI5LDAsMCwxLDEuMTI4LDIuMjY3LDQuMTE3LDQuMTE3LDAsMCwxLS43NzgsMy4wMjIsMy42LDMuNiwwLDAsMS0xLjEzNy45MDVsMi4yNDcsMy41NDktMy4wNjEsMC0xLjYtMy4wNDMtMi4xNTQsMCwwLDMuMDMySDkuMDUxVjE3LjUyN20yLjY5LDIuMTI4LDAsMy40MzgsMS45ODksMGEyLjE4NCwyLjE4NCwwLDAsMCwxLjQ2OC0uNDUyLDEuODE0LDEuODE0LDAsMCwwLC40ODItMS41NDQsMS40NjksMS40NjksMCwwLDAtLjcwNS0xLjE4LDIuNzY4LDIuNzY4LDAsMCwwLTEuNDM3LS4yNjlDMTIuOTQsMTkuNjU0LDExLjc0MSwxOS42NTUsMTEuNzQxLDE5LjY1NVptOC4zODQtMi4xM2g4LjM1djIuMTNoLTUuNjZWMjEuOGw1LjExLDB2Mi4xMTlIMjIuODJWMjYuMWg1LjgyNHYyLjE0MkgyMC4xMjVWMTcuNTI1WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlJlZ29cIjoge1xuXHRcdGNvbG91cjogXCIjNzg5MjlhXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImFcXFwiPjxwYXRoIGQ9XFxcIk03LjA1NSwxNi4yNDFjMy40MTUtMTAuMjIsMTQuNzU5LTkuNDczLDE3LjkyNCwwbC4xLDUuODkzYTE1LjU2MiwxNS41NjIsMCwwLDAtOS4wMzYsNy4yNDZBMTcuNjQxLDE3LjY0MSwwLDAsMCw3LjAzLDIyLjM0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmVcXFwiLz48L2NsaXBQYXRoPjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3JlZ288L3RpdGxlPjxwYXRoIGQ9XFxcIk03LjAzLDE2LjI0MWwyLjYtNC41NTljLTIuNDE4LS4zMTItMi42MDYtMy40MzEtLjgtOS4wNjJDMy44MDksOC44NTMsMi40MiwxMC4yMjgsNy4wMywxNi4yNDFaXFxcIiBzdHlsZT1cXFwiZmlsbDojYmZiZmJmO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBhdGggZD1cXFwiTTI0Ljk3LDE2LjI0MWwtMi41OTUtNC41NTljMi40MTgtLjMxMiwyLjYwNi0zLjQzMS44LTkuMDYyQzI4LjE5MSw4Ljg1MywyOS41OCwxMC4yMjgsMjQuOTcsMTYuMjQxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2JmYmZiZjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwYXRoIGQ9XFxcIk03LjA1NSwxNi4yNDFjMy40MTUtMTAuMjIsMTQuNzU5LTkuNDczLDE3LjkyNCwwbC4xLDUuODkzYTE1LjU2MiwxNS41NjIsMCwwLDAtOS4wMzYsNy4yNDZBMTcuNjQxLDE3LjY0MSwwLDAsMCw3LjAzLDIyLjM0NlpcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmVcXFwiLz48ZyBzdHlsZT1cXFwiY2xpcC1wYXRoOnVybCgjYSlcXFwiPjxyZWN0IHg9XFxcIjE2LjA1M1xcXCIgeT1cXFwiNy45NjJcXFwiIHdpZHRoPVxcXCI5LjU0OVxcXCIgaGVpZ2h0PVxcXCIyMS44OTlcXFwiIHN0eWxlPVxcXCJmaWxsOiM1MzYzNjdcXFwiLz48cmVjdCB4PVxcXCI1LjMyMlxcXCIgeT1cXFwiNy45NjJcXFwiIHdpZHRoPVxcXCIxMC43MzJcXFwiIGhlaWdodD1cXFwiMjEuODk5XFxcIiBzdHlsZT1cXFwiZmlsbDojNzg5MjlhXFxcIi8+PC9nPjxjaXJjbGUgY3g9XFxcIjE2LjA0XFxcIiBjeT1cXFwiMTYuMjQxXFxcIiByPVxcXCIxLjE2NlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlJlU2NyaXB0XCI6IHtcblx0XHRjb2xvdXI6IFwiI2U4NGY0ZlwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiMTEuNDIxXFxcIiB5MT1cXFwiLTIyMS43MDVcXFwiIHgyPVxcXCIyMS41MDlcXFwiIHkyPVxcXCItMjQ4Ljc5MlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxLCAwLCAwLCAtMSwgMCwgLTIxOClcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNlODRmNGZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNDA5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZGI0NjQ2XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5OVxcXCIgc3RvcC1jb2xvcj1cXFwiI2NiMzkzOVxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfcmVzY3JpcHQ8L3RpdGxlPjxwYXRoIGQ9XFxcIk0yLDEwLjk3YzAtMy43MzgsMC01LjYuOTUyLTYuOTE2YTQuOTkyLDQuOTkyLDAsMCwxLDEuMS0xLjFDNS4zNjQsMiw3LjIzMywyLDEwLjk2OSwySDIxLjAzYzMuNzM4LDAsNS42MDUsMCw2LjkxNi45NTFhNC45OTIsNC45OTIsMCwwLDEsMS4xLDEuMUMzMCw1LjM2NCwzMCw3LjIzMiwzMCwxMC45N1YyMS4wM2MwLDMuNzM3LDAsNS42MDUtLjk1Miw2LjkxNmE0Ljk2Niw0Ljk2NiwwLDAsMS0xLjEsMS4xQzI2LjYzNiwzMCwyNC43NjgsMzAsMjEuMDMsMzBIMTAuOTY5Yy0zLjczNiwwLTUuNiwwLTYuOTE1LS45NTJhNC45NjYsNC45NjYsMCwwLDEtMS4xLTEuMUMyLDI2LjYzNiwyLDI0Ljc2NywyLDIxLjAzWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC45NzQsMTUuNTU0YTMuMzI1LDMuMzI1LDAsMSwwLTMuMzI0LTMuMzI1QTMuMzI1LDMuMzI1LDAsMCwwLDIwLjk3NCwxNS41NTRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTkuMzE2LDExLjgwOWE0LjY3Niw0LjY3NiwwLDAsMSwuMjA2LTEuOTg3QTEuODg2LDEuODg2LDAsMCwxLDEwLjM0NSw5YTQuNyw0LjcsMCwwLDEsMS45ODctLjIwNWgyLjY0VjIxLjA0NWE0LjY4Niw0LjY4NiwwLDAsMS0uMTQ0LDEuNjY0LDEuODkyLDEuODkyLDAsMCwxLTEuMDIsMS4wMiw0LjcyLDQuNzIsMCwwLDEtMS42NjQuMTQzLDQuNzE3LDQuNzE3LDAsMCwxLTEuNjY0LS4xNDMsMS44OTIsMS44OTIsMCwwLDEtMS4wMi0xLjAyLDQuNzIsNC43MiwwLDAsMS0uMTQzLTEuNjY0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcInJlU1QgKHJlU3RydWN0dXJlZFRleHQpXCI6IHtcblx0XHRjb2xvdXI6IFwiI2NlM2YzMVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE2LDMwQTEzLjg1OSwxMy44NTksMCwwLDEsMi4yODYsMTYsMTQuMTQ5LDE0LjE0OSwwLDAsMSw2LjMsNi4xLDEzLjUxNywxMy41MTcsMCwwLDEsMjUuNyw2LjEsMTQuMTQ5LDE0LjE0OSwwLDAsMSwyOS43MTQsMTYsMTMuODU5LDEzLjg1OSwwLDAsMSwxNiwzMFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjZTNmMzFcXFwiLz48cGF0aCBkPVxcXCJNMTEuODY5LDIzLjAxNWgtLjRhNC4yNjMsNC4yNjMsMCwwLDEtMS4wNDgtLjExMywxLjM4NywxLjM4NywwLDAsMS0uNzY3LS41NDgsMi4yLDIuMiwwLDAsMS0uNDA5LTEuMDI2QTEzLjI4LDEzLjI4LDAsMCwxLDkuMTU5LDE5LjZhMTIuNzgsMTIuNzgsMCwwLDAtLjA4LTEuNjg3LDEuNzczLDEuNzczLDAsMCwwLS40MDUtLjkyNCwxLjMyNSwxLjMyNSwwLDAsMC0xLjAyNi0uMzkxVjE1LjRhMS4zMjUsMS4zMjUsMCwwLDAsMS4wMjYtLjM5MSwxLjc3MywxLjc3MywwLDAsMCwuNDA1LS45MjQsMTIuNzgsMTIuNzgsMCwwLDAsLjA4LTEuNjg3LDEzLjI4LDEzLjI4LDAsMCwxLC4wODQtMS43MzEsMi4yLDIuMiwwLDAsMSwuNDA5LTEuMDI2LDEuMzg3LDEuMzg3LDAsMCwxLC43NjctLjU0OCw0LjI2Myw0LjI2MywwLDAsMSwxLjA0OC0uMTEzaC40djEuMTRoLS4yMjZxLS43NiwwLS45MzEuNGE3LjcyLDcuNzIsMCwwLDAtLjE3MiwyLjE3LDQuODc2LDQuODc2LDAsMCwxLS40MTYsMi4zMTZBMi4xMTcsMi4xMTcsMCwwLDEsOC44NTksMTZhMi4wODksMi4wODksMCwwLDEsMS4yNjQuOTg2QTQuODc2LDQuODc2LDAsMCwxLDEwLjU0LDE5LjNhNy43Miw3LjcyLDAsMCwwLC4xNzIsMi4xN3EuMTcyLjQuOTMxLjRoLjIyNlptMS42LTMuMTQxaDEuMDM1VjE2LjQyaDEuNDU5bDEuOTcsMy40NTRoMS4xODRMMTcuMDQsMTYuMzA4YTIuMjQzLDIuMjQzLDAsMCwwLDEuODMzLTIuMzE5YzAtMS43LTEuMi0yLjI5NC0yLjg1NS0yLjI5NEgxMy40NzRabTEuMDM1LTQuM1YxMi41M2gxLjM1OWMxLjI3MiwwLDEuOTcuMzg2LDEuOTcsMS40NTlzLS43LDEuNTgzLTEuOTcsMS41ODNabTUuNTU3LTYuNTkxaC40YTQuMjYzLDQuMjYzLDAsMCwxLDEuMDQ4LjExMywxLjM4NywxLjM4NywwLDAsMSwuNzY3LjU0OCwyLjIsMi4yLDAsMCwxLC40MDksMS4wMjYsMTMuMjgsMTMuMjgsMCwwLDEsLjA4NCwxLjczMSwxMi43OCwxMi43OCwwLDAsMCwuMDgsMS42ODcsMS43NzMsMS43NzMsMCwwLDAsLjQwNS45MjQsMS4zMjUsMS4zMjUsMCwwLDAsMS4wMjYuMzkxdjEuMTkxYTEuMzI1LDEuMzI1LDAsMCwwLTEuMDI2LjM5MSwxLjc3MywxLjc3MywwLDAsMC0uNDA1LjkyNCwxMi43OCwxMi43OCwwLDAsMC0uMDgsMS42ODcsMTMuMjgsMTMuMjgsMCwwLDEtLjA4NCwxLjczMSwyLjIsMi4yLDAsMCwxLS40MDksMS4wMjYsMS4zODcsMS4zODcsMCwwLDEtLjc2Ny41NDgsNC4yNjMsNC4yNjMsMCwwLDEtMS4wNDguMTEzaC0uNHYtMS4xNGguMjI2cS43NiwwLC45MzEtLjRBNy43Miw3LjcyLDAsMCwwLDIxLjQsMTkuM2E0Ljg3Niw0Ljg3NiwwLDAsMSwuNDE2LTIuMzE2QTIuMDg5LDIuMDg5LDAsMCwxLDIzLjA3NSwxNmEyLjExNywyLjExNywwLDAsMS0xLjI2NC0uOTk0LDQuODc2LDQuODc2LDAsMCwxLS40MTYtMi4zMTYsNy43Miw3LjcyLDAsMCwwLS4xNzItMi4xN3EtLjE3Mi0uNC0uOTMxLS40aC0uMjI2WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlJvYm90IEZyYW1ld29ya1wiOiB7XG5cdFx0aWNvbjogXCI8Y2lyY2xlIGN4PVxcXCIxNlxcXCIgY3k9XFxcIjE2XFxcIiByPVxcXCIxNFxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0xMC4zODcsMTQuNmEyLjcyNywyLjcyNywwLDAsMSw1LjQ1MywwLC45OS45OSwwLDEsMS0xLjk4LDAsLjc0Ni43NDYsMCwwLDAtMS40OTIsMCwuOTkuOTksMCwxLDEtMS45OCwwbTExLjMsNC41ODZhLjk5MS45OTEsMCwwLDEtLjk5Mi45OTJIMTEuNTA4YS45OTIuOTkyLDAsMCwxLDAtMS45ODRoOS4xODRhLjk5NC45OTQsMCwwLDEsLjk5Mi45OTJNMTcuMzkxLDE1LjE2YS45OTIuOTkyLDAsMCwxLC4yNy0xLjM3NWwyLjI5My0xLjU1MWEuOTg5Ljk4OSwwLDEsMSwxLjEwOSwxLjYzN2wtMi4zLDEuNTUxYS45NjUuOTY1LDAsMCwxLS41NTEuMTcyLjk5NC45OTQsMCwwLDEtLjgyNC0uNDM0bTYuMjg5LDYuMDk0YS43MDcuNzA3LDAsMCwxLS4yMDcuNWwtMS43MDcsMS43MDdhLjcwNy43MDcsMCwwLDEtLjUuMjA3SDEwLjhhLjcwNy43MDcsMCwwLDEtLjUtLjIwN0w4LjYsMjEuNzU0YS43MDcuNzA3LDAsMCwxLS4yMDctLjVWMTAuOGEuNzA3LjcwNywwLDAsMSwuMjA3LS41TDEwLjMsOC41OTRhLjcwNy43MDcsMCwwLDEsLjUtLjIwN0gyMS4yNjZhLjcwNy43MDcsMCwwLDEsLjUuMjA3TDIzLjQ3MywxMC4zYS43MDcuNzA3LDAsMCwxLC4yMDcuNVpNMjUuMTI5LDkuMTYsMjIuOSw2LjkzQTEuODA3LDEuODA3LDAsMCwwLDIxLjYyOSw2LjRIMTAuNDM4YTEuODA3LDEuODA3LDAsMCwwLTEuMjczLjUyN0w2LjkzOCw5LjE2YTEuOCwxLjgsMCwwLDAtLjUyNywxLjI3VjIxLjYyMWExLjgsMS44LDAsMCwwLC41MjcsMS4yNzNsMi4yMjcsMi4yM2ExLjgxLDEuODEsMCwwLDAsMS4yNzMuNTIzSDIxLjYyOWExLjgsMS44LDAsMCwwLDEuMjczLS41MjNsMi4yMjctMi4yM2ExLjc4NCwxLjc4NCwwLDAsMCwuNTI3LTEuMjczVjEwLjQzNGExLjc4NCwxLjc4NCwwLDAsMC0uNTI3LTEuMjczXFxcIi8+XCIsXG5cdH0sXG5cdFwiUnVieVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNiMzEzMDFcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIi0yMzUuOTU3XFxcIiB5MT1cXFwiLTMwOC41NzlcXFwiIHgyPVxcXCItMjM1Ljk4NlxcXCIgeTI9XFxcIi0zMDguNTI3XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDIwMi45MzUsIDAsIDAsIC0yMDIuNzgsIDQ3OTEwLjQ2MSwgLTYyNTQxLjE2KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZiNzY1NVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC40MVxcXCIgc3RvcC1jb2xvcj1cXFwiI2U0MmIxZVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiIzkwMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzkwMFxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiLTIzNS41NzFcXFwiIHkxPVxcXCItMzA5LjA4N1xcXCIgeDI9XFxcIi0yMzUuNjk3XFxcIiB5Mj1cXFwiLTMwOS4wNDFcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoNjAuMzA4LCAwLCAwLCAtMTExLjc3OCwgMTQyMzYuMzUxLCAtMzQ1MjUuMzk1KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzg3MTEwMVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiIzkxMTIwOVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzkxMTIwOVxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJjXFxcIiB4MT1cXFwiLTIzNS44OTZcXFwiIHkxPVxcXCItMzEzLjM2MlxcXCIgeDI9XFxcIi0yMzUuOTM3XFxcIiB5Mj1cXFwiLTMxMy4xMjlcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMTg4LjMyLCAwLCAwLCAtMjEuOTg2LCA0NDQ0Ny4zMDIsIC02ODU2Ljg4MilcXFwiIHhsaW5rOmhyZWY9XFxcIiNiXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJkXFxcIiB4MT1cXFwiLTIzMy41MTVcXFwiIHkxPVxcXCItMzA5LjA4MlxcXCIgeDI9XFxcIi0yMzMuNDk3XFxcIiB5Mj1cXFwiLTMwOS4xNjFcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoNjUuMjIyLCAwLCAwLCAtOTcuMSwgMTUyMzcuODAyLCAtMjk5OTEuODE0KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yM1xcXCIgc3RvcC1jb2xvcj1cXFwiI2U1NzI1MlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC40NlxcXCIgc3RvcC1jb2xvcj1cXFwiI2RlM2IyMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E2MDAwM1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E2MDAwM1xcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJlXFxcIiB4MT1cXFwiLTIzNS4zMTRcXFwiIHkxPVxcXCItMzA5LjUzNFxcXCIgeDI9XFxcIi0yMzUuMzFcXFwiIHkyPVxcXCItMzA5LjYwN1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxMDUuMzIsIDAsIDAsIC0xMDYuODI1LCAyNDc5OC45MjUsIC0zMzA1My4xNTIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjIzXFxcIiBzdG9wLWNvbG9yPVxcXCIjZTQ3MTRlXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU2XFxcIiBzdG9wLWNvbG9yPVxcXCIjYmUxYTBkXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjYTgwZDAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjYTgwZDAwXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImZcXFwiIHgxPVxcXCItMjM1Ljg4MlxcXCIgeTE9XFxcIi0zMTEuODUxXFxcIiB4Mj1cXFwiLTIzNS44NjlcXFwiIHkyPVxcXCItMzExLjkzNVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCg5NC4zMjEsIDAsIDAsIC02Ni40MTgsIDIyMjcxLjQ5OSwgLTIwNzA3LjAwNClcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMThcXFwiIHN0b3AtY29sb3I9XFxcIiNlNDYzNDJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNFxcXCIgc3RvcC1jb2xvcj1cXFwiI2M4MjQxMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E4MGQwMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E4MGQwMFxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJnXFxcIiB4MT1cXFwiLTIzNS40MTJcXFwiIHkxPVxcXCItMzIxLjA3NFxcXCIgeDI9XFxcIi0yMzUuMzMzXFxcIiB5Mj1cXFwiLTMyMC45NThcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoNzAuNzY3LCAwLCAwLCAtMjQuMzAxLCAxNjY3OC4xMTYsIC03Nzk4LjY0NylcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNTRcXFwiIHN0b3AtY29sb3I9XFxcIiNjODFmMTFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOTlcXFwiIHN0b3AtY29sb3I9XFxcIiNiZjA5MDVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNiZjA5MDVcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiaFxcXCIgeDE9XFxcIi0yMjMuODIxXFxcIiB5MT1cXFwiLTMxMC4xMTZcXFwiIHgyPVxcXCItMjIzLjc5NlxcXCIgeTI9XFxcIi0zMTAuMThcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMTguMTc3LCAwLCAwLCAtNzIuNjQ1LCA0MDcxLjAxNywgLTIyNTEwLjIzMylcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzFcXFwiIHN0b3AtY29sb3I9XFxcIiNkZTQwMjRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOTlcXFwiIHN0b3AtY29sb3I9XFxcIiNiZjE5MGJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNiZjE5MGJcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiaVxcXCIgeDE9XFxcIi0yMzUuNTYxXFxcIiB5MT1cXFwiLTMwOS4yNThcXFwiIHgyPVxcXCItMjM1LjQyNFxcXCIgeTI9XFxcIi0zMDkuMTE2XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDE1OC4xNjIsIDAsIDAsIC0xNTcuOTM3LCAzNzI1Ni4zMTMsIC00ODgxOS4zODIpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjYmQwMDEyXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjA3XFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjE3XFxcIiBzdG9wLWNvbG9yPVxcXCIjZmZmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjI3XFxcIiBzdG9wLWNvbG9yPVxcXCIjYzgyZjFjXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjMzXFxcIiBzdG9wLWNvbG9yPVxcXCIjODIwYzAxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQ2XFxcIiBzdG9wLWNvbG9yPVxcXCIjYTMxNjAxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjcyXFxcIiBzdG9wLWNvbG9yPVxcXCIjYjMxMzAxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZTgyNjA5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZTgyNjA5XFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImpcXFwiIHgxPVxcXCItMjM1LjQyNFxcXCIgeTE9XFxcIi0zMDkuMTQzXFxcIiB4Mj1cXFwiLTIzNS40NzZcXFwiIHkyPVxcXCItMzA5LjEyNlxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgxMjcuMDc0LCAwLCAwLCAtOTcuNDA5LCAyOTkzMi4yMjksIC0zMDA4Ni45NDcpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjOGMwYzAxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU0XFxcIiBzdG9wLWNvbG9yPVxcXCIjOTkwYzAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjYTgwZDBlXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjYTgwZDBlXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImtcXFwiIHgxPVxcXCItMjM1LjgzOVxcXCIgeTE9XFxcIi0zMDkuNjA0XFxcIiB4Mj1cXFwiLTIzNS45MDFcXFwiIHkyPVxcXCItMzA5LjU1NVxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCg5NC4wMTEsIDAsIDAsIC0xMDUuNjAzLCAyMjE5OC43NDMsIC0zMjY3Ni44NTYpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjN2UxMTBiXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjOWUwYzAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjOWUwYzAwXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImxcXFwiIHgxPVxcXCItMjM1Ljg1NFxcXCIgeTE9XFxcIi0zMTEuMjRcXFwiIHgyPVxcXCItMjM1Ljg5MVxcXCIgeTI9XFxcIi0zMTEuMjAyXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDc5LjcwMiwgMCwgMCwgLTgxLjc5MSwgMTg4MjcuMzk3LCAtMjU0NDcuOTA1KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzc5MTMwZFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiIzllMTIwYlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzllMTIwYlxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJtXFxcIiBjeD1cXFwiLTIzNS44ODJcXFwiIGN5PVxcXCItMzEyLjU0M1xcXCIgcj1cXFwiMC4wNzZcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoOTMuMTEzLCAwLCAwLCAtNDguNjU1LCAyMTk4Ni4wNzMsIC0xNTE5My42MSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNhODBkMDBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOTlcXFwiIHN0b3AtY29sb3I9XFxcIiM3ZTBlMDhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiM3ZTBlMDhcXFwiLz48L3JhZGlhbEdyYWRpZW50PjxyYWRpYWxHcmFkaWVudCBpZD1cXFwiblxcXCIgY3g9XFxcIi0yMzUuMjgyXFxcIiBjeT1cXFwiLTMwOS43MDRcXFwiIHI9XFxcIjAuMDk3XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDk3LjQzNCwgMCwgMCwgLTc1Ljg0OCwgMjI5MzcuMDU3LCAtMjM0NjcuODQpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjYTMwYzAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjODAwZTA4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjODAwZTA4XFxcIi8+PC9yYWRpYWxHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcIm9cXFwiIHgxPVxcXCItMjMxLjI0MVxcXCIgeTE9XFxcIi0zMDkuNDM1XFxcIiB4Mj1cXFwiLTIzMS4yOTlcXFwiIHkyPVxcXCItMzA5LjMzN1xcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCg0MC4xMzcsIDAsIDAsIC04MS4xNDMsIDkyODYuOTk4LCAtMjUwNzguNTg5KVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzhiMjExNFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC40M1xcXCIgc3RvcC1jb2xvcj1cXFwiIzllMTAwYVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC45OVxcXCIgc3RvcC1jb2xvcj1cXFwiI2IzMTAwY1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2IzMTAwY1xcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJwXFxcIiB4MT1cXFwiLTIzNS44OThcXFwiIHkxPVxcXCItMzE3LjQ2NlxcXCIgeDI9XFxcIi0yMzUuODMxXFxcIiB5Mj1cXFwiLTMxNy41MzdcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoNzguMDk5LCAwLCAwLCAtMzIuNjI0LCAxODQ0Ny4zNjEsIC0xMDM1My41NTMpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjYjMxMDAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQ0XFxcIiBzdG9wLWNvbG9yPVxcXCIjOTEwZjA4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjNzkxYzEyXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNzkxYzEyXFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9ydWJ5PC90aXRsZT48cGF0aCBkPVxcXCJNMjMuNjkzLDIwLjQ2OSw3LjcwNywyOS45NjFsMjAuNy0xLjRMMzAsNy42ODVaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHBhdGggZD1cXFwiTTI4LjQ0LDI4LjU0MiwyNi42NjEsMTYuMjYzbC00Ljg0Niw2LjRaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2IpXFxcIi8+PHBhdGggZD1cXFwiTTI4LjQ2NCwyOC41NDIsMTUuNDMsMjcuNTE5LDcuNzc2LDI5LjkzNFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYylcXFwiLz48cGF0aCBkPVxcXCJNNy43OTQsMjkuOTM3LDExLjA1LDE5LjI3LDMuODg1LDIwLjhaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTIxLjgxMywyMi43bC0zLTExLjczNUwxMC4yNDMsMTlaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2UpXFxcIi8+PHBhdGggZD1cXFwiTTI5LjMyLDExLjEyN2wtOC4xLTYuNjE5LTIuMjU3LDcuM1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZilcXFwiLz48cGF0aCBkPVxcXCJNMjUuNTMsMi4xNDgsMjAuNzYzLDQuNzgybC0zLjAwNy0yLjY3WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNnKVxcXCIvPjxwYXRoIGQ9XFxcIk0yLDI0LjM4bDItMy42NDJMMi4zODIsMTYuNFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaClcXFwiLz48cGF0aCBkPVxcXCJNMi4yNzQsMTYuMjYzLDMuOSwyMC44NzNsNy4wNjItMS41ODRMMTkuMDI0LDExLjgsMjEuMyw0LjU2OWwtMy41ODMtMi41My02LjA5MSwyLjI4QzkuNzA2LDYuMSw1Ljk4Miw5LjYzNSw1Ljg0OCw5LjdzLTIuNDU5LDQuNDY0LTMuNTc0LDYuNTYyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk03Ljk4MSw3Ljk4MUMxMi4xNCwzLjg1OCwxNy41LDEuNDIxLDE5LjU1OSwzLjVzLS4xMjQsNy4xMjEtNC4yODMsMTEuMjQ0UzUuODIxLDIxLjQzNCwzLjc2NSwxOS4zNTgsMy44MjIsMTIuMSw3Ljk4MSw3Ljk4MVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaSlcXFwiLz48cGF0aCBkPVxcXCJNNy43OTQsMjkuOTMzbDMuMjMxLTEwLjcsMTAuNzI5LDMuNDQ3Yy0zLjg3OSwzLjYzOC04LjE5NCw2LjcxMy0xMy45Niw3LjI1NFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjailcXFwiLz48cGF0aCBkPVxcXCJNMTkuMDM4LDExLjc3NGwyLjc1NCwxMC45MWMzLjI0LTMuNDA3LDYuMTQ5LTcuMDcsNy41NzMtMTEuNmwtMTAuMzI4LjY5MVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaylcXFwiLz48cGF0aCBkPVxcXCJNMjkuMzM3LDExLjEzOWMxLjEtMy4zMjcsMS4zNTctOC4xLTMuODQxLTguOTg1TDIxLjIzMSw0LjUwOWw4LjEwNiw2LjYyOVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjbClcXFwiLz48cGF0aCBkPVxcXCJNMiwyNC4zMzJjLjE1Myw1LjQ5LDQuMTE0LDUuNTcyLDUuOCw1LjYybC0zLjktOS4xTDIsMjQuMzMyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzllMTIwOVxcXCIvPjxwYXRoIGQ9XFxcIk0xOS4wNTMsMTEuNzkxYzIuNDksMS41MzEsNy41MDksNC42LDcuNjEsNC42NjFhMTcuNTUyLDE3LjU1MiwwLDAsMCwyLjYxOS01LjM0M2wtMTAuMjI5LjY4M1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjbSlcXFwiLz48cGF0aCBkPVxcXCJNMTEuMDIxLDE5LjIzMmw0LjMxOSw4LjMzMmEyNy45MjQsMjcuOTI0LDAsMCwwLDYuMzg1LTQuODhsLTEwLjctMy40NTJaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI24pXFxcIi8+PHBhdGggZD1cXFwiTTMuODg3LDIwLjg2MWwtLjYxMiw3LjI4N2MxLjE1NSwxLjU3NywyLjc0MywxLjcxNCw0LjQwOSwxLjU5MS0xLjIwNS0zLTMuNjE0LTktMy44LTguODc4WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNvKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMS4yMDYsNC41MjhsOC41OCwxLjJjLS40NTgtMS45NC0xLjg2NC0zLjE5Mi00LjI2MS0zLjU4NGwtNC4zMTksMi4zOFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjcClcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiNcIixcblx0XHRdLFxuXHR9LFxuXHRcIlJ1c3RcIjoge1xuXHRcdGNvbG91cjogXCIjYTA0ZjEyXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImFcXFwiIGN4PVxcXCItNDkyLjAzNVxcXCIgY3k9XFxcIi04ODMuMzdcXFwiIHI9XFxcIjEzLjk5OFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcIm1hdHJpeCgwLjg2NiwgLTAuNSwgLTAuMywgLTAuNTIsIDE3Ny4xMDYsIC02ODkuMDMzKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiIzdkN2Q3ZFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yNjdcXFwiIHN0b3AtY29sb3I9XFxcIiM3ZTdjN2FcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNDVcXFwiIHN0b3AtY29sb3I9XFxcIiM4MTc4NzFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjA4XFxcIiBzdG9wLWNvbG9yPVxcXCIjODY3MTYyXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjc1M1xcXCIgc3RvcC1jb2xvcj1cXFwiIzhkNjg0Y1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC44ODZcXFwiIHN0b3AtY29sb3I9XFxcIiM5NjVjMzBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNhMDRmMTJcXFwiLz48L3JhZGlhbEdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3J1c3Q8L3RpdGxlPjxwYXRoIGQ9XFxcIk0xNS4xMjQsNS4zYS44MzIuODMyLDAsMSwxLC44MzIuODMyaDBhLjgzMS44MzEsMCwwLDEtLjgzMi0uODMyTTUuMiwxMi44MzRhLjgzMi44MzIsMCwxLDEsLjgzMi44MzJoMGEuODMyLjgzMiwwLDAsMS0uODMyLS44MzJtMTkuODU2LjAzOWEuODMyLjgzMiwwLDEsMSwuODMyLjgzMi44MzEuODMxLDAsMCwxLS44MzItLjgzMmgwTTcuNjA1LDE0LjAxM2EuNzYuNzYsMCwwLDAsLjM4Ni0xbC0uMzY5LS44MzVIOS4wNzR2Ni41NDVINi4xNDRhMTAuMjQ3LDEwLjI0NywwLDAsMS0uMzMyLTMuOTExWm02LjA3NC4xNjFWMTIuMjQ1aDMuNDU4Yy4xNzksMCwxLjI2MS4yMDYsMS4yNjEsMS4wMTYsMCwuNjcyLS44My45MTMtMS41MTMuOTEzWk04Ljk1OCwyNC41NjFhLjgzMi44MzIsMCwxLDEsLjgzMi44MzIuODMxLjgzMSwwLDAsMS0uODMyLS44MzJoMG0xMi4zMzEuMDM5YS44MzIuODMyLDAsMSwxLC44MzIuODMyLjgzMi44MzIsMCwwLDEtLjgzMi0uODMyaDBtLjI1Ny0xLjg4N2EuNzU4Ljc1OCwwLDAsMC0uOS41ODRsLS40MTgsMS45NDlhMTAuMjQ5LDEwLjI0OSwwLDAsMS04LjU0NS0uMDQxbC0uNDE3LTEuOTQ5YS43NTkuNzU5LDAsMCwwLS45LS41ODNoMGwtMS43MjEuMzdhMTAuMjMzLDEwLjIzMywwLDAsMS0uODktMS4wNDloOC4zNzRjLjA5NSwwLC4xNTgtLjAxNy4xNTgtLjFWMTguOTI4YzAtLjA4Ni0uMDYzLS4xLS4xNTgtLjFoLTIuNDVWMTYuOTQ3aDIuNjQ5YTEuNjY1LDEuNjY1LDAsMCwxLDEuNjI5LDEuNDEyYy4xMDUuNDEzLjMzNiwxLjc1Ny40OTQsMi4xODcuMTU3LjQ4My44LDEuNDQ3LDEuNDgyLDEuNDQ3aDQuMzIzYTEwLjI0MywxMC4yNDMsMCwwLDEtLjk0OSwxLjFabTQuNjUtNy44MjFhMTAuMjYxLDEwLjI2MSwwLDAsMSwuMDIyLDEuNzc5SDI1LjE2N2MtLjEwNSwwLS4xNDguMDY5LS4xNDguMTcydi40ODNjMCwxLjEzNi0uNjQxLDEuMzg0LTEuMiwxLjQ0Ny0uNTM1LjA2LTEuMTI4LS4yMjQtMS4yLS41NTFhMy42MTYsMy42MTYsMCwwLDAtMS42NzEtMi44MDhjMS4wMy0uNjU0LDIuMS0xLjYxOSwyLjEtMi45MTFBMy4yOTIsMy4yOTIsMCwwLDAsMjEuNDQsOS44YTQuNTU5LDQuNTU5LDAsMCwwLTIuMi0uNzI0SDguMzY3QTEwLjI0NiwxMC4yNDYsMCwwLDEsMTQuMSw1Ljg0bDEuMjgyLDEuMzQ0YS43NTguNzU4LDAsMCwwLDEuMDcyLjAyNmgwbDEuNDM0LTEuMzcyYTEwLjI0OCwxMC4yNDgsMCwwLDEsNy4wMTUsNWwtLjk4MiwyLjIxN2EuNzYxLjc2MSwwLDAsMCwuMzg2LDFabTIuNDQ4LjAzNi0uMDMzLS4zNDMsMS4wMTEtLjk0M2EuNDIuNDIsMCwwLDAtLjAxMy0uNTk1LjQyOC40MjgsMCwwLDAtLjEyMS0uMDgxTDI4LjIsMTIuNDgzbC0uMS0uMzM0LjgwNi0xLjEyYS40MjIuNDIyLDAsMCwwLS4xMy0uNTgxLjQzLjQzLDAsMCwwLS4xMzMtLjA1NWwtMS4zNjMtLjIyMi0uMTY0LS4zMDYuNTczLTEuMjU3YS40MTkuNDE5LDAsMCwwLS4yMzYtLjU0NC40MjYuNDI2LDAsMCwwLS4xNDYtLjAyOWwtMS4zODMuMDQ4TDI1LjcsNy44MTlsLjMxOC0xLjM0N2EuNDIxLjQyMSwwLDAsMC0uMzQzLS40ODcuNDM1LjQzNSwwLDAsMC0uMTQ0LDBMMjQuMTgzLDYuM2wtLjI2Ni0uMjE5TDIzLjk2Niw0LjdhLjQyMS40MjEsMCwwLDAtLjQzMS0uNDExLjQyNi40MjYsMCwwLDAtLjE0MS4wMjhsLTEuMjU3LjU3My0uMzA2LS4xNjQtLjIyMi0xLjM2M2EuNDIxLjQyMSwwLDAsMC0uNS0uMzE4LjQzLjQzLDAsMCwwLS4xMzMuMDU1bC0xLjEyMS44MDYtLjMzMy0uMS0uNDgzLTEuMjkzYS40MjEuNDIxLDAsMCwwLS41NTUtLjIxNS40NDIuNDQyLDAsMCwwLS4xMi4wOEwxNy40MTgsMy4zOWwtLjM0My0uMDMzTDE2LjM0NywyLjE4YS40MjEuNDIxLDAsMCwwLS42ODgsMGwtLjcyOCwxLjE3Ny0uMzQzLjAzMy0uOTQzLTEuMDEyYS40MjEuNDIxLDAsMCwwLS41OTUuMDE1LjQ0Mi40NDIsMCwwLDAtLjA4LjEyTDEyLjQ4MywzLjhsLS4zMzMuMS0xLjEyLS44YS40MjIuNDIyLDAsMCwwLS41ODEuMTMuNDMuNDMsMCwwLDAtLjA1NS4xMzNsLS4yMjIsMS4zNjMtLjMwNi4xNjRMOC42MDgsNC4zMTdhLjQyMS40MjEsMCwwLDAtLjU0NC4yMzkuNDQ0LjQ0NCwwLDAsMC0uMDI4LjE0NGwuMDQ4LDEuMzgzTDcuODE4LDYuMyw2LjQ3MSw1Ljk4NGEuNDIxLjQyMSwwLDAsMC0uNDg3LjM0My40MzUuNDM1LDAsMCwwLDAsLjE0NEw2LjMsNy44MTlsLS4yMTguMjY1TDQuNyw4LjAzNmEuNDIyLjQyMiwwLDAsMC0uMzgzLjU3M0w0Ljg5LDkuODY2bC0uMTY0LjMwNi0xLjM2My4yMjJhLjQyLjQyLDAsMCwwLS4zMTguNS40My40MywwLDAsMCwuMDU1LjEzM2wuODA2LDEuMTItLjEuMzM0LTEuMjkzLjQ4M2EuNDIxLjQyMSwwLDAsMC0uMjE1LjU1NS40MTQuNDE0LDAsMCwwLC4wODEuMTIxbDEuMDExLjk0My0uMDMzLjM0My0xLjE3Ny43MjhhLjQyMS40MjEsMCwwLDAsMCwuNjg4bDEuMTc3LjcyOC4wMzMuMzQzLTEuMDExLjk0M2EuNDIxLjQyMSwwLDAsMCwuMDE1LjU5NS40MzYuNDM2LDAsMCwwLC4xMTkuMDhsMS4yOTMuNDgzLjEuMzM0TDMuMSwyMC45NzJhLjQyMS40MjEsMCwwLDAsLjEzMS41ODEuNDMuNDMsMCwwLDAsLjEzMy4wNTVsMS4zNjMuMjIyLjE2NC4zMDctLjU3MywxLjI1N2EuNDIyLjQyMiwwLDAsMCwuMjQuNTQ1LjQzOC40MzgsMCwwLDAsLjE0My4wMjhsMS4zODMtLjA0OC4yMTkuMjY2LS4zMTcsMS4zNDhhLjQyLjQyLDAsMCwwLC4zNDEuNDg2LjQuNCwwLDAsMCwuMTQ2LDBMNy44MTgsMjUuN2wuMjY2LjIxOEw4LjAzNSwyNy4zYS40MTkuNDE5LDAsMCwwLC40MjkuNDEuNDEzLjQxMywwLDAsMCwuMTQzLS4wMjhsMS4yNTctLjU3My4zMDYuMTY0LjIyMiwxLjM2MmEuNDIxLjQyMSwwLDAsMCwuNS4zMTkuNDA3LjQwNywwLDAsMCwuMTMzLS4wNTVsMS4xMi0uODA3LjMzNC4xLjQ4MywxLjI5MmEuNDIyLjQyMiwwLDAsMCwuNTU2LjIxNC40MzYuNDM2LDAsMCwwLC4xMTktLjA4bC45NDMtMS4wMTEuMzQzLjAzNC43MjgsMS4xNzdhLjQyMi40MjIsMCwwLDAsLjU4OC4xLjQxMy40MTMsMCwwLDAsLjEtLjFsLjcyOC0xLjE3Ny4zNDMtLjAzNC45NDMsMS4wMTFhLjQyMS40MjEsMCwwLDAsLjU5NS0uMDE1LjQzNi40MzYsMCwwLDAsLjA4LS4xMTlsLjQ4My0xLjI5Mi4zMzQtLjEsMS4xMi44MDdhLjQyMS40MjEsMCwwLDAsLjU4MS0uMTMxLjQzLjQzLDAsMCwwLC4wNTUtLjEzM2wuMjIyLTEuMzYyLjMwNi0uMTY0LDEuMjU3LjU3M2EuNDIxLjQyMSwwLDAsMCwuNTQ0LS4yMzkuNDM4LjQzOCwwLDAsMCwuMDI4LS4xNDNsLS4wNDgtMS4zODQuMjY1LS4yMTgsMS4zNDcuMzE3YS40MjEuNDIxLDAsMCwwLC40ODctLjM0LjQ0Ny40NDcsMCwwLDAsMC0uMTQ2TDI1LjcsMjQuMTgzbC4yMTgtLjI2NiwxLjM4My4wNDhhLjQyMS40MjEsMCwwLDAsLjQxLS40MzEuNC40LDAsMCwwLS4wMjgtLjE0MmwtLjU3My0xLjI1Ny4xNjQtLjMwNywxLjM2My0uMjIyYS40MjEuNDIxLDAsMCwwLC4zMTktLjUuNDM0LjQzNCwwLDAsMC0uMDU2LS4xMzVsLS44MDYtMS4xMi4xLS4zMzQsMS4yOTMtLjQ4M2EuNDIuNDIsMCwwLDAsLjIxNS0uNTU0LjQxNC40MTQsMCwwLDAtLjA4MS0uMTIxbC0xLjAxMS0uOTQzLjAzMy0uMzQzLDEuMTc3LS43MjhhLjQyMS40MjEsMCwwLDAsMC0uNjg4WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPlwiLFxuXHR9LFxuXHRcIlNBU1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDJiYjVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xNi4wMTgsMzBBMTQsMTQsMCwxLDEsMzAsMTYuMiwxNCwxNCwwLDAsMSwxNi4wMTgsMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDAyYmI1XFxcIi8+PHBhdGggZD1cXFwiTTkuMTcsMjIuNjNjLjAyNi4wNjEuMDQ2LjEyNC4wNzcuMTgzLDIuMjE1LDQuMjA2LDcuNzM4LDQuNjE2LDEwLjc1NiwyLjQ1NGE2LjAxNyw2LjAxNywwLDAsMCwxLjczMS04LjU4MywxNS43LDE1LjcsMCwwLDAtMS4zMTgtMS43MzFjLS44ODEtMS4wNjctMS43NTUtMi4xNC0yLjYzNi0zLjIwNy0uMzY2LS40NDMtLjc2Ny0uODM1LTEuNDE2LS42ODNhMS4zOTMsMS4zOTMsMCwwLDAtLjgxNiwyLjMxMWMuODg4LDEuMTA2LDEuODE5LDIuMTc3LDIuNywzLjI4NmEzLjg3NCwzLjg3NCwwLDAsMSwuNTg5LDQuNCw1LjQyMyw1LjQyMywwLDAsMS01LDMuMTM0QTYuNiw2LjYsMCwwLDEsOS4xNywyMi42M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMjIuNDk0LDkuNjA5Yy4wOC0uMjQ4LS4wNjYtLjM3LS4xNDEtLjUwOUE3LjQ3Nyw3LjQ3NywwLDAsMCwxMi42LDYuMjM3Yy0zLjMsMS42My01LjEsNS4zNTItMi42MzcsOS4xNDdhNTYuNTMsNTYuNTMsMCwwLDAsNC4xMzUsNS4xMiwxLjAxMiwxLjAxMiwwLDAsMCwuNzA5LjM0NSwxLjM4NCwxLjM4NCwwLDAsMCwxLjQyOC0uNzY1LDEuMjQ3LDEuMjQ3LDAsMCwwLS4xNzMtMS41MDdjLS44NzYtMS4wNTEtMS43NjktMi4wODgtMi42MTUtMy4xNjJhNC4xMyw0LjEzLDAsMCwxLC4zMjMtNS43NzFBNi4wNTQsNi4wNTQsMCwwLDEsMTkuOTg0LDguMTMsNS4xOSw1LjE5LDAsMCwxLDIyLjQ5NCw5LjYwOVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJTYXNzIChTYXNzKVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjZDY3OTlcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yNi4xMSwxNy41NzJhNS44LDUuOCwwLDAsMC0yLjUzNy41ODgsNS4zNDUsNS4zNDUsMCwwLDEtLjU2OC0xLjMxNCwzLjUzLDMuNTMsMCwwLDEtLjA1MS0xLjEsOS44MTEsOS44MTEsMCwwLDEsLjMzMi0xLjE5MmMtLjAwNS0uMDUxLS4wNjEtLjI5Mi0uNjI0LS4zcy0xLjA0OC4xMDctMS4xLjI1NmE2LjE3MSw2LjE3MSwwLDAsMC0uMjM1LjgzNCwxOS42ODYsMTkuNjg2LDAsMCwxLTEuNzEzLDMuMjk0LDMuMTg2LDMuMTg2LDAsMCwxLS40NC0yLjA2Niw5LjgxMSw5LjgxMSwwLDAsMSwuMzMyLTEuMTkyYy0uMDA1LS4wNTEtLjA2MS0uMjkyLS42MjQtLjNzLTEuMDQ4LjEwNy0xLjEuMjU2LS4xMTguNS0uMjM1LjgzNC0xLjQ4MywzLjM4Ni0xLjg0MSw0LjE3M2MtLjE4NC40LS4zNDMuNzI2LS40NTUuOTQ2aDBhLjIzMy4yMzMsMCwwLDEtLjAyLjA0MWMtLjEuMTg5LS4xNTMuMjkyLS4xNTMuMjkydi4wMDVjLS4wNzcuMTM4LS4xNTkuMjY2LS4yLjI2NmExLjcxMSwxLjcxMSwwLDAsMSwuMDEtLjg2OWMuMi0xLjA1OS42OS0yLjcwNS42ODUtMi43NjIsMC0uMDMxLjA5Mi0uMzE3LS4zMTctLjQ2NWEuNTA4LjUwOCwwLDAsMC0uNTc4LjFjLS4wMzYsMC0uMDYxLjA4Ny0uMDYxLjA4N3MuNDQ1LTEuODUxLS44NDktMS44NTFhMy44NTUsMy44NTUsMCwwLDAtMi40NzUsMS42ODNjLS4zNDguMTg5LTEuMDg5LjU5My0xLjg4MiwxLjAyOC0uMy4xNjktLjYxNC4zMzgtLjkwNS41LS4wMi0uMDItLjA0MS0uMDQ2LS4wNjEtLjA2NkM2Ljg3LDE3LjYsMy45NzUsMTYuNDE2LDQuMSwxNC4xNzFjLjA0Ni0uODE4LjMyNy0yLjk2Niw1LjU1OS01LjU3NSw0LjMwNi0yLjEyMiw3LjczMy0xLjUzNCw4LjMyNi0uMjMuODQ5LDEuODYyLTEuODM2LDUuMzE5LTYuMjg1LDUuODJhMy4zNTEsMy4zNTEsMCwwLDEtMi44MTMtLjcxMWMtLjIzNS0uMjU2LS4yNzEtLjI3MS0uMzU4LS4yMi0uMTQzLjA3Ny0uMDUxLjMwNywwLC40NGEyLjYyNiwyLjYyNiwwLDAsMCwxLjYwNiwxLjI2Myw4LjU1LDguNTUsMCwwLDAsNS4yMTctLjUxN2MyLjctMS4wNDMsNC44LTMuOTQzLDQuMTg0LTYuMzcyLS42MTktMi40NjUtNC43MS0zLjI3OC04LjU4Mi0xLjlBMTkuNSwxOS41LDAsMCwwLDQuMzU5LDkuOTUyYy0yLjEzMywxLjk5NS0yLjQ3LDMuNzI4LTIuMzMyLDQuNDU1LjUsMi41NzgsNC4wNTEsNC4yNTUsNS40NzIsNS41LS4wNzIuMDQxLS4xMzguMDc3LS4xOTQuMTA3LS43MTEuMzUzLTMuNDIxLDEuNzctNC4xLDMuMjY4LS43NjcsMS43LjEyMywyLjkxNS43MTEsMy4wNzlhNC4zNzQsNC4zNzQsMCwwLDAsNC43MS0xLjkwOEE0LjcyNSw0LjcyNSwwLDAsMCw5LjA0OSwyMC4xYS4xMDcuMTA3LDAsMCwwLS4wMi0uMDMxbC41NTctLjMyN2MuMzYzLS4yMTUuNzIxLS40MTQsMS4wMjgtLjU3OGE2Ljc0LDYuNzQsMCwwLDAtLjM2MywxLjg2MiwzLjg4NiwzLjg4NiwwLDAsMCwuODM0LDIuNy45MjEuOTIxLDAsMCwwLC42NzUuMjJjLjYsMCwuODc1LS41LDEuMTc2LTEuMDk0LjM2OC0uNzI2LjctMS41Ny43LTEuNTdzLS40MTQsMi4yODEuNzExLDIuMjgxYy40MDksMCwuODIzLS41MzIsMS4wMDgtLjh2LjAwNXMuMDEtLjAxNS4wMzEtLjA1MWwuMDY2LS4xMDd2LS4wMWMuMTY0LS4yODYuNTMyLS45MzYsMS4wNzktMi4wMTUuNzA2LTEuMzkxLDEuMzg2LTMuMTMsMS4zODYtMy4xM2E4Ljg4OCw4Ljg4OCwwLDAsMCwuMjcxLDEuMTMsMTAuNjQzLDEwLjY0MywwLDAsMCwuNTgzLDEuMzA5Yy0uMTY0LjIzLS4yNjYuMzU4LS4yNjYuMzU4bC4wMDUuMDA1Yy0uMTMzLjE3NC0uMjc2LjM2My0uNDM1LjU0N2ExNi4zLDE2LjMsMCwwLDAtMS4zMTQsMS42NDcuNDQ3LjQ0NywwLDAsMCwuMTIzLjYsMS4xMTYsMS4xMTYsMCwwLDAsLjY4NS4xMTMsMy4xNDcsMy4xNDcsMCwwLDAsMS4wMjgtLjIzNSwzLjQ1LDMuNDUsMCwwLDAsLjg4NS0uNDY1LDEuOTgsMS45OCwwLDAsMCwuODQ5LTEuNzQ0LDMuNTIxLDMuNTIxLDAsMCwwLS4zMjItMS4yMzNjLjA1MS0uMDcyLjEtLjE0My4xNDgtLjIxNWEyMy40MjgsMjMuNDI4LDAsMCwwLDEuNTM0LTIuNjQ5LDguODg4LDguODg4LDAsMCwwLC4yNzEsMS4xMyw3LjU3LDcuNTcsMCwwLDAsLjUsMS4xMjVBNC44NjEsNC44NjEsMCwwLDAsMjAuOTY1LDIwLjhjLS4zMjIuOTMxLS4wNzIsMS4zNS40LDEuNDQ3YTEuNDI1LDEuNDI1LDAsMCwwLC43NDctLjE1MywzLjQsMy40LDAsMCwwLC45NDYtLjQ4NiwyLjEyNiwyLjEyNiwwLDAsMCwxLjA0My0xLjcyOSwzLjI2OCwzLjI2OCwwLDAsMC0uMjM1LTEuMDIzLDUuMzU2LDUuMzU2LDAsMCwxLDIuNzE2LS4zMTJjMi40MzQuMjg2LDIuOTE1LDEuODA1LDIuODIzLDIuNDQ1YTEuNjE4LDEuNjE4LDAsMCwxLS43NzIsMS4wOTRjLS4xNjkuMTA3LS4yMjUuMTQzLS4yMS4yMi4wMi4xMTMuMS4xMDcuMjQ1LjA4N0ExLjksMS45LDAsMCwwLDMwLDIwLjdjLjA3Ny0xLjUtMS4zNTUtMy4xNDUtMy44ODctMy4xM1pNNy4zMywyMy45Yy0uODA4Ljg4LTEuOTMzLDEuMjEyLTIuNDE5LjkzMS0uNTIyLS4zLS4zMTctMS42LjY3NS0yLjUzMmExMi44ODQsMTIuODg0LDAsMCwxLDEuOS0xLjQxN2MuMTE4LS4wNzIuMjkyLS4xNzQuNS0uM2wuMDU2LS4wMzFoMGwuMTIzLS4wNzdBMy40OTMsMy40OTMsMCwwLDEsNy4zMywyMy45Wm01Ljg4MS00Yy0uMjgxLjY4NS0uODY5LDIuNDQtMS4yMjcsMi4zNDItLjMwNy0uMDgyLS41LTEuNDEyLS4wNjEtMi43MjZhNi4xOTMsNi4xOTMsMCwwLDEsLjk1Ni0xLjc1NGMuNDQtLjQ5MS45MjYtLjY1NSwxLjA0My0uNDU1YTkuMDYyLDkuMDYyLDAsMCwxLS43MTEsMi41OTNabTQuODUzLDIuMzIyYy0uMTE4LjA2MS0uMjMuMS0uMjgxLjA3Mi0uMDM2LS4wMi4wNTEtLjEuMDUxLS4xcy42MDktLjY1NS44NDktLjk1MWMuMTM4LS4xNzQuMy0uMzc4LjQ3Ni0uNjA5VjIwLjdjMCwuNzgyLS43NTcsMS4zMDktMS4wOTQsMS41MjRabTMuNzQ0LS44NTRjLS4wODctLjA2MS0uMDcyLS4yNjYuMjItLjkwNWEzLjQwOCwzLjQwOCwwLDAsMSwuODM0LTEuMDc0LDEuNDQ4LDEuNDQ4LDAsMCwxLC4wODIuNDcxLDEuNTQ3LDEuNTQ3LDAsMCwxLTEuMTM1LDEuNTA5WlxcXCIgc3R5bGU9XFxcImZpbGw6I2NkNjc5OVxcXCIvPlwiLFxuXHR9LFxuXHRcIlNhc3MgKFNDU1MpXCI6IHtcblx0XHRjb2xvdXI6IFwiI2NkNjc5OVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE2LjE3MSwxOC43Yy0uNDgxLjIyMS0xLjAwOC41MDktMi4wNjMsMS4wODgtLjQuMjI1LS44MTguNDUtMS4yMDcuNjYyLS4wMjctLjAyNy0uMDU1LS4wNjEtLjA4Mi0uMDg5LTIuMDg3LTIuMjMtNS45NDctMy44MDUtNS43ODMtNi44LjA2MS0xLjA5MS40MzYtMy45NTUsNy40MTMtNy40MzMsNS43NDItMi44MywxMC4zMTEtMi4wNDYsMTEuMS0uMzA3QzI2LjY4Myw4LjMsMjMuMSwxMi45MTMsMTcuMTcsMTMuNTgyYTQuNDY5LDQuNDY5LDAsMCwxLTMuNzUxLS45NDhjLS4zMTQtLjM0MS0uMzYxLS4zNjEtLjQ3Ny0uMjkzLS4xOTEuMS0uMDY4LjQwOSwwLC41ODZhMy41LDMuNSwwLDAsMCwyLjE0MSwxLjY4NCwxMS40LDExLjQsMCwwLDAsNi45NTYtLjY4OWMzLjU5NC0xLjM5MSw2LjQtNS4yNTgsNS41NzgtOC41LS44MjUtMy4yODctNi4yODEtNC4zNzEtMTEuNDQzLTIuNTM3YTI2LDI2LDAsMCwwLTguNzksNS4wNDdjLTIuODQ0LDIuNjYtMy4yOTQsNC45NzItMy4xMSw1Ljk0LjY2MiwzLjQzNyw1LjQsNS42NzQsNy4zLDcuMzMxLS4xLjA1NS0uMTg0LjEtLjI1OS4xNDMtLjk0OC40NzEtNC41NjIsMi4zNi01LjQ2Myw0LjM1OC0xLjAyMywyLjI2NC4xNjQsMy44ODcuOTQ4LDQuMTA1YTUuODMyLDUuODMyLDAsMCwwLDYuMjgxLTIuNTQ0LDYuMyw2LjMsMCwwLDAsLjU1OS01LjgsNS4wMyw1LjAzLDAsMCwxLC43MTYtLjQ3N2MuNDg0LS4yODYuOTQ1LS41NjgsMS4zNTQtLjc4NmwwLDBhMTAuNDc1LDEwLjQ3NSwwLDAsMSw0LjQ3NS0uOTg5YzMuMjQ2LjM4MiwzLjg4NywyLjQwNywzLjc2NCwzLjI2YTIuMTU3LDIuMTU3LDAsMCwxLTEuMDMsMS40NTljLS4yMjUuMTQzLS4zLjE5MS0uMjguMjkzLjAyNy4xNS4xMzYuMTQzLjMyNy4xMTZhMi41MzUsMi41MzUsMCwwLDAsMS43NjYtMi4yNTdjLjEtMi0xLjgwNy00LjE5NC01LjE4My00LjE3NGE3Ljc1Myw3Ljc1MywwLDAsMC0yLjk0Ni41ODdxLS4yMjUuMDkzLS40MzcuMlptLTQuODI1LDcuODM5Yy0xLjA3OCwxLjE3My0yLjU3OCwxLjYxNi0zLjIyNiwxLjI0MS0uNy0uNC0uNDIzLTIuMTM1LjktMy4zNzZhMTcuMTgsMTcuMTgsMCwwLDEsMi41My0xLjg4OWMuMTU3LS4xLjM4OS0uMjMyLjY2OC0uNC4wNDgtLjAyNy4wNzUtLjA0MS4wNzUtLjA0MWwuMTY0LS4xQTQuNjU4LDQuNjU4LDAsMCwxLDExLjM0NiwyNi41MzlaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2Q2Nzk5XFxcIi8+XCIsXG5cdH0sXG5cdFwiU2NhbGFcIjoge1xuXHRcdGNvbG91cjogXCIjZTYyZDJhXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCItMTM0LjkwN1xcXCIgeTE9XFxcIjIwNC41NzJcXFwiIHgyPVxcXCItMTM0Ljg5NlxcXCIgeTI9XFxcIjIwNC41NzJcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMTUzOCwgMCwgMCwgLTk2MS4yNSwgMjA3NDk1LCAxOTY2NjEpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwXFxcIiBzdG9wLWNvbG9yPVxcXCIjZTYyZDJhXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjZcXFwiIHN0b3AtY29sb3I9XFxcIiNkZjNmM2RcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuOFxcXCIgc3RvcC1jb2xvcj1cXFwiI2RmM2YzZFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2U2MmQyYVxcXCIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJiXFxcIiB4MT1cXFwiLTEzNC45MDdcXFwiIHkxPVxcXCIyMDMuNzgxXFxcIiB4Mj1cXFwiLTEzNC44OTZcXFwiIHkyPVxcXCIyMDMuNzgxXFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDE1MzgsIDAsIDAsIC05NjEuMjUsIDIwNzQ5NSwgMTk1ODkyKVxcXCIgeGxpbms6aHJlZj1cXFwiI2FcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImNcXFwiIHgxPVxcXCItMTM0LjkwN1xcXCIgeTE9XFxcIjIwNS4zNjNcXFwiIHgyPVxcXCItMTM0Ljg5NlxcXCIgeTI9XFxcIjIwNS4zNjNcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJtYXRyaXgoMTUzOCwgMCwgMCwgLTk2MS4yNSwgMjA3NDk1LCAxOTc0MzApXFxcIiB4bGluazpocmVmPVxcXCIjYVxcXCIvPjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3NjYWxhPC90aXRsZT48cGF0aCBkPVxcXCJNNy4zODQsMTkuMjMxdjIuMTU0YzAsLjM2Myw3LjgzMy45NzEsMTIuOTM3LDIuMTU0LDIuNDY1LS41NzEsNC4yOTUtMS4yNzcsNC4yOTUtMi4xNTRWMTkuMjMxYzAtLjg3Ny0xLjgzLTEuNTgyLTQuMjk1LTIuMTU0LTUuMSwxLjE4My0xMi45MzcsMS43OTEtMTIuOTM3LDIuMTU0XFxcIiBzdHlsZT1cXFwiZmlsbDojN2YwYzFkXFxcIi8+PHBhdGggZD1cXFwiTTcuMzg0LDEwLjYxNXYyLjE1NGMwLC4zNjMsNy44MzMuOTcxLDEyLjkzNywyLjE1NCwyLjQ2NS0uNTcxLDQuMjk1LTEuMjc3LDQuMjk1LTIuMTU0VjEwLjYxNWMwLS44NzctMS44My0xLjU4Mi00LjI5NS0yLjE1NC01LjEsMS4xODMtMTIuOTM3LDEuNzkxLTEyLjkzNywyLjE1NFxcXCIgc3R5bGU9XFxcImZpbGw6IzdmMGMxZFxcXCIvPjxwYXRoIGQ9XFxcIk03LjM4NCwxNC45MjN2Ni40NjJjMC0uNTM4LDE3LjIzMi0xLjYxNSwxNy4yMzItNC4zMDhWMTAuNjE1YzAsMi42OTItMTcuMjMyLDMuNzY5LTE3LjIzMiw0LjMwOFxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk03LjM4NCw2LjMwOFYxMi43N2MwLS41MzgsMTcuMjMyLTEuNjE1LDE3LjIzMi00LjMwOFYyYzAsMi42OTItMTcuMjMyLDMuNzY5LTE3LjIzMiw0LjMwOFxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk03LjM4NCwyMy41MzhWMzBjMC0uNTM4LDE3LjIzMi0xLjYxNSwxNy4yMzItNC4zMDhWMTkuMjMxYzAsMi42OTItMTcuMjMyLDMuNzY5LTE3LjIzMiw0LjMwOFxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNjKVxcXCIvPlwiLFxuXHR9LFxuXHRcIlNoZWxsIHNlc3Npb25cIjoge1xuXHRcdGNvbG91cjogXCIjZDliNDAwXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjkuNCwyNy42SDIuNVY0LjVIMjkuNFptLTI1LjktMUgyOC40VjUuNUgzLjVaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDliNDAwXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI2LjA3NyAxOS4zMTYgNS41MjIgMTguNDg0IDEwLjM2NiAxNS4yNTUgNS40NzkgMTEuMTg0IDYuMTIgMTAuNDE2IDEyLjAzNSAxNS4zNDQgNi4wNzcgMTkuMzE2XFxcIiBzdHlsZT1cXFwiZmlsbDojZDliNDAwXFxcIi8+PHJlY3QgeD1cXFwiMTIuN1xcXCIgeT1cXFwiMTguMlxcXCIgd2lkdGg9XFxcIjcuOFxcXCIgaGVpZ2h0PVxcXCIxXFxcIiBzdHlsZT1cXFwiZmlsbDojZDliNDAwXFxcIi8+PHJlY3QgeD1cXFwiMi41XFxcIiB5PVxcXCI1LjVcXFwiIHdpZHRoPVxcXCIyNi45XFxcIiBoZWlnaHQ9XFxcIjEuOVxcXCIgc3R5bGU9XFxcImZpbGw6I2Q5YjQwMFxcXCIvPlwiLFxuXHR9LFxuXHRcIlNoZWxsXCI6IHtcblx0XHRjb2xvdXI6IFwiI2Q5YjQwMFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTI5LjQsMjcuNkgyLjVWNC41SDI5LjRabS0yNS45LTFIMjguNFY1LjVIMy41WlxcXCIgc3R5bGU9XFxcImZpbGw6I2Q5YjQwMFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiNi4wNzcgMTkuMzE2IDUuNTIyIDE4LjQ4NCAxMC4zNjYgMTUuMjU1IDUuNDc5IDExLjE4NCA2LjEyIDEwLjQxNiAxMi4wMzUgMTUuMzQ0IDYuMDc3IDE5LjMxNlxcXCIgc3R5bGU9XFxcImZpbGw6I2Q5YjQwMFxcXCIvPjxyZWN0IHg9XFxcIjEyLjdcXFwiIHk9XFxcIjE4LjJcXFwiIHdpZHRoPVxcXCI3LjhcXFwiIGhlaWdodD1cXFwiMVxcXCIgc3R5bGU9XFxcImZpbGw6I2Q5YjQwMFxcXCIvPjxyZWN0IHg9XFxcIjIuNVxcXCIgeT1cXFwiNS41XFxcIiB3aWR0aD1cXFwiMjYuOVxcXCIgaGVpZ2h0PVxcXCIxLjlcXFwiIHN0eWxlPVxcXCJmaWxsOiNkOWI0MDBcXFwiLz5cIixcblx0fSxcblx0XCJTbWFydHlcIjoge1xuXHRcdGNvbG91cjogXCIjZjZlMjAwXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImFcXFwiIHgxPVxcXCIxMy44NTlcXFwiIHkxPVxcXCIyOS4yMTlcXFwiIHgyPVxcXCIxOC4xMDZcXFwiIHkyPVxcXCIyOS4yMTlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjAuMDM0XFxcIiBzdG9wLWNvbG9yPVxcXCIjNjM2MzYxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjE3OFxcXCIgc3RvcC1jb2xvcj1cXFwiIzZjNmQ3MFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yMTlcXFwiIHN0b3AtY29sb3I9XFxcIiM2ZjcxNzVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzA5XFxcIiBzdG9wLWNvbG9yPVxcXCIjNjE2MzY2XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQ4MVxcXCIgc3RvcC1jb2xvcj1cXFwiIzNjM2QzZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC43MTZcXFwiIHN0b3AtY29sb3I9XFxcIiMwMTAxMDFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzE5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNjM2YTZlXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImJcXFwiIHgxPVxcXCIxNS4xNzhcXFwiIHkxPVxcXCIyOS43MzRcXFwiIHgyPVxcXCIxNi43ODdcXFwiIHkyPVxcXCIyOS43MzRcXFwiIHhsaW5rOmhyZWY9XFxcIiNhXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJjXFxcIiB4MT1cXFwiMTUuMjc3XFxcIiB5MT1cXFwiMjkuODgxXFxcIiB4Mj1cXFwiMTYuNjg4XFxcIiB5Mj1cXFwiMjkuODgxXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjAzNFxcXCIgc3RvcC1jb2xvcj1cXFwiIzliOWI5OFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4xMzFcXFwiIHN0b3AtY29sb3I9XFxcIiNhNGE1YTdcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMjE5XFxcIiBzdG9wLWNvbG9yPVxcXCIjYWViMWI4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjM1MlxcXCIgc3RvcC1jb2xvcj1cXFwiIzlmYTRhYlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42MDVcXFwiIHN0b3AtY29sb3I9XFxcIiM3ODgxODhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzE5XFxcIiBzdG9wLWNvbG9yPVxcXCIjNjU3MDc2XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjOGI5NDlhXFxcIi8+PC9saW5lYXJHcmFkaWVudD48cmFkaWFsR3JhZGllbnQgaWQ9XFxcImRcXFwiIGN4PVxcXCItOC40NTZcXFwiIGN5PVxcXCItMTYuNjE2XFxcIiByPVxcXCIxOS4zODNcXFwiIGdyYWRpZW50VHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMzQuMDQyIDM3LjA2Mykgc2NhbGUoMS4wNTQpXFxcIiBncmFkaWVudFVuaXRzPVxcXCJ1c2VyU3BhY2VPblVzZVxcXCI+PHN0b3Agb2Zmc2V0PVxcXCIwLjAzNFxcXCIgc3RvcC1jb2xvcj1cXFwiIzcwNzA2ZVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4xMTJcXFwiIHN0b3AtY29sb3I9XFxcIiM2MTYyNjFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMjE5XFxcIiBzdG9wLWNvbG9yPVxcXCIjNDY0NzRhXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQwOFxcXCIgc3RvcC1jb2xvcj1cXFwiIzQ4NDk0Y1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC40ODdcXFwiIHN0b3AtY29sb3I9XFxcIiM0ZTUwNTNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNTQ0XFxcIiBzdG9wLWNvbG9yPVxcXCIjNWE1YzVmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU5MlxcXCIgc3RvcC1jb2xvcj1cXFwiIzZhNmU3MVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42MzNcXFwiIHN0b3AtY29sb3I9XFxcIiM3Zjg1ODhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjY3XFxcIiBzdG9wLWNvbG9yPVxcXCIjOTc5ZWExXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjcxOVxcXCIgc3RvcC1jb2xvcj1cXFwiIzNkNDQ0N1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiIzY1NmM3MFxcXCIvPjwvcmFkaWFsR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJlXFxcIiB4MT1cXFwiMTYuMTI2XFxcIiB5MT1cXFwiMjguMTA4XFxcIiB4Mj1cXFwiMTYuMDVcXFwiIHkyPVxcXCIyNi44OTNcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjAuMDM0XFxcIiBzdG9wLWNvbG9yPVxcXCIjOWI5Yjk4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjEwOVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E1YTZhN1xcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yMTlcXFwiIHN0b3AtY29sb3I9XFxcIiNiYWJjYzRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMzExXFxcIiBzdG9wLWNvbG9yPVxcXCIjYWJhZWI1XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjQ4N1xcXCIgc3RvcC1jb2xvcj1cXFwiIzg0ODk4ZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC43MTlcXFwiIHN0b3AtY29sb3I9XFxcIiM0ODUwNTRcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiM4Yjk0OWFcXFwiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiZlxcXCIgeDE9XFxcIjE2LjAxM1xcXCIgeTE9XFxcIjI2LjU0MlxcXCIgeDI9XFxcIjE1Ljg5NVxcXCIgeTI9XFxcIjI0LjYzNVxcXCIgeGxpbms6aHJlZj1cXFwiI2VcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcImdcXFwiIHgxPVxcXCIxNi4wMjNcXFwiIHkxPVxcXCIyNS41NDZcXFwiIHgyPVxcXCIxNS44ODdcXFwiIHkyPVxcXCIyMy4zNTVcXFwiIHhsaW5rOmhyZWY9XFxcIiNlXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJoXFxcIiB4MT1cXFwiMTYuMDEzXFxcIiB5MT1cXFwiMjcuNjI3XFxcIiB4Mj1cXFwiMTUuODk1XFxcIiB5Mj1cXFwiMjUuNzJcXFwiIHhsaW5rOmhyZWY9XFxcIiNlXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJqXFxcIiB4MT1cXFwiMTMuNjhcXFwiIHkxPVxcXCIyOC44MDVcXFwiIHgyPVxcXCIxOC4yODRcXFwiIHkyPVxcXCIyOC44MDVcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjAuMDM0XFxcIiBzdG9wLWNvbG9yPVxcXCIjNTQ1NDUzXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjA3MVxcXCIgc3RvcC1jb2xvcj1cXFwiIzYxNjI2MlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4xNDNcXFwiIHN0b3AtY29sb3I9XFxcIiM4NDg1ODlcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMjE5XFxcIiBzdG9wLWNvbG9yPVxcXCIjYWViMWI4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjM1MlxcXCIgc3RvcC1jb2xvcj1cXFwiIzlmYTRhYlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42MDVcXFwiIHN0b3AtY29sb3I9XFxcIiM3ODgxODhcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzE5XFxcIiBzdG9wLWNvbG9yPVxcXCIjNjU3MDc2XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjNTA1NjU5XFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImtcXFwiIHgxPVxcXCIxMi4xNTlcXFwiIHkxPVxcXCIyNS44MTNcXFwiIHgyPVxcXCIxOS40NzVcXFwiIHkyPVxcXCIyNS44MTNcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNlNWUxZGZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNkZGRhZDZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMDM4XFxcIiBzdG9wLWNvbG9yPVxcXCIjY2VjY2M5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjExMlxcXCIgc3RvcC1jb2xvcj1cXFwiI2E3YTlhOFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4yMTJcXFwiIHN0b3AtY29sb3I9XFxcIiM2OTcwNzJcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMjY0XFxcIiBzdG9wLWNvbG9yPVxcXCIjNDY1MDU0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjMwM1xcXCIgc3RvcC1jb2xvcj1cXFwiIzYzNmM2ZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4zOThcXFwiIHN0b3AtY29sb3I9XFxcIiNhNWFhYWNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNDc4XFxcIiBzdG9wLWNvbG9yPVxcXCIjZDVkN2Q5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjUzOVxcXCIgc3RvcC1jb2xvcj1cXFwiI2YzZjRmNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41NzNcXFwiIHN0b3AtY29sb3I9XFxcIiNmZWZlZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjJcXFwiIHN0b3AtY29sb3I9XFxcIiNmNGY1ZjZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZGFkY2RmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjhcXFwiIHN0b3AtY29sb3I9XFxcIiNiMGI0YjlcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuODc2XFxcIiBzdG9wLWNvbG9yPVxcXCIjOGI5Mjk4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZDFkM2Q0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjYTdhOWFjXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcImxcXFwiIHgxPVxcXCIxMi4xNTlcXFwiIHkxPVxcXCIyNC43MjhcXFwiIHgyPVxcXCIxOS40NzVcXFwiIHkyPVxcXCIyNC43MjhcXFwiIHhsaW5rOmhyZWY9XFxcIiNrXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJtXFxcIiB4MT1cXFwiMTIuMTU5XFxcIiB5MT1cXFwiMjMuNTQ4XFxcIiB4Mj1cXFwiMTkuNDc1XFxcIiB5Mj1cXFwiMjMuNTQ4XFxcIiB4bGluazpocmVmPVxcXCIja1xcXCIvPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiblxcXCIgeDE9XFxcIjEyLjE1OVxcXCIgeTE9XFxcIjI2Ljg5OFxcXCIgeDI9XFxcIjE5LjQ3NVxcXCIgeTI9XFxcIjI2Ljg5OFxcXCIgeGxpbms6aHJlZj1cXFwiI2tcXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcIm9cXFwiIHgxPVxcXCIxMi4xNTlcXFwiIHkxPVxcXCIyNS45NjdcXFwiIHgyPVxcXCIxOS40NzVcXFwiIHkyPVxcXCIyNS45NjdcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNlNWUxZGZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNkZGU4ZDBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNkMmYzYmFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMDM2XFxcIiBzdG9wLWNvbG9yPVxcXCIjYzVlNGIxXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjEwNVxcXCIgc3RvcC1jb2xvcj1cXFwiI2E0YmQ5OFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4xOTlcXFwiIHN0b3AtY29sb3I9XFxcIiM2ZTdmNzFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuMjY0XFxcIiBzdG9wLWNvbG9yPVxcXCIjNDY1MDU0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjMwM1xcXCIgc3RvcC1jb2xvcj1cXFwiIzYzNmM2ZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC4zOThcXFwiIHN0b3AtY29sb3I9XFxcIiNhNWFhYWNcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNDc4XFxcIiBzdG9wLWNvbG9yPVxcXCIjZDVkN2Q5XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjUzOVxcXCIgc3RvcC1jb2xvcj1cXFwiI2YzZjRmNVxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC41NzNcXFwiIHN0b3AtY29sb3I9XFxcIiNmZWZlZmZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjJcXFwiIHN0b3AtY29sb3I9XFxcIiNmNGY1ZjZcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNjk5XFxcIiBzdG9wLWNvbG9yPVxcXCIjZGFkY2RmXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjhcXFwiIHN0b3AtY29sb3I9XFxcIiNiMGI0YjlcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuODc2XFxcIiBzdG9wLWNvbG9yPVxcXCIjOGI5Mjk4XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjZDFkM2Q0XFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIxXFxcIiBzdG9wLWNvbG9yPVxcXCIjYTdhOWFjXFxcIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgaWQ9XFxcInBcXFwiIHgxPVxcXCIxMi4xNTlcXFwiIHkxPVxcXCIyNC44ODNcXFwiIHgyPVxcXCIxOS40NzVcXFwiIHkyPVxcXCIyNC44ODNcXFwiIHhsaW5rOmhyZWY9XFxcIiNvXFxcIi8+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJxXFxcIiB4MT1cXFwiMTIuMTU5XFxcIiB5MT1cXFwiMjcuMDVcXFwiIHgyPVxcXCIxOS40NzVcXFwiIHkyPVxcXCIyNy4wNVxcXCIgeGxpbms6aHJlZj1cXFwiI29cXFwiLz48bGluZWFyR3JhZGllbnQgaWQ9XFxcInJcXFwiIHgxPVxcXCIxMS45MDJcXFwiIHkxPVxcXCIyMy4yMDFcXFwiIHgyPVxcXCIxOS44ODRcXFwiIHkyPVxcXCIyMy4yMDFcXFwiIHhsaW5rOmhyZWY9XFxcIiNlXFxcIi8+PHJhZGlhbEdyYWRpZW50IGlkPVxcXCJzXFxcIiBjeD1cXFwiLTE2Ljk4M1xcXCIgY3k9XFxcIi0yMi45NDhcXFwiIHI9XFxcIjEwLjcxOFxcXCIgZ3JhZGllbnRUcmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgzNC4wNDIgMzcuMDYzKSBzY2FsZSgxLjA1NClcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmZmZmZDFcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNTA1XFxcIiBzdG9wLWNvbG9yPVxcXCIjZmYwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjU2OFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZkZjcwMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMC42NjRcXFwiIHN0b3AtY29sb3I9XFxcIiNmNmUyMDBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjAuNzgyXFxcIiBzdG9wLWNvbG9yPVxcXCIjZWJiZjAwXFxcIi8+PHN0b3Agb2Zmc2V0PVxcXCIwLjkwNlxcXCIgc3RvcC1jb2xvcj1cXFwiI2RlOTIwMFxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2RhOTgxOVxcXCIvPjwvcmFkaWFsR3JhZGllbnQ+PC9kZWZzPjx0aXRsZT5maWxlX3R5cGVfc21hcnR5PC90aXRsZT48cGF0aCBkPVxcXCJNMTMuODU5LDI4Ljc3NmEuMjQyLjI0MiwwLDAsMCwuMTI4LjE5MSwxMiwxMiwwLDAsMCwxLjM5Mi42MjIsNC4zLDQuMywwLDAsMCwuNTc4LjA3MmguMDUyYTQuMyw0LjMsMCwwLDAsLjU3OC0uMDcyLDEyLjAxNCwxMi4wMTQsMCwwLDAsMS4zOTItLjYyMi4yNDMuMjQzLDAsMCwwLC4xMjgtLjE5MWwtMi4xMzcuMTkyWlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNhKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNi4wMTQsMzBhMS4xMjMsMS4xMjMsMCwwLDAsLjY4OC0uMjQ3LjE3NS4xNzUsMCwwLDAsLjA4NS0uMTI2di0uMTA1YTMuMjM1LDMuMjM1LDAsMCwwLS43NzMtLjA1M2gtLjA2M2EzLjIzNywzLjIzNywwLDAsMC0uNzczLjA1M3YuMTA1YS4xNzUuMTc1LDAsMCwwLC4wODUuMTI2LDEuMTIyLDEuMTIyLDAsMCwwLC42ODguMjQ3WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNiKVxcXCIvPjxwYXRoIGQ9XFxcIk0xNS45NTEsMjkuODA3YTQuNzMyLDQuNzMyLDAsMCwxLS42NzQtLjA0NCwxLjEwNSwxLjEwNSwwLDAsMCwuNjc0LjIzN2guMDYzYTEuMTA2LDEuMTA2LDAsMCwwLC42NzUtLjIzNyw0LjczMyw0LjczMywwLDAsMS0uNjc1LjA0NFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYylcXFwiLz48cGF0aCBkPVxcXCJNMTkuODA5LDI2LjgzOGExLDEsMCwwLDAtLjIzNC4zODljLS4wMzYuMTgxLS4xLjU4NS0xLjMyNiwxLjQwNmwtLjAyNS4wMTdhLjQzNS40MzUsMCwwLDEtLjA4Ni4wMzcsOS45NjgsOS45NjgsMCwwLDEtMi4xNTUuMjA5LDkuOTY4LDkuOTY4LDAsMCwxLTIuMTU2LS4yMDkuNDM2LjQzNiwwLDAsMS0uMDg1LS4wMzZsLS4wMjUtLjAxN2E0LjU3OSw0LjU3OSwwLDAsMS0xLjEyLS45NTdjLS4xNjQtLjIxOS0uMzczLS4yNTctLjM5LS4zNDVhMjEuMDU1LDIxLjA1NSwwLDAsMCwzLjg1NS4wNTcsMTMuMDQ5LDEzLjA0OSwwLDAsMCwzLjc2MS0uNjU0QS42OTIuNjkyLDAsMCwxLDE5LjgwOSwyNi44MzhaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2QpXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljc3MiwyNi44OGEuOTg1Ljk4NSwwLDAsMS0uMjQ2LjEyOWMtLjA3Ni4wMjgtLjI0NS4wNzgtLjI0NS4wNzhhMjUuMTUsMjUuMTUsMCwwLDEtNi40NTguNDM2Yy0uMTM2LS4wMDktLjMyLS4wMjgtLjMyLS4wMjhhMS4wNjIsMS4wNjIsMCwwLDEtLjE0LS4wMjgsMS4wMTYsMS4wMTYsMCwwLDEsLjE0LjEwN2MuMTYuMDEzLjMxOS4wMTkuMzE5LjAxOWEyNi44NjQsMjYuODY0LDAsMCwwLDYuNzQzLS4zMjNsLjAwOS0uMDQyQS44ODUuODg1LDAsMCwxLDE5Ljc3MiwyNi44OFpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZSlcXFwiLz48cGF0aCBkPVxcXCJNMTkuNDM5LDI1LjM4MnMuMjQ1LS4wNy4yNDUtLjE2MmEuMTE0LjExNCwwLDAsMC0uMDEzLS4wNjUuMjE0LjIxNCwwLDAsMS0uMDYxLS4xNDQuNDM3LjQzNywwLDAsMSwuMTE5LS4yNywxLjA2OSwxLjA2OSwwLDAsMS0uMi4xYy0uMDc2LjAyOC0uMjQ1LjA3OC0uMjQ1LjA3OGEyNS4xNTEsMjUuMTUxLDAsMCwxLTYuNDU4LjQzNmMtLjEzNi0uMDA5LS4zMi0uMDI4LS4zMi0uMDI4YTEuMDU1LDEuMDU1LDAsMCwxLS4xODEtLjA0MS4zNzcuMzc3LDAsMCwxLC4wNzguMjE3LjcxNi43MTYsMCwwLDEtLjI1NC40MzIuNjczLjY3MywwLDAsMSwuMzY4LS4wNzlBMjYuMiwyNi4yLDAsMCwwLDE5LjQzOSwyNS4zODJaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2YpXFxcIi8+PHBhdGggZD1cXFwiTTE5LjQzOSwyNC4yMjlzLjI0NS0uMDc4LjI0NS0uMTgyYS4xNDMuMTQzLDAsMCwwLS4wMTMtLjA3My4yNTQuMjU0LDAsMCwxLS4wNjEtLjE2Mi41MTQuNTE0LDAsMCwxLC4xMTktLjMsMS4wMjYsMS4wMjYsMCwwLDEtLjIuMTExYy0uMDc2LjAzMi0uMjQ1LjA4OC0uMjQ1LjA4OGEyMi41MDcsMjIuNTA3LDAsMCwxLTYuNDU4LjQ4OWMtLjEzNi0uMDEtLjMyLS4wMzItLjMyLS4wMzJhLjk1My45NTMsMCwwLDEtLjE4MS0uMDQ2LjQ1NS40NTUsMCwwLDEsLjA3OC4yNDMuODI1LjgyNSwwLDAsMS0uMjU0LjQ4NC42MTQuNjE0LDAsMCwxLC4zNjgtLjA4OUMxMy4wMTQsMjQuNzU4LDE2LjkzNSwyNS4wNDEsMTkuNDM5LDI0LjIyOVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjZylcXFwiLz48cGF0aCBkPVxcXCJNMTkuNDM5LDI2LjQ2N3MuMjQ1LS4wNy4yNDUtLjE2M2EuMTE1LjExNSwwLDAsMC0uMDEzLS4wNjUuMjE0LjIxNCwwLDAsMS0uMDYxLS4xNDQuNDM1LjQzNSwwLDAsMSwuMTE5LS4yNywxLjA3LDEuMDcsMCwwLDEtLjIuMWMtLjA3Ni4wMjgtLjI0NS4wNzgtLjI0NS4wNzhhMjUuMTYyLDI1LjE2MiwwLDAsMS02LjQ1OC40MzZjLS4xMzYtLjAwOS0uMzItLjAyOC0uMzItLjAyOGExLjA0MiwxLjA0MiwwLDAsMS0uMTgxLS4wNDEuMzc3LjM3NywwLDAsMSwuMDc4LjIxNy43MTcuNzE3LDAsMCwxLS4yNTQuNDMyLjY3LjY3LDAsMCwxLC4zNjgtLjA3OUEyNi4yMDcsMjYuMjA3LDAsMCwwLDE5LjQzOSwyNi40NjdaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2gpXFxcIi8+PHBhdGggZD1cXFwiTTE5LjQzOSwyNi40NjdzLjI0NS0uMDcuMjQ1LS4xNjNhLjExNS4xMTUsMCwwLDAtLjAxMy0uMDY1LjIxNC4yMTQsMCwwLDEtLjA2MS0uMTQ0LjQzNS40MzUsMCwwLDEsLjExOS0uMjcsMS4wNywxLjA3LDAsMCwxLS4yLjFjLS4wNzYuMDI4LS4yNDUuMDc4LS4yNDUuMDc4YTI1LjE2OCwyNS4xNjgsMCwwLDEtNi40NTguNDM2Yy0uMTM2LS4wMDktLjMyLS4wMjgtLjMyLS4wMjhhMS4wNDIsMS4wNDIsMCwwLDEtLjE4MS0uMDQxLjM3Ni4zNzYsMCwwLDEsLjA3OC4yMTcuNzE3LjcxNywwLDAsMS0uMjU0LjQzMi42Ny42NywwLDAsMSwuMzY4LS4wNzlBMjYuMjA3LDI2LjIwNywwLDAsMCwxOS40MzksMjYuNDY3WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNoKVxcXCIvPjxwYXRoIGQ9XFxcIk0xOC4yMjQsMjguNjVhLjQzNS40MzUsMCwwLDEtLjA4Ni4wMzcsOS45NjgsOS45NjgsMCwwLDEtMi4xNTUuMjA5LDkuOTY4LDkuOTY4LDAsMCwxLTIuMTU2LS4yMDkuNDM2LjQzNiwwLDAsMS0uMDg1LS4wMzZsLS4wMjUtLjAxNy0uMDI5LS4wMTlhLjExMi4xMTIsMCwwLDAsMCwuMDczYy4wMjQuMDczLjE0Ny4xLjE0Ny4xYTkuOTQzLDkuOTQzLDAsMCwwLDIuMTUuMjA5LDkuOTQyLDkuOTQyLDAsMCwwLDIuMTUtLjIwOXMuMTI2LS4wMjkuMTQ3LS4xYS4xMTguMTE4LDAsMCwwLDAtLjA3M2wtLjAyOS4wMTlaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2opXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljk0NCwyNS41cy4wNDEuMjUyLS40MTguNDIzYy0uMDc2LjAyOC0uMjQ1LjA3OC0uMjQ1LjA3OGEyNS4xNjIsMjUuMTYyLDAsMCwxLTYuNDU4LjQzNmMtLjEzNi0uMDA5LS4zMi0uMDI4LS4zMi0uMDI4LS4yNzYtLjAzOC0uNDY3LS4xNi0uNDU1LS4zMDgsMCwwLS4wMzMtLjI0OS40NjYtLjI0OWEyNi4yLDI2LjIsMCwwLDAsNi45MjUtLjQ3MnMuMjQ1LS4wNy4yNDUtLjE2MmEuMTExLjExMSwwLDAsMC0uMDEzLS4wNjZTMTkuOTQ0LDI1LjMxMiwxOS45NDQsMjUuNVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjaylcXFwiLz48cGF0aCBkPVxcXCJNMTkuOTQ0LDI0LjQxNnMuMDQxLjI1Mi0uNDE4LjQyM2MtLjA3Ni4wMjgtLjI0NS4wNzgtLjI0NS4wNzhhMjUuMTUxLDI1LjE1MSwwLDAsMS02LjQ1OC40MzZjLS4xMzYtLjAwOS0uMzItLjAyOC0uMzItLjAyOC0uMjc2LS4wMzgtLjQ2Ny0uMTYtLjQ1NS0uMzA4LDAsMC0uMDMzLS4yNDguNDY2LS4yNDhhMjYuMTkzLDI2LjE5MywwLDAsMCw2LjkyNS0uNDcycy4yNDUtLjA3LjI0NS0uMTYyYS4xMS4xMSwwLDAsMC0uMDEzLS4wNjVTMTkuOTQ0LDI0LjIyNywxOS45NDQsMjQuNDE2WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNsKVxcXCIvPjxwYXRoIGQ9XFxcIk0xOS44OTMsMjQuNDA2di0uMDIxYy0uMDEyLjA3Ni0uMDc4LjIzNi0uNDE3LjM1NS0uMDc2LjAyNi0uMjQ1LjA3My0uMjQ1LjA3M2EyMi4zNzIsMjIuMzcyLDAsMCwxLTUuMS41aDBhMjIuMTU1LDIyLjE1NSwwLDAsMCw1LjEtLjQ0MXMuMTY5LS4wNDcuMjQ1LS4wNzNDMTkuOTMzLDI0LjY0MywxOS44OTMsMjQuNDA2LDE5Ljg5MywyNC40MDZaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljg5MywyNS40OTFWMjUuNDdjLS4wMTIuMDc2LS4wNzguMjM2LS40MTcuMzU1LS4wNzYuMDI3LS4yNDUuMDczLS4yNDUuMDczYTIyLjM4LDIyLjM4LDAsMCwxLTUuMS41aDBhMjIuMTcxLDIyLjE3MSwwLDAsMCw1LjEtLjQ0MXMuMTY5LS4wNDcuMjQ1LS4wNzNDMTkuOTMzLDI1LjcyOCwxOS44OTMsMjUuNDkxLDE5Ljg5MywyNS40OTFaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljk0NCwyMy4wMzRzLjA0MS4zMjktLjQxOC41NTJjLS4wNzYuMDM3LS4yNDUuMS0uMjQ1LjFhMTkuNDA5LDE5LjQwOSwwLDAsMS02LjQ1OC41NjljLS4xMzYtLjAxMi0uMzItLjAzNy0uMzItLjAzNy0uMjc2LS4wNS0uNDY3LS4yMDktLjQ1NS0uNCwwLDAtLjAzMy0uMzI0LjQ2Ni0uMzI0YTE4LjI4MywxOC4yODMsMCwwLDAsNi45MjUtLjQ2MSwxLjAxNCwxLjAxNCwwLDAsMCwuNDQ0LS4yMzhBLjUzLjUzLDAsMCwxLDE5Ljk0NCwyMy4wMzRaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI20pXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljk0NCwyNi41ODZzLjA0MS4yNTItLjQxOC40MjNjLS4wNzYuMDI4LS4yNDUuMDc4LS4yNDUuMDc4YTI1LjE1LDI1LjE1LDAsMCwxLTYuNDU4LjQzNmMtLjEzNi0uMDA5LS4zMi0uMDI4LS4zMi0uMDI4LS4yNzYtLjAzOC0uNDY3LS4xNi0uNDU1LS4zMDgsMCwwLS4wMzMtLjI0OC40NjYtLjI0OGEyNi4yMDcsMjYuMjA3LDAsMCwwLDYuOTI1LS40NzJzLjI0NS0uMDcuMjQ1LS4xNjNhLjExMS4xMTEsMCwwLDAtLjAxMy0uMDY1UzE5Ljk0NCwyNi40LDE5Ljk0NCwyNi41ODZaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI24pXFxcIi8+PHBhdGggZD1cXFwiTTE5Ljg5MywyNi41NzZ2LS4wMjFjLS4wMTIuMDc2LS4wNzguMjM2LS40MTcuMzU1LS4wNzYuMDI2LS4yNDUuMDczLS4yNDUuMDczYTIyLjM3MiwyMi4zNzIsMCwwLDEtNS4xLjVoMGEyMi4xNjMsMjIuMTYzLDAsMCwwLDUuMS0uNDQxcy4xNjktLjA0Ny4yNDUtLjA3M0MxOS45MzMsMjYuODEzLDE5Ljg5MywyNi41NzYsMTkuODkzLDI2LjU3NlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTkuODkzLDIzLjMyMVYyMy4zYy0uMDEyLjA3Ni0uMDc4LjIzNi0uNDE3LjM1NS0uMDc2LjAyNy0uMjQ1LjA3My0uMjQ1LjA3M2EyMi4zNzIsMjIuMzcyLDAsMCwxLTUuMS41aDBhMjIuMTU2LDIyLjE1NiwwLDAsMCw1LjEtLjQ0MXMuMTY5LS4wNDcuMjQ1LS4wNzNDMTkuOTMzLDIzLjU1OCwxOS44OTMsMjMuMzIxLDE5Ljg5MywyMy4zMjFaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTEyLjQxNywyNS44ODFzLS4yMzYsMC0uMjQxLjA4LjI0Ni4wODUuMjQ2LjA4NS4xNzUsMCwuMy4wMDVjLjYxOS0uMDEzLDEuOTkzLS4wMzgsMy40MzctLjE2NkMxNC4zODQsMjUuOTU4LDEyLjcyMywyNS44ODMsMTIuNDE3LDI1Ljg4MVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjbylcXFwiLz48cGF0aCBkPVxcXCJNMTIuNDE3LDI0LjhzLS4yMzYsMC0uMjQxLjA4LjI0Ni4wODUuMjQ2LjA4NS4xNzUsMCwuMy4wMDVjLjYxOS0uMDEyLDEuOTkzLS4wMzgsMy40MzctLjE2NkMxNC4zODQsMjQuODc0LDEyLjcyMywyNC44LDEyLjQxNywyNC44WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNwKVxcXCIvPjxwYXRoIGQ9XFxcIk0xMi40MTcsMjYuOTY1cy0uMjM2LDAtLjI0MS4wOC4yNDYuMDg1LjI0Ni4wODUuMTc1LDAsLjMuMDA1Yy42MTktLjAxMiwxLjk5My0uMDM4LDMuNDM3LS4xNjZDMTQuMzg0LDI3LjA0MiwxMi43MjMsMjYuOTY2LDEyLjQxNywyNi45NjVaXFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI3EpXFxcIi8+PHBhdGggZD1cXFwiTTExLjk2NSwyMi43NzlzLS4yNzQuMzE1LjMxOS43MTFjMCwwLDUuNzc1LjU4Nyw3LjYtLjY5NUMxOS44ODQsMjIuNzk1LDEzLjYyMywyMy4zMiwxMS45NjUsMjIuNzc5WlxcXCIgc3R5bGU9XFxcImZpbGw6dXJsKCNyKVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC4wMzUsMjIuNzc5YTQuNDQ5LDQuNDQ5LDAsMCwwLC44MS0xLjE1NSwzLjM4NiwzLjM4NiwwLDAsMCwuMi0xLjExNSw2LjczMyw2LjczMywwLDAsMSwuNjMyLTIuOTFjLjUzNC0xLjAxNCwyLjgxLTQuNDQ3LDIuODEtNy40NjJBOC4wMTIsOC4wMTIsMCwwLDAsMTYsMmE4LjAxMiw4LjAxMiwwLDAsMC04LjQ4Myw4LjEzNmMwLDMuMDE1LDIuMjc2LDYuNDQ4LDIuODEsNy40NjJhNi43MzEsNi43MzEsMCwwLDEsLjYzMiwyLjkxLDMuMzg0LDMuMzg0LDAsMCwwLC4yLDEuMTE1LDQuNDUzLDQuNDUzLDAsMCwwLC44MSwxLjE1NSwxMy44NjYsMTMuODY2LDAsMCwwLDMuOTg3LjM3QTE1LjE1MSwxNS4xNTEsMCwwLDAsMjAuMDM1LDIyLjc3OVpcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjcylcXFwiLz5cIixcblx0fSxcblx0XCJTb2xpZGl0eSAoRXRoZXJldW0pXCI6IHtcblx0XHRjb2xvdXI6IFwiI2MxYzFjMVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIwLjQ3NywybC00LjUsOGgtOWw0LjUtOGg5XFxcIiBzdHlsZT1cXFwiZmlsbDojYzFjMWMxO29wYWNpdHk6MC40NTtpc29sYXRpb246aXNvbGF0ZVxcXCIvPjxwYXRoIGQ9XFxcIk0xMS41MiwzMGw0LjUtOGg5bC00LjUsOGgtOVxcXCIgc3R5bGU9XFxcImZpbGw6I2MxYzFjMTtvcGFjaXR5OjAuNDU7aXNvbGF0aW9uOmlzb2xhdGVcXFwiLz48cGF0aCBkPVxcXCJNMTUuOTc1LDEwaDlsLTQuNS04aC05WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MxYzFjMTtvcGFjaXR5OjAuNjtpc29sYXRpb246aXNvbGF0ZVxcXCIvPjxwYXRoIGQ9XFxcIk0xNi4wMjIsMjJoLTlsNC41LDhoOVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMWMxYzE7b3BhY2l0eTowLjY7aXNvbGF0aW9uOmlzb2xhdGVcXFwiLz48cGF0aCBkPVxcXCJNMTEuNDc3LDE4bDQuNS04LTQuNS04LTQuNSw4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MxYzFjMTtvcGFjaXR5OjAuODtpc29sYXRpb246aXNvbGF0ZVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC41MiwxNGwtNC41LDgsNC41LDgsNC41LThaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzFjMWMxO29wYWNpdHk6MC44O2lzb2xhdGlvbjppc29sYXRlXFxcIi8+XCIsXG5cdH0sXG5cdFwiU29sdXRpb24gZmlsZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiM4NTRjYzdcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjE2XFxcIiB5MT1cXFwiLTE4Mi4wNzJcXFwiIHgyPVxcXCIxNlxcXCIgeTI9XFxcIi0yMDkuOTI4XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDEsIDAsIDAsIC0xLCAwLCAtMTgwKVxcXCIgZ3JhZGllbnRVbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiPjxzdG9wIG9mZnNldD1cXFwiMFxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIvPjxzdG9wIG9mZnNldD1cXFwiMVxcXCIgc3RvcC1jb2xvcj1cXFwiI2ZmZlxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwXFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV9zbG48L3RpdGxlPjxwYXRoIGQ9XFxcIk02LjA0NSwyMy45OTFhMS4xNjYsMS4xNjYsMCwwLDEtMS4yMDguMTkxTDIuNzE4LDIzLjNBMS4xNjgsMS4xNjgsMCwwLDEsMiwyMi4yMjJWOS43NzhBMS4xNjUsMS4xNjUsMCwwLDEsMi43MTgsOC43bDIuMTE5LS44ODNhMS4xNjksMS4xNjksMCwwLDEsMS4yMDguMTkxbC40NzYuNDA4QS42NDYuNjQ2LDAsMCwwLDUuNSw4Ljk0MlYyMy4wNThhLjY0Ni42NDYsMCwwLDAsMS4wMjEuNTI1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzUyMjE4YVxcXCIvPjxwYXRoIGQ9XFxcIk0yLjcxOCwyMy4zQTEuMTY5LDEuMTY5LDAsMCwxLDIsMjIuMjIydi0uMWEuNjc0LjY3NCwwLDAsMCwxLjE3NC40NTJMMjEuMjUsMi41ODNhMS43NDMsMS43NDMsMCwwLDEsMS45OS0uMzM4bDUuNzY5LDIuNzc4QTEuNzQ5LDEuNzQ5LDAsMCwxLDMwLDYuNnYuMDY3YTEuMSwxLjEsMCwwLDAtMS44LS44NTRMNi41MjEsMjMuNTgzbC0uNDc2LjQwOGExLjE2NiwxLjE2NiwwLDAsMS0xLjIwOC4xOTFaXFxcIiBzdHlsZT1cXFwiZmlsbDojNmMzM2FmXFxcIi8+PHBhdGggZD1cXFwiTTIuNzE4LDguN0ExLjE2OCwxLjE2OCwwLDAsMCwyLDkuNzc4di4xYS42NzQuNjc0LDAsMCwxLDEuMTc0LS40NTJMMjEuMjUsMjkuNDE2YTEuNzQzLDEuNzQzLDAsMCwwLDEuOTkuMzM4bDUuNzY5LTIuNzc4QTEuNzQ3LDEuNzQ3LDAsMCwwLDMwLDI1LjR2LS4wNjhhMS4xLDEuMSwwLDAsMS0xLjguODU1TDYuNTIxLDguNDE3bC0uNDc2LS40MDhhMS4xNjYsMS4xNjYsMCwwLDAtMS4yMDgtLjE5MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM4NTRjYzdcXFwiLz48cGF0aCBkPVxcXCJNMjMuMjQsMjkuNzU1YTEuNzQzLDEuNzQzLDAsMCwxLTEuOTktLjMzOEExLjAyNSwxLjAyNSwwLDAsMCwyMywyOC42OTJWMy4zMDhhMS4wMjUsMS4wMjUsMCwwLDAtMS43NS0uNzI1LDEuNzQzLDEuNzQzLDAsMCwxLDEuOTktLjMzOGw1Ljc2OCwyLjc3NEExLjc0OSwxLjc0OSwwLDAsMSwzMCw2LjZWMjUuNDA1YTEuNzUxLDEuNzUxLDAsMCwxLS45OTEsMS41NzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojYjE3OWYxXFxcIi8+PGcgc3R5bGU9XFxcIm9wYWNpdHk6MC4yNVxcXCI+PHBhdGggZD1cXFwiTTIyLjA5MywyOS44ODNhMS43NCwxLjc0LDAsMCwwLDEuMTQ3LS4xMjhsNS43NjgtMi43NzRBMS43NDksMS43NDksMCwwLDAsMzAsMjUuNFY2LjZhMS43NSwxLjc1LDAsMCwwLS45OTItMS41NzdMMjMuMjQsMi4yNDVhMS43NDIsMS43NDIsMCwwLDAtMS45OS4zMzlsLTkuMywxMC4yODRMNi41MjEsOC40MTZsLS40NzYtLjQwOGExLjE2OCwxLjE2OCwwLDAsMC0xLjIwNy0uMTkxTDIuNzE5LDguN0ExLjE2NywxLjE2NywwLDAsMCwyLDkuNjg5YzAsLjAyOSwwLC4wNTksMCwuMDg4VjIyLjIyMWMwLC4wMywwLC4wNTksMCwuMDg4YTEuMTY3LDEuMTY3LDAsMCwwLC43MTUuOTg5bDIuMTE5Ljg4M2ExLjIyNiwxLjIyNiwwLDAsMCwuMTU1LjA1MiwxLjE2NSwxLjE2NSwwLDAsMCwxLjA1Mi0uMjQzbC40NzYtLjQwOCw1LjQzLTQuNDUyLDkuMywxMC4yODVBMS43MzMsMS43MzMsMCwwLDAsMjIuMDkzLDI5Ljg4M1pNMjMsMTAuMDcyLDE1Ljc3LDE2LDIzLDIxLjkyN1pNNS41LDEybDMuNjE5LDRMNS41LDIwWlxcXCIgc3R5bGU9XFxcImZpbGwtcnVsZTpldmVub2RkO2ZpbGw6dXJsKCNhKVxcXCIvPjwvZz5cIixcblx0fSxcblx0XCJTUEFSUUxcIjoge1xuXHRcdGNvbG91cjogXCIjMGM0NzljXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjYuMjg0LDIwLjM2MWMtLjE2NS0uMDg0LS4zNTktLjE2NC0uNTIzLS4yNDhIMjUuOXMtMS4xNTgtLjUtMS4yNC00LjE3NmMtLjExMS0zLjY1NSwxLjEtNC4yODksMS4xLTQuMjg5YTQuOTYsNC45NiwwLDAsMCwyLjE3Ni0yLjE0Myw1LjEyMiw1LjEyMiwwLDAsMC0yLjEyMi02LjkyNyw1LjM0Miw1LjM0MiwwLDAsMC03LjEzOCwyLjE0Niw1LjA2Nyw1LjA2NywwLDAsMC0uNTIzLDMuMjE0TDE4LjEsNy44NTVzLjMsMS4zMTktMi44MzksMy4yNzJjLTMuMTE1LDEuOTUtNC41NDkuOTYyLTQuNTQ5Ljk2MmwuMDgyLjEzOGEyLjEzMSwyLjEzMSwwLDAsMC0uMjczLS4xNjcsNS4xMTcsNS4xMTcsMCwxLDAsLjgyNSw4LjUybC0uMDI1LjA1NXMxLjEyOS0uOTMzLDQuNDA3LjgyN2MyLjU5MiwxLjM3NCwyLjk3OSwyLjc0OCwzLjAzMywzLjI0YTUuMSw1LjEsMCwwLDAsMi43LDQuNyw1LjEyNCw1LjEyNCwwLDEsMCw0LjgyNS05LjA0MVptLTUuNzkuNjg1Yy0uNDEyLjEzOC0xLjYuMy00LjA3Ny0xLjAxNy0yLjctMS40NTQtMy4xMTUtMi42NjQtMy4xNjktMy4wMjFhNS40MDYsNS40MDYsMCwwLDAtLjA1Ny0xLjMxOWwuMDI5LjAyNlMxMywxNC41MzQsMTYuMDg0LDEyLjYzOWMyLjc1Ny0xLjcwNSw0LjAyNi0xLjM3NCw0LjI0NS0xLjI5M2EyLjgzLDIuODMsMCwwLDAsLjQ3LjI3Nyw0LjA4Miw0LjA4MiwwLDAsMCwuOTY0LjM4M2MuMzg3LjM1NywxLjA3NiwxLjM3NCwxLjE1OCw0LjFzLS43MTcsMy43NjQtMS4xNTgsNC4xMjFBNS4wNCw1LjA0LDAsMCwwLDIwLjQ5NCwyMS4wNDdaXFxcIiBzdHlsZT1cXFwiZmlsbDojMGM0NzljXFxcIi8+PHBhdGggZD1cXFwiTTIwLjEzNSw0LjIyOWEzLjg2MSwzLjg2MSwwLDAsMC0uMDgyLDUuMzg2Yy0uNzE3LS42ODUtLjY4OC0yLjExNy4wMjktMy40NjJhLjY3My42NzMsMCwwLDEsLjc0Ni0uMjc3Yy4wMjUsMCwuMDU0LjAyOS4wODIuMDI5YS45OTMuOTkzLDAsMCwwLC4yNzYuMDI2QTEuMDU2LDEuMDU2LDAsMCwwLDIyLjIsNC44MDVhLjkzNC45MzQsMCwwLDAtLjMtLjY4NWMxLjM4LS45MDcsMi45NS0xLjAxNywzLjYxLS40MTJoLjAyOUEzLjgyNiwzLjgyNiwwLDAsMCwyMC4xMzUsNC4yMjlaTTUuMTQ1LDEzLjg0NmEzLjg1OSwzLjg1OSwwLDAsMC0uMDgyLDUuMzg5Yy0uNzE3LS42ODktLjY5Mi0yLjExNy4wMjUtMy40NjVhLjY2OC42NjgsMCwwLDEsLjc0Ni0uMjczYy4wMjUsMCwuMDU0LjAyOS4wODIuMDI5YTEsMSwwLDAsMCwuMjc2LjAyNkExLjA1NiwxLjA1NiwwLDAsMCw3LjIxLDE0LjQyNWEuOTQ1Ljk0NSwwLDAsMC0uMy0uNjg5YzEuMzc3LS45MDcsMi45NDctMS4wMTcsMy42MS0uNDEyaC4wMjVBMy44NTIsMy44NTIsMCwwLDAsNS4xNDUsMTMuODQ2Wm0xNS44NzIsOC4xNjNhMy44NjUsMy44NjUsMCwwLDAtLjA4Miw1LjM4OWMtLjcxNy0uNjg5LS42ODgtMi4xMTcuMDI5LTMuNDY1YS42NjguNjY4LDAsMCwxLC43NDYtLjI3M2MuMDI1LDAsLjA1NC4wMjYuMDgyLjAyNmEuODg3Ljg4NywwLDAsMCwuMjc2LjAyOSwxLjA1NywxLjA1NywwLDAsMCwxLjAxOC0xLjEyNi45MzYuOTM2LDAsMCwwLS4zLS42ODljMS4zOC0uOTA3LDIuOTUtMS4wMTcsMy42MS0uNDEyaC4wMjlBMy44MjksMy44MjksMCwwLDAsMjEuMDE3LDIyLjAwOVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJTUUZcIjoge1xuXHRcdGNvbG91cjogXCIjYzJjMmMyXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjUsMjMuNUg3YTUuMDE1LDUuMDE1LDAsMCwxLTUtNXYtNmE1LjAxNSw1LjAxNSwwLDAsMSw1LTVIMjVhNS4wMTUsNS4wMTUsMCwwLDEsNSw1djZhNS4wMTUsNS4wMTUsMCwwLDEtNSw1WlxcXCIvPjxwYXRoIGQ9XFxcIk03LDE5LjQ2MWE0LjgxLDQuODEsMCwwLDEtMS40MTQtLjIsNS4wNTIsNS4wNTIsMCwwLDEtMS4xMTEtLjQ3MmwtLjQuNDMyaC0uNUwzLjUsMTYuMDUySDRhOC40NjIsOC40NjIsMCwwLDAsLjQzMS45NTMsNC42MzgsNC42MzgsMCwwLDAsLjYwNi45LDMuMTc3LDMuMTc3LDAsMCwwLC44LjY3NSwxLjk4NSwxLjk4NSwwLDAsMCwxLjAyOS4yNiwxLjY3MiwxLjY3MiwwLDAsMCwxLjIxNi0uNDExQTEuMzgyLDEuMzgyLDAsMCwwLDguNSwxNy4zOTFhMS4xNTYsMS4xNTYsMCwwLDAtLjM1OS0uODYyLDIuOTQ1LDIuOTQ1LDAsMCwwLTEuMTExLS42cS0uNDktLjE2Ny0uOS0uMzF0LS43NzMtLjI5MmEyLjU4LDIuNTgsMCwwLDEtMS4yMzktMS4wMDcsMi43MywyLjczLDAsMCwxLS40MDUtMS40NjUsMi40MDYsMi40MDYsMCwwLDEsLjIxLS45ODYsMi42MDgsMi42MDgsMCwwLDEsLjYxMi0uODUsMi45NjcsMi45NjcsMCwwLDEsLjk4NS0uNTc1LDMuNzIyLDMuNzIyLDAsMCwxLDEuMzA2LS4yMjMsMy45ODQsMy45ODQsMCwwLDEsMS4yODguMiw1LjE1MSw1LjE1MSwwLDAsMSwuOTQ0LjQwOGwuMzU2LS4zN2guNTA3bC4wNDcsMi45ODhoLS41cS0uMTc1LS40ODMtLjQxMS0uOTg3YTQuMzMyLDQuMzMyLDAsMCwwLS41LS44MzksMi4zLDIuMywwLDAsMC0uNjU5LS41NzMsMS43MjksMS43MjksMCwwLDAtLjg3NS0uMjE0QTEuNDM3LDEuNDM3LDAsMCwwLDYsMTEuMjEyYTEuMjMzLDEuMjMzLDAsMCwwLS40LjkzNCwxLjE0MSwxLjE0MSwwLDAsMCwuMzQ3Ljg2LDIuOTUxLDIuOTUxLDAsMCwwLDEuMDgyLjU4OHEuNDMxLjE1NC44OC4zMDl0LjguM2EyLjg4NSwyLjg4NSwwLDAsMSwxLjI4Ni45NTUsMi41MTIsMi41MTIsMCwwLDEsLjQ0LDEuNTEyLDIuNjMyLDIuNjMyLDAsMCwxLS45MjcsMS45ODUsMy4zNjcsMy4zNjcsMCwwLDEtMS4wNzkuNkE0LjM5MSw0LjM5MSwwLDAsMSw3LDE5LjQ2MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMmMyYzJcXFwiLz48cGF0aCBkPVxcXCJNMTguOTIxLDExLjQzNGE0LjMzOCw0LjMzOCwwLDAsMSwuOTcxLDEuNDMyLDQuODM0LDQuODM0LDAsMCwxLC4zNTksMS45MTQsNC45NTgsNC45NTgsMCwwLDEtLjcyLDIuNjgsNC4wMzYsNC4wMzYsMCwwLDEtMi4wMzgsMS42NjEsMi4xNTEsMi4xNTEsMCwwLDAsLjQyLDEuMjcyLDEuMTY4LDEuMTY4LDAsMCwwLC45NS41MzcsMy41NjMsMy41NjMsMCwwLDAsLjU5Mi0uMDQzcS4yNTQtLjA0My40NTgtLjF2LjU0M2E1Ljc1Myw1Ljc1MywwLDAsMS0uOTg1LjMsNi4wNTQsNi4wNTQsMCwwLDEtMS4zNy4xNTEsMi4yMDYsMi4yMDYsMCwwLDEtMS42MTItLjYyMSwyLjU3NCwyLjU3NCwwLDAsMS0uNzA4LTEuNzMyQTQuNTc5LDQuNTc5LDAsMCwxLDEzLjcsMTlhNC4xODYsNC4xODYsMCwwLDEtMS4yNTMtLjkzMiw0LjM4OCw0LjM4OCwwLDAsMS0uODQyLTEuMzc3LDQuNzY5LDQuNzY5LDAsMCwxLS4zMTItMS43NTMsNS4yMzcsNS4yMzcsMCwwLDEsLjM0Ny0xLjk0OCw0LjUsNC41LDAsMCwxLC45NTMtMS41LDQuMTE5LDQuMTE5LDAsMCwxLDEuNDI1LS45NDIsNC44Niw0Ljg2LDAsMCwxLDMuNS0uMDA5QTQuMjQ3LDQuMjQ3LDAsMCwxLDE4LjkyMSwxMS40MzRabS0xLjUsNi4yNjZhNC44NTcsNC44NTcsMCwwLDAsLjM3OS0xLjI3Myw5Ljk4MSw5Ljk4MSwwLDAsMCwuMTE3LTEuNjA2LDEwLjUzNCwxMC41MzQsMCwwLDAtLjEtMS40OCw0LjkzNiw0LjkzNiwwLDAsMC0uMzQ3LTEuMjgyLDIuNDEsMi40MSwwLDAsMC0uNjY1LS45LDEuNTcxLDEuNTcxLDAsMCwwLTEuMDMyLS4zNCwxLjczLDEuNzMsMCwwLDAtMS42LDEuMDYsNi42MzQsNi42MzQsMCwwLDAtLjU0OCwyLjk5Myw5LjU4Myw5LjU4MywwLDAsMCwuMTIsMS41NTEsNC44LDQuOCwwLDAsMCwuMzc2LDEuMjczLDIuMjg2LDIuMjg2LDAsMCwwLC42NjUuODU2LDEuNTkxLDEuNTkxLDAsMCwwLC45OTEuMzA2LDEuNjExLDEuNjExLDAsMCwwLC45OTEtLjMwOUEyLjEzNSwyLjEzNSwwLDAsMCwxNy40MjMsMTcuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMmMyYzJcXFwiLz48cGF0aCBkPVxcXCJNMjguNSwxMi44aC0uNDU1YTMuOTMsMy45MywwLDAsMC0uNi0xLjA4NiwxLjM4NSwxLjM4NSwwLDAsMC0uODEyLS42M2MtLjExNi0uMDE2LS4yNzItLjAzMS0uNDY1LS4wNDNzLS4zNzMtLjAxOS0uNTM1LS4wMTlIMjQuMzQ5djMuNDMzaC44MjJhMS45NjksMS45NjksMCwwLDAsLjYwNi0uMDgzLDEuMDU0LDEuMDU0LDAsMCwwLC40NTUtLjMsMS41OTEsMS41OTEsMCwwLDAsLjI4My0uNTE2LDIuNjM1LDIuNjM1LDAsMCwwLC4xNjYtLjYyMWguNDQzdjMuNjg2aC0uNDQzYTIuNDcxLDIuNDcxLDAsMCwwLS4xODEtLjY3NiwyLjA5NCwyLjA5NCwwLDAsMC0uMjY4LS41MjgsMS4wMTIsMS4wMTIsMCwwLDAtLjQzMS0uMjkzLDEuODQyLDEuODQyLDAsMCwwLS42My0uMWgtLjgyMnYyLjlhLjg0Mi44NDIsMCwwLDAsLjA3OS4zOC41OC41OCwwLDAsMCwuMy4yNTYsMS44NywxLjg3LDAsMCwwLC4zNTMuMXEuMjI0LjA0Ni40NDYuMDcxdi40ODJoLTQuNDZ2LS40ODJsLjQ0OS0uMDUyYTEuNTI1LDEuNTI1LDAsMCwwLC4zOTEtLjA4My41NDcuNTQ3LDAsMCwwLC4yOTItLjI0MS44NDIuODQyLDAsMCwwLC4wODItLjR2LTYuMThhLjg2Ny44NjcsMCwwLDAtLjA3My0uMzY3LjU3NS41NzUsMCwwLDAtLjMtLjI2MiwyLjM0MSwyLjM0MSwwLDAsMC0uNDMxLS4xMzZxLS4yNjgtLjA2Mi0uNDA4LS4wOHYtLjQ4MkgyOC41WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPlwiLFxuXHR9LFxuXHRcIlNRRjogU3RhdHVzIFF1byBGdW5jdGlvbiAoQXJtYSAzKVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjMmMyYzJcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yNSwyMy41SDdhNS4wMTUsNS4wMTUsMCwwLDEtNS01di02YTUuMDE1LDUuMDE1LDAsMCwxLDUtNUgyNWE1LjAxNSw1LjAxNSwwLDAsMSw1LDV2NmE1LjAxNSw1LjAxNSwwLDAsMS01LDVaXFxcIi8+PHBhdGggZD1cXFwiTTcsMTkuNDYxYTQuODEsNC44MSwwLDAsMS0xLjQxNC0uMiw1LjA1Miw1LjA1MiwwLDAsMS0xLjExMS0uNDcybC0uNC40MzJoLS41TDMuNSwxNi4wNTJINGE4LjQ2Miw4LjQ2MiwwLDAsMCwuNDMxLjk1Myw0LjYzOCw0LjYzOCwwLDAsMCwuNjA2LjksMy4xNzcsMy4xNzcsMCwwLDAsLjguNjc1LDEuOTg1LDEuOTg1LDAsMCwwLDEuMDI5LjI2LDEuNjcyLDEuNjcyLDAsMCwwLDEuMjE2LS40MTFBMS4zODIsMS4zODIsMCwwLDAsOC41LDE3LjM5MWExLjE1NiwxLjE1NiwwLDAsMC0uMzU5LS44NjIsMi45NDUsMi45NDUsMCwwLDAtMS4xMTEtLjZxLS40OS0uMTY3LS45LS4zMXQtLjc3My0uMjkyYTIuNTgsMi41OCwwLDAsMS0xLjIzOS0xLjAwNywyLjczLDIuNzMsMCwwLDEtLjQwNS0xLjQ2NSwyLjQwNiwyLjQwNiwwLDAsMSwuMjEtLjk4NiwyLjYwOCwyLjYwOCwwLDAsMSwuNjEyLS44NSwyLjk2NywyLjk2NywwLDAsMSwuOTg1LS41NzUsMy43MjIsMy43MjIsMCwwLDEsMS4zMDYtLjIyMywzLjk4NCwzLjk4NCwwLDAsMSwxLjI4OC4yLDUuMTUxLDUuMTUxLDAsMCwxLC45NDQuNDA4bC4zNTYtLjM3aC41MDdsLjA0NywyLjk4OGgtLjVxLS4xNzUtLjQ4My0uNDExLS45ODdhNC4zMzIsNC4zMzIsMCwwLDAtLjUtLjgzOSwyLjMsMi4zLDAsMCwwLS42NTktLjU3MywxLjcyOSwxLjcyOSwwLDAsMC0uODc1LS4yMTRBMS40MzcsMS40MzcsMCwwLDAsNiwxMS4yMTJhMS4yMzMsMS4yMzMsMCwwLDAtLjQuOTM0LDEuMTQxLDEuMTQxLDAsMCwwLC4zNDcuODYsMi45NTEsMi45NTEsMCwwLDAsMS4wODIuNTg4cS40MzEuMTU0Ljg4LjMwOXQuOC4zYTIuODg1LDIuODg1LDAsMCwxLDEuMjg2Ljk1NSwyLjUxMiwyLjUxMiwwLDAsMSwuNDQsMS41MTIsMi42MzIsMi42MzIsMCwwLDEtLjkyNywxLjk4NSwzLjM2NywzLjM2NywwLDAsMS0xLjA3OS42QTQuMzkxLDQuMzkxLDAsMCwxLDcsMTkuNDYxWlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPjxwYXRoIGQ9XFxcIk0xOC45MjEsMTEuNDM0YTQuMzM4LDQuMzM4LDAsMCwxLC45NzEsMS40MzIsNC44MzQsNC44MzQsMCwwLDEsLjM1OSwxLjkxNCw0Ljk1OCw0Ljk1OCwwLDAsMS0uNzIsMi42OCw0LjAzNiw0LjAzNiwwLDAsMS0yLjAzOCwxLjY2MSwyLjE1MSwyLjE1MSwwLDAsMCwuNDIsMS4yNzIsMS4xNjgsMS4xNjgsMCwwLDAsLjk1LjUzNywzLjU2MywzLjU2MywwLDAsMCwuNTkyLS4wNDNxLjI1NC0uMDQzLjQ1OC0uMXYuNTQzYTUuNzUzLDUuNzUzLDAsMCwxLS45ODUuMyw2LjA1NCw2LjA1NCwwLDAsMS0xLjM3LjE1MSwyLjIwNiwyLjIwNiwwLDAsMS0xLjYxMi0uNjIxLDIuNTc0LDIuNTc0LDAsMCwxLS43MDgtMS43MzJBNC41NzksNC41NzksMCwwLDEsMTMuNywxOWE0LjE4Niw0LjE4NiwwLDAsMS0xLjI1My0uOTMyLDQuMzg4LDQuMzg4LDAsMCwxLS44NDItMS4zNzcsNC43NjksNC43NjksMCwwLDEtLjMxMi0xLjc1Myw1LjIzNyw1LjIzNywwLDAsMSwuMzQ3LTEuOTQ4LDQuNSw0LjUsMCwwLDEsLjk1My0xLjUsNC4xMTksNC4xMTksMCwwLDEsMS40MjUtLjk0Miw0Ljg2LDQuODYsMCwwLDEsMy41LS4wMDlBNC4yNDcsNC4yNDcsMCwwLDEsMTguOTIxLDExLjQzNFptLTEuNSw2LjI2NmE0Ljg1Nyw0Ljg1NywwLDAsMCwuMzc5LTEuMjczLDkuOTgxLDkuOTgxLDAsMCwwLC4xMTctMS42MDYsMTAuNTM0LDEwLjUzNCwwLDAsMC0uMS0xLjQ4LDQuOTM2LDQuOTM2LDAsMCwwLS4zNDctMS4yODIsMi40MSwyLjQxLDAsMCwwLS42NjUtLjksMS41NzEsMS41NzEsMCwwLDAtMS4wMzItLjM0LDEuNzMsMS43MywwLDAsMC0xLjYsMS4wNiw2LjYzNCw2LjYzNCwwLDAsMC0uNTQ4LDIuOTkzLDkuNTgzLDkuNTgzLDAsMCwwLC4xMiwxLjU1MSw0LjgsNC44LDAsMCwwLC4zNzYsMS4yNzMsMi4yODYsMi4yODYsMCwwLDAsLjY2NS44NTYsMS41OTEsMS41OTEsMCwwLDAsLjk5MS4zMDYsMS42MTEsMS42MTEsMCwwLDAsLjk5MS0uMzA5QTIuMTM1LDIuMTM1LDAsMCwwLDE3LjQyMywxNy43WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPjxwYXRoIGQ9XFxcIk0yOC41LDEyLjhoLS40NTVhMy45MywzLjkzLDAsMCwwLS42LTEuMDg2LDEuMzg1LDEuMzg1LDAsMCwwLS44MTItLjYzYy0uMTE2LS4wMTYtLjI3Mi0uMDMxLS40NjUtLjA0M3MtLjM3My0uMDE5LS41MzUtLjAxOUgyNC4zNDl2My40MzNoLjgyMmExLjk2OSwxLjk2OSwwLDAsMCwuNjA2LS4wODMsMS4wNTQsMS4wNTQsMCwwLDAsLjQ1NS0uMywxLjU5MSwxLjU5MSwwLDAsMCwuMjgzLS41MTYsMi42MzUsMi42MzUsMCwwLDAsLjE2Ni0uNjIxaC40NDN2My42ODZoLS40NDNhMi40NzEsMi40NzEsMCwwLDAtLjE4MS0uNjc2LDIuMDk0LDIuMDk0LDAsMCwwLS4yNjgtLjUyOCwxLjAxMiwxLjAxMiwwLDAsMC0uNDMxLS4yOTMsMS44NDIsMS44NDIsMCwwLDAtLjYzLS4xaC0uODIydjIuOWEuODQyLjg0MiwwLDAsMCwuMDc5LjM4LjU4LjU4LDAsMCwwLC4zLjI1NiwxLjg3LDEuODcsMCwwLDAsLjM1My4xcS4yMjQuMDQ2LjQ0Ni4wNzF2LjQ4MmgtNC40NnYtLjQ4MmwuNDQ5LS4wNTJhMS41MjUsMS41MjUsMCwwLDAsLjM5MS0uMDgzLjU0Ny41NDcsMCwwLDAsLjI5Mi0uMjQxLjg0Mi44NDIsMCwwLDAsLjA4Mi0uNHYtNi4xOGEuODY3Ljg2NywwLDAsMC0uMDczLS4zNjcuNTc1LjU3NSwwLDAsMC0uMy0uMjYyLDIuMzQxLDIuMzQxLDAsMCwwLS40MzEtLjEzNnEtLjI2OC0uMDYyLS40MDgtLjA4di0uNDgySDI4LjVaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzJjMmMyXFxcIi8+XCIsXG5cdH0sXG5cdFwiU1FMXCI6IHtcblx0XHRjb2xvdXI6IFwiI2ZmZGE0NFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTguNTYyLDE1LjI1NkEyMS4xNTksMjEuMTU5LDAsMCwwLDE2LDE2LjQ0OWEyMS4xNTksMjEuMTU5LDAsMCwwLDcuNDM4LTEuMTk0YzEuODY0LS43MjcsMi41MjUtMS41MzUsMi41MjUtMlY5LjdhMTAuMzU3LDEwLjM1NywwLDAsMS0yLjA4NCwxLjA3NkEyMi4yOTMsMjIuMjkzLDAsMCwxLDE2LDEyLjA3OGEyMi4zNiwyMi4zNiwwLDAsMS03Ljg3OS0xLjNBMTAuMjgsMTAuMjgsMCwwLDEsNi4wMzcsOS43djMuNTVDNi4wMzcsMTMuNzI0LDYuNywxNC41MjgsOC41NjIsMTUuMjU2WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZGE0NFxcXCIvPjxwYXRoIGQ9XFxcIk04LjU2MiwyMS45NjFhMTUuNjExLDE1LjYxMSwwLDAsMCwyLjYuNzQxQTI0LjksMjQuOSwwLDAsMCwxNiwyMy4xNTVhMjQuOSwyNC45LDAsMCwwLDQuODM4LS40NTIsMTUuNjE0LDE1LjYxNCwwLDAsMCwyLjYtLjc0MWMxLjg2NC0uNzI3LDIuNTI1LTEuNTM1LDIuNTI1LTJ2LTMuMzlhMTAuNzA2LDEwLjcwNiwwLDAsMS0xLjY5Mi44MjVBMjMuNDksMjMuNDksMCwwLDEsMTYsMTguNzRhMjMuNDksMjMuNDksMCwwLDEtOC4yNzEtMS4zNDgsMTAuODI5LDEwLjgyOSwwLDAsMS0xLjY5Mi0uODI1VjE5Ljk2QzYuMDM3LDIwLjQyNiw2LjcsMjEuMjMxLDguNTYyLDIxLjk2MVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmRhNDRcXFwiLz48cGF0aCBkPVxcXCJNMTYsMzBjNS41LDAsOS45NjMtMS43NDQsOS45NjMtMy44OTRWMjMuMjY5YTEwLjUsMTAuNSwwLDAsMS0xLjUzNS43NjJsLS4xNTcuMDYzQTIzLjQ4NywyMy40ODcsMCwwLDEsMTYsMjUuNDQ1YTIzLjQyMiwyMy40MjIsMCwwLDEtOC4yNzEtMS4zNTFjLS4wNTQtLjAyLS4xMDYtLjA0My0uMTU3LS4wNjNhMTAuNSwxMC41LDAsMCwxLTEuNTM1LS43NjJ2Mi44MzdDNi4wMzcsMjguMjU2LDEwLjUsMzAsMTYsMzBaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZkYTQ0XFxcIi8+PGVsbGlwc2UgY3g9XFxcIjE2XFxcIiBjeT1cXFwiNS44OTRcXFwiIHJ4PVxcXCI5Ljk2M1xcXCIgcnk9XFxcIjMuODk0XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZkYTQ0XFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCItLVwiLFxuXHRcdF0sXG5cdH0sXG5cdFwiU3F1aXJyZWxcIjoge1xuXHRcdGNvbG91cjogXCIjYTA1YTJjXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTIuOTY2LDI3LjNhMTguOTI2LDE4LjkyNiwwLDAsMS01LjcwNy0uOTE1Yy0xLjgzMi0uNTkyLTQuMDQ0LTEuNTQtNC45MzEtMy42NDVhLjU1Ny41NTcsMCwwLDEtLjAyNS0uMDczLDEyLjIxNCwxMi4yMTQsMCwwLDEsLjc2My03LjUzMWMxLjUyMi00LjAwOCwzLjcxLTYuNzM5LDYuNS04LjExNmExMC40MjIsMTAuNDIyLDAsMCwxLDcuNi0uNTUsMTAuNDI2LDEwLjQyNiwwLDAsMSw2LjA0LDQuNjM5LDExLjA1NywxMS4wNTcsMCwwLDEsMS4wNTgsMi4zMjYsMTAuNjYsMTAuNjYsMCwwLDEtNS4zNzgsMTIuNjg5bC0uMDIuMDA5QTE0LjgzMiwxNC44MzIsMCwwLDEsMTIuOTY2LDI3LjNaXFxcIi8+PHBhdGggZD1cXFwiTTIyLjcyLDExLjM5M2ExMC4xNDQsMTAuMTQ0LDAsMCwwLTEyLjktMy44NjlDNi43LDkuMDYxLDQuNzg0LDEyLjIsMy41OTMsMTUuMzM0YTExLjksMTEuOSwwLDAsMC0uNzQ2LDcuMTg3Yy43ODMsMS44NiwyLjc3OSwyLjc0NCw0LjU4MiwzLjMyN2ExNi4yMDYsMTYuMjA2LDAsMCwwLDExLjIxMy0uMjMyQTEwLjExLDEwLjExLDAsMCwwLDIzLjcyNywxMy42LDEwLjQ4OCwxMC40ODgsMCwwLDAsMjIuNzIsMTEuMzkzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2EwNWEyY1xcXCIvPjxwYXRoIGQ9XFxcIk0xNS43ODIsNi43MkE4LjI2Myw4LjI2MywwLDAsMSwxNy42NCw4LjA4NCw5LjY1LDkuNjUsMCwwLDEsMTkuMDgsOS44YTkuMzE3LDkuMzE3LDAsMCwxLTEuNTMxLDExLjkyMUExNC45MzMsMTQuOTMzLDAsMCwxLDcuNjU2LDI0LjdhNy41ODEsNy41ODEsMCwwLDEtNC4xMzUtMS4xLDguNDU0LDguNDU0LDAsMCwwLDMuOTA3LDIuMjQxLDE2LjIwOCwxNi4yMDgsMCwwLDAsMTEuMjE0LS4yMzNBMTAuMTEyLDEwLjExMiwwLDAsMCwyMy43MjcsMTMuNmExMC40ODcsMTAuNDg3LDAsMCwwLTEuMDA3LTIuMjExQTkuOTczLDkuOTczLDAsMCwwLDE1Ljc4Miw2LjcyWlxcXCIgc3R5bGU9XFxcImZpbGwtb3BhY2l0eTowLjMxMzcyNTUwMTI5ODkwNDRcXFwiLz48cGF0aCBkPVxcXCJNMjMuNDc2LDEzLjM4OWwtMS4wNjItMi44OTUuMTUyLS4yMzZBNi44NzUsNi44NzUsMCwwLDEsMjcuNTA5LDcuN2EyLjE3NywyLjE3NywwLDAsMSwxLjg3OS41ODgsMy4zNzYsMy4zNzYsMCwwLDEsLjEsMy43MjljLS4zNDMuMjkyLS43NTEuMTI0LTEuMjIyLS4wN2EyLjgyMSwyLjgyMSwwLDAsMC0yLjEzMy0uMjcsMTAuMiwxMC4yLDAsMCwwLTIuMDQ3LDEuMjA5WlxcXCIvPjxwYXRoIGQ9XFxcIk0yMy4wMzksMTAuNTYzYzEuMjIzLTEuOSw1LjEwNy0yLjkxNSw1LjkxMi0xLjkyM2EyLjk3LDIuOTcsMCwwLDEsLjE3NywyLjk0NWMtLjI0NS4yMDctMS44MzctMS4wNTktMy4yMjUtLjQyM0ExMC41NzQsMTAuNTc0LDAsMCwwLDIzLjczLDEyLjQ1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzUwMmQxNlxcXCIvPjxwYXRoIGQ9XFxcIk0yOS40LDkuNzI3YS44LjgsMCwwLDEtLjIuNDY5Yy0uMjI5LjE2Mi0xLjktLjUwNi0zLjIzOC4wNTZhMTIuNDM5LDEyLjQzOSwwLDAsMC0yLjA3MSwxLjA3TDIzLjIsMTAuMzRjLS4wNTcuMDc0LS4xMTYuMTQ3LS4xNjUuMjIzbC42OTIsMS44ODZBMTAuNTc3LDEwLjU3NywwLDAsMSwyNS45LDExLjE2MmMxLjM4OC0uNjM2LDIuOTguNjMxLDMuMjI1LjQyM0EyLjg0NiwyLjg0NiwwLDAsMCwyOS40LDkuNzI3WlxcXCIgc3R5bGU9XFxcImZpbGwtb3BhY2l0eTowLjMxMzcyNTUwMTI5ODkwNDRcXFwiLz48cGF0aCBkPVxcXCJNMjEuMzgyLDI1LjE4YTIuMjM2LDIuMjM2LDAsMCwxLTEuMTQ3LS4zMjMuNTYzLjU2MywwLDAsMS0uMDgyLS44ODhjLjczNy0uNjg0LjYwNy0yLjE3My0uNDEtNC42ODlhMzYuNTI2LDM2LjUyNiwwLDAsMC01LjEyMy04LjgyNWwtLjM1LS40M2MtMS41MTItMS44NjUtMi4zNTgtMi44MTUtMy41NTQtMi4zYS41NjIuNTYyLDAsMCwxLS40MTMuMDE2LjU3MS41NzEsMCwwLDEtLjM3Ny0uNTkyLDIuMTE5LDIuMTE5LDAsMCwxLDEuNDYxLTJjNC43MTYtMS40ODEsMTAuMjYuODE0LDEyLjkwNSw1LjM0NGExMS4yLDExLjIsMCwwLDEtMS40MzEsMTMuOTkxQTEuOTE5LDEuOTE5LDAsMCwxLDIxLjM4MiwyNS4xOFpcXFwiLz48cGF0aCBkPVxcXCJNMjMuODEyLDEwLjc4M2MtMi40NDQtNC4xOTItNy43My02LjUyOC0xMi4yNy01LjA5My0xLjAwNy4yNDgtMS4wNjUsMS41MzUtMS4wNTIsMS41MTcsMS43NzYtLjc2NywyLjk1My45MTksNC41NjYsMi44OWEzNi45LDM2LjksMCwwLDEsNS4yMDksOC45NzFjLjg5LDIuMiwxLjQsNC4yNjcuMjcsNS4zMTJhMS41LDEuNSwwLDAsMCwxLjkwOS0uMjc0QTEwLjY0NiwxMC42NDYsMCwwLDAsMjMuODEyLDEwLjc4M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM1MDJkMTZcXFwiLz48cGF0aCBkPVxcXCJNMjMuNjQ5LDEwLjM0NmE5LjMxNCw5LjMxNCwwLDAsMS0yLjUxOCw3LjcyNWMtLjQ1NS40ODYtLjg3My4xNzctMS4yNjMuMDYzLjEzOC4zMTMuMjcxLjYyNi40LjkzNi44OSwyLjIsMS40LDQuMjY2LjI3MSw1LjMxMmExLjUsMS41LDAsMCwwLDEuOTA5LS4yNzRDMjYuMDg5LDIwLjE4MywyNi4zNTcsMTQuOTE5LDIzLjY0OSwxMC4zNDZaXFxcIiBzdHlsZT1cXFwiZmlsbC1vcGFjaXR5OjAuMzEzNzI1NTAxMjk4OTA0NFxcXCIvPlwiLFxuXHR9LFxuXHRcIlN0YW5cIjoge1xuXHRcdGNvbG91cjogXCIjYjIwMDFkXCIsXG5cdFx0aWNvbjogXCI8dGl0bGU+ZmlsZV90eXBlX3N0YW48L3RpdGxlPjxwYXRoIGQ9XFxcIk0xNiwyQTE0LDE0LDAsMCwwLDUuNjg4LDI1LjQ2OWMxLjctLjUxNCwzLjQxMS0uOTkyLDQuODA2LTEuMzU3LDQuMDM3LTEuMDU0LDEwLjk0OC0yLjgzNiwxMS45NDYtNS4wODItLjI4Ljc4LTEuMjE4LDIuODctMS4yMTgsMi44Ny0xLjI3OSwxLjI0Ny03LjA5LDIuNjMxLTEwLjkxNywzLjM2Ny0xLjIyLjIzNS0yLjYxNC41MDctNC4wMjYuODA2QTE0LDE0LDAsMCwwLDI4LjQ2Nyw5LjYyOGMtMi41MjYuNDA4LTEwLjUsMS44NTQtMTIuNTM5LDIuMzE1LTIuMjU1LjUwOS02Ljc4OSwxLjQzMy03LjY5NCwyLjk5M0M4LjgsMTMuNSwxMC40OTIsOS43NDQsMTAuNDkyLDkuNzQ0YzEuMjE2LTIsNi42LTMuNDI1LDEwLjM1OC00LjQ2My44NzYtLjI0MiwxLjkyMi0uNTM5LDMuMDIzLS44NThBMTMuOTM0LDEzLjkzNCwwLDAsMCwxNiwyWlxcXCIgc3R5bGU9XFxcImZpbGw6I2IyMDAxZFxcXCIvPjxwYXRoIGQ9XFxcIk04LjIyMywxNC45ODdjLS4yNTIsMS4xNzUsMy41MiwyLjMxMyw2LjkyMSwzLjM4OWEyNi4zNjIsMjYuMzYyLDAsMCwxLDUuNjY3LDIuMTkyLDMuMDg1LDMuMDg1LDAsMCwwLDEuNjYyLTEuNjE0Yy4zNzctMS40ODktMy4wMTMtMy4zOTMtNS4yNzQtNC4yMjlhMzMuMzM3LDMzLjMzNywwLDAsMS00LjQwNy0yLjA0MmMtNC4zMTYsMS4xNDMtNC41NjksMi4zLTQuNTY5LDIuM1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM1OTA4MTVcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIiNcIixcblx0XHRdLFxuXHR9LFxuXHRcIlN0YXRhIEFkb1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMzYzZlOGZcIixcblx0XHRpY29uOiBcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cXFwiYVxcXCIgeDE9XFxcIjE2XFxcIiB5MT1cXFwiMlxcXCIgeDI9XFxcIjE2XFxcIiB5Mj1cXFwiMzBcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiM4YWE3YzBcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiMzYzZlOGZcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3N0YXRhPC90aXRsZT48cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMjhcXFwiIGhlaWdodD1cXFwiMjhcXFwiIHJ4PVxcXCIxLjU1NlxcXCIgcnk9XFxcIjEuNTU2XFxcIiBzdHlsZT1cXFwiZmlsbDp1cmwoI2EpXFxcIi8+PHJlY3QgeD1cXFwiMTMuMTcxXFxcIiB5PVxcXCI2LjAxNVxcXCIgd2lkdGg9XFxcIjUuNzU2XFxcIiBoZWlnaHQ9XFxcIjUuNzU2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHJlY3QgeD1cXFwiMjAuMzI2XFxcIiB5PVxcXCI2LjAxNVxcXCIgd2lkdGg9XFxcIjUuNzU2XFxcIiBoZWlnaHQ9XFxcIjUuNzU2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHJlY3QgeD1cXFwiMjAuMzI2XFxcIiB5PVxcXCIxMy4xNzFcXFwiIHdpZHRoPVxcXCI1Ljc1NlxcXCIgaGVpZ2h0PVxcXCI1Ljc1NlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxyZWN0IHg9XFxcIjEzLjE3MVxcXCIgeT1cXFwiMTMuMTcxXFxcIiB3aWR0aD1cXFwiNS43NTZcXFwiIGhlaWdodD1cXFwiNS43NTZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cmVjdCB4PVxcXCI2LjAxNVxcXCIgeT1cXFwiMTMuMTcxXFxcIiB3aWR0aD1cXFwiNS43NTZcXFwiIGhlaWdodD1cXFwiNS43NTZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cmVjdCB4PVxcXCI2LjAxNVxcXCIgeT1cXFwiMjAuMzI2XFxcIiB3aWR0aD1cXFwiNS43NTZcXFwiIGhlaWdodD1cXFwiNS43NTZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cmVjdCB4PVxcXCIxMy4xNzFcXFwiIHk9XFxcIjIwLjMyNlxcXCIgd2lkdGg9XFxcIjUuNzU2XFxcIiBoZWlnaHQ9XFxcIjUuNzU2XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+XCIsXG5cdH0sXG5cdFwiU3R5bHVzXCI6IHtcblx0XHRjb2xvdXI6IFwiI2MyYzJjMlwiLFxuXHRcdGljb246IFwiPHRpdGxlPmZpbGVfdHlwZV9zdHlsdXM8L3RpdGxlPjxwYXRoIGQ9XFxcIk02LjMxNSwyMC43NzZjLjcyNi0uODY5LjgxMi0xLjc2Ni4yNDktMy40MzItLjM1Ni0xLjA1NC0uOTQ3LTEuODY1LS41MTMtMi41MjEuNDYzLS43LDEuNDQ1LS4wMjEuNjI3LjkxMWwuMTY0LjExNGMuOTgzLjExNCwxLjQ2Ny0xLjIzMi43MzMtMS42MTYtMS45MzctMS4wMTEtMy42MzEuOTMzLTIuODg0LDMuMTgzLjMyLjk1NC43NjksMS45NjUuNDA2LDIuNzdBMS43OTQsMS43OTQsMCwwLDEsMy43NzMsMjEuM2MtLjg0Ny4wNDMtLjI4NS0xLjkuNjkxLTIuMzg1LjA4NS0uMDQzLjIwNi0uMS4wOTMtLjI0MmEyLjEzNCwyLjEzNCwwLDAsMC0yLjMxNCwxLjJDMS4wNjEsMjIuMTIxLDQuNDg1LDIyLjk1NCw2LjMxNSwyMC43NzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzJjMmMyXFxcIi8+PHBhdGggZD1cXFwiTTI3LjQ2MiwxNC4xNGMuMjc4LjY4NC43LDEuMzYuNDQ5LDEuOTU4LS4yMDYuNTEzLS40NzcuNzI2LS43NzYuNzc2LS40Mi4wNzEtLjMwNi0xLjI0Ni40MTMtMS42MzguMDY0LS4wMzYuMTU3LS4yMDYuMDcxLS4zMDZhMS42MzYsMS42MzYsMCwwLDAtMS43Ljk2MWMtLjgsMS42ODcsMS44MjMsMi4xNSwzLjExMi40OTEuNTEzLS42NjIuNTM0LTEuMzE3LjA0My0yLjUwNi0uMzEzLS43NTUtLjc5LTEuMzE3LS40OTEtMS44MTYuMzItLjUyNywxLjA4OS0uMDcxLjUxMy42MzRsLjEyOC4wNzFjLjc0OC4wNDMsMS4wNTQtLjk1NC40ODQtMS4yQTEuODM0LDEuODM0LDAsMCwwLDI3LjQ2MiwxNC4xNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMmMyYzJcXFwiLz48cGF0aCBkPVxcXCJNMTcuOTUsMTIuMzM4Yy0uNTItLjQxMy0xLjk3OS4yNzgtMi4zOTIsMS4zYTE2LjIxMywxNi4yMTMsMCwwLDEtMi4wNDMsNC4wMzdjLS44Ljg3Ni0uODc2LjItLjgtLjMwNkExNS4zMjcsMTUuMzI3LDAsMCwxLDE0LjcsMTIuNjUyYy0uMjM1LS4zNDktMS43NzMtLjMtMi44NDEsMS4zNi0uNC42MjctMS4zMSwyLjcxMy0yLjMyMSw0LjM1OC0uMjIxLjM1Ni0uNS4xMDctLjI4NS0uNzI2YTM5LjgsMzkuOCwwLDAsMSwxLjg3My01LjY4MiwzOS4wNzIsMzkuMDcyLDAsMCwxLDYuOTIxLS44MTljLjI2My0uMDcxLjQ0MS0uMzA2LDAtLjMyYTQ2Ljc3OCw0Ni43NzgsMCwwLDAtNi41OTMuNDQxLDQuOTIzLDQuOTIzLDAsMCwxLDEuNDQ1LTEuOTQ0LDEuNzg3LDEuNzg3LDAsMCwwLTIuMjY0LjcxOSwxMi4yODcsMTIuMjg3LDAsMCwwLS44MTksMS40NTMsMjQuMTk0LDI0LjE5NCwwLDAsMC0zLjk4Ljg2MmMtLjc4My4zLS43LDEuMjQ2LS4yMjEsMS4wNjhhMzEuNjMxLDMxLjYzMSwwLDAsMSwzLjgxNi0xLjEsMzAuMjkyLDMwLjI5MiwwLDAsMC0xLjg2NSw1LjY4MmMtLjQ0MSwyLjQ5MiwxLjEsMi40NzgsMS44NTgsMS41LjgxOS0xLjA3NSwyLjUyOC00Ljg1NiwyLjc5MS01LjI1NS4wNzgtLjEzNS4xODUtLjA2NC4xMjguMDU3LTEuOTA4LDMuODA5LTEuNzQ0LDUuMjgzLS4yLDQuOTU2YTQuOTI5LDQuOTI5LDAsMCwwLDIuMjE0LTEuOTY1Yy4wNjQtLjE1LjItLjEzNS4xNzEtLjA3MS0xLjIxLDMuMTQtMi43NDgsNS42ODItMy43ODEsNi40NzktLjk0LjcxOS0xLjYzOC0uODQsMS42ODctMy4wNzYuNDkxLS4zMzUuMjYzLS43OS0uMjkyLS42MzRoMGEyOS43OTMsMjkuNzkzLDAsMCwwLTguNzg2LDMuMzI1Yy0uMTY0LjExNC0uMzEzLjIwNi0uMzA2LjQ0MS4wMDcuMTM1LjI0Mi4wODUuMzU2LjAxNEEyMi43NzEsMjIuNzcxLDAsMCwxLDExLjEsMjAuOWEuMTU4LjE1OCwwLDAsMCwuMTE0LjAwN2MuMTIxLS4wMjguMTE0LjAzNi4wMzYuMDg1LS4xNzguMS0uMzU2LjE5Mi0uNC4yMDYtMS43NjYuNjkxLTIuODM0LDIuMjE0LTIuNDU2LDIuOTkuMzIuNjY5LDIuMDUxLjQyNywyLjg2OS0uMDE0LDIuMDA4LTEuMDg5LDMuNDY4LTMuMjI1LDQuNDY0LTYuMTczQzE2LjYsMTUuMzg2LDE3LjY5MywxMi40MjQsMTcuOTUsMTIuMzM4WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MyYzJjMlxcXCIvPjxwYXRoIGQ9XFxcIk0yOS42MiwxOC4zNjlhNDguMTQ1LDQ4LjE0NSwwLDAsMC0xMy40MjkuOTY4Yy0uOTI2LjI0Mi0uNjY5LjczMy0uMi42NDEuMDA3LDAsLjIwNi0uMDUuMjE0LS4wNWE0Mi4yNzksNDIuMjc5LDAsMCwxLDEyLjM3NS0uMjQyQzI5LjAxNCwxOS43NjUsMzAuMzE3LDE4LjQ2MiwyOS42MiwxOC4zNjlaXFxcIiBzdHlsZT1cXFwiZmlsbDojYzJjMmMyXFxcIi8+PHBhdGggZD1cXFwiTTE4Ljg2MSwxNy45ODVjLjkxMS0uNDU2LDIuMjY0LTMuMjc1LDMuMTU0LTQuODIuMDY0LS4xMTQuMTc4LS4wMjEuMTE0LjA1Ny0yLjI1LDMuODczLTEuMyw0LjMyMi0uNDA2LDQuMjY1LDEuMTg5LS4wNzEsMi4yODYtMS43OCwyLjUyOC0yLjE2NS4xLS4xNS4xNTctLjAyOC4xLjA3OC0uMDU3LjE3OC0uMjYzLjQ5MS0uNDU2LjkxOS0uMjcxLjYwNS4wMTQuODQuMjQ5Ljk0Ny4zNy4xNzgsMS4zODEuMDY0LDEuNTM4LS41NTUtMS4wMTEtLjAyMSwxLjQxLTQuNzkyLDEuNjU5LTUuMDg0YTEuNzE4LDEuNzE4LDAsMCwwLTIuMi45NzVjLTEuMDE4LDIuMDE1LTEuODczLDMuNjM4LTIuNDA3LDMuNjY3LTEuMDQuMDU3LDEuMi00LjQ5MywxLjU1OS00LjYzNS0uMjIxLS4zMi0xLjYzOC0uMTg1LTIuNDI4LDEuMDQtLjI4NS40NDEtMi4wMjIsMy41MTctMi40NDksNC4wMjMtLjc1NS45LS44MTIuMTI4LS42LS43NjlhMTAuNTY5LDEwLjU2OSwwLDAsMSwuMzQ5LTEuMTMyLDUuMzI0LDUuMzI0LDAsMCwxLDEuMzYtMS44NDRjMi4yLTIuNDQyLDMuNDYtNC40MjIsMi45NjItNS4yLS40NDEtLjY5MS0xLjkxNS0uMzg0LTIuODYyLDEuMDQtMS43NDQsMi42MTMtMy4zNTQsNi4xOTUtMy41Niw3LjgzMlMxOC4wNTYsMTguMzgzLDE4Ljg2MSwxNy45ODVabS45MjYtNC43OTJjLjA3OC0uMTc4LjEyOC0uMjI4LjI2My0uNTI3aDBBMjQuOTM0LDI0LjkzNCwwLDAsMSwyMi40OTIsOC4yOGMuNDItLjQ0MSwxLjAxMS4xNTctLjA1NywxLjc5NGExNi40NjIsMTYuNDYyLDAsMCwxLTIuMTE1LDIuNjQydi4wMDdjLS4yLjIyMS0uMzc3LjQwNi0uNDU2LjUxM0MxOS44MDgsMTMuMzA3LDE5Ljc0NCwxMy4yOTIsMTkuNzg3LDEzLjE5M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiNjMmMyYzJcXFwiLz5cIixcblx0fSxcblx0XCJTVkdcIjoge1xuXHRcdGNvbG91cjogXCIjZmZiMTNiXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNNy42NzQsMTQuNDg4YTIuMjE4LDIuMjE4LDAsMSwwLDAsMy4xMzdIMjQuMzI2YTIuMjE4LDIuMjE4LDAsMSwwLDAtMy4xMzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiMTNiO3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDozLjczMDAwMDAxOTA3MzQ5cHhcXFwiLz48cGF0aCBkPVxcXCJNMTEuMjIyLDkuMDZBMi4yMTgsMi4yMTgsMCwxLDAsOSwxMS4yNzhMMjAuNzc4LDIzLjA1MkEyLjIxOCwyLjIxOCwwLDEsMCwyMywyMC44MzRaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiMTNiO3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDozLjczMDAwMDAxOTA3MzQ5cHhcXFwiLz48cGF0aCBkPVxcXCJNMTcuNTY4LDcuNzNhMi4yMTgsMi4yMTgsMCwxLDAtMy4xMzcsMFYyNC4zODJhMi4yMTgsMi4yMTgsMCwxLDAsMy4xMzcsMFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmIxM2I7c3Ryb2tlOiMwMDA7c3Ryb2tlLXdpZHRoOjMuNzMwMDAwMDE5MDczNDlweFxcXCIvPjxwYXRoIGQ9XFxcIk0yMywxMS4yNzhBMi4yMTgsMi4yMTgsMCwxLDAsMjAuNzc4LDkuMDZMOSwyMC44MzRhMi4yMTgsMi4yMTgsMCwxLDAsMi4yMTgsMi4yMThaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiMTNiO3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDozLjczMDAwMDAxOTA3MzQ5cHhcXFwiLz48cGF0aCBkPVxcXCJNNy42NzQsMTQuNDg4YTIuMjE4LDIuMjE4LDAsMSwwLDAsMy4xMzdIMjQuMzI2YTIuMjE4LDIuMjE4LDAsMSwwLDAtMy4xMzdaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiMTNiXFxcIi8+PHBhdGggZD1cXFwiTTExLjIyMiw5LjA2QTIuMjE4LDIuMjE4LDAsMSwwLDksMTEuMjc4TDIwLjc3OCwyMy4wNTJBMi4yMTgsMi4yMTgsMCwxLDAsMjMsMjAuODM0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmYjEzYlxcXCIvPjxwYXRoIGQ9XFxcIk0xNy41NjgsNy43M2EyLjIxOCwyLjIxOCwwLDEsMC0zLjEzNywwVjI0LjM4MmEyLjIxOCwyLjIxOCwwLDEsMCwzLjEzNywwWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmYjEzYlxcXCIvPjxwYXRoIGQ9XFxcIk0yMywxMS4yNzhBMi4yMTgsMi4yMTgsMCwxLDAsMjAuNzc4LDkuMDZMOSwyMC44MzRhMi4yMTgsMi4yMTgsMCwxLDAsMi4yMTgsMi4yMThaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZiMTNiXFxcIi8+PHBhdGggZD1cXFwiTTIsMTYuMDU2SDMwVjI1Ljk1YTQuMDM1LDQuMDM1LDAsMCwxLTQuMTA2LDQuMTA2SDYuMTA2QTQuMDM1LDQuMDM1LDAsMCwxLDIsMjUuOTVaXFxcIi8+PHBhdGggZD1cXFwiTTYuMiwyMy4wNDVBMy42MjgsMy42MjgsMCwxLDEsMTIuNCwyMC40OEgxMC4yN0ExLjUsMS41LDAsMSwwLDcuNywyMS41NDFoMGExLjYsMS42LDAsMCwwLDEuMDYyLjQ0MWgwYTQuMTE4LDQuMTE4LDAsMCwxLDIuNTY2LDEuMDYzaDBhMy42MjgsMy42MjgsMCwxLDEtNi4xOTQsMi41NjVINy4yNjRBMS41LDEuNSwwLDEsMCw5LjgzLDI0LjU1aDBhMS45NDgsMS45NDgsMCwwLDAtMS4wNjMtLjQ0aDBBNC40NjUsNC40NjUsMCwwLDEsNi4yLDIzLjA0NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMTkuNjUxLDE2Ljg1MiwxNy4wODUsMjkuMjRIMTQuOTZMMTIuNCwxNi44NTJIMTQuNTJsMS41LDcuMjU1LDEuNS03LjI1NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48cGF0aCBkPVxcXCJNMjMuMjgsMjEuOTgzaDMuNjI4djMuNjI4aDBhMy42MjgsMy42MjgsMCwxLDEtNy4yNTcsMGgwVjIwLjQ4aDBhMy42MjgsMy42MjgsMCwwLDEsNy4yNTcsMEgyNC43ODNhMS41LDEuNSwwLDEsMC0zLjAwNSwwdjUuMTNoMGExLjUsMS41LDAsMCwwLDMuMDA1LDBoMHYtMS41aC0xLjVWMjEuOTgzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlN3aWZ0XCI6IHtcblx0XHRjb2xvdXI6IFwiI0ZBNUQyRFwiLFxuXHRcdGljb246IFwiPGRlZnM+PGxpbmVhckdyYWRpZW50IGlkPVxcXCJhXFxcIiB4MT1cXFwiLTEzNC40OTRcXFwiIHkxPVxcXCItMTcxLjgyXFxcIiB4Mj1cXFwiLTEzNC40OTdcXFwiIHkyPVxcXCItMTcxLjg5XFxcIiBncmFkaWVudFRyYW5zZm9ybT1cXFwibWF0cml4KDI0MCwgMCwgMCwgLTIwNS42LCAzMjI5NSwgLTM1MzEyLjU4NSlcXFwiIGdyYWRpZW50VW5pdHM9XFxcInVzZXJTcGFjZU9uVXNlXFxcIj48c3RvcCBvZmZzZXQ9XFxcIjBcXFwiIHN0b3AtY29sb3I9XFxcIiNmODg1MzVcXFwiLz48c3RvcCBvZmZzZXQ9XFxcIjFcXFwiIHN0b3AtY29sb3I9XFxcIiNmZDIyMjFcXFwiLz48L2xpbmVhckdyYWRpZW50PjwvZGVmcz48dGl0bGU+ZmlsZV90eXBlX3N3aWZ0PC90aXRsZT48cGF0aCBkPVxcXCJNMTkuNDIyLDQuMDA3czYuMjE3LDMuNTU0LDcuODQ0LDkuMmMxLjQ2Niw1LjEuMjkyLDcuNTM0LjI5Miw3LjUzNGE4LjkxNSw4LjkxNSwwLDAsMSwxLjc0MiwyLjgsNC44MjUsNC44MjUsMCwwLDEsLjI5LDQuNDUzcy0uMS0yLjA4LTMuMi0yLjUxMWMtMi44NDEtLjQtMy44NzQsMi4zNjYtOS4zLDIuMjMyQTE4LjQzNSwxOC40MzUsMCwwLDEsMiwxOS4zNTRDNC42NTEsMjAuOCw4LjEyNCwyMy4wNDUsMTIuNDQ5LDIyLjdzNS4yMjgtMS42NzQsNS4yMjgtMS42NzRBNjYuOSw2Ni45LDAsMCwxLDQuODkxLDcuNjQzYzMuNCwyLjg0NSwxMS44MjIsOC41MDcsMTEuNjI2LDguMzYzQTc1LjgyNiw3NS44MjYsMCwwLDEsOC4wOTIsNi4yNFMyMC43MjgsMTYuNjI5LDIxLjc0NSwxNi41NjNjLjQxOC0uODYxLDIuNTc5LTUuMzE4LTIuMzI0LTEyLjU1N1pcXFwiIHN0eWxlPVxcXCJmaWxsOnVybCgjYSlcXFwiLz5cIixcblx0XHRpbmxpbmVDb21tZW50OiBbXG5cdFx0XHRcIi8vXCIsXG5cdFx0XSxcblx0fSxcblx0XCJTeXN0ZW1kIGNvbmZpZ3VyYXRpb24gZmlsZVwiOiB7XG5cdFx0Y29sb3VyOiBcIiMzMGQ0NzVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDEydjhINS4yNTZWMTguNzY5SDMuM1YxMy4yMzFINS4yNTZWMTJaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDJkMmQyXFxcIi8+PHBhdGggZD1cXFwiTTI2Ljc0NCwxMnYxLjIzMUgyOC43djUuNTM4SDI2Ljc0NFYyMEgzMFYxMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMmQyZDJcXFwiLz48cGF0aCBkPVxcXCJNMTcuNjI4LDE2bDUuMjEtMi43Njl2NS41MzhaXFxcIiBzdHlsZT1cXFwiZmlsbDojMzBkNDc1XFxcIi8+PGVsbGlwc2UgY3g9XFxcIjEyLjA5M1xcXCIgY3k9XFxcIjE2XFxcIiByeD1cXFwiMi45M1xcXCIgcnk9XFxcIjIuNzY5XFxcIiBzdHlsZT1cXFwiZmlsbDojMzBkNDc1XFxcIi8+XCIsXG5cdH0sXG5cdFwiVDQgdGVtcGxhdGluZ1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMxZTg4ZTVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xOS41NDUsNi4wMzVIMTMuMjdWMjRIOC4zVjYuMDM1SDIuMDU1VjJoMTcuNDlaXFxcIiBzdHlsZT1cXFwiZmlsbDojMWU4OGU1XFxcIi8+PHBhdGggZD1cXFwiTTI3LjU2NywxMFYyMi42MDhoMi40VjI1LjloLTIuNFYzMEgyMy41NTFWMjUuOUgxNC44MzRWMjIuNDU1cTEuMTU4LTEuMywyLjQtMi44Mzh0Mi40LTMuMTczcTEuMTU4LTEuNjMyLDIuMTU1LTMuMjg1QTMyLjkyNSwzMi45MjUsMCwwLDAsMjMuNDgxLDEwWk0xOC43ODEsMjIuNjA4aDQuNzdWMTUuNjIxcS0uNDg4LjkwNy0xLjA2LDEuODM0dC0xLjIsMS44MjdxLS42MjguOS0xLjI2OSwxLjc0M1QxOC43ODEsMjIuNjA4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFlODhlNVxcXCIvPlwiLFxuXHR9LFxuXHRcIlQ0IFRleHQgVGVtcGxhdGVzIChDIylcIjoge1xuXHRcdGNvbG91cjogXCIjMWU4OGU1XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTkuNTQ1LDYuMDM1SDEzLjI3VjI0SDguM1Y2LjAzNUgyLjA1NVYyaDE3LjQ5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFlODhlNVxcXCIvPjxwYXRoIGQ9XFxcIk0yNy41NjcsMTBWMjIuNjA4aDIuNFYyNS45aC0yLjRWMzBIMjMuNTUxVjI1LjlIMTQuODM0VjIyLjQ1NXExLjE1OC0xLjMsMi40LTIuODM4dDIuNC0zLjE3M3ExLjE1OC0xLjYzMiwyLjE1NS0zLjI4NUEzMi45MjUsMzIuOTI1LDAsMCwwLDIzLjQ4MSwxMFpNMTguNzgxLDIyLjYwOGg0Ljc3VjE1LjYyMXEtLjQ4OC45MDctMS4wNiwxLjgzNHQtMS4yLDEuODI3cS0uNjI4LjktMS4yNjksMS43NDNUMTguNzgxLDIyLjYwOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxZTg4ZTVcXFwiLz5cIixcblx0fSxcblx0XCJUNCBUZXh0IFRlbXBsYXRlcyAoVkIpXCI6IHtcblx0XHRjb2xvdXI6IFwiIzFlODhlNVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE5LjU0NSw2LjAzNUgxMy4yN1YyNEg4LjNWNi4wMzVIMi4wNTVWMmgxNy40OVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxZTg4ZTVcXFwiLz48cGF0aCBkPVxcXCJNMjcuNTY3LDEwVjIyLjYwOGgyLjRWMjUuOWgtMi40VjMwSDIzLjU1MVYyNS45SDE0LjgzNFYyMi40NTVxMS4xNTgtMS4zLDIuNC0yLjgzOHQyLjQtMy4xNzNxMS4xNTgtMS42MzIsMi4xNTUtMy4yODVBMzIuOTI1LDMyLjkyNSwwLDAsMCwyMy40ODEsMTBaTTE4Ljc4MSwyMi42MDhoNC43N1YxNS42MjFxLS40ODguOTA3LTEuMDYsMS44MzR0LTEuMiwxLjgyN3EtLjYyOC45LTEuMjY5LDEuNzQzVDE4Ljc4MSwyMi42MDhaXFxcIiBzdHlsZT1cXFwiZmlsbDojMWU4OGU1XFxcIi8+XCIsXG5cdH0sXG5cdFwiVGNsXCI6IHtcblx0XHRjb2xvdXI6IFwiI2VmZjFjYlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIxLjk0MiwyLjg3NmMuMDQsMi40NjgtLjAzMyw0LjkxLTIuMTY5LDcuMjNsLS4wNzkuMDg5aC4xMTlsLjg3My4wMTNjLTEuNDE4LDIuOTUtMi4zNDEsNS44OTItNC4zOCw4LjgzbC0uMDczLjEwNi4xMjYtLjAyMywxLjA3OC0uMmE1Ljg1MSw1Ljg1MSwwLDAsMS0zLjQ4NCwzLjY1Yy0uMzktNS40NTUsMi4zMzMtMTAuMjcsNC42NDUtMTUuMDcxbC4wMDctLjAxMy0uMDg2LS4wNmMtMy43ODYsNC4yMzMtNS40OTEsMTAuMi02LjEzNiwxNS4xMjdhNC41ODIsNC41ODIsMCwwLDEtMi4xNDUtMi45ODhsLjkuMzc3LjA5My4wNC0uMDItLjFjLS42ODEtMy4wMjguMzc2LTUuMiwxLjQtOC4wNTZsLjczNy40OTMuMDg2LjA2LDAtLjFjLS4wNTgtMi4zMiwxLjUtNC42NDksMy41NzctNi43MjdsLjI4OC43Ny4wNC4xLjA1Ni0uMS42MzEtMS4wNTEsMC0uMDA3QTYuMSw2LjEsMCwwLDEsMjEuOTQyLDIuODc2WlxcXCIgc3R5bGU9XFxcImZpbGw6I2MzYjE1ZlxcXCIvPjxwYXRoIGQ9XFxcIk0yMS45NDgsMi44NzVhNi4xMzEsNi4xMzEsMCwwLDAtMy45MjYsMi4zODhsMCwuMDA3LS42MzEsMS4wNTEtLjA1Ni4xLS4wNC0uMUwxNyw1LjU0NGMtMi4wNzIsMi4wNzgtMy42MzUsNC40MDctMy41NzcsNi43MjdsMCwuMS0uMDg2LS4wNi0uNzM3LS40OTNjLTEuMDI1LDIuODU2LTIuMDgzLDUuMDI5LTEuNCw4LjA1NmwuMDIuMS0uMDkzLS4wNC0uODg2LS4zNzRjMCwuMDE4LjAwNy4wMzUuMDEuMDUzYTQuNTMzLDQuNTMzLDAsMCwwLDIuMTI2LDIuOTMyYy4wNS0uMzgxLjEwNS0uNzcxLjE2OS0xLjE2NC0xLjU0My0zLjYxNC0uMi02LjI3MS40MDctOC42NjFsLjkzOS41NDJjLS4xMy0yLjIzOCwxLjE4NC00LjY1MSwyLjg5My02Ljc1N2wuNS44NzNDMTguNTU1LDQuNzY5LDE5LjU2LDMuNzIsMjEuOTQ4LDIuODc1WlxcXCIgc3R5bGU9XFxcImZpbGw6I2VmZjFjYjtzdHJva2U6I2VmZjFjYlxcXCIvPjxwYXRoIGQ9XFxcIk0yMi41MTgsMmwtLjA1Ni4wMWMtMi4wODIuMzYzLTQuMTIxLDEuMTI4LTUuMDE1LDIuOTU5bC0uMzc3LS42NTgtLjAzMy0uMDYtLjA1LjA1YTIwLjg1LDIwLjg1LDAsMCwwLTIuOTM5LDMuNUE1LjkzOSw1LjkzOSwwLDAsMCwxMi44MzUsMTFsLS41MzItLjY2NC0uMDUzLS4wNjYtLjAzNi4wNzZhMjcuNTM1LDI3LjUzNSwwLDAsMC0xLjY5Myw0LjcsNi43Myw2LjczLDAsMCwwLS4xNTksMy43MTlsLS44NzYtLjUwOS0uMDczLS4wNDMtLjAwNy4wODZhNS41MjksNS41MjksMCwwLDAsMi4wMTcsNC44NDNsLS45NzIuMjQxLS4yLjA1LjIuMDUzYTQuMjU4LDQuMjU4LDAsMCwxLDEuNDU1LjYsMS4zMjUsMS4zMjUsMCwwLDEsLjUxNiwxLjNWMjguMWwuMDEuMDEzLDEuMjE3LDEuNzQ1LjEuMTM5VjI1LjcxOWEzLjQ2NiwzLjQ2NiwwLDAsMSwuNjIxLTEuNDg0QTEuNjM5LDEuNjM5LDAsMCwxLDE1LjUsMjMuN2wuMTgyLS4wMjMtLjE2NS0uMDc2LS42NDEtLjNhOS4xMTIsOS4xMTIsMCwwLDAsMy42OTMtNS4zMjJsLjAyLS4wODYtLjA4My4wMjMtLjc5My4yMTVhMTEuNjY5LDExLjY2OSwwLDAsMCwyLjA4OS0zLjVDMjAuNTEyLDEzLDIxLjE4LDExLjE2NiwyMS43MjgsOS43bC4wMy0uMDc5LS4wODMuMDA3LS42MTIuMDQzYTYuNjU1LDYuNjU1LDAsMCwwLDEuMzgyLTMuNTI3LDE3LjAzOSwxNy4wMzksMCwwLDAsLjA3OS00LjA4NlptLS41NzUuODc2Yy4wNCwyLjQ2OC0uMDMzLDQuOTEtMi4xNjksNy4yM2wtLjA3OS4wODloLjExOWwuODczLjAxM2MtMS40MTgsMi45NS0yLjM0MSw1Ljg5Mi00LjM4LDguODNsLS4wNzMuMTA2LjEyNi0uMDIzLDEuMDc4LS4yYTUuODUxLDUuODUxLDAsMCwxLTMuNDg0LDMuNjVjLS4zOS01LjQ1NSwyLjMzMy0xMC4yNyw0LjY0NS0xNS4wNzFsLjAwNy0uMDEzLS4wODYtLjA2Yy0zLjc4Niw0LjIzMy01LjQ5MSwxMC4yLTYuMTM2LDE1LjEyN2E0LjU4Miw0LjU4MiwwLDAsMS0yLjE0NS0yLjk4OGwuOS4zNzcuMDkzLjA0LS4wMi0uMWMtLjY4MS0zLjAyOC4zNzYtNS4yLDEuNC04LjA1NmwuNzM3LjQ5My4wODYuMDYsMC0uMWMtLjA1OC0yLjMyLDEuNS00LjY0OSwzLjU3Ny02LjcyN2wuMjg4Ljc3LjA0LjEuMDU2LS4xLjYzMS0xLjA1MSwwLS4wMDdBNi4xLDYuMSwwLDAsMSwyMS45NDIsMi44NzZaXFxcIi8+XCIsXG5cdH0sXG5cdFwiVGVtcGxhdGUgVG9vbGtpdCAyXCI6IHtcblx0XHRjb2xvdXI6IFwiIzNiY2VmY1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTguOTA3LDIzLjAyMUg4Ljg3OGEzLjMwNSwzLjMwNSwwLDAsMS0yLjAxMS0uNjYxQTIuNTYxLDIuNTYxLDAsMCwxLDUuODMsMjAuMzM0VjE2LjFINC4yODhhMy4wNSwzLjA1LDAsMCwxLTIuNzM4LTEuNjksMy4zLDMuMywwLDAsMSwuNDQxLTMuNTMsMi4yNjUsMi4yNjUsMCwwLDEsMS44MTUtLjloOS42NWEzLjA1LDMuMDUsMCwwLDEsMi43MzgsMS42OSwzLjMsMy4zLDAsMCwxLS40NDEsMy41MywyLjI2NSwyLjI2NSwwLDAsMS0xLjgxNS45SDExLjk1NXY0LjIzMWEyLjU2MSwyLjU2MSwwLDAsMS0xLjAzNywyLjAyNkEzLjMwNSwzLjMwNSwwLDAsMSw4LjkwNywyMy4wMjFaTTQuMjY0LDExLjYzNmExLjM5LDEuMzksMCwwLDAtMS4zODgsMS4zODh2LjAzM2ExLjM5LDEuMzksMCwwLDAsMS4zODgsMS4zODhINy40ODd2NS44ODFjMCwuNTcyLjYyNCwxLjAzNywxLjM5LDEuMDM3aC4wMjljLjc2NywwLDEuMzktLjQ2NSwxLjM5LTEuMDM3VjE0LjQ0NmgzLjIyM2ExLjM5LDEuMzksMCwwLDAsMS4zODgtMS4zODh2LS4wMzNhMS4zOSwxLjM5LDAsMCwwLTEuMzg4LTEuMzg4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAxNWQ5YVxcXCIvPjxwYXRoIGQ9XFxcIk0xNC45ODEsMTIuOTUzdi4wMzNhMS41MzMsMS41MzMsMCwwLDEtMS41MzMsMS41MzNIMTAuMzd2NS43MzdhMS4zOTMsMS4zOTMsMCwwLDEtMS41MzUsMS4xODFIOC44MDZhMS4zOTMsMS4zOTMsMCwwLDEtMS41MzUtMS4xODFWMTQuNTE4SDQuMTkyQTEuNTMzLDEuNTMzLDAsMCwxLDIuNjYsMTIuOTg2di0uMDMzQTEuNTMzLDEuNTMzLDAsMCwxLDQuMTkyLDExLjQyaDkuMjU3QTEuNTMzLDEuNTMzLDAsMCwxLDE0Ljk4MSwxMi45NTNabS00LjIyMyw5LjIyMmEyLjQxOCwyLjQxOCwwLDAsMCwuOTgtMS45MTJWMTUuODg4aDIuMTI3YTIuMTE0LDIuMTE0LDAsMCwwLDEuNy0uODQ2LDIuOTkyLDIuOTkyLDAsMCwwLTIuMTgtNC45OUgzLjczNWEyLjExNCwyLjExNCwwLDAsMC0xLjcuODQ2LDIuOTkyLDIuOTkyLDAsMCwwLDIuMTgsNC45OUg1Ljl2NC4zNzVhMi40MTgsMi40MTgsMCwwLDAsLjk4LDEuOTEyLDMuMTYsMy4xNiwwLDAsMCwxLjkyMy42MzFoLjAyOUEzLjE2LDMuMTYsMCwwLDAsMTAuNzU4LDIyLjE3NFpcXFwiIHN0eWxlPVxcXCJmaWxsOiMzYmNlZmNcXFwiLz48cGF0aCBkPVxcXCJNMjMuNjA3LDIzLjAyMWgtLjAyOWEzLjMwNSwzLjMwNSwwLDAsMS0yLjAxMS0uNjYxLDIuNTYxLDIuNTYxLDAsMCwxLTEuMDM3LTIuMDI2VjE2LjFIMTguOTg4YTMuMDUsMy4wNSwwLDAsMS0yLjczOC0xLjY5LDMuMywzLjMsMCwwLDEsLjQ0MS0zLjUzLDIuMjY1LDIuMjY1LDAsMCwxLDEuODE1LS45aDkuNjVhMy4wNSwzLjA1LDAsMCwxLDIuNzM4LDEuNjksMy4zLDMuMywwLDAsMS0uNDQxLDMuNTMsMi4yNjUsMi4yNjUsMCwwLDEtMS44MTUuOUgyNi42NTV2NC4yMzFhMi41NjEsMi41NjEsMCwwLDEtMS4wMzcsMi4wMjZBMy4zMDUsMy4zMDUsMCwwLDEsMjMuNjA3LDIzLjAyMVpNMTguOTY0LDExLjYzNmExLjM5LDEuMzksMCwwLDAtMS4zODgsMS4zODh2LjAzM2ExLjM5LDEuMzksMCwwLDAsMS4zODgsMS4zODhoMy4yMjN2NS44ODFjMCwuNTcyLjYyNCwxLjAzNywxLjM5LDEuMDM3aC4wMjljLjc2NywwLDEuMzktLjQ2NSwxLjM5LTEuMDM3VjE0LjQ0NmgzLjIyM2ExLjM5LDEuMzksMCwwLDAsMS4zODgtMS4zODh2LS4wMzNhMS4zOSwxLjM5LDAsMCwwLTEuMzg4LTEuMzg4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzAxNWQ5YVxcXCIvPjxwYXRoIGQ9XFxcIk0yOS42ODEsMTIuOTUzdi4wMzNhMS41MzMsMS41MzMsMCwwLDEtMS41MzMsMS41MzNIMjUuMDd2NS43MzdhMS4zOTMsMS4zOTMsMCwwLDEtMS41MzUsMS4xODFoLS4wMjlhMS4zOTMsMS4zOTMsMCwwLDEtMS41MzUtMS4xODFWMTQuNTE4SDE4Ljg5MmExLjUzMywxLjUzMywwLDAsMS0xLjUzMy0xLjUzM3YtLjAzM2ExLjUzMywxLjUzMywwLDAsMSwxLjUzMy0xLjUzM2g5LjI1N0ExLjUzMywxLjUzMywwLDAsMSwyOS42ODEsMTIuOTUzWm0tNC4yMjMsOS4yMjJhMi40MTgsMi40MTgsMCwwLDAsLjk4LTEuOTEyVjE1Ljg4OGgyLjEyN2EyLjExNCwyLjExNCwwLDAsMCwxLjctLjg0NiwyLjk5MiwyLjk5MiwwLDAsMC0yLjE4LTQuOTloLTkuNjVhMi4xMTQsMi4xMTQsMCwwLDAtMS43Ljg0NiwyLjk5MiwyLjk5MiwwLDAsMCwyLjE4LDQuOTlIMjAuNnY0LjM3NWEyLjQxOCwyLjQxOCwwLDAsMCwuOTgsMS45MTIsMy4xNiwzLjE2LDAsMCwwLDEuOTIzLjYzMWguMDI5QTMuMTYsMy4xNiwwLDAsMCwyNS40NTgsMjIuMTc0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzNiY2VmY1xcXCIvPlwiLFxuXHR9LFxuXHRcIlRlWFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNjZmNmY2ZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xMS4zMzMsMTMuMTIyYy0uMTI4LTEuNTYyLS4yNDEtMi43NTYtMi4yODctMi43NTZINy45MXY4LjRoMi4xNDV2LjYxMWwtMy4wODMtLjAyOS0zLjA4Mi4wMjl2LS42MTFINi4wMzR2LTguNEg0Ljg4NGMtMi4wNDYsMC0yLjE1OSwxLjIwOC0yLjI4NywyLjc1NkgybC4yODQtMy4zNjdoOS4zNjJsLjI4NCwzLjM2N2gtLjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2ZjZmNmXFxcIi8+PHBhdGggZD1cXFwiTTE5LjI4OSwyMi41M0gxMC40MVYyMS45MmgxLjUwNlYxMy40NjdIMTAuNDF2LS42MTFoOC42MzdsLjQxMiwzLjM2N2gtLjZjLS4yMTMtMS44MzMtLjY4Mi0yLjc1Ni0yLjg1NS0yLjc1NkgxMy43OTFWMTcuMmguODM4YzEuMzY0LDAsMS41MDUtLjYsMS41MDUtMS42NjJoLjZ2My45MzVoLS42YzAtMS4wOC0uMTQyLTEuNjYyLTEuNTA1LTEuNjYyaC0uODM4djQuMTA2aDIuMjE2YzIuNDcyLDAsMy0xLjEwOCwzLjMtMy4yMjVoLjZaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2ZjZmNmXFxcIi8+PHBhdGggZD1cXFwiTTI3LjcyNywxOS4xODZjLS41NCwwLTEuOTYsMC0yLjQxNS4wMjlWMTguNmgxLjE3OWwtMi41NTctMy41NTItMi41MjksMy4zODFBNC4xLDQuMSwwLDAsMCwyMi43LDE4LjZ2LjYxMWMtLjM1NS0uMDI5LTEuNTc2LS4wMjktMi4wMTctLjAyOS0uNCwwLTEuNTQ4LDAtMS44NzUuMDI5VjE4LjZoLjM4M2E3LjQ1OSw3LjQ1OSwwLDAsMCwuODI0LS4wNDNjLjUtLjA0My41NC0uMDg1LjY2Ny0uMjU2TDIzLjUzNiwxNC41bC0zLjE1My00LjQxOEgxOVY5LjQ3Yy4zODQuMDI4LDEuNzkuMDI4LDIuMjczLjAyOC41ODIsMCwxLjkxOCwwLDIuNDI5LS4wMjh2LjYxMUgyMi41MjhsMi4xMTcsMi45NTUsMi4wNzQtMi43ODRhNC4xLDQuMSwwLDAsMC0xLjI5My0uMTdWOS40N2MuMzU2LjAyOCwxLjU5MS4wMjgsMi4wMzIuMDI4LjQsMCwxLjUzNCwwLDEuODYxLS4wMjh2LjYxMWgtLjM2OWE1LjI2NCw1LjI2NCwwLDAsMC0uODM4LjA0M2MtLjQ2OS4wNDMtLjUyNi4wNzEtLjY2Ny4yNTZsLTIuNCwzLjIxTDI4LjYzNiwxOC42SDMwdi42MTFDMjkuNjQ1LDE5LjE4NiwyOC4xODIsMTkuMTg2LDI3LjcyNywxOS4xODZaXFxcIiBzdHlsZT1cXFwiZmlsbDojY2ZjZmNmXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIlXCIsXG5cdFx0XSxcblx0fSxcblx0XCJUZXh0aWxlXCI6IHtcblx0XHRjb2xvdXI6IFwiI2ZmZTdhY1wiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTI4LjY4MSwyNi4wNzVIMy4zMTlBMS4zMTcsMS4zMTcsMCwwLDEsMiwyNC43NTZWNy4yNDRBMS4zMTcsMS4zMTcsMCwwLDEsMy4zMTksNS45MjVIMjguNjgxQTEuMzE3LDEuMzE3LDAsMCwxLDMwLDcuMjQ0VjI0Ljc2QTEuMzE2LDEuMzE2LDAsMCwxLDI4LjY4MSwyNi4wNzVaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZlN2FjXFxcIi8+PHBhdGggZD1cXFwiTTYuMDY2LDEyLjg0OGE0Ljk4Nyw0Ljk4NywwLDAsMSwxLjUwOC0uNjU5VjEwLjY2NGEzLjcsMy43LDAsMCwxLC43NDMtLjMzLDcuODY5LDcuODY5LDAsMCwxLDEuMzI3LS4zNDdoLjY0MnYyLjM5MWgyLjQ4NFYxMy42SDEwLjI4NnY0Ljg0OGEzLjE3MiwzLjE3MiwwLDAsMCwuMjksMS42MDksMS4wNywxLjA3LDAsMCwwLC45NzEuNDQ4LDcuMTI3LDcuMTI3LDAsMCwwLC43Ni0uMDQ4LDMuMzM4LDMuMzM4LDAsMCwwLC43ODItLjE4bC4xMzIuNjJhMi4zODgsMi4zODgsMCwwLDEtLjUuMzU2LDUuNDU3LDUuNDU3LDAsMCwxLS43NTIuMzU2LDUuODM3LDUuODM3LDAsMCwxLS45MjMuMjgxQTQuNzY5LDQuNzY5LDAsMCwxLDEwLDIyYTIuMzg1LDIuMzg1LDAsMCwxLTEuODI0LS42MzcsMi45NDcsMi45NDcsMCwwLDEtLjYtMi4wNjJWMTMuNTkxSDYuMDY2WlxcXCIvPjxwYXRoIGQ9XFxcIk0xNC42MDcsMjAuNDUzYTEuNDQ3LDEuNDQ3LDAsMCwxLC40MzEtMS4wOSwxLjU5MSwxLjU5MSwwLDAsMSwxLjE0Ny0uNDEzLDEuNjQ5LDEuNjQ5LDAsMCwxLDEuMTY1LjQxMywxLjQyMiwxLjQyMiwwLDAsMSwuNDUzLDEuMDksMS4zNjksMS4zNjksMCwwLDEtLjQ1MywxLjA4MSwxLjY5MiwxLjY5MiwwLDAsMS0xLjE2NS40LDEuNjEsMS42MSwwLDAsMS0xLjE0Ny0uNEExLjQyNywxLjQyNywwLDAsMSwxNC42MDcsMjAuNDUzWlxcXCIvPlwiLFxuXHR9LFxuXHRcIlRPTUxcIjoge1xuXHRcdGNvbG91cjogXCIjYmZiZmJmXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMjIuNzYsNi44M3YzLjI1aC01VjI1LjE3SDE0LjI2VjEwLjA4aC01VjYuODNaXFxcIiBzdHlsZT1cXFwiZmlsbDojN2Y3ZjdmXFxcIi8+PHBhdGggZD1cXFwiTTIsMkg4LjJWNS4wOUg1LjM0djIxLjhIOC4yVjMwSDJaXFxcIiBzdHlsZT1cXFwiZmlsbDojYmZiZmJmXFxcIi8+PHBhdGggZD1cXFwiTTMwLDMwSDIzLjhWMjYuOTFoMi44NlY1LjExSDIzLjhWMkgzMFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNiZmJmYmZcXFwiLz5cIixcblx0fSxcblx0XCJUU0NvbmZpZ1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDdhY2NcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMy44MjcsOC4yNDNBNC40MjQsNC40MjQsMCwwLDEsMjYuMDUsOS41MjRhNS44NTMsNS44NTMsMCwwLDEsLjg1MiwxLjE0M2MuMDExLjA0NS0xLjUzNCwxLjA4My0yLjQ3MSwxLjY2Mi0uMDM0LjAyMy0uMTY5LS4xMjQtLjMyMi0uMzVhMi4wMTQsMi4wMTQsMCwwLDAtMS42Ny0xYy0xLjA3Ny0uMDc0LTEuNzcxLjQ5LTEuNzY2LDEuNDMzYTEuMywxLjMsMCwwLDAsLjE1My42NjZjLjIzNy40OS42NzcuNzg0LDIuMDU5LDEuMzgzLDIuNTQ0LDEuMSwzLjYzNiwxLjgxNyw0LjMxLDIuODQzYTUuMTU4LDUuMTU4LDAsMCwxLC40MTYsNC4zMzMsNC43NjQsNC43NjQsMCwwLDEtMy45MzIsMi44MTUsMTAuOSwxMC45LDAsMCwxLTIuNzA4LS4wMjgsNi41MzEsNi41MzEsMCwwLDEtMy42MTYtMS44ODQsNi4yNzgsNi4yNzgsMCwwLDEtLjkyNi0xLjM3MSwyLjY1NSwyLjY1NSwwLDAsMSwuMzI3LS4yMDhjLjE1OC0uMDkuNzU2LS40MzQsMS4zMi0uNzYxbDEuMDI0LS42LjIxNC4zMTJhNC43NzEsNC43NzEsMCwwLDAsMS4zNSwxLjI5MiwzLjMsMy4zLDAsMCwwLDMuNDU4LS4xNzUsMS41NDUsMS41NDUsMCwwLDAsLjItMS45NzRjLS4yNzYtLjQtLjg0LS43MjctMi40NDMtMS40MjJhOC44LDguOCwwLDAsMS0zLjM0OS0yLjA1NSw0LjY4Nyw0LjY4NywwLDAsMS0uOTc2LTEuNzc3LDcuMTE2LDcuMTE2LDAsMCwxLS4wNjItMi4yNjgsNC4zMzIsNC4zMzIsMCwwLDEsMy42NDQtMy4zNzRBOSw5LDAsMCwxLDIzLjgyNyw4LjI0M1pNMTUuNDg0LDkuNzI2bC4wMTEsMS40NTRoLTQuNjNWMjQuMzI4SDcuNlYxMS4xODNIMi45N1Y5Ljc1NWExMy45ODYsMTMuOTg2LDAsMCwxLC4wNC0xLjQ2NmMuMDE3LS4wMjMsMi44MzItLjAzNCw2LjI0NS0uMDI4bDYuMjExLjAxN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDdhY2NcXFwiLz48cGF0aCBkPVxcXCJNMjcuMDc1LDI1LjEwN2wuMzYzLS4zNjFjMS42OC4wNTUsMS43MDYsMCwxLjc4LS4xNzdsLjQ2Mi0xLjEyNC4wMzQtLjEwNy0uMDM4LS4wOTNjLS4wMi0uMDQ5LS4wODEtLjItMS4xMy0xLjJ2LS41MjZjMS4yMTEtMS4xNjYsMS4xODUtMS4yMjYsMS4xMTYtMS40bC0uNDYtMS4xMzZjLS4wNjktLjE3LS4xLS4yMzctMS43NjMtLjE5MWwtLjM2NC0uMzY3YTguMTM4LDguMTM4LDAsMCwwLS4wNTctMS42NTdsLS4wNDctLjEwNi0xLjItLjUyNWMtLjE3Ny0uMDgxLS4yMzktLjExLTEuMzcyLDEuMTI0bC0uNTA5LS4wMDhjLTEuMTY3LTEuMjQ1LTEuMjIyLTEuMjIzLTEuNC0xLjE1MmwtMS4xMTUuNDUyYy0uMTc1LjA3MS0uMjM2LjEtLjE2OSwxLjc5bC0uMzYuMzU5Yy0xLjY4LS4wNTUtMS43LDAtMS43NzguMTc3TDE4LjYwNiwyMGwtLjAzNi4xMDguMDM4LjA5NGMuMDIuMDQ4LjA3OC4xOTQsMS4xMywxLjJ2LjUyNWMtMS4yMTEsMS4xNjYtMS4xODQsMS4yMjYtMS4xMTUsMS40bC40NTksMS4xMzdjLjA3LjE3NC4xLjIzNiwxLjc2My4xOTJsLjM2My4zNzdhOC4xNjksOC4xNjksMCwwLDAsLjA1NSwxLjY1NGwuMDQ3LjEwNywxLjIwOC41MjhjLjE3Ni4wNzMuMjM2LjEsMS4zNjYtMS4xM2wuNTA5LjAwNmMxLjE2OCwxLjI0NywxLjIyOCwxLjIyMywxLjQsMS4xNTRsMS4xMTMtLjQ1QzI3LjA4MiwyNi44MjcsMjcuMTQzLDI2LjgsMjcuMDc1LDI1LjEwN1ptLTQuNzg4LTIuNjMyYTIsMiwwLDEsMSwyLjYxOCwxLjE0QTIuMDIzLDIuMDIzLDAsMCwxLDIyLjI4NywyMi40NzVaXFxcIiBzdHlsZT1cXFwiZmlsbDojOTliOGM0XFxcIi8+XCIsXG5cdH0sXG5cdFwiVHdpZ1wiOiB7XG5cdFx0Y29sb3VyOiBcIiM3OGRjNTBcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk00LjU3NCw1LjQ2M2MuMjYyLjQsMi41LTEuNjA4LDQuNDU0LTEuMTYxLDIuMDYxLjQ3Miw0LjAxNCwzLjcyNCw0Ljg0OCwxMy43YTQwLjE4LDQwLjE4LDAsMCwxLDMuNTQxLDMuNjFxLjUzLjYxNCwxLjAxMywxLjIyYTExLjg0NywxMS44NDcsMCwwLDEsLjIyOS0xLjQsMTIuMywxMi4zLDAsMCwxLDEuOTgxLTQuNEExOS4xNTEsMTkuMTUxLDAsMCwwLDE3LjI3Miw3LjljLTEuMDMtMS40NDUtNC42LTYuNDc4LTguNTQ2LTUuODQzQzYuMTgyLDIuNDY1LDQuMyw1LjA1NCw0LjU3NCw1LjQ2M1pcXFwiIHN0eWxlPVxcXCJmaWxsOiM2M2JmNmFcXFwiLz48cGF0aCBkPVxcXCJNMjQuNCwzMGMtLjMyLTIuNTY3LS40NDgtNC43Ni0uNS02LjQ0OS0uMDk0LTMuMjMyLjEtNC41NDEuOS01Ljc1Ni4xOTMtLjI5NSwxLjI4OC0xLjk3NSwyLjU4LTEuODYzLDEuNDY2LjEyOCwyLjIxMywyLjQxNCwyLjM2MiwyLjMzNy4xNzUtLjA5LS4zNi0zLjU0My0yLjUzMi00LjQzMS0yLjYtMS4wNjMtNi4zMTIsMi4wNy03LjgsNS4xNTRhMTIuMjIzLDEyLjIyMywwLDAsMC0uODU3LDIuODEsMzIuNTU1LDMyLjU1NSwwLDAsMC0uNzEsOC4yWlxcXCIgc3R5bGU9XFxcImZpbGw6Izc0ZDc0ZFxcXCIvPjxwYXRoIGQ9XFxcIk0yLjIzOCwxMy45MzVjLjE0NS0uNDQ3LDIuNDY4LS4yNTksNC41NC4yOTMsMi41LjY2Niw3LDIuMzQ0LDExLjY1MSw4LjYwNkExMi41NDQsMTIuNTQ0LDAsMCwxLDIwLjI3OSwzMEgxMC4zODZhMjEuODc1LDIxLjg3NSwwLDAsMC0uMTc1LTQuNjIsMTQuOSwxNC45LDAsMCwwLTIuNDU5LTcuMTU4QzUuNDQxLDE1LjE1OSwyLjA1NSwxNC41LDIuMjM4LDEzLjkzNVpcXFwiIHN0eWxlPVxcXCJmaWxsOiM3OGRjNTBcXFwiLz48cGF0aCBkPVxcXCJNMTcuMywyMS4zMjNhMS43NTMsMS43NTMsMCwxLDEtLjUxMy0xLjI0QTEuNzQ4LDEuNzQ4LDAsMCwxLDE3LjMsMjEuMzIzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPjxwYXRoIGQ9XFxcIk0yMS45NzUsMjEuMzIzYTEuNzUzLDEuNzUzLDAsMSwxLS41MTMtMS4yNEExLjc0OCwxLjc0OCwwLDAsMSwyMS45NzUsMjEuMzIzWlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlR5cGVTY3JpcHRcIjoge1xuXHRcdGNvbG91cjogXCIjMzE3OGM2XCIsXG5cdFx0aWNvbjogXCI8cmVjdCB4PVxcXCIyXFxcIiB5PVxcXCIyXFxcIiB3aWR0aD1cXFwiMjhcXFwiIGhlaWdodD1cXFwiMjhcXFwiIHJ4PVxcXCIxLjMxMlxcXCIgc3R5bGU9XFxcImZpbGw6IzMxNzhjNlxcXCIvPjxwYXRoIGQ9XFxcIk0xOC4yNDUsMjMuNzU5djMuMDY4YTYuNDkyLDYuNDkyLDAsMCwwLDEuNzY0LjU3NSwxMS41NiwxMS41NiwwLDAsMCwyLjE0Ni4xOTIsOS45NjgsOS45NjgsMCwwLDAsMi4wODgtLjIxMSw1LjExLDUuMTEsMCwwLDAsMS43MzUtLjcsMy41NDIsMy41NDIsMCwwLDAsMS4xODEtMS4yNjYsNC40NjksNC40NjksMCwwLDAsLjE4Ni0zLjM5NCwzLjQwOSwzLjQwOSwwLDAsMC0uNzE3LTEuMTE3LDUuMjM2LDUuMjM2LDAsMCwwLTEuMTIzLS44NzcsMTIuMDI3LDEyLjAyNywwLDAsMC0xLjQ3Ny0uNzM0cS0uNi0uMjQ5LTEuMDgtLjQ4NGE1LjUsNS41LDAsMCwxLS44MTMtLjQ3OSwyLjA4OSwyLjA4OSwwLDAsMS0uNTE2LS41MTgsMS4wOTEsMS4wOTEsMCwwLDEtLjE4MS0uNjE4LDEuMDM5LDEuMDM5LDAsMCwxLC4xNjItLjU3MSwxLjQsMS40LDAsMCwxLC40NTktLjQzNiwyLjQzOSwyLjQzOSwwLDAsMSwuNzI2LS4yODMsNC4yMTEsNC4yMTEsMCwwLDEsLjk1Ni0uMSw1Ljk0Miw1Ljk0MiwwLDAsMSwuODA4LjA1OCw2LjI5Miw2LjI5MiwwLDAsMSwuODU2LjE3Nyw1Ljk5NCw1Ljk5NCwwLDAsMSwuODM2LjMsNC42NTcsNC42NTcsMCwwLDEsLjc1MS40MjJWMTMuOWE3LjUwOSw3LjUwOSwwLDAsMC0xLjUyNS0uNCwxMi40MjYsMTIuNDI2LDAsMCwwLTEuOS0uMTI5LDguNzY3LDguNzY3LDAsMCwwLTIuMDY0LjIzNSw1LjIzOSw1LjIzOSwwLDAsMC0xLjcxNi43MzMsMy42NTUsMy42NTUsMCwwLDAtMS4xNzEsMS4yNzEsMy43MzEsMy43MzEsMCwwLDAtLjQzMSwxLjg0NSwzLjU4OCwzLjU4OCwwLDAsMCwuNzg5LDIuMzQsNiw2LDAsMCwwLDIuMzk1LDEuNjM5cS42My4yNiwxLjE3NS41MDlhNi40NTgsNi40NTgsMCwwLDEsLjk0Mi41MTcsMi40NjMsMi40NjMsMCwwLDEsLjYyNi41ODUsMS4yLDEuMiwwLDAsMSwuMjMuNzE5LDEuMSwxLjEsMCwwLDEtLjE0NC41NTIsMS4yNjksMS4yNjksMCwwLDEtLjQzNS40NDEsMi4zODEsMi4zODEsMCwwLDEtLjcyNi4yOTIsNC4zNzcsNC4zNzcsMCwwLDEtMS4wMTguMTA1LDUuNzczLDUuNzczLDAsMCwxLTEuOTY5LS4zNUE1Ljg3NCw1Ljg3NCwwLDAsMSwxOC4yNDUsMjMuNzU5Wm0tNS4xNTQtNy42MzhoNFYxMy41OTRINS45Mzh2Mi41MjdIOS45MlYyNy4zNzVoMy4xNzFaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+XCIsXG5cdFx0aW5saW5lQ29tbWVudDogW1xuXHRcdFx0XCIvL1wiLFxuXHRcdF0sXG5cdH0sXG5cdFwiVHlwb1NjcmlwdFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmZjg3MDBcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMy4wOTMsMjEuM2EzLjg0NywzLjg0NywwLDAsMS0xLjE4LjE2NWMtMy41NTUsMC04Ljc3OC0xMi40MjQtOC43NzgtMTYuNTU5LDAtMS41MjMuMzYyLTIuMDMxLjg3LTIuNDY2QzkuNjUzLDIuOTQzLDQuNDMsNC41MzksMi43NjEsNi41N2E0LjA0OCw0LjA0OCwwLDAsMC0uNTgsMi4zMjFDMi4xODEsMTUuMzQ4LDkuMDcyLDMwLDEzLjkzMywzMGMyLjI0OCwwLDYuMDQxLTMuNyw5LjE2LTguN1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZmODcwMFxcXCIvPjxwYXRoIGQ9XFxcIk0yMC44MjMsMmM0LjUsMCw5LC43MjUsOSwzLjI2NCwwLDUuMTUxLTMuMjY0LDExLjM4OS00LjkzMywxMS4zODktMi45NzQsMC02LjY3My04LjI2OS02LjY3My0xMi40LDAtMS44ODYuNzI1LTIuMjQ5LDIuNjExLTIuMjQ5XFxcIiBzdHlsZT1cXFwiZmlsbDojZmY4NzAwXFxcIi8+XCIsXG5cdH0sXG5cdFwiVlwiOiB7XG5cdFx0Y29sb3VyOiBcIiM1ZDg3YmZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMC40NjcsMjkuMjg4LDI5Ljk1MiwyLjkxM2EuNS41LDAsMCwwLS41NjYtLjcyOEwyMS45MjcsMi45YTEuNDY0LDEuNDY0LDAsMCwwLTEuMTQxLjlMMTIuMDA3LDI5LjAwNmEuNTczLjU3MywwLDAsMCwuNTc4LjgxM2g3LjI2YS42NTcuNjU3LDAsMCwwLC41NzctLjRaXFxcIiBzdHlsZT1cXFwiZmlsbDojNTM2YjhhXFxcIi8+PHBhdGggZD1cXFwiTTIuNjE0LDIuMTg1bDcuNDU5LjcxOWExLjQ2NiwxLjQ2NiwwLDAsMSwxLjE0Mi45TDIwLjE4LDI5LjQxM2EuMjg2LjI4NiwwLDAsMS0uMjg5LjQwNkgxMi41ODVhMS4zMTEsMS4zMTEsMCwwLDEtMS4xNTItLjgxTDIuMDQ4LDIuOTEzQS41LjUsMCwwLDEsMi42MTQsMi4xODVaXFxcIiBzdHlsZT1cXFwiZmlsbDojNWQ4N2JmXFxcIi8+XCIsXG5cdH0sXG5cdFwiVmFsYVwiOiB7XG5cdFx0Y29sb3VyOiBcIiM0MDM3NTdcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0xMi41MDksMTcuMTkzYy0uMTY1LTYuODM2LS4zMjUtMTIuNDU1LS4zNTctMTIuNDg3QTcuOTE2LDcuOTE2LDAsMCwwLDkuODc5LDUuODc0LDcuNjA2LDcuNjA2LDAsMCwwLDcuMzI0LDkuMTg4YTguNDIyLDguNDIyLDAsMCwwLS41ODcsMy41NDMsNC42NjUsNC42NjUsMCwwLDAsLjIsMS45NjIsMy40MTcsMy40MTcsMCwwLDEsLjE4Mi41NmMtLjAxMi4wMDktLjMzOC0uMDE4LS43MjQtLjA2MS0xLjg2OC0uMjA3LTIuNzg2LTEuMDUtMy0yLjc1N0E2LjMxMiw2LjMxMiwwLDAsMSw0Ljg1LDcuNzE5YTE1LjEzNCwxNS4xMzQsMCwwLDEsOC40MTQtNS4xNjMsMTIuODkxLDEyLjg5MSwwLDAsMSwyLjU0Mi0uMjM1bDEuNzQ4LS4wNS4wNTksMi41MDZjLjAzMiwxLjM3OC4xLDYuMzU4LjE2MSwxMS4wNjdzLS4yNTIsOC4yOS0uMjE5LDguNEMxOS41LDE3Ljg3OSwyMiwxMy4wNzMsMjQuMzY3LDYuMjUzbDEuNDI3LTMuOTgzSDI4LjU0Yy0uMDIyLjA2My0yLjc1MSw2LjUtNS41MTQsMTMuOTE2bC01LjQ3MywxMy41NUgxMi45NzZDMTIuOTc2LDI3LjkwNiwxMi41MzUsMTguNDg2LDEyLjUwOSwxNy4xOTNaXFxcIiBzdHlsZT1cXFwiZmlsbDojNDAzNzU3XFxcIi8+PHBhdGggZD1cXFwiTTE3LjczMiwzMEgxMi43MTN2LS4yNjNjMC0xLjEzNy0uMTctNS4xOTItLjMwNy04LjQ1Mi0uMDgxLTEuOTI5LS4xNS0zLjYtLjE2MS00LjA4Ny0uMTU2LTYuNDc5LS4yODYtMTEtLjMzNi0xMi4xNjNhMTEuNjc0LDExLjY3NCwwLDAsMC0xLjg3NCwxLjA0OSw3LjM0OCw3LjM0OCwwLDAsMC0yLjQ2NiwzLjJBOC4xNDYsOC4xNDYsMCwwLDAsNywxMi43MzEsNC4zNyw0LjM3LDAsMCwwLDcuMTg1LDE0LjZjLjIxNS41NjkuMjczLjcyMy4xLjg1OS0uMDkzLjA3My0uMTA3LjA4NC0uOTE2LS4wMDctMS45NzYtLjIxOS0zLTEuMTY3LTMuMjM0LTIuOTg2QTYuNTY4LDYuNTY4LDAsMCwxLDQuNjQsNy41NjEsMTUuNDM5LDE1LjQzOSwwLDAsMSwxMy4yLDIuMywxMy4xNzYsMTMuMTc2LDAsMCwxLDE1LjgsMi4wNThMMTcuODExLDJsLjA2NSwyLjc3Yy4wMzIsMS4zOTIuMTA2LDYuNDYxLjE2MSwxMS4wNy4wMzEsMi42MTYtLjA1Miw0LjkxNS0uMTI0LDYuNDMuOTMxLTIuNzYzLDEuOTU4LTUuMjcsMy4wMzMtNy45LDEuMDQzLTIuNTQ3LDIuMTIyLTUuMTgsMy4xNzMtOC4yMDdsMS40OTEtNC4xNmgzLjNsLS4xMjUuMzUxYzAsLjAwNy0uMDMxLjA3Ni0uMDg0LjItMS4xLDIuNjIyLTMuMjU5LDcuODg5LTUuNDMsMTMuNzE3Wm0tNC40OTUtLjUyNmg0LjE0bDUuNDA3LTEzLjM4NmMyLjEyNC01LjcsNC4yNDMtMTAuODc2LDUuMzYyLTEzLjU1NUgyNS45NzlMMjQuNjE0LDYuMzQyYy0xLjA1NSwzLjAzOC0yLjEzNyw1LjY3OC0zLjE4Myw4LjIzMS0xLjMxMSwzLjItMi41NSw2LjIyNi0zLjYyNiw5Ljc0N2wtLjI1NS44MzEtLjI0OC0uODMzYTMuMjc0LDMuMjc0LDAsMCwxLC4wMjEtLjgzOWMuMDc0LTEuMzUuMjI5LTQuMTU4LjE4OC03LjYzMy0uMDU1LTQuNjA3LS4xMjktOS42NzQtLjE2MS0xMS4wNjRMMTcuMywyLjU0MWwtMS40ODQuMDQzYTEyLjcyOSwxMi43MjksMCwwLDAtMi40OS4yMjhBMTQuODg3LDE0Ljg4NywwLDAsMCw1LjA2LDcuODc3YTYuMDcxLDYuMDcxLDAsMCwwLTEuNCw0LjUyNGMuMiwxLjU4LDEuMDI4LDIuMzM2LDIuNzcsMi41MjlsLjMzMy4wMzVjLS4wMTktLjA1NC0uMDQxLS4xMTQtLjA2Ni0uMTc5YTQuODkzLDQuODkzLDAsMCwxLS4yMTktMi4wNTUsOC43LDguNywwLDAsMSwuNi0zLjYzOCw3Ljg4Myw3Ljg4MywwLDAsMSwyLjY0NC0zLjQzYy4wMjItLjAxNiwyLjIzMi0xLjUyNSwyLjYxNS0xLjE0Mi4wOTIuMDkyLjEzMS4xMzEuNDMzLDEyLjY2NmgwYy4wMS40ODUuMDgsMi4xNDkuMTYsNC4wNzZDMTMuMDYsMjQuMzEzLDEzLjIxNywyOC4wNiwxMy4yMzcsMjkuNDc0WlxcXCIgc3R5bGU9XFxcImZpbGw6I2M4YzhjOFxcXCIvPlwiLFxuXHR9LFxuXHRcIlZCLk5ldFwiOiB7XG5cdFx0Y29sb3VyOiBcIiMwMDUxOWFcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk02LjY3LDcuODM2LDksMTguOTE1LDExLjMzNiw3LjgzNkgxNkwxMS4zMzYsMjQuMTY0SDYuNjcyTDIsNy44MzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1MTlhXFxcIi8+PHBhdGggZD1cXFwiTTE4LjMzMSw3LjgzNmg3LjZhNC4wOCw0LjA4LDAsMCwxLDIuOSwxLjc0OSwzLjc4LDMuNzgsMCwwLDEsLjU3MSwyLjA0LDMuOTg1LDMuOTg1LDAsMCwxLS41NzEsMi4wMzQsNC4xMDgsNC4xMDgsMCwwLDEtMi4zNDEsMS43NjMsNC4xLDQuMSwwLDAsMSwyLjkyOSwxLjc1NiwzLjgsMy44LDAsMCwxLC41OCwyLjEsNC42NjMsNC42NjMsMCwwLDEtLjU3OSwyLjU0Niw1LjA0Nyw1LjA0NywwLDAsMS0zLjUsMi4zMzhIMTguMzMxWk0yMywxNC4yNTJoMS4xNjZhMS43NTQsMS43NTQsMCwwLDAsMC0zLjVIMjNabTAsN0gyNC4zOWEyLjA0NywyLjA0NywwLDAsMCwwLTQuMDg5SDIzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzAwNTE5YVxcXCIvPlwiLFxuXHR9LFxuXHRcIlZCQVwiOiB7XG5cdFx0Y29sb3VyOiBcIiNkODdiMzBcIixcblx0XHRpY29uOiBcIjxwb2x5Z29uIHBvaW50cz1cXFwiMTAuNDU3IDExLjA5MiAxNi4wMTQgMTMuODM5IDE2LjAxNCAxOC4zMDcgMTAuNDU3IDE1LjM4MiAxMC40NTcgMTEuMDkyXFxcIiBzdHlsZT1cXFwiZmlsbDojNjQ4M2MwXFxcIi8+PHBhdGggZD1cXFwiTTE2LjIsMTguNjEzbC01LjkyNi0zLjEyVjEwLjhMMTYuMiwxMy43MjRaTTEwLjY0MiwxNS4yNywxNS44MywxOFYxMy45NTNsLTUuMTg4LTIuNTY0WlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYuMzcxIDEzLjgzOSAxNi4zNzEgMTguMzA3IDIxLjMxNSAxNS44MTQgMjEuMzE1IDExLjM1NCAxNi4zNzEgMTMuODM5XFxcIiBzdHlsZT1cXFwiZmlsbDojNjQ4M2MwXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4NiwxOC42MDdWMTMuNzI1bDUuMzEzLTIuNjd2NC44NzNabS4zNjktNC42NTV2NC4wNTVMMjEuMTMsMTUuN1YxMS42NTNaXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxMC43MDMgMTAuNzk3IDE2LjE4NiAxMy41OCAyMS4wODIgMTEuMDY0IDE1Ljc3NyA4LjM4OSAxMC43MDMgMTAuNzk3XFxcIiBzdHlsZT1cXFwiZmlsbDojNjQ4M2MwXFxcIi8+PHBhdGggZD1cXFwiTTE2LjE4NywxMy43ODhsLTUuOS0zLDUuNS0yLjYwOCw1LjcwOSwyLjg3OVpNMTEuMTIyLDEwLjhsNS4wNjQsMi41Nyw0LjQ5LTIuMzA4LTQuOS0yLjQ3MVpcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE4Ljk1NyAxNS44MjkgMjQuNTE1IDE4LjU3NSAyNC41MTUgMjMuMDQzIDE4Ljk1NyAyMC4xMTggMTguOTU3IDE1LjgyOVxcXCIgc3R5bGU9XFxcImZpbGw6Izk1Mjc4MVxcXCIvPjxwYXRoIGQ9XFxcIk0yNC43LDIzLjM0OWwtNS45MjYtMy4xMnYtNC43TDI0LjcsMTguNDZabS01LjU1Ny0zLjM0Myw1LjE4OCwyLjczMVYxOC42ODlsLTUuMTg4LTIuNTY0WlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjQuODcxIDE4LjU3NSAyNC44NzEgMjMuMDQzIDI5LjgxNSAyMC41NSAyOS44MTUgMTYuMDkgMjQuODcxIDE4LjU3NVxcXCIgc3R5bGU9XFxcImZpbGw6Izk1Mjc4MVxcXCIvPjxwYXRoIGQ9XFxcIk0yNC42ODcsMjMuMzQzVjE4LjQ2MUwzMCwxNS43OTF2NC44NzNabS4zNjktNC42NTV2NC4wNTVsNC41NzUtMi4zMDhWMTYuMzg5WlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTkuMjAzIDE1LjU0NiAyNC42ODcgMTguMzI5IDI5LjU4MyAxNS44MTIgMjQuMzY0IDEzLjM0NiAxOS4yMDMgMTUuNTQ2XFxcIiBzdHlsZT1cXFwiZmlsbDojOTUyNzgxXFxcIi8+PHBhdGggZD1cXFwiTTI0LjY4NywxOC41MzZsLTUuOTItMy4wMDUsNS42LTIuMzg3TDMwLDE1LjgwNVpNMTkuNjQsMTUuNTZsNS4wNDYsMi41NjEsNC40NzktMi4zLTQuODA2LTIuMjdaXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyLjE5IDE1LjQ5NiA3Ljc0OCAxOC4yNDMgNy43NDggMjIuNzExIDIuMTkgMTkuNzg2IDIuMTkgMTUuNDk2XFxcIiBzdHlsZT1cXFwiZmlsbDojZDg3YjMwXFxcIi8+PHBhdGggZD1cXFwiTTcuOTMyLDIzLjAxNywyLjAwNiwxOS45VjE1LjJsNS45MjYsMi45MjlaTTIuMzc1LDE5LjY3NGw1LjE4OCwyLjczMVYxOC4zNTdMMi4zNzUsMTUuNzkzWlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiOC4xMDQgMTguMjQzIDguMTA0IDIyLjcxMSAxMy4wNDggMjAuMjE4IDEzLjA0OCAxNS43NTggOC4xMDQgMTguMjQzXFxcIiBzdHlsZT1cXFwiZmlsbDojZDg3YjMwXFxcIi8+PHBhdGggZD1cXFwiTTcuOTIsMjMuMDExVjE4LjEyOWw1LjMxMy0yLjY3djQuODczWm0uMzY5LTQuNjU1djQuMDU1TDEyLjg2NCwyMC4xVjE2LjA1N1pcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIuNDM2IDE1LjIxMyA3LjkyIDE3Ljk5NyAxMi44MTYgMTUuNDggNy41OTcgMTMuMDE0IDIuNDM2IDE1LjIxM1xcXCIgc3R5bGU9XFxcImZpbGw6I2Q4N2IzMFxcXCIvPjxwYXRoIGQ9XFxcIk03LjkyLDE4LjIsMiwxNS4ybDUuNi0yLjM4Nyw1LjYzMiwyLjY2MVpNMi44NzMsMTUuMjI4bDUuMDQ2LDIuNTYxLDQuNDc5LTIuMy00LjgwNi0yLjI3WlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTAuODc1IDE2LjI5NiAxNi40MzIgMTkuMDQyIDE2LjQzMiAyMy41MTEgMTAuODc1IDIwLjU4NSAxMC44NzUgMTYuMjk2XFxcIiBzdHlsZT1cXFwiZmlsbDojZTBkNDAwXFxcIi8+PHBhdGggZD1cXFwiTTE2LjYxNywyMy44MTYsMTAuNjkxLDIwLjdWMTZsNS45MjYsMi45MjlaTTExLjA2LDIwLjQ3NGw1LjE4OCwyLjczMVYxOS4xNTdMMTEuMDYsMTYuNTkzWlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYuNzg5IDE5LjA0MiAxNi43ODkgMjMuNTExIDIxLjczMyAyMS4wMTcgMjEuNzMzIDE2LjU1NyAxNi43ODkgMTkuMDQyXFxcIiBzdHlsZT1cXFwiZmlsbDojZTBkNDAwXFxcIi8+PHBhdGggZD1cXFwiTTE2LjYsMjMuODExVjE4LjkyOWw1LjMxMy0yLjY3djQuODczWm0uMzY5LTQuNjU1djQuMDU1TDIxLjU0OSwyMC45VjE2Ljg1N1pcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjExLjEyMSAxNi4wMDEgMTYuNjA1IDE4Ljc4NCAyMS41MDEgMTYuMjY3IDE2LjE5NiAxMy41OTMgMTEuMTIxIDE2LjAwMVxcXCIgc3R5bGU9XFxcImZpbGw6I2UwZDQwMFxcXCIvPjxwYXRoIGQ9XFxcIk0xNi42MDUsMTguOTkxbC01LjktMyw1LjUtMi42MDgsNS43MDksMi44NzlaTTExLjU0LDE2LjAwNmw1LjA2NCwyLjU3LDQuNDktMi4zMDgtNC45LTIuNDcxWlxcXCIvPlwiLFxuXHR9LFxuXHRcIlZlbG9jaXR5XCI6IHtcblx0XHRjb2xvdXI6IFwiIzI2MjY5MlwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTE2LjI0NSwyNC4xODdBOC4zNTIsOC4zNTIsMCwxLDEsMjQuNiwxNS44MzUsOC4zNjIsOC4zNjIsMCwwLDEsMTYuMjQ1LDI0LjE4N1ptMC0xNC43NjJhNi40MSw2LjQxLDAsMSwwLDYuNDEsNi40MUE2LjQxNyw2LjQxNywwLDAsMCwxNi4yNDUsOS40MjVaXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyOS4xMzIgOC41NTEgMjUuNDUxIDYuNTMxIDI1LjQ1MSA3LjQ3NCAxNS44MjEgNy40NzQgMTUuODIxIDkuNDI0IDI1LjQ1MSA5LjQyNCAyNS40NTEgMTAuNTcxIDI5LjEzMiA4LjU1MVxcXCIgc3R5bGU9XFxcImZpbGw6IzI2MjY5MlxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiOC45ODQgMiA2Ljk2NCA1LjY4NyA3LjkwNiA1LjY4NyA3LjkwNiAxNS4zMjggOS44NTcgMTUuMzI4IDkuODU3IDUuNjg3IDExLjAwNCA1LjY4NyA4Ljk4NCAyXFxcIiBzdHlsZT1cXFwiZmlsbDojMjYyNjkzXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyMy43MDUgMzAgMjEuNjg1IDI2LjI0MyAyMi42MjggMjYuMjQzIDIyLjYyOCAxNi40MTcgMjQuNTc4IDE2LjQxNyAyNC41NzggMjYuMjQzIDI1LjcyNSAyNi4yNDMgMjMuNzA1IDMwXFxcIiBzdHlsZT1cXFwiZmlsbDojMjYyNjkzXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyLjg2OCAyMy4zMiA2LjYzNCAyMS4zIDYuNjM0IDIyLjI0MiAxNi40ODQgMjIuMjQyIDE2LjQ4NCAyNC4xOTIgNi42MzQgMjQuMTkyIDYuNjM0IDI1LjM0IDIuODY4IDIzLjMyXFxcIiBzdHlsZT1cXFwiZmlsbDojMjYyNjkyXFxcIi8+XCIsXG5cdH0sXG5cdFwiVmVyaWxvZ1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMxYTM0OGZcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yOS4wMDcsMTcuNGguMDM3YTEuNDQ5LDEuNDQ5LDAsMCwwLC45MzgtLjMxNiwxLjQ3MywxLjQ3MywwLDAsMCwuNTE5LTEuMDMxVjE1LjlhMS40MTMsMS40MTMsMCwwLDAtMS4zNzYtMS4zaC0uMDA5Yy0uNjg3LDAtMS4zNzQsMC0yLjA2MiwwSDI1LjVWMTEuOTU2bDMuNTEzLDBoLjAzNEExLjQxMSwxLjQxMSwwLDAsMCwzMC41LDEwLjZsMC0uMDksMC0uMDMyYTEuNDEyLDEuNDEyLDAsMCwwLS42NDYtMS4xLDEuNDU1LDEuNDU1LDAsMCwwLS44MzUtLjIyNUgyNS40NTZhMi45NiwyLjk2LDAsMCwwLS4yNzgtMS4wMzQsMi45MDksMi45MDksMCwwLDAtMS43LTEuNDYxLDIuNjg0LDIuNjg0LDAsMCwwLS42MjktLjEzVjQuOTQ3YzAtLjY5LDAtMS4zOCwwLTIuMDYzQTEuNDE0LDEuNDE0LDAsMCwwLDIxLjQ4MSwxLjVoLS4xMTZhMS40LDEuNCwwLDAsMC0xLjMxOSwxLjM4OHEwLDEuMTU0LDAsMi4zMDZWNi41SDE3LjRWNC45ODFjMC0uNywwLTEuNCwwLTIuMDg3QTEuNDEsMS40MSwwLDAsMCwxNi4wNTMsMS41SDE1LjlhMS40MDgsMS40MDgsMCwwLDAtMS4zLDEuMzgzYzAsLjY4OCwwLDEuMzc2LDAsMi4wNjRWNi41MDhxLTEuMzE5LDAtMi42MzksMFY0Ljg4OGMwLS42NjYsMC0xLjMzMiwwLTEuOTg5YTEuMzY2LDEuMzY2LDAsMCwwLS40LS45NzUsMS40LDEuNCwwLDAsMC0uOTg0LS40MjRIMTAuNUExLjQxLDEuNDEsMCwwLDAsOS4xNTksMi44ODFjMCwuNjgzLDAsMS4zNjYsMCwyLjA0OXYxLjZhMi45MzMsMi45MzMsMCwwLDAtMi40NjYsMS45LDIuODc4LDIuODc4LDAsMCwwLS4xNjEuNzI2SDQuOTU3Yy0uNjkzLDAtMS4zODYsMC0yLjA3MywwSDIuODc2QTEuNDEzLDEuNDEzLDAsMCwwLDEuNSwxMC41di4wOTVhMS40MTcsMS40MTcsMCwwLDAsLjU3NSwxLjA5MSwxLjQ2MywxLjQ2MywwLDAsMCwuODg3LjI3M2guMDE3bDMuNTIyLDBWMTQuNkg0Ljk0OGMtLjY4NiwwLTEuMzc1LDAtMi4wNTcsMEExLjQyOCwxLjQyOCwwLDAsMCwxLjUsMTUuOTEzVjE2LjFhMS40LDEuNCwwLDAsMCwxLjM4NiwxLjNjLjcxMSwwLDEuNDIzLDAsMi4xMzUsMEg2LjVWMjAuMDVsLS4yOTIsMGMtLjYxMy0uMDA3LTEuMjI2LDAtMS44MzgsMEgzLjA4N2ExLjYzMywxLjYzMywwLDAsMC0uOTE4LjIxMUExLjQzNywxLjQzNywwLDAsMCwxLjUsMjEuNFYyMS41YTEuNDE3LDEuNDE3LDAsMCwwLDEuMzc1LDEuMzM3aC4wMDVxLjY0NSwwLDEuMjksMEg2LjU0NmEyLjgzMiwyLjgzMiwwLDAsMCwxLjk3OCwyLjUsMi43MTIsMi43MTIsMCwwLDAsLjYzMS4xMjh2MS42MmMwLC42NzgsMCwxLjM1NCwwLDIuMDI1YTEuNCwxLjQsMCwxLDAsMi44LS4wOTJsMC0zLjUyN0gxNC42djMuNTE2QTEuNDE0LDEuNDE0LDAsMCwwLDE1Ljk0NywzMC41SDE2LjFhMS40MTEsMS40MTEsMCwwLDAsMS4zLTEuMzg1cS4wMDYtMS4wNjYsMC0yLjEzMVYyNS41aDIuNjQ0VjI5LjFBMS40MjMsMS40MjMsMCwwLDAsMjEuNCwzMC41aC4xMTlhMS40MDgsMS40MDgsMCwwLDAsMS4xNi0uNzQxLDEuNjQzLDEuNjQzLDAsMCwwLC4xNjctLjgzM1YyNS40NzRhMi42NzEsMi42NzEsMCwwLDAsLjYyLS4xMjgsMi45MjgsMi45MjgsMCwwLDAsMS44ODYtMS44ODgsMi44MzQsMi44MzQsMCwwLDAsLjEyMy0uNjEzaDEuNTgxYy42ODcsMCwxLjM3NSwwLDIuMDU3LDBoLjAwOEExLjQyMiwxLjQyMiwwLDAsMCwzMC41LDIxLjQ4MXYtLjExOGExLjQwOSwxLjQwOSwwLDAsMC0xLjM4Mi0xLjMxOGgwYy0uNzE4LDAtMS40MzYsMC0yLjE1NCwwSDI1LjVWMTcuNFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNjNWM1YzU7b3BhY2l0eTowLjNcXFwiLz48cGF0aCBkPVxcXCJNMTAuNTE1LDJoLjA1NmEuOTEuOTEsMCwwLDEsLjg4Ni44OTNjLjAwNiwxLjEwOCwwLDIuMjE2LDAsMy4zMjQtLjYsMC0xLjIsMC0xLjgsMCwwLTEuMTExLDAtMi4yMjIsMC0zLjMzM0EuOTA3LjkwNywwLDAsMSwxMC41MTUsMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxYTM0OGZcXFwiLz48cGF0aCBkPVxcXCJNMTUuOTM3LDJoLjExNmEuOTEyLjkxMiwwLDAsMSwuODQ2Ljg4OWMuMDA2LDEuMTA5LDAsMi4yMTksMCwzLjMyOUgxNS4xYzAtMS4xMSwwLTIuMjIsMC0zLjMzQS45MTEuOTExLDAsMCwxLDE1LjkzNywyWlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk0yMS4zOTIsMmguMDg5YS45MDcuOTA3LDAsMCwxLC44NTkuODgxYy4wMDcsMS4xMTIsMCwyLjIyNSwwLDMuMzM3aC0xLjhjMC0xLjEwOSwwLTIuMjE3LDAtMy4zMjZBLjkxMi45MTIsMCwwLDEsMjEuMzkyLDJaXFxcIiBzdHlsZT1cXFwiZmlsbDojMWEzNDhmXFxcIi8+PHBhdGggZD1cXFwiTTIsMTAuNTE4YS45MDguOTA4LDAsMCwxLC44ODItLjg1OWMxLjExMi0uMDA3LDIuMjIzLDAsMy4zMzQsMHEwLC45LDAsMS44Yy0xLjA3OSwwLTIuMTU4LDAtMy4yMzcsMGEuOTgzLjk4MywwLDAsMS0uNi0uMTczQS45MjQuOTI0LDAsMCwxLDIsMTAuNTcxWlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk0yNS43ODYsOS42NTVoMy4yMzNhMSwxLDAsMCwxLC41NjEuMTQzLjkyNC45MjQsMCwwLDEsLjQyLjcxNnYuMDU4YS45MzMuOTMzLDAsMCwxLS4zLjY1MS45NTcuOTU3LDAsMCwxLS42NzcuMjM0Yy0xLjA3OSwwLTIuMTU4LDAtMy4yMzcsMFEyNS43ODYsMTAuNTU2LDI1Ljc4Niw5LjY1NVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxYTM0OGZcXFwiLz48cGF0aCBkPVxcXCJNMiwxNS45NDRhLjkxMy45MTMsMCwwLDEsLjg4OC0uODQyYzEuMTA5LS4wMDcsMi4yMTksMCwzLjMyOCwwcTAsLjksMCwxLjhjLTEuMTA5LDAtMi4yMTcsMC0zLjMyNiwwQS45MTUuOTE1LDAsMCwxLDIsMTYuMDYzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk0yNS43ODYsMTUuMWMxLjEwOSwwLDIuMjE4LDAsMy4zMjYsMGEuOTE0LjkxNCwwLDAsMSwuODg5LjgzNXYuMTE3YS45NDYuOTQ2LDAsMCwxLS4zMzEuNjQxLjk3My45NzMsMCwwLDEtLjY1MS4yMDdIMjUuNzg2UTI1Ljc4NSwxNiwyNS43ODYsMTUuMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxYTM0OGZcXFwiLz48cGF0aCBkPVxcXCJNMi40MzMsMjAuNjc4YTEuMTIxLDEuMTIxLDAsMCwxLC42NDMtLjEzNmMxLjA0My4wMDYsMi4wODYtLjAwNiwzLjEyOS4wMDYuMDI4LjYsMCwxLjIuMDEyLDEuOC0xLjExLDAtMi4yMjEsMC0zLjMzMSwwQS45MTEuOTExLDAsMCwxLDIsMjEuNDgzVjIxLjRBLjkyNS45MjUsMCwwLDEsMi40MzMsMjAuNjc4WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk0yNS43ODYsMjAuNTQzYzEuMTA4LDAsMi4yMTYsMCwzLjMyNCwwYS45MTQuOTE0LDAsMCwxLC44OS44NDd2LjA5YS45MTEuOTExLDAsMCwxLS44ODguODU5Yy0xLjEwOS4wMDctMi4yMTgsMC0zLjMyNiwwQzI1Ljc4NiwyMS43NDMsMjUuNzg1LDIxLjE0MywyNS43ODYsMjAuNTQzWlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk05LjY1NiwyNS43ODFoMS44YzAsMS4wODEsMCwyLjE2MiwwLDMuMjQzYS45NTcuOTU3LDAsMCwxLS4yMzUuNjc3LjkzMS45MzEsMCwwLDEtLjY1My4zaC0uMDUyYS45MDcuOTA3LDAsMCwxLS44Ni0uODgyQzkuNjUxLDI4LjAwNiw5LjY1OCwyNi44OTQsOS42NTYsMjUuNzgxWlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk0xNS4xLDI1Ljc4MWgxLjhjMCwxLjExLDAsMi4yMiwwLDMuMzNhLjkxNC45MTQsMCwwLDEtLjgzNi44ODloLS4xMTZhLjk0Ljk0LDAsMCwxLS42MTktLjMwNi45NjIuOTYyLDAsMCwxLS4yMjgtLjY3M1ExNS4xLDI3LjQsMTUuMSwyNS43ODFaXFxcIiBzdHlsZT1cXFwiZmlsbDojMWEzNDhmXFxcIi8+PHBhdGggZD1cXFwiTTIwLjU0NywyOS4xMDZjMC0xLjEwOCwwLTIuMjE3LDAtMy4zMjVoMS44YzAsMS4wNDgsMCwyLjEsMCwzLjE0NGExLjE3OCwxLjE3OCwwLDAsMS0uMTA1LjU5LjkyLjkyLDAsMCwxLS43NTYuNDg0SDIxLjRBLjkxMS45MTEsMCwwLDEsMjAuNTQ3LDI5LjEwNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMxYTM0OGZcXFwiLz48cGF0aCBkPVxcXCJNMjQuNzMyLDguMzQ5QTIuNDI5LDIuNDI5LDAsMCwwLDIzLjMxLDcuMTMxLDMuMjQ1LDMuMjQ1LDAsMCwwLDIyLjI1NCw3Yy00LjMuMDA4LTguNi0uMDExLTEyLjkwNS4wMUEyLjQzNiwyLjQzNiwwLDAsMCw3LjE1Nyw4LjYwNiwzLjYxMSwzLjYxMSwwLDAsMCw3LDkuOTM0cTAsNi4yNSwwLDEyLjVhMi42NzMsMi42NzMsMCwwLDAsLjI2OCwxLjIxOUEyLjQzMSwyLjQzMSwwLDAsMCw4LjY4OCwyNC44NywzLjc1NiwzLjc1NiwwLDAsMCw5LjkyNywyNUgyMi4wN2EzLjc2MiwzLjc2MiwwLDAsMCwxLjI0My0uMTI3QTIuNDI5LDIuNDI5LDAsMCwwLDI0Ljg3NSwyMy4zLDMuOCwzLjgsMCwwLDAsMjUsMjIuMDcxcTAtNi4yNSwwLTEyLjVBMi42ODYsMi42ODYsMCwwLDAsMjQuNzMyLDguMzQ5WlxcXCIgc3R5bGU9XFxcImZpbGw6IzFhMzQ4ZlxcXCIvPjxwYXRoIGQ9XFxcIk03LjUsOC4zMDdsLjA4NC0uMnEuOTY4LDAsMS45MzUuMDI0aC4zOTRxLjE3OSwwLC4zOTQtLjAxMi43NzYtLjAzNiwyLjgwNy0uMDM2LjQwNiwwLC43ODguMDA2dC43NDEuMDE4YS4yMzQuMjM0LDAsMCwxLC4xMDguMTA4bC0uMDI0LjE5MXEtLjA3Mi4xMTktLjM1OC4xMTloLS4xYTEwLjMsMTAuMywwLDAsMC0xLjEuMDU0LDIuMTc5LDIuMTc5LDAsMCwwLTEsLjI0NS40MzIuNDMyLDAsMCwwLS4xNTUuMzQ2LDQuMDUsNC4wNSwwLDAsMCwuMzk0LDEuNGwxLjgxOCw0LjIxNy42MzQsMS40cS45MjEsMi4yMjIsMS44MTksNC41MzkuMS4yNTEuMTc5LjQ1NGwuOC0xLjk1OXEuNjItMS40ODEsMS4yNTItMy4xNTRsLjgyMy0yLjI0NnEuMDI0LS4wNzIuMTMxLS40NzhhMTcuMDI2LDE3LjAyNiwwLDAsMCwxLjE1Ny00LC41NjEuNTYxLDAsMCwwLS4xNjEtLjM2NCwxLjE2NSwxLjE2NSwwLDAsMC0uNTItLjMsNy43MjMsNy43MjMsMCwwLDAtLjkzMi0uMTQzbC0uODg0LS4xMDhhLjMzNy4zMzcsMCwwLDEtLjEwOC0uMmwuMDM2LS4xLDMuODctLjAzNkgyMy42YTMuMSwzLjEsMCwwLDEsLjg4NS4wODRsLjAxMi4xYS42NDEuNjQxLDAsMCwxLS4wNzIuMjUxLDIuNDQ5LDIuNDQ5LDAsMCwxLS41MjYuMTE5LDMuNiwzLjYsMCwwLDAtMS4yNDQuMjgxLDEuODE1LDEuODE1LDAsMCwwLS41LjY4N2wtMy4xMzQsNy43NjVxLTEuNDY2LDMuNS0yLjA4Niw1LjQyM2wtLjM0NSwxLjAzOWEuNTMxLjUzMSwwLDAsMS0uMjYzLjEsMS4zODMsMS4zODMsMCwwLDEtLjMtLjAzNnEtMS40MjItMy42NzYtMi4zMTgtNS42ODFMMTAuMDU1LDkuOTJhMy4yNDcsMy4yNDcsMCwwLDAtLjU5MS0uODksNS40NjMsNS40NjMsMCwwLDAtMS4zNzktLjQyNCw0LjM0Nyw0LjM0NywwLDAsMS0uNDY2LS4xMTlBLjMyNi4zMjYsMCwwLDEsNy41LDguMzA3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2M1YzJmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlZIRExcIjoge1xuXHRcdGNvbG91cjogXCIjMGQ5YjM1XCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMiwySDMwVjMwSDJabTEuNjg5LjA2N0ExLjYyNCwxLjYyNCwwLDAsMCwyLjA2MywzLjY5MlYyOC4zMTRBMS42MjUsMS42MjUsMCwwLDAsMy42ODksMjkuOTRIMjguMzE2YTEuNjI1LDEuNjI1LDAsMCwwLDEuNjI2LTEuNjI2VjMuNjkyYTEuNjI0LDEuNjI0LDAsMCwwLTEuNjI2LTEuNjI1Wk0zLjAwOCwyOC4wNzlhLjkxMS45MTEsMCwwLDAsLjkxMS45MTJIMjguMDgzYS45MTEuOTExLDAsMCwwLC45MTEtLjkxMlYzLjkxOWEuOTEuOTEsMCwwLDAtLjkxMS0uOTExSDMuOTE5YS45MS45MSwwLDAsMC0uOTExLjkxMVpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwZDliMzVcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI1LjUyIDUuNTAyIDE4Ljg1OCAyNi40OTEgMTMuMTU0IDI2LjQ5MSA2LjQ5MiA1LjUwMiAxMC41MDggNS41MDIgMTYuMDI5IDIyLjc5NSAyMS41MDQgNS41MDIgMjUuNTIgNS41MDJcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJ2aW1cIjoge1xuXHRcdGNvbG91cjogXCIjNDNiNTRhXCIsXG5cdFx0aWNvbjogXCI8ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImFcXFwiPjxwb2x5Z29uIHBvaW50cz1cXFwiMiAyIDMwIDIgMzAgMzAgMiAzMCAyIDIgMiAyXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO2NsaXAtcnVsZTpldmVub2RkXFxcIi8+PC9jbGlwUGF0aD48L2RlZnM+PHRpdGxlPmZpbGVfdHlwZV92aW08L3RpdGxlPjxwb2x5Z29uIHBvaW50cz1cXFwiMjkuOTg5IDE1Ljg1NiAxNS44NTYgMi4wMTEgMi4wMTEgMTYuMTM2IDE1Ljg1NiAyOS45ODkgMjkuOTg5IDE1Ljg1NiAyOS45ODkgMTUuODU2XFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PGcgc3R5bGU9XFxcImNsaXAtcGF0aDp1cmwoI2EpXFxcIj48cG9seWdvbiBwb2ludHM9XFxcIjI5Ljk4OSAxNS44NTYgMTUuODU2IDIuMDExIDIuMDExIDE2LjEzNiAxNS44NTYgMjkuOTg5IDI5Ljk4OSAxNS44NTYgMjkuOTg5IDE1Ljg1NlxcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjwvZz48cG9seWdvbiBwb2ludHM9XFxcIjI4LjU3NSAxNS44NTYgMjkuNDIyIDE1Ljg1NiAxNS44NTYgMjkuNDIyIDE1Ljg1NiAyOC41NzUgMjguNTc1IDE1Ljg1NiAyOC41NzUgMTUuODU2XFxcIiBzdHlsZT1cXFwiZmlsbDojMjk2OTVkO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyOC41NzUgMTUuODU2IDI5LjQyMiAxNS44NTYgMTUuODU2IDI5LjQyMiAxNS44NTYgMjguNTc1IDI4LjU3NSAxNS44NTYgMjguNTc1IDE1Ljg1NlxcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMi41NzggMTYuMTM2IDMuNDI1IDE2LjEzNiAxNS44NTYgMjguNTc1IDE1Ljg1NiAyOS40MjIgMi41NzggMTYuMTM2IDIuNTc4IDE2LjEzNlxcXCIgc3R5bGU9XFxcImZpbGw6IzMxNzM2NztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMi41NzggMTYuMTM2IDMuNDI1IDE2LjEzNiAxNS44NTYgMjguNTc1IDE1Ljg1NiAyOS40MjIgMi41NzggMTYuMTM2IDIuNTc4IDE2LjEzNlxcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTUuODU2IDMuNDE4IDE1Ljg1NiAyLjU3OCAyLjU3OCAxNi4xMzYgMy40MjUgMTYuMTM2IDE1Ljg1NiAzLjQxOCAxNS44NTYgMy40MThcXFwiIHN0eWxlPVxcXCJmaWxsOiM2MGMyYWM7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE1Ljg1NiAzLjQxOCAxNS44NTYgMi41NzggMi41NzggMTYuMTM2IDMuNDI1IDE2LjEzNiAxNS44NTYgMy40MTggMTUuODU2IDMuNDE4XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNS44NTYgMi41NzggMTUuODU2IDMuNDE4IDI4LjU3NSAxNS44NTYgMjkuNDIyIDE1Ljg1NiAxNS44NTYgMi41NzggMTUuODU2IDIuNTc4XFxcIiBzdHlsZT1cXFwiZmlsbDojNDNiNTRhO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNS44NTYgMi41NzggMTUuODU2IDMuNDE4IDI4LjU3NSAxNS44NTYgMjkuNDIyIDE1Ljg1NiAxNS44NTYgMi41NzggMTUuODU2IDIuNTc4XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxNS44NTYgMjguNTc1IDI4LjU3NSAxNS44NTYgMTUuODU2IDMuNDE4IDMuNDI1IDE2LjEzNiAxNS44NTYgMjguNTc1IDE1Ljg1NiAyOC41NzVcXFwiIHN0eWxlPVxcXCJmaWxsOiMzYzgzNzY7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE1Ljg1NiAyOC41NzUgMjguNTc1IDE1Ljg1NiAxNS44NTYgMy40MTggMy40MjUgMTYuMTM2IDE1Ljg1NiAyOC41NzUgMTUuODU2IDI4LjU3NVxcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTguNDk4IDYuMjQ2IDE5LjM0NSA3LjEgMTMuNTAyIDEzLjAyOCAxMy41MDIgNy4xIDE0LjA2OSA3LjEgMTQuOTE2IDYuMjQ2IDE0LjkxNiAzLjk5MiAxNC4wNjkgMy4xMzggNC42NTIgMy4xMzggMy44MDUgMy45OTIgMy44MDUgNi4yNDYgNC42NTIgNy4xIDUuMzEyIDcuMSA1LjMxMiAyNi4zMTQgNi4zNDYgMjcuMTYxIDkuMjY3IDI3LjE2MSAyOS41MTYgNi4yNDYgMjkuNTE2IDMuOTkyIDI4LjY2OSAzLjEzOCAxOS40MzggMy4xMzggMTguNDk4IDMuOTkyIDE4LjQ5OCA2LjI0NiAxOC40OTggNi4yNDZcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjA7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE4LjQ5OCA2LjI0NiAxOS4zNDUgNy4xIDEzLjUwMiAxMy4wMjggMTMuNTAyIDcuMSAxNC4wNjkgNy4xIDE0LjkxNiA2LjI0NiAxNC45MTYgMy45OTIgMTQuMDY5IDMuMTM4IDQuNjUyIDMuMTM4IDMuODA1IDMuOTkyIDMuODA1IDYuMjQ2IDQuNjUyIDcuMSA1LjMxMiA3LjEgNS4zMTIgMjYuMzE0IDYuMzQ2IDI3LjE2MSA5LjI2NyAyNy4xNjEgMjkuNTE2IDYuMjQ2IDI5LjUxNiAzLjk5MiAyOC42NjkgMy4xMzggMTkuNDM4IDMuMTM4IDE4LjQ5OCAzLjk5MiAxOC40OTggNi4yNDYgMTguNDk4IDYuMjQ2XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI0LjkzMiA2LjUzMyA0LjM2NSA1Ljk2NiA0LjM2NSA0LjI3MiA0LjkzMiAzLjcwNSAxMy43ODkgMy42OTggMTQuMzQ5IDQuMjcyIDEzLjc4OSA0LjU0NCAxMy41MDIgNC4yNzIgNC45MzIgNS42NzkgNC45MzIgNi41MzMgNC45MzIgNi41MzNcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmY7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjQuOTMyIDYuNTMzIDQuMzY1IDUuOTY2IDQuMzY1IDQuMjcyIDQuOTMyIDMuNzA1IDEzLjc4OSAzLjY5OCAxNC4zNDkgNC4yNzIgMTMuNzg5IDQuNTQ0IDEzLjUwMiA0LjI3MiA0LjkzMiA1LjY3OSA0LjkzMiA2LjUzMyA0LjkzMiA2LjUzM1xcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiNi42MjYgMjYuNTk0IDUuOTY2IDI2LjAyNyA1Ljk2NiA2LjUyNiA2LjYyNiA1Ljk2NiA2LjYyNiAyNi41OTQgNi42MjYgMjYuNTk0XFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI2LjYyNiAyNi41OTQgNS45NjYgMjYuMDI3IDUuOTY2IDYuNTI2IDYuNjI2IDUuOTY2IDYuNjI2IDI2LjU5NCA2LjYyNiAyNi41OTRcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIwLjc1OSA2LjUzMyAyMS4zMjYgNS45NjYgMjEuMzI2IDcuMSAxMS45MDIgMTYuNzAzIDEyLjk0MiAxNC40NDIgMjAuNzU5IDYuNTMzIDIwLjc1OSA2LjUzM1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjAuNzU5IDYuNTMzIDIxLjMyNiA1Ljk2NiAyMS4zMjYgNy4xIDExLjkwMiAxNi43MDMgMTIuOTQyIDE0LjQ0MiAyMC43NTkgNi41MzMgMjAuNzU5IDYuNTMzXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCI2LjgyIDUuNjg2IDYuNjI2IDUuOTY2IDUuOTY2IDYuNTMzIDQuOTMyIDYuNTMzIDQuOTMyIDUuMzk5IDYuODIgNS42ODYgNi44MiA1LjY4NlxcXCIgc3R5bGU9XFxcImZpbGw6IzkyOTQ5NztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiNi44MiA1LjY4NiA2LjYyNiA1Ljk2NiA1Ljk2NiA2LjUzMyA0LjkzMiA2LjUzMyA0LjkzMiA1LjM5OSA2LjgyIDUuNjg2IDYuODIgNS42ODZcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjEyLjk0MiA2LjUzMyAxMi45NDIgMTQuNDQyIDExLjkwMiAxNi42OTYgMTEuOTAyIDUuOTU4IDEzLjUwMiA1Ljk1OCAxMy43ODkgNS42NzggMTMuNTAyIDQuMjcyIDE0LjM0OSA0LjI3MiAxNC4zNDkgNS45NjYgMTMuNzg5IDYuNTMzIDEyLjk0MiA2LjUzMyAxMi45NDIgNi41MzNcXFwiIHN0eWxlPVxcXCJmaWxsOiM5Mjk0OTc7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjEyLjk0MiA2LjUzMyAxMi45NDIgMTQuNDQyIDExLjkwMiAxNi42OTYgMTEuOTAyIDUuOTU4IDEzLjUwMiA1Ljk1OCAxMy43ODkgNS42NzggMTMuNTAyIDQuMjcyIDE0LjM0OSA0LjI3MiAxNC4zNDkgNS45NjYgMTMuNzg5IDYuNTMzIDEyLjk0MiA2LjUzMyAxMi45NDIgNi41MzNcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE5LjYyNSA2LjUzMyAxOS4wNjUgNS45NjYgMTkuMDY1IDQuMjcyIDE5LjcxOCAzLjcwNSAyOC4yOTUgMy43MDUgMjguOTU2IDQuMjcyIDI4LjAwOCA1LjExOSAxOS42MjUgNS42NzkgMTkuNjI1IDYuNTMzIDE5LjYyNSA2LjUzM1xcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZjtmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTkuNjI1IDYuNTMzIDE5LjA2NSA1Ljk2NiAxOS4wNjUgNC4yNzIgMTkuNzE4IDMuNzA1IDI4LjI5NSAzLjcwNSAyOC45NTYgNC4yNzIgMjguMDA4IDUuMTE5IDE5LjYyNSA1LjY3OSAxOS42MjUgNi41MzMgMTkuNjI1IDYuNTMzXFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIyOC45NTYgNS45NjYgOS4wNzQgMjYuNTk0IDYuNjI2IDI2LjU5NCA2LjYyNiAyNS43NDcgOC40MiAyNS43NDcgMjguMjk1IDUuMzk5IDI4LjAwOCA0LjI3MiAyOC45NTYgNC4yNzIgMjguOTU2IDUuOTY2IDI4Ljk1NiA1Ljk2NlxcXCIgc3R5bGU9XFxcImZpbGw6IzkyOTQ5NztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjguOTU2IDUuOTY2IDkuMDc0IDI2LjU5NCA2LjYyNiAyNi41OTQgNi42MjYgMjUuNzQ3IDguNDIgMjUuNzQ3IDI4LjI5NSA1LjM5OSAyOC4wMDggNC4yNzIgMjguOTU2IDQuMjcyIDI4Ljk1NiA1Ljk2NiAyOC45NTYgNS45NjZcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjIxLjUxMiA1LjY4NiAyMS4zMTkgNS45NjYgMjAuNzU5IDYuNTMzIDE5LjYyNSA2LjUzMyAxOS42MjUgNS4zOTkgMjEuNTEyIDUuNjg2IDIxLjUxMiA1LjY4NlxcXCIgc3R5bGU9XFxcImZpbGw6IzkyOTQ5NztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjEuNTEyIDUuNjg2IDIxLjMxOSA1Ljk2NiAyMC43NTkgNi41MzMgMTkuNjI1IDYuNTMzIDE5LjYyNSA1LjM5OSAyMS41MTIgNS42ODYgMjEuNTEyIDUuNjg2XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxMS45MDIgMTYuNjk2IDExLjkwMiA1Ljk1OCAxMy41MDIgNS45NTggMTMuNzg5IDUuNjc5IDEzLjc4OSA0LjU0NCAxMy41MDIgNC4yNjUgNS4yMTIgNC4yNjUgNC45MzIgNC41NDQgNC45MzIgNS42NzkgNS4yMTIgNS45NTggNi42MjYgNS45NTggNi42MjYgMjUuNzQ3IDYuOTkyIDI2LjAyNyA4LjYwNyAyNi4wMjcgMjguMzg5IDUuMzk5IDI4LjM4OSA0LjU4OCAyOC4xMDIgNC4yNjUgMTkuOTEyIDQuMjY1IDE5LjYyNSA0LjU0NCAxOS42MjUgNS42ODYgMTkuOTEyIDUuOTY2IDIxLjMyNiA1Ljk2NiAyMS4zMjYgNy4xIDExLjkwMiAxNi42OTYgMTEuOTAyIDE2LjY5NlxcXCIgc3R5bGU9XFxcImZpbGw6I2QwZDJkMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTEuOTAyIDE2LjY5NiAxMS45MDIgNS45NTggMTMuNTAyIDUuOTU4IDEzLjc4OSA1LjY3OSAxMy43ODkgNC41NDQgMTMuNTAyIDQuMjY1IDUuMjEyIDQuMjY1IDQuOTMyIDQuNTQ0IDQuOTMyIDUuNjc5IDUuMjEyIDUuOTU4IDYuNjI2IDUuOTU4IDYuNjI2IDI1Ljc0NyA2Ljk5MiAyNi4wMjcgOC42MDcgMjYuMDI3IDI4LjM4OSA1LjM5OSAyOC4zODkgNC41ODggMjguMTAyIDQuMjY1IDE5LjkxMiA0LjI2NSAxOS42MjUgNC41NDQgMTkuNjI1IDUuNjg2IDE5LjkxMiA1Ljk2NiAyMS4zMjYgNS45NjYgMjEuMzI2IDcuMSAxMS45MDIgMTYuNjk2IDExLjkwMiAxNi42OTZcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE3LjA0MSAxNi43MTEgMTcuNzAxIDE2LjE0NCAxOS4zOTUgMTYuMTQ0IDE5Ljg2OSAxNi43MTEgMTkuMzAyIDE4LjQwNSAxOC42NDkgMTguOTcyIDE2Ljk1NSAxOC45NzIgMTYuNDc0IDE4LjQwNSAxNy4wNDEgMTYuNzExIDE3LjA0MSAxNi43MTFcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjA7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE3LjA0MSAxNi43MTEgMTcuNzAxIDE2LjE0NCAxOS4zOTUgMTYuMTQ0IDE5Ljg2OSAxNi43MTEgMTkuMzAyIDE4LjQwNSAxOC42NDkgMTguOTcyIDE2Ljk1NSAxOC45NzIgMTYuNDc0IDE4LjQwNSAxNy4wNDEgMTYuNzExIDE3LjA0MSAxNi43MTFcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE3LjYwOCAyNi4wMzQgMTkuMzA5IDIwLjk1MyAxOC43NDIgMjAuOTUzIDE5LjMwOSAxOS4yNTEgMjEuODQzIDE5LjI1MSAyMi40MSAxOS44MTkgMjIuNzkgMTkuODE5IDIzLjM1IDE5LjI1MSAyNS4yMzggMTkuMjUxIDI1LjgwNSAxOS44MTkgMjYuMTc4IDE5LjgxOSAyNi43NDUgMTkuMjUxIDI4LjgxMiAxOS4yNTEgMjkuNTY2IDIwLjM4NiAyOC4zMzEgMjQuNDA1IDI4Ljg5MSAyNC40MDUgMjguMzQ2IDI2LjAzNCAyNC45NTEgMjYuMDM0IDI2LjI3OCAyMi4wNzkgMjUuNDMxIDIyLjA3OSAyNC42NDkgMjQuMzkxIDI1LjIwOSAyNC4zOTEgMjQuNjc4IDI2LjAzNCAyMS4yODMgMjYuMDM0IDIyLjYwMyAyMi4wNzkgMjEuNzU2IDIyLjA3OSAyMC45NjcgMjQuNDA1IDIxLjUzNCAyNC40MDUgMjEuMDAzIDI2LjAzNCAxNy42MDggMjYuMDM0IDE3LjYwOCAyNi4wMzRcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjA7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE3LjYwOCAyNi4wMzQgMTkuMzA5IDIwLjk1MyAxOC43NDIgMjAuOTUzIDE5LjMwOSAxOS4yNTEgMjEuODQzIDE5LjI1MSAyMi40MSAxOS44MTkgMjIuNzkgMTkuODE5IDIzLjM1IDE5LjI1MSAyNS4yMzggMTkuMjUxIDI1LjgwNSAxOS44MTkgMjYuMTc4IDE5LjgxOSAyNi43NDUgMTkuMjUxIDI4LjgxMiAxOS4yNTEgMjkuNTY2IDIwLjM4NiAyOC4zMzEgMjQuNDA1IDI4Ljg5MSAyNC40MDUgMjguMzQ2IDI2LjAzNCAyNC45NTEgMjYuMDM0IDI2LjI3OCAyMi4wNzkgMjUuNDMxIDIyLjA3OSAyNC42NDkgMjQuMzkxIDI1LjIwOSAyNC4zOTEgMjQuNjc4IDI2LjAzNCAyMS4yODMgMjYuMDM0IDIyLjYwMyAyMi4wNzkgMjEuNzU2IDIyLjA3OSAyMC45NjcgMjQuNDA1IDIxLjUzNCAyNC40MDUgMjEuMDAzIDI2LjAzNCAxNy42MDggMjYuMDM0IDE3LjYwOCAyNi4wMzRcXFwiIHN0eWxlPVxcXCJmaWxsOm5vbmU7c3Ryb2tlOiMyMzFmMjA7c3Ryb2tlLW1pdGVybGltaXQ6MTA7c3Ryb2tlLXdpZHRoOjAuMjE2MDAwMDA1NjAyODM3cHhcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI4LjU1NCAxOS44MTkgMjguOTkyIDIwLjQ0MyAyNy41OTkgMjQuOTA3IDI4LjE1OSAyNC45MDcgMjcuOTcyIDI1LjQ2NyAyNS43MTEgMjUuNDY3IDI3LjAzMiAyMS41MTIgMjUuMDUxIDIxLjUxMiAyMy45MjQgMjQuOTA3IDI0LjQ4NCAyNC45MDcgMjQuMjk3IDI1LjQ2NyAyMi4wMzYgMjUuNDY3IDIzLjM1NyAyMS41MTIgMjEuMzc2IDIxLjUxMiAyMC4yNDkgMjQuOTA3IDIwLjgxNiAyNC45MDcgMjAuNjIyIDI1LjQ2NyAxOC4zNjEgMjUuNDY3IDIwLjA2MyAyMC4zODYgMTkuNDk1IDIwLjM4NiAxOS42ODIgMTkuODE5IDIxLjc1NiAxOS44MTkgMjIuMzIzIDIwLjM4NiAyMi44ODMgMjAuMzg2IDIzLjQ1IDE5LjgxOSAyNS4xNDQgMTkuODE5IDI1LjcxMSAyMC4zODYgMjYuMjc4IDIwLjM4NiAyNi44NDUgMTkuODE5IDI4LjU1NCAxOS44MTkgMjguNTU0IDE5LjgxOVxcXCIgc3R5bGU9XFxcImZpbGw6I2QwZDJkMztmaWxsLXJ1bGU6ZXZlbm9kZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjguNTU0IDE5LjgxOSAyOC45OTIgMjAuNDQzIDI3LjU5OSAyNC45MDcgMjguMTU5IDI0LjkwNyAyNy45NzIgMjUuNDY3IDI1LjcxMSAyNS40NjcgMjcuMDMyIDIxLjUxMiAyNS4wNTEgMjEuNTEyIDIzLjkyNCAyNC45MDcgMjQuNDg0IDI0LjkwNyAyNC4yOTcgMjUuNDY3IDIyLjAzNiAyNS40NjcgMjMuMzU3IDIxLjUxMiAyMS4zNzYgMjEuNTEyIDIwLjI0OSAyNC45MDcgMjAuODE2IDI0LjkwNyAyMC42MjIgMjUuNDY3IDE4LjM2MSAyNS40NjcgMjAuMDYzIDIwLjM4NiAxOS40OTUgMjAuMzg2IDE5LjY4MiAxOS44MTkgMjEuNzU2IDE5LjgxOSAyMi4zMjMgMjAuMzg2IDIyLjg4MyAyMC4zODYgMjMuNDUgMTkuODE5IDI1LjE0NCAxOS44MTkgMjUuNzExIDIwLjM4NiAyNi4yNzggMjAuMzg2IDI2Ljg0NSAxOS44MTkgMjguNTU0IDE5LjgxOSAyOC41NTQgMTkuODE5XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBhdGggZD1cXFwiTTE5LjAyMiwxOS4yNTEsMTcuMjkyLDI0LjRoLjU4OWwtLjU2LDEuNjM3SDEzLjkzM2wxLjY5NC01LjA4MkgxNS4wNmwzLjk2Mi0xLjdabS0zLjk2MiwxLjcuNTY3LTEuN2gzLjRsLTMuOTYyLDEuN1pcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjA7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cGF0aCBkPVxcXCJNMTkuMDIyLDE5LjI1MSwxNy4yOTIsMjQuNGguNTg5bC0uNTYsMS42MzdIMTMuOTMzbDEuNjk0LTUuMDgySDE1LjA2bDMuOTYyLTEuN1ptLTMuOTYyLDEuNy41NjctMS43aDMuNGwtMy45NjIsMS43WlxcXCIgc3R5bGU9XFxcImZpbGw6bm9uZTtzdHJva2U6IzIzMWYyMDtzdHJva2UtbWl0ZXJsaW1pdDoxMDtzdHJva2Utd2lkdGg6MC4yMTYwMDAwMDU2MDI4MzdweFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMTYuOTQ3IDI1LjQ2NyAxNy4xMzQgMjQuOTA3IDE2LjU2NyAyNC45MDcgMTguMjY4IDE5LjgxOSAxNS45MTQgMTkuODE5IDE1LjcyIDIwLjM4NiAxNi4zOCAyMC4zODYgMTQuNjg2IDI1LjQ2NyAxNi45NDcgMjUuNDY3IDE2Ljk0NyAyNS40NjdcXFwiIHN0eWxlPVxcXCJmaWxsOiNkMGQyZDM7ZmlsbC1ydWxlOmV2ZW5vZGRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjE2Ljk0NyAyNS40NjcgMTcuMTM0IDI0LjkwNyAxNi41NjcgMjQuOTA3IDE4LjI2OCAxOS44MTkgMTUuOTE0IDE5LjgxOSAxNS43MiAyMC4zODYgMTYuMzggMjAuMzg2IDE0LjY4NiAyNS40NjcgMTYuOTQ3IDI1LjQ2NyAxNi45NDcgMjUuNDY3XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxOC44MjggMTguMTI1IDE5LjIwOCAxNi45OTEgMTkuMDIyIDE2LjcxMSAxNy44ODggMTYuNzExIDE3LjUxNCAxNi45OTEgMTcuMTM0IDE4LjEyNSAxNy4zMjggMTguNDA1IDE4LjQ2MiAxOC40MDUgMTguODI4IDE4LjEyNSAxOC44MjggMTguMTI1XFxcIiBzdHlsZT1cXFwiZmlsbDojZDBkMmQzO2ZpbGwtcnVsZTpldmVub2RkXFxcIi8+PHBvbHlnb24gcG9pbnRzPVxcXCIxOC44MjggMTguMTI1IDE5LjIwOCAxNi45OTEgMTkuMDIyIDE2LjcxMSAxNy44ODggMTYuNzExIDE3LjUxNCAxNi45OTEgMTcuMTM0IDE4LjEyNSAxNy4zMjggMTguNDA1IDE4LjQ2MiAxOC40MDUgMTguODI4IDE4LjEyNSAxOC44MjggMTguMTI1XFxcIiBzdHlsZT1cXFwiZmlsbDpub25lO3N0cm9rZTojMjMxZjIwO3N0cm9rZS1taXRlcmxpbWl0OjEwO3N0cm9rZS13aWR0aDowLjIxNjAwMDAwNTYwMjgzN3B4XFxcIi8+XCIsXG5cdH0sXG5cdFwiVmlzdWFsIEJhc2ljXCI6IHtcblx0XHRjb2xvdXI6IFwiIzAwNTE5YVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTYuNjcsNy44MzYsOSwxOC45MTUsMTEuMzM2LDcuODM2SDE2TDExLjMzNiwyNC4xNjRINi42NzJMMiw3LjgzNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiMwMDUxOWFcXFwiLz48cGF0aCBkPVxcXCJNMTguMzMxLDcuODM2aDcuNmE0LjA4LDQuMDgsMCwwLDEsMi45LDEuNzQ5LDMuNzgsMy43OCwwLDAsMSwuNTcxLDIuMDQsMy45ODUsMy45ODUsMCwwLDEtLjU3MSwyLjAzNCw0LjEwOCw0LjEwOCwwLDAsMS0yLjM0MSwxLjc2Myw0LjEsNC4xLDAsMCwxLDIuOTI5LDEuNzU2LDMuOCwzLjgsMCwwLDEsLjU4LDIuMSw0LjY2Myw0LjY2MywwLDAsMS0uNTc5LDIuNTQ2LDUuMDQ3LDUuMDQ3LDAsMCwxLTMuNSwyLjMzOEgxOC4zMzFaTTIzLDE0LjI1MmgxLjE2NmExLjc1NCwxLjc1NCwwLDAsMCwwLTMuNUgyM1ptMCw3SDI0LjM5YTIuMDQ3LDIuMDQ3LDAsMCwwLDAtNC4wODlIMjNaXFxcIiBzdHlsZT1cXFwiZmlsbDojMDA1MTlhXFxcIi8+XCIsXG5cdH0sXG5cdFwiV2ViQXNzZW1ibHlcIjoge1xuXHRcdGNvbG91cjogXCIjNjU0ZmYwXCIsXG5cdFx0aWNvbjogXCI8cGF0aCBkPVxcXCJNMTkuMTUzLDIuMzVWMi41YTMuMiwzLjIsMCwxLDEtNi40LDBoMFYyLjM1SDJWMzAuMjY5SDI5LjkxOVYyLjM1WlxcXCIgc3R5bGU9XFxcImZpbGw6IzY1NGZmMFxcXCIvPjxwYXRoIGQ9XFxcIk04LjQ4NSwxNy40aDEuODVMMTEuNiwyNC4xMjNoLjAyM0wxMy4xNCwxNy40aDEuNzMxbDEuMzcxLDYuODFoLjAyN2wxLjQ0LTYuODFoMS44MTVsLTIuMzU4LDkuODg1SDE1LjMyOWwtMS4zNi02LjcyOGgtLjAzNmwtMS40NTYsNi43MjhoLTEuODdabTEzLjEyNCwwaDIuOTE3bDIuOSw5Ljg4NUgyNS41MTVsLS42My0yLjJIMjEuNTYybC0uNDg2LDIuMkgxOS4yMTdabTEuMTEsMi40MzctLjgwNywzLjYyN2gyLjUxMkwyMy41LDE5LjgzMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz5cIixcblx0fSxcblx0XCJXb2xmcmFtIGxhbmd1YWdlXCI6IHtcblx0XHRjb2xvdXI6IFwiI2QwMTAwMFwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTMwLDIwLjU1LDI1Ljk0LDE2LDMwLDExLjQ1bC01Ljk0OC0xLjI5NC41OTUtNi4wNjdMMTkuMDcxLDYuNTQzLDE1Ljk5MywxLjI3OSwxMi45MjksNi41NDMsNy4zNTMsNC4wODlsLjU5NSw2LjA2N0wyLDExLjQ1LDYuMDU5LDE2LDIsMjAuNTVsNS45NDgsMS4yOTQtLjU5NSw2LjA2Nyw1LjU3Ni0yLjQ1NCwzLjA3OCw1LjI2NCwzLjA2My01LjI2NCw1LjU5MSwyLjQ1NC0uNjEtNi4wNjdaXFxcIiBzdHlsZT1cXFwiZmlsbDojZDEwXFxcIi8+PHBhdGggZD1cXFwiTTE5LjM1MywxMS40NWE2Ljk2OCw2Ljk2OCwwLDAsMS0zLjQyLjg2Miw1LjQ0Niw1LjQ0NiwwLDAsMS0zLjIxMi0uODYyQTcuMSw3LjEsMCwwLDEsMTIuNSwxNC44YTYuMjI1LDYuMjI1LDAsMCwxLTEuODc0LDIuOTE0LDcuNDU0LDcuNDU0LDAsMCwxLDMuMTM4LDEuMTksOS42NTksOS42NTksMCwwLDEsMi4yMTYsMi43MjEsOC4xOTQsOC4xOTQsMCwwLDEsMi4xNDEtMi42OTEsNy42MDUsNy42MDUsMCwwLDEsMy4yNDItMS4yLDEyLjU2MiwxMi41NjIsMCwwLDEtMS45MzMtMi45NDRBNi43MTgsNi43MTgsMCwwLDEsMTkuMzUzLDExLjQ1Wm0tMS45LDYuNTQzYTUuMjMzLDUuMjMzLDAsMCwwLTEuNDU3LDEuNjM2LDYuMjM2LDYuMjM2LDAsMCwwLTEuNS0xLjYyMSw1LjE5MSw1LjE5MSwwLDAsMC0xLjk0OC0uODQ4LDYuODM5LDYuODM5LDAsMCwwLDEuMTE1LTIuMDA3LDYuMTgsNi4xOCwwLDAsMCwuMjIzLTIuMDgyLDYuMzE3LDYuMzE3LDAsMCwwLDIuMDgyLjQ0Niw2LjU1Miw2LjU1MiwwLDAsMCwyLjE3MS0uNDYxLDQuNTIxLDQuNTIxLDAsMCwwLC4wNzQsMi4xNTYsNi43MSw2LjcxLDAsMCwwLDEuMjQ5LDEuOTMzQTcuMDMxLDcuMDMxLDAsMCwwLDE3LjQ1LDE3Ljk5M1ptNC4yMzgtNC4wMTVjLS4zNTctMS4xNzUuNjU0LTYuNzA2LjY1NC02LjcwNlMxOC41NSw5Ljg0NCwxNS44ODgsOS44NDRzLTYuMjMtMi41NzItNi4yMy0yLjU3MiwxLjE3NSw0LjAxNS40NjEsNi41ODctNC4zODcsNS40NzItNC4zODcsNS40NzIsNC43ODguMjgzLDYuNiwxLjUsMy42NTgsNS45NDgsMy42NTgsNS45NDgsMi40NTQtNS4yLDMuNDgtNS45NDgsNi44LTEuNSw2LjgtMS41LTQuMjIzLTQuMTc4LTQuNTgtNS4zNTNabS0yLjg0LDUuOTYzYTkuNDQ0LDkuNDQ0LDAsMCwwLTIuODQsNC4xNzhzLTEuNDEzLTMuMTUyLTIuOTc0LTQuMjIzUzguMywxOC41NDMsOC4zLDE4LjU0M3MyLjQ1NC0yLjE3MSwzLjA0OC00LjFhMTEuOTIzLDExLjkyMywwLDAsMC0uMS00Ljk1MiwxMS4zLDExLjMsMCwwLDAsNC42NjksMS42MjFjMi4wMzcsMCw0Ljg0OC0xLjYyMSw0Ljg0OC0xLjYyMXMtLjgxOCwzLjAzMy0uMTY0LDQuOTIyLDMuMTA4LDQuMTM0LDMuMTA4LDQuMTM0YTEwLjU1NywxMC41NTcsMCwwLDAtNC44NjIsMS40WlxcXCIgc3R5bGU9XFxcImZpbGw6I2ZmZlxcXCIvPlwiLFxuXHR9LFxuXHRcIlhNTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmMTY2MmFcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yMC40MiwyMS4xNTdsMi4yMTEsMi4yMTFMMzAsMTYsMjIuNjMxLDguNjMxLDIwLjQyLDEwLjg0MywyNS41OCwxNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmMTY2MmFcXFwiLz48cGF0aCBkPVxcXCJNMTEuNTgsMTAuODQzLDkuMzY5LDguNjMxLDIsMTZsNy4zNjksNy4zNjksMi4yMTEtMi4yMTFMNi40MiwxNlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmMTY2MmFcXFwiLz48cGF0aCBkPVxcXCJNMTcuNDExLDcuNjc3bDEuNi40MzctNC40MiwxNi4yMDktMS42LS40MzcsNC40Mi0xNi4yMDlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZjE2NjJhXFxcIi8+XCIsXG5cdH0sXG5cdFwiWFF1ZXJ5XCI6IHtcblx0XHRjb2xvdXI6IFwiI2YxNjYyYVwiLFxuXHRcdGljb246IFwiPHBhdGggZD1cXFwiTTIwLjQyLDIxLjE1N2wyLjIxMSwyLjIxMUwzMCwxNiwyMi42MzEsOC42MzEsMjAuNDIsMTAuODQzLDI1LjU4LDE2Wk0xMS41OCwxMC44NDMsOS4zNjksOC42MzEsMiwxNmw3LjM2OSw3LjM2OSwyLjIxMS0yLjIxMUw2LjQyLDE2Wm01LjgzMS0zLjE2NiwxLjYuNDM3LTQuNDIsMTYuMjA5LTEuNi0uNDM3WlxcXCIgc3R5bGU9XFxcImZpbGw6I2YxNjYyYVxcXCIvPjxwYXRoIGQ9XFxcIk0yMC4zMzIsMTguNDYyYTMuMzU0LDMuMzU0LDAsMCwxLC45NzUtMS40MjMsNC4wMTQsNC4wMTQsMCwwLDEsMS42MTctLjhBOS4xMTgsOS4xMTgsMCwwLDEsMjUuMTM4LDE2YTUuNDcyLDUuNDcyLDAsMCwxLDMuNjgxLDEuMDM5QTMuNSwzLjUsMCwwLDEsMzAsMTkuODA4YTQuNDcsNC40NywwLDAsMS0uMjQsMS40OTEsMy4xMjQsMy4xMjQsMCwwLDEtLjgzOCwxLjIzOWwtMS42NzUsMS42YTEuNTEyLDEuNTEyLDAsMCwwLS40MjQuNzg5LDUuMzA3LDUuMzA3LDAsMCwwLS4xLDEuMUgyM3YtLjU0YTYuMzIsNi4zMiwwLDAsMSwuMjA3LTEuNzc4LDIuODg2LDIuODg2LDAsMCwxLC43OC0xLjI0bDEuMzUyLTEuMjg5YTEuODQsMS44NCwwLDAsMCwuNTYzLS44OTQsMy42ODIsMy42ODIsMCwwLDAsLjEtLjgsMS41LDEuNSwwLDAsMC0uMjUyLS45LjkuOSwwLDAsMC0uNzc5LS4zNDYsMS4yNTUsMS4yNTUsMCwwLDAtLjQ4My4wODYuNzI0LjcyNCwwLDAsMC0uMzQ0LjMzNywyLjM0NywyLjM0NywwLDAsMC0uMjE3LjcyMSw3LjYxNCw3LjYxNCwwLDAsMC0uMDgxLDEuMjRIMjBBNi4xNTUsNi4xNTUsMCwwLDEsMjAuMzMyLDE4LjQ2MlptNi40NTcsOC41VjMwSDIyLjkzNlYyNi45NjJaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmNiYTAwXFxcIi8+XCIsXG5cdH0sXG5cdFwiWUFNTFwiOiB7XG5cdFx0Y29sb3VyOiBcIiNmZmU4ODVcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk0yLDEyLjIxOGMuNzU1LDAsMS41MS0uMDA4LDIuMjY0LDBsLjA1My4wMzhRNS43LDEzLjYzOCw3LjA3OCwxNS4wMTRjLjg5MS0uOTA2LDEuOC0xLjc5NCwyLjctMi43LjA1My0uMDUyLjExLS4xMTMuMTkyLS4xLjYwOCwwLDEuMjE1LDAsMS44MjMsMGExLjQsMS40LDAsMCwxLC4zNTMuMDE5Yy0uNy42Ny0xLjM3NywxLjM2OS0yLjA2OSwyLjA1TDUuNTQ1LDE4LjhjLS4zMzEuMzI0LS42NDguNjYzLS45ODkuOTc1LS43NTQuMDIyLTEuNTExLjAwNy0yLjI2Ni4wMDcsMS4yMjMtMS4yMDksMi40MzEtMi40MzMsMy42NTgtMy42MzdDNC42MjcsMTQuODQxLDMuMzE4LDEzLjUyNSwyLDEyLjIxOFpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmU4ODVcXFwiLz48cGF0aCBkPVxcXCJNMTIuNywxMi4yMThjLjYxMywwLDEuMjI2LDAsMS44MzksMHEwLDMuNzgzLDAsNy41NjZjLS42MTEsMC0xLjIyMi4wMTItMS44MzItLjAwOCwwLTEuNjY0LDAtMy4zMjksMC00Ljk5NC0xLjYsMS42MDctMy4yMDksMy4yLTQuODExLDQuOC0uMDg5LjA4LS4xNjYuMjE3LS4zMDUuMTk0LS44MjQtLjAwNi0xLjY0OSwwLTIuNDc0LDBROC45MTYsMTYsMTIuNywxMi4yMThaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZlODg1XFxcIi8+PHBhdGggZD1cXFwiTTE0Ljk1OCwxMi4yMmMuNDctLjAwOS45MzksMCwxLjQwOSwwLC44MzYuODUzLDEuNjksMS42ODksMi41MzYsMi41MzJxMS4yNjgtMS4yNjcsMi41MzktMi41MzIuNywwLDEuNCwwLS4wMDgsMy43ODQsMCw3LjU2N2MtLjQ3MSwwLS45NDMuMDA2LTEuNDE0LDBxLjAwOC0yLjM4NywwLTQuNzczYy0uODQ0Ljg0My0xLjY3NiwxLjctMi41MjYsMi41MzYtLjg1Ni0uODM1LTEuNjg3LTEuNjk1LTIuNTMyLTIuNTQxLDAsMS41OTQtLjAwNiwzLjE4OC4wMDYsNC43ODEtLjQ3MiwwLS45NDMuMDA1LTEuNDE1LDBRMTQuOTU4LDE2LDE0Ljk1OCwxMi4yMlpcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmU4ODVcXFwiLz48cGF0aCBkPVxcXCJNMjMuMjU5LDEyLjIxN2MuNDcyLDAsLjk0NC0uMDA3LDEuNDE2LDBxLS4wMDcsMy4wODMsMCw2LjE2NmMxLjI2LDAsMi41MjEsMCwzLjc4MiwwLC4wNjMuMDA2LjE0NC0uMDEyLjE5MS4wNDUuNDQ4LjQ1NC45MDcuOSwxLjM1MywxLjM1NHEtMy4zNzEuMDA3LTYuNzQxLDBRMjMuMjY3LDE2LDIzLjI1OSwxMi4yMTdaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZlODg1XFxcIi8+XCIsXG5cdH0sXG5cdFwiWUFOR1wiOiB7XG5cdFx0Y29sb3VyOiBcIiMyMzFmMjBcIixcblx0XHRpY29uOiBcIjxwYXRoIGQ9XFxcIk04Ljg3NywyMy4xNTljMC01LjUzNSwzLjk5Mi03LjE2OCw3Ljg5NC03LjE2OCwzLjM1NywwLDUuOTg4LTMuODExLDUuOTg4LTYuNjI0LDAtMy42MjEtMi40ODctNS44MzEtNC44ODItNy4xMkExMy44ODEsMTMuODgxLDAsMSwwLDE0LjUsMjkuOEMxMC40OTEsMjguMjQ4LDguODc3LDI1LjMyNCw4Ljg3NywyMy4xNTlaXFxcIiBzdHlsZT1cXFwiZmlsbDojZmZmXFxcIi8+PHBhdGggZD1cXFwiTTE0LjQ4MiwyOS45MTdBMTQsMTQsMCwwLDEsMTYsMmExNC4xNTQsMTQuMTU0LDAsMCwxLDEuODkzLjEzMWwuMDQuMDEzYzIuMjU1LDEuMjEzLDQuOTQ0LDMuNDUyLDQuOTQ0LDcuMjIzLDAsMi43MTUtMi41NjQsNi43NDEtNi4xMDYsNi43NDEtMi45LDAtNy43NzYuOTE2LTcuNzc2LDcuMDUsMCwyLjAyMiwxLjQ1MSw0Ljk0Niw1LjU0Miw2LjUzMVpNMTYsMi4yMzZBMTMuNzY1LDEzLjc2NSwwLDAsMCwxMy42MzcsMjkuNTZjLTMuNTgxLTEuNjg0LTQuODc3LTQuNDQ3LTQuODc3LTYuNCwwLTYuNTc2LDUuNi03LjI4Niw4LjAxMi03LjI4NiwzLjQwNiwwLDUuODctMy44ODYsNS44Ny02LjUwNiwwLTMuNjQ1LTIuNjA2LTUuODItNC44LTcuMDA2QTEzLjkyOCwxMy45MjgsMCwwLDAsMTYsMi4yMzZaXFxcIiBzdHlsZT1cXFwiZmlsbDojMjMxZjIwXFxcIi8+PHBhdGggZD1cXFwiTTI5Ljg4MiwxNmExMy44ODIsMTMuODgyLDAsMCwwLTEyLTEzLjc1MmMyLjQsMS4yODksNC44ODIsMy41LDQuODgyLDcuMTIsMCwyLjgxMy0yLjYzMSw2LjYyNC01Ljk4OCw2LjYyNC0zLjksMC03Ljg5NCwxLjYzMy03Ljg5NCw3LjE2OCwwLDIuMTY2LDEuNjEzLDUuMDg5LDUuNjE4LDYuNjQxQTEzLjg3NSwxMy44NzUsMCwwLDAsMjkuODgyLDE2WlxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxwYXRoIGQ9XFxcIk0xNiwzMGExNC4yLDE0LjIsMCwwLDEtMS41MTgtLjA4M2wtLjAzLS4wMDdjLTQuMi0xLjYyOC01LjY5My00LjY1NC01LjY5My02Ljc1LDAtNi41NzYsNS42LTcuMjg2LDguMDEyLTcuMjg2LDMuNDA2LDAsNS44Ny0zLjg4Niw1Ljg3LTYuNTA2LDAtMy42NTUtMi42MjEtNS44MzMtNC44Mi03LjAxNmwuMDcyLS4yMjFBMTQsMTQsMCwwLDEsMTYsMzBabS0xLjQ3Ny0uMzE2QTEzLjc1NiwxMy43NTYsMCwwLDAsMjkuNzY0LDE2LDEzLjgwNywxMy44MDcsMCwwLDAsMTguNSwyLjQ2NmMyLjExNSwxLjI3Miw0LjM3NywzLjQ0MSw0LjM3Nyw2LjksMCwyLjcxNS0yLjU2NCw2Ljc0MS02LjEwNiw2Ljc0MS0yLjksMC03Ljc3Ni45MTYtNy43NzYsNy4wNUM5LDI1LjE3OCwxMC40NDMsMjguMSwxNC41MjMsMjkuNjg0WlxcXCIgc3R5bGU9XFxcImZpbGw6IzIzMWYyMFxcXCIvPjxjaXJjbGUgY3g9XFxcIjE1Ljk0M1xcXCIgY3k9XFxcIjIyLjc4N1xcXCIgcj1cXFwiMS41MDZcXFwiIHN0eWxlPVxcXCJmaWxsOiNmZmZcXFwiLz48Y2lyY2xlIGN4PVxcXCIxNi4wMDdcXFwiIGN5PVxcXCI5LjE0MlxcXCIgcj1cXFwiMS41MDZcXFwiIHN0eWxlPVxcXCJmaWxsOiMyMzFmMjBcXFwiLz5cIixcblx0fSxcblx0XCJaaWdcIjoge1xuXHRcdGNvbG91cjogXCIjZjdhNDFkXCIsXG5cdFx0aWNvbjogXCI8cG9seWdvbiBwb2ludHM9XFxcIjUuNzMzIDE5LjczMSA1LjczMyAxMi4yNjQgOC41MzMgMTIuMjY0IDguNTMzIDguNTMxIDIgOC41MzEgMiAyMy40NjQgNS41NDcgMjMuNDY0IDguOTA3IDE5LjczMSA1LjczMyAxOS43MzFcXFwiIHN0eWxlPVxcXCJmaWxsOiNmN2E0MWRcXFwiLz48cG9seWdvbiBwb2ludHM9XFxcIjI2LjQ1MyA4LjUzMSAyMy4wOTMgMTIuMjY0IDI2LjI2NyAxMi4yNjQgMjYuMjY3IDE5LjczMSAyMy40NjcgMTkuNzMxIDIzLjQ2NyAyMy40NjQgMzAgMjMuNDY0IDMwIDguNTMxIDI2LjQ1MyA4LjUzMVxcXCIgc3R5bGU9XFxcImZpbGw6I2Y3YTQxZFxcXCIvPjxwb2x5Z29uIHBvaW50cz1cXFwiMjYuODc1IDYuNzA3IDIwLjUxMyA4LjUzMSA5LjQ2NyA4LjUzMSA5LjQ2NyAxMi4yNjQgMTYuODQ3IDEyLjI2NCA1LjExNSAyNS4yOTMgMTEuNDk3IDIzLjQ2NCAyMi41MzMgMjMuNDY0IDIyLjUzMyAxOS43MzEgMTUuMTQ4IDE5LjczMSAyNi44NzUgNi43MDdcXFwiIHN0eWxlPVxcXCJmaWxsOiNmN2E0MWRcXFwiLz5cIixcblx0fVxufTtcbiIsICJpbXBvcnQgeyBGZW5jZUNvZGVQYXJhbWV0ZXJzIH0gZnJvbSBcIi4uL3R5cGVzL3BhcnNpbmdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmVuY2VDb2RlUGFyYW1ldGVycyhcblx0ZmVuY2VDb2RlUGFyYW1ldGVyc0xpbmU6IHN0cmluZyxcbik6IEZlbmNlQ29kZVBhcmFtZXRlcnMge1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0RlY29yYXRlRmVuY2VDb2RlKFxuXHRmZW5jZUNvZGVQYXJhbWV0ZXJzOiBGZW5jZUNvZGVQYXJhbWV0ZXJzLFxuKTogYm9vbGVhbiB7XG5cdC8vVE9ETzogQ2hlY2sgaWYgbGFuZ3VhZ2UgaXMgaWdub3JlZFxuXHQvL1RPRE86IENoZWNrIGlmIGNvZGVibG9jayBhcmd1bWVudHMgY29udGFpbiBpZ25vcmVcblx0cmV0dXJuIHRydWVcbn1cbiIsICJpbXBvcnQgeyBDYWNoZWRNZXRhZGF0YSwgRGF0YUFkYXB0ZXIsIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIE1hcmtkb3duU2VjdGlvbkluZm9ybWF0aW9uLCBwYXJzZUxpbmt0ZXh0LCByZXNvbHZlU3VicGF0aCwgU2VjdGlvbkNhY2hlLCBWaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBERVRFQ1RJTkdfQ09OVEVYVCwgUEFSQU1FVEVSU19BVFRSSUJVVEUgfSBmcm9tIFwic3JjL0ludGVybmFsL2NvbnN0YW50cy9kZXRlY3RpbmdcIjtcbmltcG9ydCBDb2RlU3R5bGVyUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuaW1wb3J0IHsgdW5pZmllZCB9IGZyb20gXCJ1bmlmaWVkXCI7XG5pbXBvcnQgbWFya2Rvd24gZnJvbSAncmVtYXJrLXBhcnNlJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCc7XG5pbXBvcnQgeyBTRVRUSU5HU19UQUJfU09VUkNFUEFUSF9QUkVGSVggfSBmcm9tIFwic3JjL0ludGVybmFsL2NvbnN0YW50cy9pbnRlcmZhY2VcIjtcbmltcG9ydCB7IENvZGVEZXRlY3RpbmdDb250ZXh0IH0gZnJvbSBcInNyYy9JbnRlcm5hbC90eXBlcy9kZXRlY3RpbmdcIjtcbmltcG9ydCB7IERFQ09SQVRFRF9BVFRSSUJVVEUgfSBmcm9tIFwic3JjL0ludGVybmFsL2NvbnN0YW50cy9kZWNvcmF0aW9uXCI7XG5pbXBvcnQgeyBwYXJzZUZlbmNlQ29kZVBhcmFtZXRlcnMsIHRvRGVjb3JhdGVGZW5jZUNvZGUgfSBmcm9tIFwic3JjL0ludGVybmFsL1BhcnNpbmcvRmVuY2VkXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJlZEZlbmNlZENvZGVEZWNvcmF0aW5nKFxuXHRlbGVtZW50OiBIVE1MRWxlbWVudCxcblx0Y29udGV4dDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcblx0cGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luLFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGZlbmNlQ29kZUVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYHByZTpub3QoZnJvbnRtYXR0ZXIpID4gY29kZVske1BBUkFNRVRFUlNfQVRUUklCVVRFfV1gKSlcblx0Zm9yIChjb25zdCBmZW5jZUNvZGVFbGVtZW50IG9mIGZlbmNlQ29kZUVsZW1lbnRzIGFzIEFycmF5PEhUTUxFbGVtZW50Pikge1xuXHRcdGlmICghZmVuY2VDb2RlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJpcy1sb2FkZWRcIikpXG5cdFx0XHRjb25zb2xlLmxvZyhcIldBU04nVCBMT0FERURcIilcblxuXHRcdGNvbnN0IGRlY29yYXRlZCA9IGZlbmNlQ29kZUVsZW1lbnQuZ2V0QXR0cmlidXRlKERFQ09SQVRFRF9BVFRSSUJVVEUpID8/IFwiZmFsc2VcIlxuXHRcdGlmIChkZWNvcmF0ZWQgPT09IFwidHJ1ZVwiKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Ly9UT0RPOiBEZWNvcmF0ZVxuXHRcdGNvbnNvbGUubG9nKFwiZGVjb29yYXRlXCIsIGZlbmNlQ29kZUVsZW1lbnQpXG5cdFx0Y29uc3QgY29kZWJsb2NrUGFyYW1ldGVycyA9IHBhcnNlRmVuY2VDb2RlUGFyYW1ldGVycyhmZW5jZUNvZGVFbGVtZW50LmdldEF0dHJpYnV0ZShQQVJBTUVURVJTX0FUVFJJQlVURSkgPz8gXCIgXCIpO1xuXHRcdGNvbnN0IGNvZGVEZXRlY3RpbmdDb250ZXh0ID0gKGZlbmNlQ29kZUVsZW1lbnQuZ2V0QXR0cmlidXRlKERFVEVDVElOR19DT05URVhUKSA/PyBcInN0YW5kYWxvbmVcIikgYXMgQ29kZURldGVjdGluZ0NvbnRleHRcblxuXHRcdGlmICghdG9EZWNvcmF0ZUZlbmNlQ29kZShjb2RlYmxvY2tQYXJhbWV0ZXJzKSlcblx0XHRcdHJldHVybjtcblxuXHRcdGZlbmNlQ29kZUVsZW1lbnQuc2V0QXR0cmlidXRlKERFQ09SQVRFRF9BVFRSSUJVVEUsIFwidHJ1ZVwiKVxuXHR9XG59XG5cbi8vIC8vVE9ETzogVXBkYXRlXG5cbi8vIGltcG9ydCB7IE1hcmtkb3duU2VjdGlvbkluZm9ybWF0aW9uLCBDYWNoZWRNZXRhZGF0YSwgc2FuaXRpemVIVE1MVG9Eb20sIEZyb250TWF0dGVyQ2FjaGUsIE1hcmtkb3duUmVuZGVyZXIsIE1hcmtkb3duVmlldywgVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuLy8gaW1wb3J0IHsgdmlzaXRQYXJlbnRzIH0gZnJvbSBcInVuaXN0LXV0aWwtdmlzaXQtcGFyZW50c1wiO1xuLy8gaW1wb3J0IHsgZnJvbUh0bWwgfSBmcm9tIFwiaGFzdC11dGlsLWZyb20taHRtbFwiO1xuLy8gaW1wb3J0IHsgdG9IdG1sIH0gZnJvbSBcImhhc3QtdXRpbC10by1odG1sXCI7XG4vLyBpbXBvcnQgeyBFbGVtZW50Q29udGVudCwgRWxlbWVudCB9IGZyb20gXCJoYXN0XCI7XG5cbi8vIGltcG9ydCBDb2RlU3R5bGVyUGx1Z2luIGZyb20gXCIuL21haW5cIjtcbi8vIGltcG9ydCB7IFNFVFRJTkdTX1NPVVJDRVBBVEhfUFJFRklYLCBUUkFOU0lUSU9OX0xFTkdUSCB9IGZyb20gXCIuL1NldHRpbmdzXCI7XG4vLyBpbXBvcnQgeyBDb2RlYmxvY2tQYXJhbWV0ZXJzLCBnZXRGaWxlQ29udGVudExpbmVzLCBpc0NvZGVibG9ja0lnbm9yZWQsIGlzTGFuZ3VhZ2VJZ25vcmVkLCBwYXJzZUNvZGVibG9ja1NvdXJjZSB9IGZyb20gXCIuL1BhcnNpbmcvQ29kZWJsb2NrUGFyc2luZ1wiO1xuLy8gaW1wb3J0IHsgSW5saW5lQ29kZVBhcmFtZXRlcnMsIHBhcnNlSW5saW5lQ29kZSB9IGZyb20gXCIuL1BhcnNpbmcvSW5saW5lQ29kZVBhcnNpbmdcIjtcbi8vIGltcG9ydCB7IGNyZWF0ZUhlYWRlciwgY3JlYXRlSW5saW5lT3BlbmVyLCBnZXRMaW5lQ2xhc3MgYXMgZ2V0TGluZUNsYXNzZXMgfSBmcm9tIFwiLi9Db2RlYmxvY2tEZWNvcmF0aW5nXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95UmVhZGluZ01vZGVFbGVtZW50cygpOiB2b2lkIHtcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb2RlLXN0eWxlci1wcmUtcGFyZW50XCIpLmZvckVhY2goY29kZWJsb2NrUHJlUGFyZW50ID0+IHtcblx0XHRjb2RlYmxvY2tQcmVQYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvZGUtc3R5bGVyLXByZS1wYXJlbnRcIik7XG5cdH0pO1xuXHRbXG5cdFx0Li4uQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlLmNvZGUtc3R5bGVyLXByZSBkaXZbY2xhc3NePSdjb2RlLXN0eWxlci1oZWFkZXItY29udGFpbmVyJ11cIikpLFxuXHRcdC4uLkFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZS5jb2RlLXN0eWxlci1wcmUgZGl2W2NsYXNzXj0nY29kZS1zdHlsZXItbGluZS1udW1iZXInXVwiKSksXG5cdFx0Li4uQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiOm5vdChwcmUpID4gY29kZSBzcGFuLmNvZGUtc3R5bGVyLWlubGluZS1vcGVuZXJcIikpLFxuXHRdLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LnJlbW92ZSgpKTtcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZS5jb2RlLXN0eWxlci1wcmVcIikuZm9yRWFjaCgoY29kZWJsb2NrUHJlRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcblx0XHRjb2RlYmxvY2tQcmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2RlLXN0eWxlci1wcmVcIik7XG5cdFx0Y29kZWJsb2NrUHJlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29kZS1zdHlsZXItZm9sZGVkXCIpO1xuXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLXRydWUtaGVpZ2h0XCIpO1xuXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLWxpbmUtbnVtYmVyLW1hcmdpblwiKTtcblx0XHRjb2RlYmxvY2tQcmVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWF4LWhlaWdodFwiKTtcblx0XHRjb2RlYmxvY2tQcmVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwid2hpdGUtc3BhY2VcIik7XG5cdH0pO1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlID4gY29kZSB+IGNvZGUubGFuZ3VhZ2Utb3V0cHV0XCIpLmZvckVhY2goKGV4ZWN1dGVDb2RlT3V0cHV0OiBIVE1MRWxlbWVudCkgPT4ge1xuXHRcdGV4ZWN1dGVDb2RlT3V0cHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJleGVjdXRlLWNvZGUtb3V0cHV0XCIpO1xuXHRcdGV4ZWN1dGVDb2RlT3V0cHV0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS10cnVlLWhlaWdodFwiKTtcblx0XHRleGVjdXRlQ29kZU91dHB1dC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm1heC1oZWlnaHRcIik7XG5cdH0pO1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlID4gY29kZTpudGgtb2YtdHlwZSgxKVwiKS5mb3JFYWNoKChjb2RlYmxvY2tDb2RlRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcblx0XHRjb2RlYmxvY2tDb2RlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIi0tdHJ1ZS1oZWlnaHRcIik7XG5cdFx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLWxpbmUtd3JhcHBpbmdcIik7XG5cdFx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLWxpbmUtYWN0aXZlLXdyYXBwaW5nXCIpO1xuXHRcdGNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWF4LWhlaWdodFwiKTtcblx0XHRjb2RlYmxvY2tDb2RlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIndoaXRlLXNwYWNlXCIpO1xuXHRcdGNvZGVibG9ja0NvZGVFbGVtZW50LmlubmVySFRNTCA9IEFycmF5LmZyb20oY29kZWJsb2NrQ29kZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcImNvZGUgPiBbY2xhc3MqPVxcXCJjb2RlLXN0eWxlci1saW5lXFxcIl1cIikpLnJlZHVjZSgocmVjb25zdHJ1Y3RlZENvZGVibG9ja0xpbmVzOiBBcnJheTxzdHJpbmc+LCBjb2RlYmxvY2tMaW5lOiBIVE1MRWxlbWVudCk6IEFycmF5PHN0cmluZz4gPT4ge1xuXHRcdFx0Y29uc3QgY29kZWJsb2NrTGluZVRleHQgPSAoY29kZWJsb2NrTGluZS5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50KTtcblx0XHRcdGlmIChjb2RlYmxvY2tMaW5lVGV4dClcblx0XHRcdFx0cmVjb25zdHJ1Y3RlZENvZGVibG9ja0xpbmVzLnB1c2goY29kZWJsb2NrTGluZVRleHQuaW5uZXJIVE1MKTtcblx0XHRcdHJldHVybiByZWNvbnN0cnVjdGVkQ29kZWJsb2NrTGluZXM7XG5cdFx0fSxbXSkuam9pbihcIlxcblwiKStcIlxcblwiO1xuXHR9KTtcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIjpub3QocHJlKSA+IGNvZGVcIikuZm9yRWFjaCgoaW5saW5lQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG5cdFx0aW5saW5lQ29kZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvZGUtc3R5bGVyLWhpZ2hsaWdodGVkXCIpO1xuXHRcdGlubGluZUNvZGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2RlLXN0eWxlci1oaWdobGlnaHQtaWdub3JlXCIpO1xuXHRcdGlubGluZUNvZGVFbGVtZW50LmlubmVyVGV4dCA9IGlubGluZUNvZGVFbGVtZW50LmdldEF0dHJpYnV0ZShcInBhcmFtZXRlcnNcIikgKyBpbmxpbmVDb2RlRWxlbWVudC5pbm5lclRleHQ7XG5cdH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZW1ha2VDb2RlYmxvY2soY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb2RlYmxvY2tQcmVFbGVtZW50OiBIVE1MRWxlbWVudCwgY29kZWJsb2NrUGFyYW1ldGVyczogQ29kZWJsb2NrUGFyYW1ldGVycywgc291cmNlUGF0aDogc3RyaW5nLCBkeW5hbWljOiBib29sZWFuLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4pIHtcblx0aWYgKGR5bmFtaWMpXG5cdFx0cGx1Z2luLmV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGNvZGVibG9ja1ByZUVsZW1lbnQse2NoaWxkTGlzdDogdHJ1ZSxzdWJ0cmVlOiB0cnVlLGF0dHJpYnV0ZXM6IHRydWUsY2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBBZGQgRXhlY3V0ZSBDb2RlIE9ic2VydmVyXG5cblx0aW5zZXJ0SGVhZGVyKGNvZGVibG9ja1ByZUVsZW1lbnQsY29kZWJsb2NrUGFyYW1ldGVycyxzb3VyY2VQYXRoLHBsdWdpbixkeW5hbWljKTtcblxuXHRjb2RlYmxvY2tQcmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uZ2V0UHJlQ2xhc3Nlcyhjb2RlYmxvY2tQYXJhbWV0ZXJzLGR5bmFtaWMpKTtcblx0Y29kZWJsb2NrUHJlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkZWZhdWx0Rm9sZFwiLGNvZGVibG9ja1BhcmFtZXRlcnMuZm9sZC5lbmFibGVkLnRvU3RyaW5nKCkpO1xuXHRpZiAoY29kZWJsb2NrUHJlRWxlbWVudC5wYXJlbnRFbGVtZW50KVxuXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29kZS1zdHlsZXItcHJlLXBhcmVudFwiKTtcblxuXHRpZiAoIWNvZGVibG9ja0NvZGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjb2RlIFtjbGFzcyo9J2NvZGUtc3R5bGVyLWxpbmUnXVwiKSkgLy8gSWdub3JlIHN0eWxlZCBsaW5lc1xuXHRcdGRlY29yYXRlQ29kZWJsb2NrTGluZXMoY29kZWJsb2NrQ29kZUVsZW1lbnQsY29kZWJsb2NrUGFyYW1ldGVycyxzb3VyY2VQYXRoLHBsdWdpbik7XG59XG5cbmZ1bmN0aW9uIGluc2VydEhlYWRlcihjb2RlYmxvY2tQcmVFbGVtZW50OiBIVE1MRWxlbWVudCwgY29kZWJsb2NrUGFyYW1ldGVyczogQ29kZWJsb2NrUGFyYW1ldGVycywgc291cmNlUGF0aDogc3RyaW5nLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4sIGR5bmFtaWM6IGJvb2xlYW4pOiB2b2lkIHtcblx0Y29uc3QgaGVhZGVyQ29udGFpbmVyID0gY3JlYXRlSGVhZGVyKGNvZGVibG9ja1BhcmFtZXRlcnMsIHBsdWdpbi5zZXR0aW5ncy5jdXJyZW50VGhlbWUuc2V0dGluZ3MsIHNvdXJjZVBhdGgsIHBsdWdpbik7XG5cdGlmIChkeW5hbWljKVxuXHRcdGhlYWRlckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e3RvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudCk7fSk7IC8vIEFkZCBsaXN0ZW5lciBmb3IgaGVhZGVyIGZvbGRpbmcgb24gY2xpY2tcblx0Y29kZWJsb2NrUHJlRWxlbWVudC5pbnNlcnRCZWZvcmUoaGVhZGVyQ29udGFpbmVyLGNvZGVibG9ja1ByZUVsZW1lbnQuY2hpbGROb2Rlc1swXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVhZGluZ0RvY3VtZW50Rm9sZChjb250ZW50RWw6IEhUTUxFbGVtZW50LCBmb2xkPzogYm9vbGVhbikge1xuXHRjb25zdCBjb2RlYmxvY2tQcmVFbGVtZW50cyA9IGNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlLmNvZGUtc3R5bGVyLXByZVwiKTtcblx0aWYgKHR5cGVvZiBmb2xkID09PSBcInVuZGVmaW5lZFwiKSAvL1JldHVybiBhbGwgYmxvY2tzIHRvIG9yaWdpbmFsIHN0YXRlXG5cdFx0Y29kZWJsb2NrUHJlRWxlbWVudHMuZm9yRWFjaCgoY29kZWJsb2NrUHJlRWxlbWVudDogSFRNTEVsZW1lbnQpPT57dG9nZ2xlRm9sZChjb2RlYmxvY2tQcmVFbGVtZW50LChjb2RlYmxvY2tQcmVFbGVtZW50LmdldEF0dHJpYnV0ZShcImRlZmF1bHRGb2xkXCIpPz9cImZhbHNlXCIpPT09XCJ0cnVlXCIpO30pO1xuXHRlbHNlIC8vRm9sZCBvciB1bmZvbGQgYWxsIGJsb2Nrc1xuXHRcdGNvZGVibG9ja1ByZUVsZW1lbnRzLmZvckVhY2goKGNvZGVibG9ja1ByZUVsZW1lbnQ6IEhUTUxFbGVtZW50KT0+e3RvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudCxmb2xkKTt9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHRvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudDogSFRNTEVsZW1lbnQsIGZvbGQ/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmIChjb2RlYmxvY2tQcmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkPy5jbGFzc0xpc3Q/LmNvbnRhaW5zKFwiY29kZS1zdHlsZXItaGVhZGVyLWNvbnRhaW5lci1oaWRkZW5cIikpXG5cdFx0cmV0dXJuO1xuXHRjb2RlYmxvY2tQcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUgPiBjb2RlXCIpLmZvckVhY2goKGNvZGVibG9ja0NvZGVFbGVtZW50OiBIVE1MRWxlbWVudCk9PmNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwibWF4LWhlaWdodFwiLGBjYWxjKCR7TWF0aC5jZWlsKGNvZGVibG9ja0NvZGVFbGVtZW50LnNjcm9sbEhlaWdodCswLjAxKX1weCArIHZhcigtLWNvZGUtcGFkZGluZykgKiAke2NvZGVibG9ja0NvZGVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImV4ZWN1dGUtY29kZS1vdXRwdXRcIik/XCIzLjUgKyB2YXIoLS1oZWFkZXItc2VwYXJhdG9yLXdpZHRoKVwiOlwiMlwifSlgKSk7XG5cdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGUtc2Nyb2xsXCIpO1xuXHRhd2FpdCBzbGVlcCgxKTtcblx0aWYgKHR5cGVvZiBmb2xkID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcblx0ZWxzZVxuXHRcdGZvbGQ/Y29kZWJsb2NrUHJlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29kZS1zdHlsZXItZm9sZGVkXCIpOmNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcblx0YXdhaXQgc2xlZXAoVFJBTlNJVElPTl9MRU5HVEgpO1xuXHRjb2RlYmxvY2tQcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUgPiBjb2RlXCIpLmZvckVhY2goKGNvZGVibG9ja0NvZGVFbGVtZW50OiBIVE1MRWxlbWVudCk9PmNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWF4LWhlaWdodFwiKSk7XG5cdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtc2Nyb2xsXCIpO1xufVxuZnVuY3Rpb24gZ2V0UHJlQ2xhc3Nlcyhjb2RlYmxvY2tQYXJhbWV0ZXJzOiBDb2RlYmxvY2tQYXJhbWV0ZXJzLCBkeW5hbWljOiBib29sZWFuKTogQXJyYXk8c3RyaW5nPiB7XG5cdGNvbnN0IHByZUNsYXNzTGlzdCA9IFtcImNvZGUtc3R5bGVyLXByZVwiXTtcblx0aWYgKGNvZGVibG9ja1BhcmFtZXRlcnMubGFuZ3VhZ2UpXG5cdFx0cHJlQ2xhc3NMaXN0LnB1c2goYGxhbmd1YWdlLSR7Y29kZWJsb2NrUGFyYW1ldGVycy5sYW5ndWFnZX1gKTtcblx0aWYgKGR5bmFtaWMpIHtcblx0XHRpZiAoY29kZWJsb2NrUGFyYW1ldGVycy5mb2xkLmVuYWJsZWQpXG5cdFx0XHRwcmVDbGFzc0xpc3QucHVzaChcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcblx0XHRpZiAoY29kZWJsb2NrUGFyYW1ldGVycy5saW5lVW53cmFwLmFsd2F5c0VuYWJsZWQpXG5cdFx0XHRwcmVDbGFzc0xpc3QucHVzaChjb2RlYmxvY2tQYXJhbWV0ZXJzLmxpbmVVbndyYXAuYWN0aXZlV3JhcD9cInVud3JhcHBlZC1pbmFjdGl2ZVwiOlwidW53cmFwcGVkXCIpO1xuXHRcdGVsc2UgaWYgKGNvZGVibG9ja1BhcmFtZXRlcnMubGluZVVud3JhcC5hbHdheXNEaXNhYmxlZClcblx0XHRcdHByZUNsYXNzTGlzdC5wdXNoKFwid3JhcHBlZFwiKTtcblx0fVxuXHRyZXR1cm4gcHJlQ2xhc3NMaXN0O1xufVxuZnVuY3Rpb24gZGVjb3JhdGVDb2RlYmxvY2tMaW5lcyhjb2RlYmxvY2tDb2RlRWxlbWVudDogSFRNTEVsZW1lbnQsIGNvZGVibG9ja1BhcmFtZXRlcnM6IENvZGVibG9ja1BhcmFtZXRlcnMsIHNvdXJjZVBhdGg6IHN0cmluZywgcGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luKTogdm9pZCB7XG5cdGxldCBpbmRlbnRhdGlvbiA9IDA7XG5cdGdldENvZGVibG9ja0xpbmVzKGNvZGVibG9ja0NvZGVFbGVtZW50LHNvdXJjZVBhdGgscGx1Z2luKS5mb3JFYWNoKChsaW5lLGluZGV4LGNvZGVibG9ja0xpbmVzKSA9PiB7XG5cdFx0Y29uc3QgY3VycmVudEluZGVudGF0aW9uID0gY291bnRUYWJzKGxpbmUpO1xuXHRcdGlmIChjdXJyZW50SW5kZW50YXRpb24gPiBpbmRlbnRhdGlvbikge1xuXHRcdFx0Ly9UT0RPIChAbWF5dXJhbmt2KSBBZGQgZm9sZCB0byBwcmV2aW91cyBwb2ludFxuXHRcdFx0aW5kZW50YXRpb24gPSBjdXJyZW50SW5kZW50YXRpb247XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50SW5kZW50YXRpb24gPCBpbmRlbnRhdGlvbikge1xuXHRcdFx0Ly9UT0RPIChAbWF5dXJhbmt2KSBDbG9zZSBhbGwgZm9sZHMgdG8gbGV2ZWwgb2YgY3VycmVudCBpbmRlbnRhdGlvblxuXHRcdFx0aW5kZW50YXRpb24gPSBjdXJyZW50SW5kZW50YXRpb247XG5cdFx0fVxuXHRcdGlmIChjdXJyZW50SW5kZW50YXRpb24gPiAwKSB7XG5cdFx0XHQvL1RPRE8gKEBtYXl1cmFua3YpIEFkZCBpbmRlbnRhdGlvbiBsaW5lXG5cdFx0fVxuXHRcdGlmIChpbmRleCAhPT0gY29kZWJsb2NrTGluZXMubGVuZ3RoLTEpXG5cdFx0XHRpbnNlcnRMaW5lV3JhcHBlcihjb2RlYmxvY2tDb2RlRWxlbWVudCxjb2RlYmxvY2tQYXJhbWV0ZXJzLGluZGV4KzEsbGluZSxwbHVnaW4uc2V0dGluZ3MuY3VycmVudFRoZW1lLnNldHRpbmdzLmNvZGVibG9jay5saW5lTnVtYmVycyk7XG5cdH0pO1xufVxuZnVuY3Rpb24gZ2V0Q29kZWJsb2NrTGluZXMoY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzb3VyY2VQYXRoOiBzdHJpbmcsIHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbik6IEFycmF5PHN0cmluZz4ge1xuXHRjb25zdCBodG1sVHJlZSA9IGZyb21IdG1sKGNvZGVibG9ja0NvZGVFbGVtZW50LmlubmVySFRNTC5yZXBsYWNlKC9cXG4vZyxcIjxicj5cIikse2ZyYWdtZW50OiB0cnVlfSk7XG5cdGxldCBjb2RlYmxvY2tIVE1MID0gY29kZWJsb2NrQ29kZUVsZW1lbnQuaW5uZXJIVE1MO1xuXHR2aXNpdFBhcmVudHMoaHRtbFRyZWUsW1widGV4dFwiLFwiZWxlbWVudFwiXSwobm9kZSxhbmNlc3RvcnMpPT57XG5cdFx0aWYgKG5vZGUudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgbm9kZS50YWdOYW1lID09PSBcImJyXCIpIHtcblx0XHRcdGlmIChhbmNlc3RvcnMubGVuZ3RoID49IDIpIHtcblx0XHRcdFx0Y29kZWJsb2NrSFRNTCA9IGNvZGVibG9ja0hUTUwucmVwbGFjZSgvXFxuLyxhbmNlc3RvcnMuc2xpY2UoMSkucmVkdWNlKChyZXN1bHQsZWxlbWVudCk9Pntcblx0XHRcdFx0XHRjb25zdCBlbGVtZW50Q29weSA9IHN0cnVjdHVyZWRDbG9uZShlbGVtZW50KTtcblx0XHRcdFx0XHRlbGVtZW50Q29weS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHRcdGNvbnN0IHNwbGl0VGFnID0gdG9IdG1sKGVsZW1lbnRDb3B5KS5zcGxpdCgvKD88PT4pKD89PFxcLykvKTtcblx0XHRcdFx0XHRyZXR1cm4gc3BsaXRUYWcuc3BsaWNlKC0xKStyZXN1bHQrc3BsaXRUYWcuam9pbihcIlwiKTtcblx0XHRcdFx0fSxcIjxicj5cIikpO1xuXHRcdFx0fSBlbHNlXG5cdFx0XHRcdGNvZGVibG9ja0hUTUwgPSBjb2RlYmxvY2tIVE1MLnJlcGxhY2UoL1xcbi8sXCI8YnI+XCIpO1xuXHRcdH1cblx0fSk7XG5cdGNvbnN0IHNwbGl0SHRtbFRyZWUgPSBmcm9tSHRtbChjb2RlYmxvY2tIVE1MLHtmcmFnbWVudDogdHJ1ZX0pO1xuXHR2aXNpdFBhcmVudHMoc3BsaXRIdG1sVHJlZSxbXCJlbGVtZW50XCJdLChub2RlKT0+e1xuXHRcdGlmIChub2RlLnR5cGUgPT09IFwiZWxlbWVudFwiICYmIEFycmF5LmlzQXJyYXkobm9kZS5wcm9wZXJ0aWVzLmNsYXNzTmFtZSkgJiYgbm9kZS5wcm9wZXJ0aWVzPy5jbGFzc05hbWU/LmluY2x1ZGVzKFwiY29tbWVudFwiKSkge1xuXHRcdFx0bm9kZS5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChyZXN1bHQ6IEFycmF5PEVsZW1lbnRDb250ZW50PiwgY2hpbGQ6IEVsZW1lbnRDb250ZW50KTogQXJyYXk8RWxlbWVudENvbnRlbnQ+ID0+IHtcblx0XHRcdFx0aWYgKGNoaWxkLnR5cGUgIT09IFwidGV4dFwiKVxuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKGNoaWxkKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJlc3VsdCA9IGNvbnZlcnRDb21tZW50TGlua3MocmVzdWx0LGNoaWxkLnZhbHVlLHNvdXJjZVBhdGgscGx1Z2luKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0sW10pO1xuXHRcdH1cblx0fSk7XG5cdGNvZGVibG9ja0hUTUwgPSB0b0h0bWwoc3BsaXRIdG1sVHJlZSk7XG5cdGxldCBjb2RlYmxvY2tMaW5lcyA9IGNvZGVibG9ja0hUTUwuc3BsaXQoXCI8YnI+XCIpO1xuXHRpZiAoY29kZWJsb2NrTGluZXMubGVuZ3RoID09PSAxKVxuXHRcdGNvZGVibG9ja0xpbmVzID0gW1wiXCIsXCJcIl07XG5cdGNvZGVibG9ja0NvZGVFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdHJldHVybiBjb2RlYmxvY2tMaW5lcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRDb21tZW50TGlua3MocmVzdWx0OiBBcnJheTxFbGVtZW50Q29udGVudD4sIGNvbW1lbnRUZXh0OiBzdHJpbmcsIHNvdXJjZVBhdGg6IHN0cmluZywgcGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luKTogQXJyYXk8RWxlbWVudENvbnRlbnQ+IHtcblx0Y29uc3QgbGlua01hdGNoZXMgPSBbLi4uY29tbWVudFRleHQubWF0Y2hBbGwoLyg/OlxcW1xcW1teXFxdfFxcclxcbl0rPyg/OlxcfFteXFxdfFxcclxcbl0rPyk/XFxdXFxdfFxcWy4qP1xcXVxcKC4rXFwpKS9nKV0ucmV2ZXJzZSgpO1xuXHRjb25zdCBuZXdDaGlsZHJlbiA9IGxpbmtNYXRjaGVzLnJlZHVjZSgocmVzdWx0OiBBcnJheTxFbGVtZW50Q29udGVudD4sIGxpbmtNYXRjaDogUmVnRXhwTWF0Y2hBcnJheSk6IEFycmF5PEVsZW1lbnRDb250ZW50PiA9PiB7XG5cdFx0aWYgKHR5cGVvZiBsaW5rTWF0Y2g/LmluZGV4ID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRjb25zdCBlbmRpbmcgPSBjb21tZW50VGV4dC5zbGljZShsaW5rTWF0Y2guaW5kZXggKyBsaW5rTWF0Y2hbMF0ubGVuZ3RoKTtcblx0XHRyZXN1bHQucHVzaCh7dHlwZTogXCJ0ZXh0XCIsdmFsdWU6IGVuZGluZ30pO1xuXHRcdGNvbnN0IGxpbmtUZXh0ID0gY29tbWVudFRleHQuc2xpY2UobGlua01hdGNoLmluZGV4LCBsaW5rTWF0Y2guaW5kZXggKyBsaW5rTWF0Y2hbMF0ubGVuZ3RoKTtcblx0XHRjb25zdCBsaW5rQ29udGFpbmVyID0gY3JlYXRlRGl2KCk7XG5cdFx0TWFya2Rvd25SZW5kZXJlci5yZW5kZXIocGx1Z2luLmFwcCwgbGlua1RleHQsIGxpbmtDb250YWluZXIsIHNvdXJjZVBhdGgsIHBsdWdpbik7XG5cdFx0Y29uc3QgbGlua0NoaWxkID0gKGZyb21IdG1sKGxpbmtDb250YWluZXIuaW5uZXJIVE1MLHtmcmFnbWVudDogdHJ1ZX0pPy5jaGlsZHJlbj8uWzBdIGFzIEVsZW1lbnQpPy5jaGlsZHJlbj8uWzBdO1xuXHRcdHJlc3VsdC5wdXNoKGxpbmtDaGlsZCk7XG5cdFx0Y29tbWVudFRleHQgPSBjb21tZW50VGV4dC5zbGljZSgwLCBsaW5rTWF0Y2guaW5kZXgpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sW10pLnJldmVyc2UoKTtcblx0cmV0dXJuIFsuLi5yZXN1bHQsIC4uLlt7dHlwZTogXCJ0ZXh0XCIsdmFsdWU6IGNvbW1lbnRUZXh0fSBhcyBFbGVtZW50Q29udGVudCwuLi5uZXdDaGlsZHJlbl1dO1xufVxuZnVuY3Rpb24gaW5zZXJ0TGluZVdyYXBwZXIoY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb2RlYmxvY2tQYXJhbWV0ZXJzOiBDb2RlYmxvY2tQYXJhbWV0ZXJzLCBsaW5lTnVtYmVyOiBudW1iZXIsIGxpbmU6IHN0cmluZywgc2hvd0xpbmVOdW1iZXJzOiBib29sZWFuKTogdm9pZCB7XG5cdGNvbnN0IGxpbmVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuYXBwZW5kQ2hpbGQobGluZVdyYXBwZXIpO1xuXHRnZXRMaW5lQ2xhc3Nlcyhjb2RlYmxvY2tQYXJhbWV0ZXJzLGxpbmVOdW1iZXIsbGluZSkuZm9yRWFjaCgobGluZUNsYXNzKSA9PiBsaW5lV3JhcHBlci5jbGFzc0xpc3QuYWRkKGxpbmVDbGFzcykpO1xuXHRpZiAoKHNob3dMaW5lTnVtYmVycyAmJiAhY29kZWJsb2NrUGFyYW1ldGVycy5saW5lTnVtYmVycy5hbHdheXNEaXNhYmxlZCkgfHwgY29kZWJsb2NrUGFyYW1ldGVycy5saW5lTnVtYmVycy5hbHdheXNFbmFibGVkKVxuXHRcdGxpbmVXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZURpdih7Y2xzOiBcImNvZGUtc3R5bGVyLWxpbmUtbnVtYmVyXCIsIHRleHQ6IChsaW5lTnVtYmVyK2NvZGVibG9ja1BhcmFtZXRlcnMubGluZU51bWJlcnMub2Zmc2V0KS50b1N0cmluZygpfSkpO1xuXHRsaW5lV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVEaXYoe2NsczogXCJjb2RlLXN0eWxlci1saW5lLXRleHRcIiwgdGV4dDogc2FuaXRpemVIVE1MVG9Eb20obGluZSAhPT0gXCJcIiA/IGxpbmUgOiBcIjxicj5cIil9KSk7XG59XG5mdW5jdGlvbiBjb3VudFRhYnModGV4dDogc3RyaW5nKTogbnVtYmVyIHtcblx0Ly9UT0RPIChAbWF5dXJhbmt2KSBNYWtlIHdvcmsgd2l0aCBzcGFjZSBpbmRlbnRhdGlvbiB0b29cblx0bGV0IGNvdW50ID0gMDtcblx0bGV0IGluZGV4ID0gMDtcblx0d2hpbGUgKHRleHQuY2hhckF0KGluZGV4KyspID09PSBcIlxcdFwiKVxuXHRcdGNvdW50Kys7XG5cdHJldHVybiBjb3VudDtcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcblx0bXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uOiBNdXRhdGlvblJlY29yZCkgPT4ge1xuXHRcdGlmIChtdXRhdGlvbi50eXBlID09PSBcImNoaWxkTGlzdFwiICYmIChtdXRhdGlvbi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRhZ05hbWUgPT09IFwiUFJFXCIpIHsgLy8gQWRkIGV4ZWN1dGUgY29kZSBvdXRwdXRcblx0XHRcdGNvbnN0IGV4ZWN1dGVDb2RlT3V0cHV0ID0gKG11dGF0aW9uLnRhcmdldCBhcyBIVE1MRWxlbWVudCkucXVlcnlTZWxlY3RvcihcInByZSA+IGNvZGUgfiBjb2RlLmxhbmd1YWdlLW91dHB1dFwiKSBhcyBIVE1MRWxlbWVudDtcblx0XHRcdGlmIChleGVjdXRlQ29kZU91dHB1dClcblx0XHRcdFx0ZXhlY3V0ZUNvZGVPdXRwdXQuY2xhc3NMaXN0LmFkZChcImV4ZWN1dGUtY29kZS1vdXRwdXRcIik7XG5cdFx0fVxuXHR9KTtcbn0pO1xuIiwgImltcG9ydCB7IENhY2hlZE1ldGFkYXRhLCBEYXRhQWRhcHRlciwgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCwgTWFya2Rvd25TZWN0aW9uSW5mb3JtYXRpb24sIHBhcnNlTGlua3RleHQsIHJlc29sdmVTdWJwYXRoLCBTZWN0aW9uQ2FjaGUsIFZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFBBUkFNRVRFUlNfQVRUUklCVVRFIH0gZnJvbSBcInNyYy9JbnRlcm5hbC9jb25zdGFudHMvZGV0ZWN0aW5nXCI7XG5pbXBvcnQgQ29kZVN0eWxlclBsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB7IHVuaWZpZWQgfSBmcm9tIFwidW5pZmllZFwiO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnO1xuaW1wb3J0IHsgU0VUVElOR1NfVEFCX1NPVVJDRVBBVEhfUFJFRklYIH0gZnJvbSBcInNyYy9JbnRlcm5hbC9jb25zdGFudHMvaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBDb2RlRGV0ZWN0aW5nQ29udGV4dCB9IGZyb20gXCJzcmMvSW50ZXJuYWwvdHlwZXMvZGV0ZWN0aW5nXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJlZElubGluZUNvZGVEZWNvcmF0aW5nKFxuXHRlbGVtZW50OiBIVE1MRWxlbWVudCxcblx0Y29udGV4dDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcblx0cGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luLFxuKTogUHJvbWlzZTx2b2lkPiB7XG5cdC8vIGNvbnN0IGRlY29yYXRlRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYHByZTpub3QoZnJvbnRtYXR0ZXIpID4gY29kZVske1BBUkFNRVRFUlNfQVRUUklCVVRFfV1gKVxuXHQvLyBjb25zb2xlLmxvZyhkZWNvcmF0ZUVsZW1lbnRzKVxuXHQvLyBjb25zb2xlLmxvZyhcImZvb1wiKVxufVxuXG4vLyAvL1RPRE86IFVwZGF0ZVxuXG4vLyBpbXBvcnQgeyBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiwgQ2FjaGVkTWV0YWRhdGEsIHNhbml0aXplSFRNTFRvRG9tLCBGcm9udE1hdHRlckNhY2hlLCBNYXJrZG93blJlbmRlcmVyLCBNYXJrZG93blZpZXcsIFZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbi8vIGltcG9ydCB7IHZpc2l0UGFyZW50cyB9IGZyb20gXCJ1bmlzdC11dGlsLXZpc2l0LXBhcmVudHNcIjtcbi8vIGltcG9ydCB7IGZyb21IdG1sIH0gZnJvbSBcImhhc3QtdXRpbC1mcm9tLWh0bWxcIjtcbi8vIGltcG9ydCB7IHRvSHRtbCB9IGZyb20gXCJoYXN0LXV0aWwtdG8taHRtbFwiO1xuLy8gaW1wb3J0IHsgRWxlbWVudENvbnRlbnQsIEVsZW1lbnQgfSBmcm9tIFwiaGFzdFwiO1xuXG4vLyBpbXBvcnQgQ29kZVN0eWxlclBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XG4vLyBpbXBvcnQgeyBTRVRUSU5HU19TT1VSQ0VQQVRIX1BSRUZJWCwgVFJBTlNJVElPTl9MRU5HVEggfSBmcm9tIFwiLi9TZXR0aW5nc1wiO1xuLy8gaW1wb3J0IHsgQ29kZWJsb2NrUGFyYW1ldGVycywgZ2V0RmlsZUNvbnRlbnRMaW5lcywgaXNDb2RlYmxvY2tJZ25vcmVkLCBpc0xhbmd1YWdlSWdub3JlZCwgcGFyc2VDb2RlYmxvY2tTb3VyY2UgfSBmcm9tIFwiLi9QYXJzaW5nL0NvZGVibG9ja1BhcnNpbmdcIjtcbi8vIGltcG9ydCB7IElubGluZUNvZGVQYXJhbWV0ZXJzLCBwYXJzZUlubGluZUNvZGUgfSBmcm9tIFwiLi9QYXJzaW5nL0lubGluZUNvZGVQYXJzaW5nXCI7XG4vLyBpbXBvcnQgeyBjcmVhdGVIZWFkZXIsIGNyZWF0ZUlubGluZU9wZW5lciwgZ2V0TGluZUNsYXNzIGFzIGdldExpbmVDbGFzc2VzIH0gZnJvbSBcIi4vQ29kZWJsb2NrRGVjb3JhdGluZ1wiO1xuXG4vLyAvLyBTZXQgdXAgdGhlIHdheSBzbyB0aGF0IGNvZGUgYmxvY2tzIGFyZSBtYXJrZWQgdXAgd2l0aCBwYXJhbWV0ZXIgc3RyaW5nIGFuZCB0aGVuIHNlY29uZGFyeSBwcm9jZXNzb3IgYWRkcyBtYXJrdXAsIGlzLWxvYWRlZCBzaG91bGQgYmUgY2hlY2tlZCB3aGVuIG1hcmtlZCB1cCBvbmx5XG4vLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZGluZ1ZpZXdDb2RlYmxvY2tEZWNvcmF0aW5nUG9zdFByb2Nlc3Nvcihcbi8vIFx0ZWxlbWVudDogSFRNTEVsZW1lbnQsXG4vLyBcdHtcbi8vIFx0XHRzb3VyY2VQYXRoLFxuLy8gXHRcdGdldFNlY3Rpb25JbmZvLFxuLy8gXHRcdGZyb250bWF0dGVyXG4vLyBcdH06IHtcbi8vIFx0XHRzb3VyY2VQYXRoOiBzdHJpbmcsXG4vLyBcdFx0Z2V0U2VjdGlvbkluZm86IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gTWFya2Rvd25TZWN0aW9uSW5mb3JtYXRpb24gfCBudWxsLFxuLy8gXHRcdGZyb250bWF0dGVyOiBGcm9udE1hdHRlckNhY2hlIHwgdW5kZWZpbmVkXG4vLyBcdH0sXG4vLyBcdHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbixcbi8vIFx0ZWRpdGluZ0VtYmVkcyA9IGZhbHNlLFxuLy8gKSB7XG4vLyBcdC8vIGNvbnNvbGUubG9nKGVsZW1lbnQpXG4vLyBcdC8vIGNvbnN0IGNvZGVibG9ja3MgPSBBcnJheS5mcm9tKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJjb2RlXCIpKVxuLy8gXHQvLyBmb3IgKGNvbnN0IGNvZGVCbG9jayBvZiBjb2RlYmxvY2tzcykge1xuLy8gXHQvLyBcdGNvbnNvbGUubG9nKGNvZGVCbG9jaylcbi8vIFx0Ly8gXHRjb25zdCBzcmNDb2RlID0gY29kZUJsb2NrLmdldFRleHQoKTtcbi8vIFx0Ly8gXHRjb25zb2xlLmxvZyhzcmNDb2RlKVxuLy8gXHQvLyB9XG4vLyBcdC8vIGNvbnNvbGUubG9nKGNvZGVibG9ja3NzLmZvckVhY2goKGNvZGVCbG9jazogSFRNTEVsZW1lbnQpID0+IHtcbi8vIFx0Ly8gLy8gXHRpZiAoY29kZUJsb2NrLmNsYXNzTmFtZS5tYXRjaCgvXmxhbmd1YWdlLVxce1xcdysvaSkpIHtcbi8vIFx0Ly8gLy8gXHRcdGNvZGVCbG9jay5jbGFzc05hbWUgPSBjb2RlQmxvY2suY2xhc3NOYW1lLnJlcGxhY2UoL15sYW5ndWFnZS1cXHsoXFx3KykvaSwgXCJsYW5ndWFnZS0kMSB7XCIpO1xuLy8gXHQvLyAvLyBcdFx0Y29kZUJsb2NrLnBhcmVudEVsZW1lbnQuY2xhc3NOYW1lID0gY29kZUJsb2NrLmNsYXNzTmFtZTtcbi8vIFx0Ly8gLy8gXHR9XG5cbi8vIFx0Ly8gLy8gXHRjb25zdCBsYW5ndWFnZSA9IGNvZGVCbG9jay5jbGFzc05hbWUudG9Mb3dlckNhc2UoKTtcblxuLy8gXHQvLyAvLyBcdGlmICghbGFuZ3VhZ2UgfHwgIWxhbmd1YWdlLmNvbnRhaW5zKFwibGFuZ3VhZ2UtXCIpKVxuLy8gXHQvLyAvLyBcdFx0cmV0dXJuO1xuXG4vLyBcdC8vIC8vIFx0Y29uc3QgcHJlID0gY29kZUJsb2NrLnBhcmVudEVsZW1lbnQgYXMgSFRNTFByZUVsZW1lbnQ7XG4vLyBcdC8vIC8vIFx0Y29uc3QgcGFyZW50ID0gcHJlLnBhcmVudEVsZW1lbnQgYXMgSFRNTERpdkVsZW1lbnQ7XG5cbi8vIFx0Ly8gLy8gXHRjb25zdCBzcmNDb2RlID0gY29kZUJsb2NrLmdldFRleHQoKTtcbi8vIFx0Ly8gLy8gXHRsZXQgc2FuaXRpemVkQ2xhc3NMaXN0ID0gdGhpcy5zYW5pdGl6ZUNsYXNzTGlzdE9mQ29kZUJsb2NrKGNvZGVCbG9jayk7XG5cbi8vIFx0Ly8gLy8gXHRjb25zdCBjYW5vbmljYWxMYW5ndWFnZSA9IGdldExhbmd1YWdlQWxpYXMoXG4vLyBcdC8vIC8vIFx0XHRzdXBwb3J0ZWRMYW5ndWFnZXMuZmluZChsYW5nID0+IHNhbml0aXplZENsYXNzTGlzdC5jb250YWlucyhgbGFuZ3VhZ2UtJHtsYW5nfWApKVxuLy8gXHQvLyAvLyBcdCkgYXMgTGFuZ3VhZ2VJZDtcblxuLy8gXHQvLyAvLyBcdGlmIChjYW5vbmljYWxMYW5ndWFnZSAvLyBpZiB0aGUgbGFuZ3VhZ2UgaXMgc3VwcG9ydGVkXG4vLyBcdC8vIC8vIFx0XHQmJiAhcGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhoYXNCdXR0b25DbGFzcykpIHsgLy8gJiB0aGlzIGJsb2NrIGhhc24ndCBiZWVuIGJ1dHRvbmlmaWVkIGFscmVhZHlcbi8vIFx0Ly8gLy8gXHRcdGNvbnN0IG91dCA9IG5ldyBPdXRwdXR0ZXIoY29kZUJsb2NrLCB0aGlzLnNldHRpbmdzLCB2aWV3KTtcbi8vIFx0Ly8gLy8gXHRcdHBhcmVudC5jbGFzc0xpc3QuYWRkKGhhc0J1dHRvbkNsYXNzKTtcbi8vIFx0Ly8gLy8gXHRcdGNvbnN0IGJ1dHRvbiA9IHRoaXMuY3JlYXRlUnVuQnV0dG9uKCk7XG4vLyBcdC8vIC8vIFx0XHRwcmUuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbi8vIFx0Ly8gLy8gXHRcdHRoaXMuYWRkTGlzdGVuZXJUb0J1dHRvbihjYW5vbmljYWxMYW5ndWFnZSwgc3JjQ29kZSwgYnV0dG9uLCBvdXQsIHNvdXJjZVBhdGgpO1xuLy8gXHQvLyAvLyBcdH1cbi8vIFx0Ly8gLy8gfSkpXG4vLyBcdC8vIGNvbnNvbGUubG9nKFwiZm9vXCIpXG4vLyBcdC8vIGNvbnN0IGNvZGVibG9ja3MgPSBlbGVtZW50LmZpbmRBbGwoJ2NvZGUnKTtcbi8vIFx0Ly8gY29uc29sZS5sb2coY29kZWJsb2Nrcylcbi8vIFx0Ly8gY29uc29sZS5sb2coXCJiYXJcIilcbi8vIFx0Ly8hIEJSRUFLXG4vLyBcdC8vIENvbnRleHQ6IE5hdGl2ZSwgRW1iZWQgKEZpbGUsIENhbnZhcywgUmVhZGluZywgRWRpdGluZyksIFdob2xlIGRvY3VtZW50LCBQcmludGluZywgQ2FudmFzLCBTZXR0aW5nc1xuLy8gXHRyZXR1cm47XG4vLyBcdC8vIGNvbnNvbGUubG9nKFwiQ2hlY2sgMVwiKVxuLy8gXHQvLyBjb25zb2xlLmxvZyhzb3VyY2VQYXRoKVxuLy8gXHQvLyBpZiAoIWVsZW1lbnQpXG4vLyBcdC8vIFx0cmV0dXJuO1xuXG4vLyBcdC8vIGNvbnN0IHZpZXcgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKFZpZXcpO1xuXG4vLyBcdC8vIC8vIGNvbnNvbGUubG9nKFwiQ2hlY2sgMlwiKVxuLy8gXHQvLyBpZiAoIXZpZXcpXG4vLyBcdC8vIFx0cmV0dXJuO1xuXG4vLyBcdC8vIGNvbnN0IGNhY2hlOiBDYWNoZWRNZXRhZGF0YSB8IG51bGwgPSBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Q2FjaGUoc291cmNlUGF0aCk7XG4vLyBcdC8vIGlmICgoZnJvbnRtYXR0ZXIgPz8gY2FjaGU/LmZyb250bWF0dGVyKT8uW1wiY29kZS1zdHlsZXItaWdub3JlXCJdID09PSB0cnVlKVxuLy8gXHQvLyBcdHJldHVybjtcbi8vIFx0Ly8gLy8gY29uc29sZS5sb2coXCJDaGVjayAzXCIpXG4vLyBcdC8vIC8vIGNvbnNvbGUubG9nKGVsZW1lbnQpXG5cblxuLy8gXHQvLyBjb25zdCBtYXJrdXBDb250ZXh0OiBzdHJpbmcgPSBzb3VyY2VQYXRoLnN0YXJ0c1dpdGgoU0VUVElOR1NfU09VUkNFUEFUSF9QUkVGSVgpXG4vLyBcdC8vIFx0PyBcInNldHRpbmdzXCJcbi8vIFx0Ly8gXHQ6IEJvb2xlYW4oZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LnByaW50ID4gKlwiKSlcbi8vIFx0Ly8gXHQ/IFwiZXhwb3J0XCJcbi8vIFx0Ly8gXHQ6IEJvb2xlYW4oZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LnNsaWRlcyA+ICpcIikpXG4vLyBcdC8vIFx0PyBcInNsaWRlc1wiXG4vLyBcdC8vIFx0OiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImFkbW9uaXRpb24tY29udGVudFwiKVxuLy8gXHQvLyBcdD8gXCJhZG1vbml0aW9uXCJcbi8vIFx0Ly8gXHQ6IFwiZGVmYXVsdFwiO1xuXG4vLyBcdC8vIGZvciAoY29uc3QgY29kZUVsZW1lbnQgb2YgQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmU6bm90KC5mcm9udG1hdHRlcikgPiBjb2RlXCIpKSBhcyBBcnJheTxIVE1MRWxlbWVudD4pIHtcbi8vIFx0Ly8gXHRpZiAoIWNvZGVFbGVtZW50LmNsYXNzTmFtZSlcbi8vIFx0Ly8gXHRcdGNvbnRpbnVlO1xuLy8gXHQvLyBcdC8vIGNvbnNvbGUubG9nKFwiQ2hlY2sgNC54XCIpXG5cbi8vIFx0Ly8gXHRjb25zdCBmZW5jZUNvZGVFbGVtZW50ID0gY29kZUVsZW1lbnRcblxuLy8gXHQvLyBcdGNvbnNvbGUubG9nKGZlbmNlQ29kZUVsZW1lbnQpXG5cbi8vIFx0Ly8gXHRjb25zdCBmZW5jZVByZUVsZW1lbnQgPSBmZW5jZUNvZGVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4vLyBcdC8vIFx0aWYgKCFmZW5jZVByZUVsZW1lbnQpXG4vLyBcdC8vIFx0XHRjb250aW51ZTtcbi8vIFx0Ly8gXHQvLyBjb25zb2xlLmxvZyhcIkNoZWNrIDYueFwiKVxuXG4vLyBcdC8vIFx0Y29uc3QgZmVuY2VQYXJlbnRFbGVtZW50ID0gZmVuY2VQcmVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4vLyBcdC8vIFx0aWYgKCFmZW5jZVBhcmVudEVsZW1lbnQpXG4vLyBcdC8vIFx0XHRjb250aW51ZTtcbi8vIFx0Ly8gXHQvLyBjb25zb2xlLmxvZyhcIkNoZWNrIDcueFwiKVxuXG4vLyBcdC8vIFx0Y29uc3QgcGFyc2VkID0gZmVuY2VDb2RlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjb2RlLXBhcmFtZXRlcnNcIilcbi8vIFx0Ly8gXHRpZiAocGFyc2VkKVxuLy8gXHQvLyBcdFx0Y29udGludWU7XG4vLyBcdC8vIFx0Ly8gY29uc29sZS5sb2coXCJDaGVjayA4LnhcIilcblxuLy8gXHQvLyBcdGxldCBmZW5jZUNvZGVQYXJhbWV0ZXJzID0gXCJ1bmtub3duXCJcbi8vIFx0Ly8gXHRpZiAobWFya3VwQ29udGV4dCA9PT0gXCJzZXR0aW5nc1wiKSB7XG4vLyBcdC8vIFx0XHRjb25zdCBmZW5jZUNvZGVMaW5lcyA9IHNvdXJjZVBhdGguc3Vic3RyaW5nKFNFVFRJTkdTX1NPVVJDRVBBVEhfUFJFRklYLmxlbmd0aCkuc3BsaXQoXCJcXG5cIilcbi8vIFx0Ly8gXHRcdGZlbmNlQ29kZVBhcmFtZXRlcnMgPSBmZW5jZUNvZGVMaW5lc1swXVxuLy8gXHQvLyBcdH0gZWxzZSBpZiAobWFya3VwQ29udGV4dCA9PT0gXCJleHBvcnRcIikge1xuLy8gXHQvLyBcdFx0ZmVuY2VDb2RlUGFyYW1ldGVycyA9IFwiVE9ET1wiXG4vLyBcdC8vIFx0XHQvLyBUT0RPOlxuLy8gXHQvLyBcdH0gZWxzZSBpZiAobWFya3VwQ29udGV4dCA9PT0gXCJzbGlkZXNcIikge1xuLy8gXHQvLyBcdFx0ZmVuY2VDb2RlUGFyYW1ldGVycyA9IFwiVE9ET1wiXG4vLyBcdC8vIFx0XHQvLyBUT0RPOlxuLy8gXHQvLyBcdH0gZWxzZSBpZiAobWFya3VwQ29udGV4dCA9PT0gXCJhZG1vbml0aW9uXCIpIHtcbi8vIFx0Ly8gXHRcdGZlbmNlQ29kZVBhcmFtZXRlcnMgPSBcIlRPRE9cIlxuLy8gXHQvLyBcdFx0Ly8gVE9ETzpcbi8vIFx0Ly8gXHR9IGVsc2UgaWYgKG1hcmt1cENvbnRleHQgPT09IFwiZGVmYXVsdFwiKSB7XG4vLyBcdC8vIFx0XHRjb25zdCBmZW5jZVNlY3Rpb25JbmZvOiBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiB8IG51bGwgPSBnZXRTZWN0aW9uSW5mbyhmZW5jZUNvZGVFbGVtZW50KTtcbi8vIFx0Ly8gXHRcdGlmICghZmVuY2VTZWN0aW9uSW5mbylcbi8vIFx0Ly8gXHRcdFx0Y29udGludWU7XG4vLyBcdC8vIFx0XHRjb25zb2xlLmxvZyhcIkNoZWNrIDgueC54XCIpXG5cbi8vIFx0Ly8gXHRcdGNvbnN0IGZlbmNlQ29kZUxpbmVzID0gQXJyYXkuZnJvbShcbi8vIFx0Ly8gXHRcdFx0eyBsZW5ndGg6IGZlbmNlU2VjdGlvbkluZm8ubGluZUVuZCAtIGZlbmNlU2VjdGlvbkluZm8ubGluZVN0YXJ0ICsgMSB9LFxuLy8gXHQvLyBcdFx0XHQoXywgbnVtKSA9PiBudW0gKyBmZW5jZVNlY3Rpb25JbmZvLmxpbmVTdGFydCkubWFwKChsaW5lTnVtYmVyKSA9PiBmZW5jZVNlY3Rpb25JbmZvLnRleHQuc3BsaXQoXCJcXG5cIilbbGluZU51bWJlcl0sXG4vLyBcdC8vIFx0XHQpXG4vLyBcdC8vIFx0XHRmZW5jZUNvZGVQYXJhbWV0ZXJzID0gZmVuY2VDb2RlTGluZXNbMF1cbi8vIFx0Ly8gXHR9XG4vLyBcdC8vIFx0Ly8gZmVuY2VDb2RlRWxlbWVudC5pbm5lckhUTUwgPSBcIkRFTEVURURcIiAvL1RPRE86IERlbGV0ZVxuLy8gXHQvLyBcdC8vIGZlbmNlQ29kZUVsZW1lbnQuaW5uZXJIVE1MID0gbWFya3VwQ29udGV4dCAvL1RPRE86IERlbGV0ZVxuLy8gXHQvLyBcdC8vIGNvbnNvbGUubG9nKFwiQ2hlY2sgQ29tcGxldGVcIilcbi8vIFx0Ly8gXHQvLyBjb25zb2xlLmxvZyhmZW5jZUNvZGVFbGVtZW50KVxuXG4vLyBcdC8vIFx0Ly8gZmVuY2VDb2RlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb2RlLXBhcmFtZXRlcnNcIiwgZmVuY2VDb2RlUGFyYW1ldGVycylcblxuLy8gXHQvLyB9XG5cbi8vIFx0Ly8gZWRpdGluZ0VtYmVkcyA9IGVkaXRpbmdFbWJlZHMgfHwgQm9vbGVhbihlbGVtZW50Lm1hdGNoUGFyZW50KFwiLmNtLWVtYmVkLWJsb2NrXCIpKTtcbi8vIFx0Ly8gY29uc3Qgc3BlY2lmaWMgPSAhZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnZpZXctY29udGVudCA+ICpcIik7XG4vLyBcdC8vIGNvbnN0IHByaW50aW5nID0gKHByaW50IG9yIHNsaWRlcylcbi8vIFx0Ly8gaWYgKHByaW50aW5nICYmICFwbHVnaW4uc2V0dGluZ3MuZGVjb3JhdGVQcmludClcbi8vIFx0Ly8gXHRyZXR1cm47XG5cbi8vIFx0Ly8gY29uc3QgY29kZWJsb2NrUHJlRWxlbWVudHM6IEFycmF5PEhUTUxFbGVtZW50PiA9IGF3YWl0IGdldENvZGVibG9ja1ByZUVsZW1lbnRzKGVsZW1lbnQsc3BlY2lmaWMsZWRpdGluZ0VtYmVkcyk7XG4vLyBcdC8vIGlmIChjb2RlYmxvY2tQcmVFbGVtZW50cy5sZW5ndGggPT09IDAgJiYgIShlZGl0aW5nRW1iZWRzICYmIHNwZWNpZmljKSlcbi8vIFx0Ly8gXHRyZXR1cm47XG5cbi8vIH1cbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkaW5nVmlld0lubGluZURlY29yYXRpbmdQb3N0UHJvY2Vzc29yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB7c291cmNlUGF0aH06IHtzb3VyY2VQYXRoOiBzdHJpbmcsIGdldFNlY3Rpb25JbmZvOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IE1hcmtkb3duU2VjdGlvbkluZm9ybWF0aW9uIHwgbnVsbCwgZnJvbnRtYXR0ZXI6IEZyb250TWF0dGVyQ2FjaGUgfCB1bmRlZmluZWR9LCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4pIHtcbi8vIFx0aWYgKCFzb3VyY2VQYXRoIHx8ICFlbGVtZW50KVxuLy8gXHRcdHJldHVybjtcbi8vIFx0Zm9yIChjb25zdCBpbmxpbmVDb2RlRWxlbWVudCBvZiBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIjpub3QocHJlKSA+IGNvZGVcIikpKSB7XG4vLyBcdFx0YXdhaXQgcmVtYWtlSW5saW5lQ29kZShpbmxpbmVDb2RlRWxlbWVudCBhcyBIVE1MRWxlbWVudCxwbHVnaW4pO1xuLy8gXHR9XG4vLyB9XG4vLyBleHBvcnQgZnVuY3Rpb24gZGVzdHJveVJlYWRpbmdNb2RlRWxlbWVudHMoKTogdm9pZCB7XG4vLyBcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY29kZS1zdHlsZXItcHJlLXBhcmVudFwiKS5mb3JFYWNoKGNvZGVibG9ja1ByZVBhcmVudCA9PiB7XG4vLyBcdFx0Y29kZWJsb2NrUHJlUGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2RlLXN0eWxlci1wcmUtcGFyZW50XCIpO1xuLy8gXHR9KTtcbi8vIFx0W1xuLy8gXHRcdC4uLkFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZS5jb2RlLXN0eWxlci1wcmUgZGl2W2NsYXNzXj0nY29kZS1zdHlsZXItaGVhZGVyLWNvbnRhaW5lciddXCIpKSxcbi8vIFx0XHQuLi5BcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUuY29kZS1zdHlsZXItcHJlIGRpdltjbGFzc149J2NvZGUtc3R5bGVyLWxpbmUtbnVtYmVyJ11cIikpLFxuLy8gXHRcdC4uLkFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIjpub3QocHJlKSA+IGNvZGUgc3Bhbi5jb2RlLXN0eWxlci1pbmxpbmUtb3BlbmVyXCIpKSxcbi8vIFx0XS5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5yZW1vdmUoKSk7XG4vLyBcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUuY29kZS1zdHlsZXItcHJlXCIpLmZvckVhY2goKGNvZGVibG9ja1ByZUVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29kZS1zdHlsZXItcHJlXCIpO1xuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcbi8vIFx0XHRjb2RlYmxvY2tQcmVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS10cnVlLWhlaWdodFwiKTtcbi8vIFx0XHRjb2RlYmxvY2tQcmVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS1saW5lLW51bWJlci1tYXJnaW5cIik7XG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm1heC1oZWlnaHRcIik7XG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIndoaXRlLXNwYWNlXCIpO1xuLy8gXHR9KTtcbi8vIFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZSA+IGNvZGUgfiBjb2RlLmxhbmd1YWdlLW91dHB1dFwiKS5mb3JFYWNoKChleGVjdXRlQ29kZU91dHB1dDogSFRNTEVsZW1lbnQpID0+IHtcbi8vIFx0XHRleGVjdXRlQ29kZU91dHB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiZXhlY3V0ZS1jb2RlLW91dHB1dFwiKTtcbi8vIFx0XHRleGVjdXRlQ29kZU91dHB1dC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIi0tdHJ1ZS1oZWlnaHRcIik7XG4vLyBcdFx0ZXhlY3V0ZUNvZGVPdXRwdXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJtYXgtaGVpZ2h0XCIpO1xuLy8gXHR9KTtcbi8vIFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZSA+IGNvZGU6bnRoLW9mLXR5cGUoMSlcIikuZm9yRWFjaCgoY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4vLyBcdFx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLXRydWUtaGVpZ2h0XCIpO1xuLy8gXHRcdGNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS1saW5lLXdyYXBwaW5nXCIpO1xuLy8gXHRcdGNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS1saW5lLWFjdGl2ZS13cmFwcGluZ1wiKTtcbi8vIFx0XHRjb2RlYmxvY2tDb2RlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm1heC1oZWlnaHRcIik7XG4vLyBcdFx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ3aGl0ZS1zcGFjZVwiKTtcbi8vIFx0XHRjb2RlYmxvY2tDb2RlRWxlbWVudC5pbm5lckhUTUwgPSBBcnJheS5mcm9tKGNvZGVibG9ja0NvZGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2RlID4gW2NsYXNzKj1cXFwiY29kZS1zdHlsZXItbGluZVxcXCJdXCIpKS5yZWR1Y2UoKHJlY29uc3RydWN0ZWRDb2RlYmxvY2tMaW5lczogQXJyYXk8c3RyaW5nPiwgY29kZWJsb2NrTGluZTogSFRNTEVsZW1lbnQpOiBBcnJheTxzdHJpbmc+ID0+IHtcbi8vIFx0XHRcdGNvbnN0IGNvZGVibG9ja0xpbmVUZXh0ID0gKGNvZGVibG9ja0xpbmUuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCk7XG4vLyBcdFx0XHRpZiAoY29kZWJsb2NrTGluZVRleHQpXG4vLyBcdFx0XHRcdHJlY29uc3RydWN0ZWRDb2RlYmxvY2tMaW5lcy5wdXNoKGNvZGVibG9ja0xpbmVUZXh0LmlubmVySFRNTCk7XG4vLyBcdFx0XHRyZXR1cm4gcmVjb25zdHJ1Y3RlZENvZGVibG9ja0xpbmVzO1xuLy8gXHRcdH0sW10pLmpvaW4oXCJcXG5cIikrXCJcXG5cIjtcbi8vIFx0fSk7XG4vLyBcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6bm90KHByZSkgPiBjb2RlXCIpLmZvckVhY2goKGlubGluZUNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuLy8gXHRcdGlubGluZUNvZGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjb2RlLXN0eWxlci1oaWdobGlnaHRlZFwiKTtcbi8vIFx0XHRpbmxpbmVDb2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY29kZS1zdHlsZXItaGlnaGxpZ2h0LWlnbm9yZVwiKTtcbi8vIFx0XHRpbmxpbmVDb2RlRWxlbWVudC5pbm5lclRleHQgPSBpbmxpbmVDb2RlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwYXJhbWV0ZXJzXCIpICsgaW5saW5lQ29kZUVsZW1lbnQuaW5uZXJUZXh0O1xuLy8gXHR9KTtcbi8vIH1cblxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlclNwZWNpZmljUmVhZGluZ1NlY3Rpb24oY29kZWJsb2NrUHJlRWxlbWVudHM6IEFycmF5PEhUTUxFbGVtZW50Piwgc291cmNlUGF0aDogc3RyaW5nLCBjb2RlYmxvY2tTZWN0aW9uSW5mbzogTWFya2Rvd25TZWN0aW9uSW5mb3JtYXRpb24sIHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbikge1xuLy8gXHRjb25zdCBjb2RlYmxvY2tzUGFyYW1ldGVycyA9IChhd2FpdCBwYXJzZUNvZGVibG9ja1NvdXJjZShBcnJheS5mcm9tKHtsZW5ndGg6IGNvZGVibG9ja1NlY3Rpb25JbmZvLmxpbmVFbmQtY29kZWJsb2NrU2VjdGlvbkluZm8ubGluZVN0YXJ0KzF9LCAoXyxudW0pID0+IG51bSArIGNvZGVibG9ja1NlY3Rpb25JbmZvLmxpbmVTdGFydCkubWFwKChsaW5lTnVtYmVyKT0+Y29kZWJsb2NrU2VjdGlvbkluZm8udGV4dC5zcGxpdChcIlxcblwiKVtsaW5lTnVtYmVyXSkscGx1Z2luLHNvdXJjZVBhdGgpKS5jb2RlYmxvY2tzUGFyYW1ldGVycztcbi8vIFx0YXdhaXQgcmVtYWtlQ29kZWJsb2Nrcyhjb2RlYmxvY2tQcmVFbGVtZW50cywgY29kZWJsb2Nrc1BhcmFtZXRlcnMsIHNvdXJjZVBhdGgsIHRydWUsIGZhbHNlLCBwbHVnaW4pO1xuLy8gfVxuLy8gYXN5bmMgZnVuY3Rpb24gcmVuZGVyRG9jdW1lbnQoY29kZWJsb2NrUHJlRWxlbWVudHM6IEFycmF5PEhUTUxFbGVtZW50Piwgc291cmNlUGF0aDogc3RyaW5nLCBjYWNoZTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsLCBlZGl0aW5nRW1iZWRzOiBib29sZWFuLCBwcmludGluZzogYm9vbGVhbiwgcGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luKSB7XG4vLyBcdGNvbnN0IGNvZGVibG9ja3NQYXJhbWV0ZXJzOiBBcnJheTxDb2RlYmxvY2tQYXJhbWV0ZXJzPiA9IGF3YWl0IGdldENvZGVibG9ja3NQYXJhbWV0ZXJzKHNvdXJjZVBhdGgsY2FjaGUscGx1Z2luLGVkaXRpbmdFbWJlZHMpO1xuLy8gXHRhd2FpdCByZW1ha2VDb2RlYmxvY2tzKGNvZGVibG9ja1ByZUVsZW1lbnRzLGNvZGVibG9ja3NQYXJhbWV0ZXJzLHNvdXJjZVBhdGgsIXByaW50aW5nLHRydWUscGx1Z2luKTtcbi8vIH1cbi8vIGFzeW5jIGZ1bmN0aW9uIHJldHJpZ2dlclByb2Nlc3NvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgY29udGV4dDoge3NvdXJjZVBhdGg6IHN0cmluZywgZ2V0U2VjdGlvbkluZm86IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gTWFya2Rvd25TZWN0aW9uSW5mb3JtYXRpb24gfCBudWxsLCBmcm9udG1hdHRlcjogRnJvbnRNYXR0ZXJDYWNoZSB8IHVuZGVmaW5lZH0sIHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbiwgZWRpdGluZ0VtYmVkczogYm9vbGVhbikge1xuLy8gXHRpZiAoZWxlbWVudC5tYXRjaFBhcmVudChcImRpdi5ibG9jay1sYW5ndWFnZS1kYXRhdmlld2pzXCIpICYmIGlzQ29kZWJsb2NrSWdub3JlZChcImRhdGF2aWV3anNcIixwbHVnaW4uc2V0dGluZ3MucHJvY2Vzc2VkQ29kZWJsb2Nrc1doaXRlbGlzdCkpXG4vLyBcdFx0cmV0dXJuO1xuLy8gXHRhd2FpdCBzbGVlcCg1MCk7XG4vLyBcdGVkaXRpbmdFbWJlZHMgPSBlZGl0aW5nRW1iZWRzIHx8IEJvb2xlYW4oZWxlbWVudC5tYXRjaFBhcmVudChcIi5jbS1lbWJlZC1ibG9ja1wiKSk7XG4vLyBcdGlmIChlZGl0aW5nRW1iZWRzIHx8ICFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImFkbW9uaXRpb24tY29udGVudFwiKSkge1xuLy8gXHRcdGNvbnN0IGNvbnRlbnRFbCA9IGVsZW1lbnQubWF0Y2hQYXJlbnQoXCIudmlldy1jb250ZW50XCIpID8/IGVsZW1lbnQubWF0Y2hQYXJlbnQoXCJkaXYucHJpbnRcIik7XG4vLyBcdFx0aWYgKGNvbnRlbnRFbCAhPT0gbnVsbClcbi8vIFx0XHRcdGF3YWl0IHJlYWRpbmdWaWV3Q29kZWJsb2NrRGVjb3JhdGluZ1Bvc3RQcm9jZXNzb3IoY29udGVudEVsIGFzIEhUTUxFbGVtZW50LGNvbnRleHQscGx1Z2luLGVkaXRpbmdFbWJlZHMpOyAvLyBSZS1yZW5kZXIgd2hvbGUgZG9jdW1lbnRcbi8vIFx0fVxuLy8gfVxuXG4vLyBhc3luYyBmdW5jdGlvbiByZW1ha2VDb2RlYmxvY2tzKGNvZGVibG9ja1ByZUVsZW1lbnRzOiBBcnJheTxIVE1MRWxlbWVudD4sIGNvZGVibG9ja3NQYXJhbWV0ZXJzOiBBcnJheTxDb2RlYmxvY2tQYXJhbWV0ZXJzPiwgc291cmNlUGF0aDogc3RyaW5nLCBkeW5hbWljOiBib29sZWFuLCBza2lwU3R5bGVkOiBib29sZWFuLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4pIHtcbi8vIFx0aWYgKGNvZGVibG9ja1ByZUVsZW1lbnRzLmxlbmd0aCAhPT0gY29kZWJsb2Nrc1BhcmFtZXRlcnMubGVuZ3RoKVxuLy8gXHRcdHJldHVybjtcbi8vIFx0Zm9yIChjb25zdCBba2V5LGNvZGVibG9ja1ByZUVsZW1lbnRdIG9mIEFycmF5LmZyb20oY29kZWJsb2NrUHJlRWxlbWVudHMpLmVudHJpZXMoKSkge1xuLy8gXHRcdGNvbnN0IGNvZGVibG9ja1BhcmFtZXRlcnMgPSBjb2RlYmxvY2tzUGFyYW1ldGVyc1trZXldO1xuLy8gXHRcdGNvbnN0IGNvZGVibG9ja0NvZGVFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBjb2RlYmxvY2tQcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJwcmUgPiBjb2RlXCIpO1xuLy8gXHRcdGlmICghY29kZWJsb2NrQ29kZUVsZW1lbnQpXG4vLyBcdFx0XHRyZXR1cm47XG4vLyBcdFx0aWYgKEFycmF5LmZyb20oY29kZWJsb2NrQ29kZUVsZW1lbnQuY2xhc3NMaXN0KS5zb21lKGNsYXNzTmFtZSA9PiAvXmxhbmd1YWdlLVxcUysvLnRlc3QoY2xhc3NOYW1lKSkpXG4vLyBcdFx0XHR3aGlsZSghY29kZWJsb2NrQ29kZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtbG9hZGVkXCIpKVxuLy8gXHRcdFx0XHRhd2FpdCBzbGVlcCgyKTtcbi8vIFx0XHRpZiAoc2tpcFN0eWxlZCAmJiBjb2RlYmxvY2tDb2RlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiY29kZSBbY2xhc3MqPSdjb2RlLXN0eWxlci1saW5lJ11cIikpXG4vLyBcdFx0XHRjb250aW51ZTtcbi8vIFx0XHRpZiAoaXNMYW5ndWFnZUlnbm9yZWQoY29kZWJsb2NrUGFyYW1ldGVycy5sYW5ndWFnZSxwbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRMYW5ndWFnZXMpIHx8IGNvZGVibG9ja1BhcmFtZXRlcnMuaWdub3JlKVxuLy8gXHRcdFx0Y29udGludWU7XG4vLyBcdFx0YXdhaXQgcmVtYWtlQ29kZWJsb2NrKGNvZGVibG9ja0NvZGVFbGVtZW50LGNvZGVibG9ja1ByZUVsZW1lbnQsY29kZWJsb2NrUGFyYW1ldGVycyxzb3VyY2VQYXRoLGR5bmFtaWMscGx1Z2luKTtcbi8vIFx0fVxuLy8gfVxuXG4vLyBhc3luYyBmdW5jdGlvbiByZW1ha2VDb2RlYmxvY2soY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb2RlYmxvY2tQcmVFbGVtZW50OiBIVE1MRWxlbWVudCwgY29kZWJsb2NrUGFyYW1ldGVyczogQ29kZWJsb2NrUGFyYW1ldGVycywgc291cmNlUGF0aDogc3RyaW5nLCBkeW5hbWljOiBib29sZWFuLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4pIHtcbi8vIFx0aWYgKGR5bmFtaWMpXG4vLyBcdFx0cGx1Z2luLmV4ZWN1dGVDb2RlTXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGNvZGVibG9ja1ByZUVsZW1lbnQse2NoaWxkTGlzdDogdHJ1ZSxzdWJ0cmVlOiB0cnVlLGF0dHJpYnV0ZXM6IHRydWUsY2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBBZGQgRXhlY3V0ZSBDb2RlIE9ic2VydmVyXG5cbi8vIFx0aW5zZXJ0SGVhZGVyKGNvZGVibG9ja1ByZUVsZW1lbnQsY29kZWJsb2NrUGFyYW1ldGVycyxzb3VyY2VQYXRoLHBsdWdpbixkeW5hbWljKTtcblxuLy8gXHRjb2RlYmxvY2tQcmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uZ2V0UHJlQ2xhc3Nlcyhjb2RlYmxvY2tQYXJhbWV0ZXJzLGR5bmFtaWMpKTtcbi8vIFx0Y29kZWJsb2NrUHJlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkZWZhdWx0Rm9sZFwiLGNvZGVibG9ja1BhcmFtZXRlcnMuZm9sZC5lbmFibGVkLnRvU3RyaW5nKCkpO1xuLy8gXHRpZiAoY29kZWJsb2NrUHJlRWxlbWVudC5wYXJlbnRFbGVtZW50KVxuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29kZS1zdHlsZXItcHJlLXBhcmVudFwiKTtcblxuLy8gXHRpZiAoIWNvZGVibG9ja0NvZGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjb2RlIFtjbGFzcyo9J2NvZGUtc3R5bGVyLWxpbmUnXVwiKSkgLy8gSWdub3JlIHN0eWxlZCBsaW5lc1xuLy8gXHRcdGRlY29yYXRlQ29kZWJsb2NrTGluZXMoY29kZWJsb2NrQ29kZUVsZW1lbnQsY29kZWJsb2NrUGFyYW1ldGVycyxzb3VyY2VQYXRoLHBsdWdpbik7XG4vLyB9XG4vLyBhc3luYyBmdW5jdGlvbiByZW1ha2VJbmxpbmVDb2RlKGlubGluZUNvZGVFbGVtZW50OiBIVE1MRWxlbWVudCwgcGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luKTogUHJvbWlzZTx2b2lkPiB7XG4vLyBcdGlmICghcGx1Z2luLnNldHRpbmdzLmN1cnJlbnRUaGVtZS5zZXR0aW5ncy5pbmxpbmUuc3ludGF4SGlnaGxpZ2h0IHx8IGlubGluZUNvZGVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImNvZGUtc3R5bGVyLWlubGluZVwiKSlcbi8vIFx0XHRyZXR1cm47XG4vLyBcdGNvbnN0IGlubGluZUNvZGVUZXh0ID0gaW5saW5lQ29kZUVsZW1lbnQuaW5uZXJUZXh0O1xuLy8gXHRjb25zdCB7cGFyYW1ldGVycyx0ZXh0fSA9IHBhcnNlSW5saW5lQ29kZShpbmxpbmVDb2RlVGV4dCk7XG4vLyBcdGlmIChwYXJhbWV0ZXJzKSB7XG4vLyBcdFx0aW5saW5lQ29kZUVsZW1lbnQuaW5uZXJIVE1MID0gYXdhaXQgZ2V0SGlnaGxpZ2h0ZWRIVE1MKHBhcmFtZXRlcnMsdGV4dCxwbHVnaW4pO1xuLy8gXHRcdGlubGluZUNvZGVFbGVtZW50LmlubmVySFRNTCA9IGlubGluZUNvZGVFbGVtZW50LmlubmVySFRNTCArIFwiJlplcm9XaWR0aFNwYWNlO1wiO1xuLy8gXHRcdGlubGluZUNvZGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb2RlLXN0eWxlci1pbmxpbmVcIik7XG4vLyBcdFx0Y29uc3QgcGFyYW1ldGVyU3RyaW5nID0gaW5saW5lQ29kZVRleHQuc3Vic3RyaW5nKDAsaW5saW5lQ29kZVRleHQubGFzdEluZGV4T2YodGV4dCkpO1xuLy8gXHRcdGlubGluZUNvZGVFbGVtZW50LnNldEF0dHJpYnV0ZShcInBhcmFtZXRlcnNcIixwYXJhbWV0ZXJTdHJpbmcpOyAvLyBTdG9yZSBwYXJhbWV0ZXIgc3RyaW5nIGFzIGF0dHJpYnV0ZSBzbyBvcmlnaW5hbCB0ZXh0IGNhbiBiZSByZXN0b3JlZCBvbiBwbHVnaW4gcmVtb3ZhbFxuLy8gXHRcdGlmIChwYXJhbWV0ZXJzLmljb24gfHwgcGFyYW1ldGVycy50aXRsZSlcbi8vIFx0XHRcdGlubGluZUNvZGVFbGVtZW50Lmluc2VydEJlZm9yZShjcmVhdGVJbmxpbmVPcGVuZXIocGFyYW1ldGVycyxwbHVnaW4ubGFuZ3VhZ2VJY29ucyksaW5saW5lQ29kZUVsZW1lbnQuY2hpbGROb2Rlc1swXSk7XG4vLyBcdH0gZWxzZSBpZiAoIXBhcmFtZXRlcnMgJiYgdGV4dCkge1xuLy8gXHRcdGlubGluZUNvZGVFbGVtZW50LmlubmVyVGV4dCA9IHRleHQ7XG4vLyBcdFx0aW5saW5lQ29kZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvZGUtc3R5bGVyLWlubGluZVwiKTtcbi8vIFx0fVxuLy8gfVxuXG4vLyBhc3luYyBmdW5jdGlvbiBnZXRDb2RlYmxvY2tQcmVFbGVtZW50cyhlbGVtZW50OiBIVE1MRWxlbWVudCwgc3BlY2lmaWM6IGJvb2xlYW4sZWRpdGluZ0VtYmVkczogYm9vbGVhbik6IFByb21pc2U8QXJyYXk8SFRNTEVsZW1lbnQ+PiB7XG4vLyBcdGxldCBjb2RlYmxvY2tQcmVFbGVtZW50czogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuLy8gXHRpZiAoIWVkaXRpbmdFbWJlZHMgJiYgIXNwZWNpZmljKVxuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWFya2Rvd24tcmVhZGluZy12aWV3IHByZTpub3QoLmZyb250bWF0dGVyKVwiKSk7XG4vLyBcdGVsc2UgaWYgKGVkaXRpbmdFbWJlZHMgJiYgIXNwZWNpZmljKVxuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWFya2Rvd24tc291cmNlLXZpZXcgLmNtLWVtYmVkLWJsb2NrIHByZTpub3QoLmZyb250bWF0dGVyKVwiKSk7XG4vLyBcdGVsc2UgaWYgKCFlZGl0aW5nRW1iZWRzICYmIHNwZWNpZmljKSB7XG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudHMgPSBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZTpub3QoLmZyb250bWF0dGVyKVwiKSk7XG4vLyBcdFx0Y29uc3QgYWRtb25pdGlvbkNvZGVFbGVtZW50ID0gY29kZWJsb2NrUHJlRWxlbWVudHM/LlswXT8ucXVlcnlTZWxlY3RvcihcInByZTpub3QoW2NsYXNzXSkgPiBjb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtYWQtXFxcIl1cIik7XG4vLyBcdFx0aWYgKGFkbW9uaXRpb25Db2RlRWxlbWVudCkge1xuLy8gXHRcdFx0YXdhaXQgc2xlZXAoNTApOyAvL1RPRE9cbi8vIFx0XHRcdGNvZGVibG9ja1ByZUVsZW1lbnRzID0gQXJyYXkuZnJvbShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmU6bm90KC5mcm9udG1hdHRlcilcIikpO1xuLy8gXHRcdH1cbi8vIFx0fSBlbHNlXG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudHMgPSBbXTtcbi8vIFx0cmV0dXJuIGNvZGVibG9ja1ByZUVsZW1lbnRzO1xuLy8gfVxuLy8gYXN5bmMgZnVuY3Rpb24gZ2V0Q29kZWJsb2Nrc1BhcmFtZXRlcnMoc291cmNlUGF0aDogc3RyaW5nLCBjYWNoZTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4sIGVkaXRpbmdFbWJlZHM6IGJvb2xlYW4pOiBQcm9taXNlPEFycmF5PENvZGVibG9ja1BhcmFtZXRlcnM+PiB7XG4vLyBcdGxldCBjb2RlYmxvY2tzUGFyYW1ldGVyczogQXJyYXk8Q29kZWJsb2NrUGFyYW1ldGVycz4gPSBbXTtcbi8vIFx0Y29uc3QgZmlsZUNvbnRlbnRMaW5lcyA9IGF3YWl0IGdldEZpbGVDb250ZW50TGluZXMoc291cmNlUGF0aCxwbHVnaW4pO1xuXG4vLyBcdGlmICh0eXBlb2YgY2FjaGU/LnNlY3Rpb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4vLyBcdFx0Zm9yIChjb25zdCBzZWN0aW9uIG9mIGNhY2hlLnNlY3Rpb25zKSB7XG4vLyBcdFx0XHRpZiAoIWVkaXRpbmdFbWJlZHMgfHwgc2VjdGlvbi50eXBlID09PSBcImNvZGVcIiB8fCBzZWN0aW9uLnR5cGUgPT09IFwiY2FsbG91dFwiKSB7XG4vLyBcdFx0XHRcdGNvbnN0IHBhcnNlZENvZGVibG9ja3NQYXJhbWV0ZXJzID0gYXdhaXQgcGFyc2VDb2RlYmxvY2tTb3VyY2UoZmlsZUNvbnRlbnRMaW5lcy5zbGljZShzZWN0aW9uLnBvc2l0aW9uLnN0YXJ0LmxpbmUsc2VjdGlvbi5wb3NpdGlvbi5lbmQubGluZSsxKSxwbHVnaW4sc291cmNlUGF0aCk7XG4vLyBcdFx0XHRcdGlmICghZWRpdGluZ0VtYmVkcyB8fCBwYXJzZWRDb2RlYmxvY2tzUGFyYW1ldGVycy5uZXN0ZWQpXG4vLyBcdFx0XHRcdFx0Y29kZWJsb2Nrc1BhcmFtZXRlcnMgPSBjb2RlYmxvY2tzUGFyYW1ldGVycy5jb25jYXQocGFyc2VkQ29kZWJsb2Nrc1BhcmFtZXRlcnMuY29kZWJsb2Nrc1BhcmFtZXRlcnMpO1xuLy8gXHRcdFx0fVxuLy8gXHRcdH1cbi8vIFx0fSBlbHNlXG4vLyBcdFx0Y29uc29sZS5lcnJvcihgTWV0YWRhdGEgY2FjaGUgbm90IGZvdW5kIGZvciBmaWxlOiAke3NvdXJjZVBhdGh9YCk7XG4vLyBcdHJldHVybiBjb2RlYmxvY2tzUGFyYW1ldGVycztcbi8vIH1cbi8vIGZ1bmN0aW9uIGluc2VydEhlYWRlcihjb2RlYmxvY2tQcmVFbGVtZW50OiBIVE1MRWxlbWVudCwgY29kZWJsb2NrUGFyYW1ldGVyczogQ29kZWJsb2NrUGFyYW1ldGVycywgc291cmNlUGF0aDogc3RyaW5nLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4sIGR5bmFtaWM6IGJvb2xlYW4pOiB2b2lkIHtcbi8vIFx0Y29uc3QgaGVhZGVyQ29udGFpbmVyID0gY3JlYXRlSGVhZGVyKGNvZGVibG9ja1BhcmFtZXRlcnMsIHBsdWdpbi5zZXR0aW5ncy5jdXJyZW50VGhlbWUuc2V0dGluZ3MsIHNvdXJjZVBhdGgsIHBsdWdpbik7XG4vLyBcdGlmIChkeW5hbWljKVxuLy8gXHRcdGhlYWRlckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e3RvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudCk7fSk7IC8vIEFkZCBsaXN0ZW5lciBmb3IgaGVhZGVyIGZvbGRpbmcgb24gY2xpY2tcbi8vIFx0Y29kZWJsb2NrUHJlRWxlbWVudC5pbnNlcnRCZWZvcmUoaGVhZGVyQ29udGFpbmVyLGNvZGVibG9ja1ByZUVsZW1lbnQuY2hpbGROb2Rlc1swXSk7XG4vLyB9XG4vLyBleHBvcnQgZnVuY3Rpb24gcmVhZGluZ0RvY3VtZW50Rm9sZChjb250ZW50RWw6IEhUTUxFbGVtZW50LCBmb2xkPzogYm9vbGVhbikge1xuLy8gXHRjb25zdCBjb2RlYmxvY2tQcmVFbGVtZW50cyA9IGNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlLmNvZGUtc3R5bGVyLXByZVwiKTtcbi8vIFx0aWYgKHR5cGVvZiBmb2xkID09PSBcInVuZGVmaW5lZFwiKSAvL1JldHVybiBhbGwgYmxvY2tzIHRvIG9yaWdpbmFsIHN0YXRlXG4vLyBcdFx0Y29kZWJsb2NrUHJlRWxlbWVudHMuZm9yRWFjaCgoY29kZWJsb2NrUHJlRWxlbWVudDogSFRNTEVsZW1lbnQpPT57dG9nZ2xlRm9sZChjb2RlYmxvY2tQcmVFbGVtZW50LChjb2RlYmxvY2tQcmVFbGVtZW50LmdldEF0dHJpYnV0ZShcImRlZmF1bHRGb2xkXCIpPz9cImZhbHNlXCIpPT09XCJ0cnVlXCIpO30pO1xuLy8gXHRlbHNlIC8vRm9sZCBvciB1bmZvbGQgYWxsIGJsb2Nrc1xuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnRzLmZvckVhY2goKGNvZGVibG9ja1ByZUVsZW1lbnQ6IEhUTUxFbGVtZW50KT0+e3RvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudCxmb2xkKTt9KTtcbi8vIH1cbi8vIGFzeW5jIGZ1bmN0aW9uIHRvZ2dsZUZvbGQoY29kZWJsb2NrUHJlRWxlbWVudDogSFRNTEVsZW1lbnQsIGZvbGQ/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4vLyBcdGlmIChjb2RlYmxvY2tQcmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkPy5jbGFzc0xpc3Q/LmNvbnRhaW5zKFwiY29kZS1zdHlsZXItaGVhZGVyLWNvbnRhaW5lci1oaWRkZW5cIikpXG4vLyBcdFx0cmV0dXJuO1xuLy8gXHRjb2RlYmxvY2tQcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUgPiBjb2RlXCIpLmZvckVhY2goKGNvZGVibG9ja0NvZGVFbGVtZW50OiBIVE1MRWxlbWVudCk9PmNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwibWF4LWhlaWdodFwiLGBjYWxjKCR7TWF0aC5jZWlsKGNvZGVibG9ja0NvZGVFbGVtZW50LnNjcm9sbEhlaWdodCswLjAxKX1weCArIHZhcigtLWNvZGUtcGFkZGluZykgKiAke2NvZGVibG9ja0NvZGVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImV4ZWN1dGUtY29kZS1vdXRwdXRcIik/XCIzLjUgKyB2YXIoLS1oZWFkZXItc2VwYXJhdG9yLXdpZHRoKVwiOlwiMlwifSlgKSk7XG4vLyBcdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGUtc2Nyb2xsXCIpO1xuLy8gXHRhd2FpdCBzbGVlcCgxKTtcbi8vIFx0aWYgKHR5cGVvZiBmb2xkID09PSBcInVuZGVmaW5lZFwiKVxuLy8gXHRcdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcbi8vIFx0ZWxzZVxuLy8gXHRcdGZvbGQ/Y29kZWJsb2NrUHJlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29kZS1zdHlsZXItZm9sZGVkXCIpOmNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcbi8vIFx0YXdhaXQgc2xlZXAoVFJBTlNJVElPTl9MRU5HVEgpO1xuLy8gXHRjb2RlYmxvY2tQcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUgPiBjb2RlXCIpLmZvckVhY2goKGNvZGVibG9ja0NvZGVFbGVtZW50OiBIVE1MRWxlbWVudCk9PmNvZGVibG9ja0NvZGVFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWF4LWhlaWdodFwiKSk7XG4vLyBcdGNvZGVibG9ja1ByZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtc2Nyb2xsXCIpO1xuLy8gfVxuLy8gZnVuY3Rpb24gZ2V0UHJlQ2xhc3Nlcyhjb2RlYmxvY2tQYXJhbWV0ZXJzOiBDb2RlYmxvY2tQYXJhbWV0ZXJzLCBkeW5hbWljOiBib29sZWFuKTogQXJyYXk8c3RyaW5nPiB7XG4vLyBcdGNvbnN0IHByZUNsYXNzTGlzdCA9IFtcImNvZGUtc3R5bGVyLXByZVwiXTtcbi8vIFx0aWYgKGNvZGVibG9ja1BhcmFtZXRlcnMubGFuZ3VhZ2UpXG4vLyBcdFx0cHJlQ2xhc3NMaXN0LnB1c2goYGxhbmd1YWdlLSR7Y29kZWJsb2NrUGFyYW1ldGVycy5sYW5ndWFnZX1gKTtcbi8vIFx0aWYgKGR5bmFtaWMpIHtcbi8vIFx0XHRpZiAoY29kZWJsb2NrUGFyYW1ldGVycy5mb2xkLmVuYWJsZWQpXG4vLyBcdFx0XHRwcmVDbGFzc0xpc3QucHVzaChcImNvZGUtc3R5bGVyLWZvbGRlZFwiKTtcbi8vIFx0XHRpZiAoY29kZWJsb2NrUGFyYW1ldGVycy5saW5lVW53cmFwLmFsd2F5c0VuYWJsZWQpXG4vLyBcdFx0XHRwcmVDbGFzc0xpc3QucHVzaChjb2RlYmxvY2tQYXJhbWV0ZXJzLmxpbmVVbndyYXAuYWN0aXZlV3JhcD9cInVud3JhcHBlZC1pbmFjdGl2ZVwiOlwidW53cmFwcGVkXCIpO1xuLy8gXHRcdGVsc2UgaWYgKGNvZGVibG9ja1BhcmFtZXRlcnMubGluZVVud3JhcC5hbHdheXNEaXNhYmxlZClcbi8vIFx0XHRcdHByZUNsYXNzTGlzdC5wdXNoKFwid3JhcHBlZFwiKTtcbi8vIFx0fVxuLy8gXHRyZXR1cm4gcHJlQ2xhc3NMaXN0O1xuLy8gfVxuLy8gZnVuY3Rpb24gZGVjb3JhdGVDb2RlYmxvY2tMaW5lcyhjb2RlYmxvY2tDb2RlRWxlbWVudDogSFRNTEVsZW1lbnQsIGNvZGVibG9ja1BhcmFtZXRlcnM6IENvZGVibG9ja1BhcmFtZXRlcnMsIHNvdXJjZVBhdGg6IHN0cmluZywgcGx1Z2luOiBDb2RlU3R5bGVyUGx1Z2luKTogdm9pZCB7XG4vLyBcdGxldCBpbmRlbnRhdGlvbiA9IDA7XG4vLyBcdGdldENvZGVibG9ja0xpbmVzKGNvZGVibG9ja0NvZGVFbGVtZW50LHNvdXJjZVBhdGgscGx1Z2luKS5mb3JFYWNoKChsaW5lLGluZGV4LGNvZGVibG9ja0xpbmVzKSA9PiB7XG4vLyBcdFx0Y29uc3QgY3VycmVudEluZGVudGF0aW9uID0gY291bnRUYWJzKGxpbmUpO1xuLy8gXHRcdGlmIChjdXJyZW50SW5kZW50YXRpb24gPiBpbmRlbnRhdGlvbikge1xuLy8gXHRcdFx0Ly9UT0RPIChAbWF5dXJhbmt2KSBBZGQgZm9sZCB0byBwcmV2aW91cyBwb2ludFxuLy8gXHRcdFx0aW5kZW50YXRpb24gPSBjdXJyZW50SW5kZW50YXRpb247XG4vLyBcdFx0fSBlbHNlIGlmIChjdXJyZW50SW5kZW50YXRpb24gPCBpbmRlbnRhdGlvbikge1xuLy8gXHRcdFx0Ly9UT0RPIChAbWF5dXJhbmt2KSBDbG9zZSBhbGwgZm9sZHMgdG8gbGV2ZWwgb2YgY3VycmVudCBpbmRlbnRhdGlvblxuLy8gXHRcdFx0aW5kZW50YXRpb24gPSBjdXJyZW50SW5kZW50YXRpb247XG4vLyBcdFx0fVxuLy8gXHRcdGlmIChjdXJyZW50SW5kZW50YXRpb24gPiAwKSB7XG4vLyBcdFx0XHQvL1RPRE8gKEBtYXl1cmFua3YpIEFkZCBpbmRlbnRhdGlvbiBsaW5lXG4vLyBcdFx0fVxuLy8gXHRcdGlmIChpbmRleCAhPT0gY29kZWJsb2NrTGluZXMubGVuZ3RoLTEpXG4vLyBcdFx0XHRpbnNlcnRMaW5lV3JhcHBlcihjb2RlYmxvY2tDb2RlRWxlbWVudCxjb2RlYmxvY2tQYXJhbWV0ZXJzLGluZGV4KzEsbGluZSxwbHVnaW4uc2V0dGluZ3MuY3VycmVudFRoZW1lLnNldHRpbmdzLmNvZGVibG9jay5saW5lTnVtYmVycyk7XG4vLyBcdH0pO1xuLy8gfVxuLy8gZnVuY3Rpb24gZ2V0Q29kZWJsb2NrTGluZXMoY29kZWJsb2NrQ29kZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzb3VyY2VQYXRoOiBzdHJpbmcsIHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbik6IEFycmF5PHN0cmluZz4ge1xuLy8gXHQvLyBjb25zdCBodG1sVHJlZSA9IGZyb21IdG1sKGNvZGVibG9ja0NvZGVFbGVtZW50LmlubmVySFRNTC5yZXBsYWNlKC9cXG4vZyxcIjxicj5cIikse2ZyYWdtZW50OiB0cnVlfSk7XG4vLyBcdC8vIGxldCBjb2RlYmxvY2tIVE1MID0gY29kZWJsb2NrQ29kZUVsZW1lbnQuaW5uZXJIVE1MO1xuLy8gXHQvLyB2aXNpdFBhcmVudHMoaHRtbFRyZWUsW1widGV4dFwiLFwiZWxlbWVudFwiXSwobm9kZSxhbmNlc3RvcnMpPT57XG4vLyBcdC8vIFx0aWYgKG5vZGUudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgbm9kZS50YWdOYW1lID09PSBcImJyXCIpIHtcbi8vIFx0Ly8gXHRcdGlmIChhbmNlc3RvcnMubGVuZ3RoID49IDIpIHtcbi8vIFx0Ly8gXHRcdFx0Y29kZWJsb2NrSFRNTCA9IGNvZGVibG9ja0hUTUwucmVwbGFjZSgvXFxuLyxhbmNlc3RvcnMuc2xpY2UoMSkucmVkdWNlKChyZXN1bHQsZWxlbWVudCk9Pntcbi8vIFx0Ly8gXHRcdFx0XHRjb25zdCBlbGVtZW50Q29weSA9IHN0cnVjdHVyZWRDbG9uZShlbGVtZW50KTtcbi8vIFx0Ly8gXHRcdFx0XHRlbGVtZW50Q29weS5jaGlsZHJlbiA9IFtdO1xuLy8gXHQvLyBcdFx0XHRcdGNvbnN0IHNwbGl0VGFnID0gdG9IdG1sKGVsZW1lbnRDb3B5KS5zcGxpdCgvKD88PT4pKD89PFxcLykvKTtcbi8vIFx0Ly8gXHRcdFx0XHRyZXR1cm4gc3BsaXRUYWcuc3BsaWNlKC0xKStyZXN1bHQrc3BsaXRUYWcuam9pbihcIlwiKTtcbi8vIFx0Ly8gXHRcdFx0fSxcIjxicj5cIikpO1xuLy8gXHQvLyBcdFx0fSBlbHNlXG4vLyBcdC8vIFx0XHRcdGNvZGVibG9ja0hUTUwgPSBjb2RlYmxvY2tIVE1MLnJlcGxhY2UoL1xcbi8sXCI8YnI+XCIpO1xuLy8gXHQvLyBcdH1cbi8vIFx0Ly8gfSk7XG4vLyBcdC8vIGNvbnN0IHNwbGl0SHRtbFRyZWUgPSBmcm9tSHRtbChjb2RlYmxvY2tIVE1MLHtmcmFnbWVudDogdHJ1ZX0pO1xuLy8gXHQvLyB2aXNpdFBhcmVudHMoc3BsaXRIdG1sVHJlZSxbXCJlbGVtZW50XCJdLChub2RlKT0+e1xuLy8gXHQvLyBcdGlmIChub2RlLnR5cGUgPT09IFwiZWxlbWVudFwiICYmIEFycmF5LmlzQXJyYXkobm9kZS5wcm9wZXJ0aWVzLmNsYXNzTmFtZSkgJiYgbm9kZS5wcm9wZXJ0aWVzPy5jbGFzc05hbWU/LmluY2x1ZGVzKFwiY29tbWVudFwiKSkge1xuLy8gXHQvLyBcdFx0bm9kZS5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChyZXN1bHQ6IEFycmF5PEVsZW1lbnRDb250ZW50PiwgY2hpbGQ6IEVsZW1lbnRDb250ZW50KTogQXJyYXk8RWxlbWVudENvbnRlbnQ+ID0+IHtcbi8vIFx0Ly8gXHRcdFx0aWYgKGNoaWxkLnR5cGUgIT09IFwidGV4dFwiKVxuLy8gXHQvLyBcdFx0XHRcdHJlc3VsdC5wdXNoKGNoaWxkKTtcbi8vIFx0Ly8gXHRcdFx0ZWxzZVxuLy8gXHQvLyBcdFx0XHRcdHJlc3VsdCA9IGNvbnZlcnRDb21tZW50TGlua3MocmVzdWx0LGNoaWxkLnZhbHVlLHNvdXJjZVBhdGgscGx1Z2luKTtcbi8vIFx0Ly8gXHRcdFx0cmV0dXJuIHJlc3VsdDtcbi8vIFx0Ly8gXHRcdH0sW10pO1xuLy8gXHQvLyBcdH1cbi8vIFx0Ly8gfSk7XG4vLyBcdC8vIGNvZGVibG9ja0hUTUwgPSB0b0h0bWwoc3BsaXRIdG1sVHJlZSk7XG4vLyBcdC8vIGxldCBjb2RlYmxvY2tMaW5lcyA9IGNvZGVibG9ja0hUTUwuc3BsaXQoXCI8YnI+XCIpO1xuLy8gXHQvLyBpZiAoY29kZWJsb2NrTGluZXMubGVuZ3RoID09PSAxKVxuLy8gXHQvLyBcdGNvZGVibG9ja0xpbmVzID0gW1wiXCIsXCJcIl07XG4vLyBcdC8vIGNvZGVibG9ja0NvZGVFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4vLyBcdC8vIHJldHVybiBjb2RlYmxvY2tMaW5lcztcbi8vIFx0Y29kZWJsb2NrQ29kZUVsZW1lbnQuaW5uZXJUZXh0ID0gc291cmNlUGF0aDtcbi8vIFx0cmV0dXJuIFtdO1xuLy8gfVxuLy8gZnVuY3Rpb24gY29udmVydENvbW1lbnRMaW5rcyhyZXN1bHQ6IEFycmF5PEVsZW1lbnRDb250ZW50PiwgY29tbWVudFRleHQ6IHN0cmluZywgc291cmNlUGF0aDogc3RyaW5nLCBwbHVnaW46IENvZGVTdHlsZXJQbHVnaW4pOiBBcnJheTxFbGVtZW50Q29udGVudD4ge1xuLy8gXHRjb25zdCBsaW5rTWF0Y2hlcyA9IFsuLi5jb21tZW50VGV4dC5tYXRjaEFsbCgvKD86XFxbXFxbW15cXF18XFxyXFxuXSs/KD86XFx8W15cXF18XFxyXFxuXSs/KT9cXF1cXF18XFxbLio/XFxdXFwoLitcXCkpL2cpXS5yZXZlcnNlKCk7XG4vLyBcdGNvbnN0IG5ld0NoaWxkcmVuID0gbGlua01hdGNoZXMucmVkdWNlKChyZXN1bHQ6IEFycmF5PEVsZW1lbnRDb250ZW50PiwgbGlua01hdGNoOiBSZWdFeHBNYXRjaEFycmF5KTogQXJyYXk8RWxlbWVudENvbnRlbnQ+ID0+IHtcbi8vIFx0XHRpZiAodHlwZW9mIGxpbmtNYXRjaD8uaW5kZXggPT09IFwidW5kZWZpbmVkXCIpXG4vLyBcdFx0XHRyZXR1cm4gcmVzdWx0O1xuLy8gXHRcdGNvbnN0IGVuZGluZyA9IGNvbW1lbnRUZXh0LnNsaWNlKGxpbmtNYXRjaC5pbmRleCArIGxpbmtNYXRjaFswXS5sZW5ndGgpO1xuLy8gXHRcdHJlc3VsdC5wdXNoKHt0eXBlOiBcInRleHRcIix2YWx1ZTogZW5kaW5nfSk7XG4vLyBcdFx0Y29uc3QgbGlua1RleHQgPSBjb21tZW50VGV4dC5zbGljZShsaW5rTWF0Y2guaW5kZXgsIGxpbmtNYXRjaC5pbmRleCArIGxpbmtNYXRjaFswXS5sZW5ndGgpO1xuLy8gXHRcdGNvbnN0IGxpbmtDb250YWluZXIgPSBjcmVhdGVEaXYoKTtcbi8vIFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihwbHVnaW4uYXBwLCBsaW5rVGV4dCwgbGlua0NvbnRhaW5lciwgc291cmNlUGF0aCwgcGx1Z2luKTtcbi8vIFx0XHRjb25zdCBsaW5rQ2hpbGQgPSAoZnJvbUh0bWwobGlua0NvbnRhaW5lci5pbm5lckhUTUwse2ZyYWdtZW50OiB0cnVlfSk/LmNoaWxkcmVuPy5bMF0gYXMgRWxlbWVudCk/LmNoaWxkcmVuPy5bMF07XG4vLyBcdFx0cmVzdWx0LnB1c2gobGlua0NoaWxkKTtcbi8vIFx0XHRjb21tZW50VGV4dCA9IGNvbW1lbnRUZXh0LnNsaWNlKDAsIGxpbmtNYXRjaC5pbmRleCk7XG4vLyBcdFx0cmV0dXJuIHJlc3VsdDtcbi8vIFx0fSxbXSkucmV2ZXJzZSgpO1xuLy8gXHRyZXR1cm4gWy4uLnJlc3VsdCwgLi4uW3t0eXBlOiBcInRleHRcIix2YWx1ZTogY29tbWVudFRleHR9IGFzIEVsZW1lbnRDb250ZW50LC4uLm5ld0NoaWxkcmVuXV07XG4vLyB9XG4vLyBmdW5jdGlvbiBpbnNlcnRMaW5lV3JhcHBlcihjb2RlYmxvY2tDb2RlRWxlbWVudDogSFRNTEVsZW1lbnQsIGNvZGVibG9ja1BhcmFtZXRlcnM6IENvZGVibG9ja1BhcmFtZXRlcnMsIGxpbmVOdW1iZXI6IG51bWJlciwgbGluZTogc3RyaW5nLCBzaG93TGluZU51bWJlcnM6IGJvb2xlYW4pOiB2b2lkIHtcbi8vIFx0Y29uc3QgbGluZVdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuLy8gXHRjb2RlYmxvY2tDb2RlRWxlbWVudC5hcHBlbmRDaGlsZChsaW5lV3JhcHBlcik7XG4vLyBcdGdldExpbmVDbGFzc2VzKGNvZGVibG9ja1BhcmFtZXRlcnMsbGluZU51bWJlcixsaW5lKS5mb3JFYWNoKChsaW5lQ2xhc3MpID0+IGxpbmVXcmFwcGVyLmNsYXNzTGlzdC5hZGQobGluZUNsYXNzKSk7XG4vLyBcdGlmICgoc2hvd0xpbmVOdW1iZXJzICYmICFjb2RlYmxvY2tQYXJhbWV0ZXJzLmxpbmVOdW1iZXJzLmFsd2F5c0Rpc2FibGVkKSB8fCBjb2RlYmxvY2tQYXJhbWV0ZXJzLmxpbmVOdW1iZXJzLmFsd2F5c0VuYWJsZWQpXG4vLyBcdFx0bGluZVdyYXBwZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRGl2KHtjbHM6IFwiY29kZS1zdHlsZXItbGluZS1udW1iZXJcIiwgdGV4dDogKGxpbmVOdW1iZXIrY29kZWJsb2NrUGFyYW1ldGVycy5saW5lTnVtYmVycy5vZmZzZXQpLnRvU3RyaW5nKCl9KSk7XG4vLyBcdGxpbmVXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZURpdih7Y2xzOiBcImNvZGUtc3R5bGVyLWxpbmUtdGV4dFwiLCB0ZXh0OiBzYW5pdGl6ZUhUTUxUb0RvbShsaW5lICE9PSBcIlwiID8gbGluZSA6IFwiPGJyPlwiKX0pKTtcbi8vIH1cbi8vIGZ1bmN0aW9uIGNvdW50VGFicyh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xuLy8gXHQvL1RPRE8gKEBtYXl1cmFua3YpIE1ha2Ugd29yayB3aXRoIHNwYWNlIGluZGVudGF0aW9uIHRvb1xuLy8gXHRsZXQgY291bnQgPSAwO1xuLy8gXHRsZXQgaW5kZXggPSAwO1xuLy8gXHR3aGlsZSAodGV4dC5jaGFyQXQoaW5kZXgrKykgPT09IFwiXFx0XCIpXG4vLyBcdFx0Y291bnQrKztcbi8vIFx0cmV0dXJuIGNvdW50O1xuLy8gfVxuLy8gYXN5bmMgZnVuY3Rpb24gZ2V0SGlnaGxpZ2h0ZWRIVE1MKHBhcmFtZXRlcnM6IElubGluZUNvZGVQYXJhbWV0ZXJzLCB0ZXh0OiBzdHJpbmcsIHBsdWdpbjogQ29kZVN0eWxlclBsdWdpbik6IFByb21pc2U8c3RyaW5nPiB7XG4vLyBcdGNvbnN0IHRlbXBvcmFyeVJlbmRlcmluZ0NvbnRhaW5lciA9IGNyZWF0ZURpdigpO1xuLy8gXHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihwbHVnaW4uYXBwLFtcImBgYFwiLHBhcmFtZXRlcnMubGFuZ3VhZ2UsXCJcXG5cIix0ZXh0LFwiXFxuXCIsXCJgYGBcIl0uam9pbihcIlwiKSx0ZW1wb3JhcnlSZW5kZXJpbmdDb250YWluZXIsXCJcIixwbHVnaW4pO1xuLy8gXHRjb25zdCByZW5kZXJlZENvZGVFbGVtZW50ID0gdGVtcG9yYXJ5UmVuZGVyaW5nQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJjb2RlXCIpO1xuLy8gXHRpZiAoIXJlbmRlcmVkQ29kZUVsZW1lbnQpXG4vLyBcdFx0cmV0dXJuIFwiRVJST1I6IENvdWxkIG5vdCByZW5kZXIgaGlnaGxpZ2h0ZWQgY29kZVwiO1xuLy8gXHR3aGlsZShwbHVnaW4uc2V0dGluZ3MuY3VycmVudFRoZW1lLnNldHRpbmdzLmlubGluZS5zeW50YXhIaWdobGlnaHQgJiYgIXJlbmRlcmVkQ29kZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtbG9hZGVkXCIpKVxuLy8gXHRcdGF3YWl0IHNsZWVwKDIpO1xuLy8gXHRyZXR1cm4gcmVuZGVyZWRDb2RlRWxlbWVudC5pbm5lckhUTUw7XG4vLyB9XG5cbi8vIGV4cG9ydCBjb25zdCBleGVjdXRlQ29kZU11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4vLyBcdG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbjogTXV0YXRpb25SZWNvcmQpID0+IHtcbi8vIFx0XHRpZiAobXV0YXRpb24udHlwZSA9PT0gXCJjaGlsZExpc3RcIiAmJiAobXV0YXRpb24udGFyZ2V0IGFzIEhUTUxFbGVtZW50KS50YWdOYW1lID09PSBcIlBSRVwiKSB7IC8vIEFkZCBleGVjdXRlIGNvZGUgb3V0cHV0XG4vLyBcdFx0XHRjb25zdCBleGVjdXRlQ29kZU91dHB1dCA9IChtdXRhdGlvbi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3IoXCJwcmUgPiBjb2RlIH4gY29kZS5sYW5ndWFnZS1vdXRwdXRcIikgYXMgSFRNTEVsZW1lbnQ7XG4vLyBcdFx0XHRpZiAoZXhlY3V0ZUNvZGVPdXRwdXQpXG4vLyBcdFx0XHRcdGV4ZWN1dGVDb2RlT3V0cHV0LmNsYXNzTGlzdC5hZGQoXCJleGVjdXRlLWNvZGUtb3V0cHV0XCIpO1xuLy8gXHRcdH1cbi8vIFx0fSk7XG4vLyB9KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLDBDQUFBQSxTQUFBO0FBQUE7QUFFQSxRQUFJLFNBQVMsT0FBTyxVQUFVO0FBQzlCLFFBQUksUUFBUSxPQUFPLFVBQVU7QUFDN0IsUUFBSSxpQkFBaUIsT0FBTztBQUM1QixRQUFJLE9BQU8sT0FBTztBQUVsQixRQUFJLFVBQVUsU0FBU0MsU0FBUSxLQUFLO0FBQ25DLFVBQUksT0FBTyxNQUFNLFlBQVksWUFBWTtBQUN4QyxlQUFPLE1BQU0sUUFBUSxHQUFHO0FBQUEsTUFDekI7QUFFQSxhQUFPLE1BQU0sS0FBSyxHQUFHLE1BQU07QUFBQSxJQUM1QjtBQUVBLFFBQUlDLGlCQUFnQixTQUFTQSxlQUFjLEtBQUs7QUFD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TTtBQUNoRSxhQUFLLEtBQUssWUFBWSxTQUFTLElBQUk7QUFBQSxJQUNyQyxDQUFDO0FBQUEsRUFDRjtBQUNEOyIsCiAgIm5hbWVzIjogWyJtb2R1bGUiLCAiaXNBcnJheSIsICJpc1BsYWluT2JqZWN0IiwgInNldFByb3BlcnR5IiwgImdldFByb3BlcnR5IiwgImV4dGVuZCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZWxlbWVudCIsICJpbmRleCIsICJwb2ludCIsICJpbmRleCIsICJleHRuYW1lIiwgImluZGV4IiwgImluZGV4IiwgImluZGV4IiwgImZpZWxkIiwgImJhc2VuYW1lIiwgImRpcm5hbWUiLCAiYXNzZXJ0UGF0aCIsICJleHRuYW1lIiwgImluZGV4IiwgImV4dGVuZCIsICJmaWxlIiwgInRyZWUiLCAiY29tcGlsZXIiLCAidmFsdWUiLCAicGFyYW1ldGVycyIsICJub2RlIiwgImlzVWludDhBcnJheSIsICJpbmRleCIsICJjaGFyYWN0ZXJSZWZlcmVuY2UiLCAibGlzdCIsICJhbGwiLCAiaW5kZXgiLCAiZXh0ZW5zaW9uIiwgImxpc3QiLCAib2siLCAicHJldmlvdXMiLCAiZG9jdW1lbnQiLCAicG9pbnQiLCAiaW5kZXgiLCAib2siLCAiY29uc3RydWN0cyIsICJpbmRleCIsICJpbmRleCIsICJ0ZXh0IiwgIm9rIiwgImF0dGVudGlvbk1hcmtlcnMiLCAicHJldmlvdXMiLCAicG9pbnQiLCAib2siLCAib2siLCAib2siLCAib2siLCAib2siLCAib2siLCAiZWZmZWN0cyIsICJub2siLCAic3RhcnQiLCAib2siLCAiZnVydGhlclN0YXJ0IiwgImluZGV4IiwgIm9rIiwgImluZGV4IiwgImxpc3QiLCAiaW5kZXgiLCAicHJldmlvdXMiLCAic3RhcnQiLCAiY29udGVudCIsICJvayIsICJwcmV2aW91cyIsICJvayIsICJvayIsICJvayIsICJvayIsICJvayIsICJ0aXRsZUJlZm9yZSIsICJvayIsICJjb250ZW50IiwgInRleHQiLCAib2siLCAiaW5kZXgiLCAib2siLCAib2siLCAiaW5kZXgiLCAiaW5kZXgiLCAidGV4dCIsICJvayIsICJvayIsICJvayIsICJvayIsICJvayIsICJvayIsICJpbmRleCIsICJjb250ZW50IiwgInRleHQiLCAiZGVmaW5pdGlvbiIsICJvayIsICJjb250ZW50IiwgImNvbnN0cnVjdHMiLCAidGV4dCIsICJsaXN0IiwgImluZGV4IiwgImRvY3VtZW50IiwgImZsb3ciLCAic3RyaW5nIiwgInRleHQiLCAiZG9jdW1lbnQiLCAiZmxvdyIsICJzdHJpbmciLCAidGV4dCIsICJwb2ludCIsICJleGl0IiwgImNvbnN0cnVjdHMiLCAiYWxsIiwgImxpc3QiLCAib2siLCAiZnJvbSIsICJpbmRleCIsICJjb25zdHJ1Y3RzIiwgImRvY3VtZW50IiwgImhlYWQiLCAib3duIiwgImJsb2NrUXVvdGUiLCAiY29kZVRleHQiLCAiZGVmaW5pdGlvbiIsICJsaXN0IiwgInRoZW1hdGljQnJlYWsiLCAiZXhpdCIsICJpbmRleCIsICJwb2ludCIsICJsaXN0SXRlbSIsICJub2RlIiwgImRhdGEiLCAidGV4dCIsICJzdHJpbmciLCAiZXh0ZW5zaW9uIiwgIm9rIiwgImluZGV4IiwgImFsbCIsICJub2RlIiwgInZpc2l0UGFyZW50cyIsICJpcyIsICJub2RlIiwgImluZGV4IiwgInZpc2l0IiwgInZpc2l0UGFyZW50cyIsICJub2RlIiwgImluZGV4IiwgImVsZW1lbnQiLCAibm9kZSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZWxlbWVudCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZWxlbWVudCJdCn0K
